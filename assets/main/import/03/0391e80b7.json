[1,["fdoJXLgx1GAa2UhGATlj3o","20g1ukYUVPvKWKBRznAKo+@f9941","c7c58b3mREmZhGG89SG29t@f9941","79iV+QK0VIAqoDpcf0R16g@f9941","54TknWPwVPqJqeCR+Y/Czo@f9941","95EkngnxZFbYuFpsqVTaFr@f9941","20g1ukYUVPvKWKBRznAKo+@6c48a","54TknWPwVPqJqeCR+Y/Czo@6c48a","79iV+QK0VIAqoDpcf0R16g@6c48a","7dj5uJT9FMn6OrOOx83tfK@6c48a","95EkngnxZFbYuFpsqVTaFr@6c48a","7dj5uJT9FMn6OrOOx83tfK@f9941","c7c58b3mREmZhGG89SG29t@6c48a","609xlc7CpF67qUiVX2DoHQ"],["node","_customMaterial","_spriteFrame","_textureSource","_parent","_normalSprite","_hoverSprite","_pressedSprite","_disabledSprite","_cameraComponent","ring","dot","scene","_effectAsset"],["cc.SpriteFrame",["cc.Node",["_name","_layer","_id","_components","_children","_lpos","_parent"],0,9,2,5,1],["cc.Widget",["_alignFlags","_originalWidth","_right","_left","_originalHeight","_top","_bottom","_alignMode","node"],-5,1],["cc.UITransform",["node","_contentSize","_anchorPoint","__prefab"],3,1,5,5,4],["cc.Layout",["_layoutType","_spacingY","_spacingX","node"],0,1],["cc.Sprite",["_sizeMode","_type","node","_customMaterial","_spriteFrame","_color"],1,1,6,6,5],["cc.UIOpacity",["_opacity","node"],2,1],["ba452nnVcJMPYIauwJ4Favx",["rigidbody","node"],2,1],["cc.Label",["_string","_actualFontSize","_underlineHeight","_fontSize","_overflow","_enableWrapText","node","_customMaterial","_color"],-3,1,6,5],["cc.EffectAsset",["_name","combinations","shaders","techniques"],-1],["cc.SceneAsset",["_name"],2],["cc.Node",["_name","_layer","_parent","_components","_lpos"],1,1,12,5],["cc.Canvas",["node","_cameraComponent"],3,1,1],["df968oG9ClOtaKssOzeyetw",["node"],3,1],["cc.RigidBody2D",["_gravityScale","_linearDamping","_fixedRotation","node"],0,1],["cc.PolygonCollider2D",["_points","node"],2,1],["73162lxt5BLxbtr/vpxLfXd",["node","dot","ring"],3,1,1,1],["cc.Button",["_transition","node","clickEvents","_normalColor","_hoverColor","_pressedColor","_disabledColor","_target","_normalSprite","_hoverSprite","_pressedSprite","_disabledSprite"],2,1,9,5,5,5,5,1,6,6,6,6],["cc.ClickEvent",["_componentId","handler","target"],1,1],["cc.CompPrefabInfo",["fileId"],2],["cc.Scene",["_children","_globals"],3,2,4],["cc.SceneGlobals",["ambient","shadows","_skybox","fog"],3,4,4,4,4],["cc.AmbientInfo",[],3],["cc.ShadowsInfo",["_bias"],2],["cc.SkyboxInfo",[],3],["cc.FogInfo",[],3],["cc.Camera",["_projection","_priority","_fov","_orthoHeight","_far","_visibility","node","_color"],-3,1,5],["cc.Material",["_props","_defines"],1]],[[6,1,1],[3,0,1,1],[1,0,1,6,4,3,5,3],[1,0,1,6,3,3],[6,0,1,2],[5,0,2,3,4,2],[1,0,1,6,3,5,3],[1,0,1,4,3,3],[2,0,3,6,8,4],[2,0,3,2,1,4,7,8,7],[3,0,1,2,1],[5,0,2,5,3,4,2],[5,1,0,2,5,3,4,3],[17,0,1,2,3,4,5,6,7,8,9,10,11,2],[18,0,1,2,3],[8,0,1,3,4,5,2,6,8,7,7],[9,0,1,2,3,5],[10,0,2],[1,0,1,2,4,3,5,4],[11,0,1,2,3,4,3],[12,0,1,1],[2,0,8,2],[2,0,2,5,1,8,5],[2,0,1,4,8,4],[3,0,1],[3,0,3,1],[4,0,1,3,3],[4,0,3,2],[4,0,2,3,3],[13,0,1],[14,0,1,2,3,4],[15,0,1,2],[7,0,1,2],[7,1,1],[16,0,1,2,1],[19,0,2],[8,0,1,2,6,7,4],[20,0,1,1],[21,0,1,2,3,1],[22,1],[23,0,2],[24,1],[25,1],[26,0,1,2,3,4,5,6,7,7],[27,0,1,3]],[[[{"name":"default_btn_normal","rect":{"x":0,"y":0,"width":40,"height":40},"offset":{"x":0,"y":0},"originalSize":{"width":40,"height":40},"rotated":false,"capInsets":[12,12,12,12],"texture":"20835ba4-6145-4fbc-a58a-051ce700aa3e@6c48a","packable":true}],[0],0,[0],[3],[6]],[[{"name":"default_btn_pressed","rect":{"x":0,"y":0,"width":40,"height":40},"offset":{"x":0,"y":0},"originalSize":{"width":40,"height":40},"rotated":false,"capInsets":[12,12,12,12],"texture":"544e49d6-3f05-4fa8-9a9e-091f98fc2ce8@6c48a","packable":true}],[0],0,[0],[3],[7]],[[[16,"builtin-sprite",[{}],[{"hash":3990469549,"name":"builtin-sprite|sprite-vs:vert|sprite-fs:frag","glsl4":{"vert":"\nprecision highp float;\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n};\n#if USE_LOCAL\nlayout(set = 2, binding = 0) uniform CCLocal {\n  highp mat4 cc_matWorld;\n  highp mat4 cc_matWorldIT;\n  highp vec4 cc_lightingMapUVParam;\n};\n#endif\nlayout(location = 0) in vec3 a_position;\nlayout(location = 1) in vec2 a_texCoord;\nlayout(location = 2) in vec4 a_color;\nlayout(location = 0) out vec4 color;\nlayout(location = 1) out vec2 uv0;\nvec4 vert () {\n  vec4 pos = vec4(a_position, 1);\n  #if USE_LOCAL\n    pos = cc_matWorld * pos;\n  #endif\n  #if USE_PIXEL_ALIGNMENT\n    pos = cc_matView * pos;\n    pos.xyz = floor(pos.xyz);\n    pos = cc_matProj * pos;\n  #else\n    pos = cc_matViewProj * pos;\n  #endif\n  uv0 = a_texCoord;\n  color = a_color;\n  return pos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nvec4 CCSampleWithAlphaSeparated(sampler2D tex, vec2 uv) {\n#if CC_USE_EMBEDDED_ALPHA\n    return vec4(texture(tex, uv).rgb, texture(tex, uv + vec2(0.0, 0.5)).r);\n#else\n    return texture(tex, uv);\n#endif\n}\n#if USE_ALPHA_TEST\n  layout(set = 1, binding = 0) uniform ALPHA_TEST_DATA {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nlayout(location = 0) in vec4 color;\n#if USE_TEXTURE\n  layout(location = 1) in vec2 uv0;\n  layout(set = 2, binding = 10) uniform sampler2D cc_spriteTexture;\n#endif\nvec4 frag () {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n    o *= CCSampleWithAlphaSeparated(cc_spriteTexture, uv0);\n    #if IS_GRAY\n      float gray  = 0.2126 * o.r + 0.7152 * o.g + 0.0722 * o.b;\n      o.r = o.g = o.b = gray;\n    #endif\n  #endif\n  o *= color;\n  ALPHA_TEST(o);\n  return o;\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl3":{"vert":"\nprecision highp float;\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n};\n#if USE_LOCAL\nlayout(std140) uniform CCLocal {\n  highp mat4 cc_matWorld;\n  highp mat4 cc_matWorldIT;\n  highp vec4 cc_lightingMapUVParam;\n};\n#endif\nin vec3 a_position;\nin vec2 a_texCoord;\nin vec4 a_color;\nout vec4 color;\nout vec2 uv0;\nvec4 vert () {\n  vec4 pos = vec4(a_position, 1);\n  #if USE_LOCAL\n    pos = cc_matWorld * pos;\n  #endif\n  #if USE_PIXEL_ALIGNMENT\n    pos = cc_matView * pos;\n    pos.xyz = floor(pos.xyz);\n    pos = cc_matProj * pos;\n  #else\n    pos = cc_matViewProj * pos;\n  #endif\n  uv0 = a_texCoord;\n  color = a_color;\n  return pos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nvec4 CCSampleWithAlphaSeparated(sampler2D tex, vec2 uv) {\n#if CC_USE_EMBEDDED_ALPHA\n    return vec4(texture(tex, uv).rgb, texture(tex, uv + vec2(0.0, 0.5)).r);\n#else\n    return texture(tex, uv);\n#endif\n}\n#if USE_ALPHA_TEST\n  layout(std140) uniform ALPHA_TEST_DATA {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nin vec4 color;\n#if USE_TEXTURE\n  in vec2 uv0;\n  uniform sampler2D cc_spriteTexture;\n#endif\nvec4 frag () {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n    o *= CCSampleWithAlphaSeparated(cc_spriteTexture, uv0);\n    #if IS_GRAY\n      float gray  = 0.2126 * o.r + 0.7152 * o.g + 0.0722 * o.b;\n      o.r = o.g = o.b = gray;\n    #endif\n  #endif\n  o *= color;\n  ALPHA_TEST(o);\n  return o;\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl1":{"vert":"\nprecision highp float;\nuniform highp mat4 cc_matView;\nuniform highp mat4 cc_matProj;\nuniform highp mat4 cc_matViewProj;\n#if USE_LOCAL\nuniform highp mat4 cc_matWorld;\n#endif\nattribute vec3 a_position;\nattribute vec2 a_texCoord;\nattribute vec4 a_color;\nvarying vec4 color;\nvarying vec2 uv0;\nvec4 vert () {\n  vec4 pos = vec4(a_position, 1);\n  #if USE_LOCAL\n    pos = cc_matWorld * pos;\n  #endif\n  #if USE_PIXEL_ALIGNMENT\n    pos = cc_matView * pos;\n    pos.xyz = floor(pos.xyz);\n    pos = cc_matProj * pos;\n  #else\n    pos = cc_matViewProj * pos;\n  #endif\n  uv0 = a_texCoord;\n  color = a_color;\n  return pos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nvec4 CCSampleWithAlphaSeparated(sampler2D tex, vec2 uv) {\n#if CC_USE_EMBEDDED_ALPHA\n    return vec4(texture2D(tex, uv).rgb, texture2D(tex, uv + vec2(0.0, 0.5)).r);\n#else\n    return texture2D(tex, uv);\n#endif\n}\n#if USE_ALPHA_TEST\n  uniform float alphaThreshold;\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nvarying vec4 color;\n#if USE_TEXTURE\n  varying vec2 uv0;\n  uniform sampler2D cc_spriteTexture;\n#endif\nvec4 frag () {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n    o *= CCSampleWithAlphaSeparated(cc_spriteTexture, uv0);\n    #if IS_GRAY\n      float gray  = 0.2126 * o.r + 0.7152 * o.g + 0.0722 * o.b;\n      o.r = o.g = o.b = gray;\n    #endif\n  #endif\n  o *= color;\n  ALPHA_TEST(o);\n  return o;\n}\nvoid main() { gl_FragColor = frag(); }"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]}],"samplers":[]},"locals":{"blocks":[{"name":"CCLocal","defines":["USE_LOCAL"]}],"samplers":[{"name":"cc_spriteTexture","defines":["USE_TEXTURE"]}]}},"defines":[{"name":"USE_LOCAL","type":"boolean","defines":[]},{"name":"USE_PIXEL_ALIGNMENT","type":"boolean","defines":[]},{"name":"CC_USE_EMBEDDED_ALPHA","type":"boolean","defines":[]},{"name":"USE_ALPHA_TEST","type":"boolean","defines":[]},{"name":"USE_TEXTURE","type":"boolean","defines":[]},{"name":"IS_GRAY","type":"boolean","defines":["USE_TEXTURE"]}],"blocks":[{"name":"ALPHA_TEST_DATA","stageFlags":16,"binding":0,"members":[{"name":"alphaThreshold","type":13,"count":1}],"defines":["USE_ALPHA_TEST"]}],"samplers":[],"attributes":[{"name":"a_position","type":15,"count":1,"stageFlags":1,"format":32,"location":0,"defines":[]},{"name":"a_texCoord","type":14,"count":1,"stageFlags":1,"format":21,"location":1,"defines":[]},{"name":"a_color","type":16,"count":1,"stageFlags":1,"format":44,"location":2,"defines":[]}],"varyings":[{"name":"color","type":16,"count":1,"stageFlags":1,"location":0,"defines":[]},{"name":"uv0","type":14,"count":1,"stageFlags":1,"location":1,"defines":[]}]}],[{"passes":[{"program":"builtin-sprite|sprite-vs:vert|sprite-fs:frag","blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":4,"blendDstAlpha":4}]},"rasterizerState":{"cullMode":0},"depthStencilState":{"depthTest":false,"depthWrite":false},"properties":{"alphaThreshold":{"type":13,"value":[0.5]}}}]}]]],0,0,[],[],[]],[[{"name":"circle-border-alpha","rect":{"x":3,"y":3,"width":194,"height":194},"offset":{"x":0,"y":0},"originalSize":{"width":200,"height":200},"rotated":false,"capInsets":[0,0,0,0],"texture":"79895f90-2b45-4802-aa03-a5c7f4475ea0@6c48a","packable":true}],[0],0,[0],[3],[8]],[[{"name":"default_sprite_splash","rect":{"x":0,"y":0,"width":2,"height":2},"offset":{"x":0,"y":0},"originalSize":{"width":2,"height":2},"rotated":false,"capInsets":[0,0,0,0],"texture":"7d8f9b89-4fd1-4c9f-a3ab-38ec7cded7ca@6c48a","packable":true}],[0],0,[0],[3],[9]],[[{"name":"default_btn_disabled","rect":{"x":0,"y":0,"width":40,"height":40},"offset":{"x":0,"y":0},"originalSize":{"width":40,"height":40},"rotated":false,"capInsets":[12,12,12,12],"texture":"951249e0-9f16-456d-8b85-a6ca954da16b@6c48a","packable":true}],[0],0,[0],[3],[10]],[[[17,"demo"],[18,"Canvas",1,"f6iebljMdFwaMk29wR7ccR",[-6,-7,-8,-9,-10],[[20,-2,-1],[21,45,-3],[0,-4],[1,-5,[5,960,640]]],[1,480,320,0]],[2,"ui",1,1,[-15,-16],[[26,2,20,-11],[29,-12],[0,-13],[1,-14,[5,440.08000000000004,120.4]]],[1,0,150,0]],[6,"playerPhysics",1,1,[[11,0,-17,[4,4284045823],2,3],[30,0,1,true,-18],[31,[],-19],[32,true,-20],[0,-21],[1,-22,[5,50,50]]],[1,0,-50,0]],[2,"joystick",1,1,[-29,-30],[[22,12,479,640,481,-23],[34,-26,-25,-24],[0,-27],[10,-28,[5,480,640],[0,0,0]]],[1,-480,-320,0]],[2,"ring",1,4,[-34,-35],[[8,12,150,100,-31],[4,200,-32],[24,-33]],[1,200,150,0]],[7,"Background",1,[-40],[[12,1,0,-36,[4,4293322470],12,13],[9,45,-5,-5,100,40,0,-37],[0,-38],[1,-39,[5,100,40]]]],[7,"Background",1,[-45],[[12,1,0,-41,[4,4293322470],19,20],[9,45,-5,-5,100,40,0,-42],[0,-43],[1,-44,[5,100,40]]]],[3,"area",1,4,[[5,0,-46,4,5],[23,45,100,100,-47],[27,1,-48],[4,20,-49],[10,-50,[5,480,640],[0,0,0]]]],[3,"dot",1,5,[[5,0,-51,8,9],[8,12,25,25,-52],[4,222,-53],[1,-54,[5,50,50]]]],[2,"buttons",1,2,[-58,-59],[[28,1,20,-55],[0,-56],[1,-57,[5,200,50]]],[1,0,-35.2,0]],[3,"player",1,1,[[11,0,-60,[4,4294931801],0,1],[33,-61],[0,-62],[1,-63,[5,50,50]]]],[2,"fixed",1,10,[6],[[13,2,-64,[[14,"df968oG9ClOtaKssOzeyetw","useFixedType",2]],[4,4293322470],[4,4294967295],[4,4291348680],[4,3363338360],6,14,15,16,17],[0,-65],[1,-66,[5,90,40]]],[1,-55,0,0]],[2,"follow",1,10,[7],[[13,2,-67,[[14,"df968oG9ClOtaKssOzeyetw","useFollowType",2]],[4,4293322470],[4,4294967295],[4,4291348680],[4,3363338360],7,21,22,23,24],[0,-68],[1,-69,[5,90,40]]],[1,55,0,0]],[19,"Main Camera",1,1,[[-70,[0,-71],[1,-72,[5,0,0]]],1,4,4],[1,0,0,1000]],[3,"bg",1,5,[[25,-73,[35,"f7NISe7HdAD68SLfhnddy8"]],[5,0,-74,6,7],[4,200,-75]]],[6,"type",1,2,[[36,"Joystick Type",40,0,-76,10],[0,-77],[1,-78,[5,240.08,50.4]]],[1,0,35,0]],[3,"Label",1,6,[[15,"Fixed",20,20,1,false,0,-79,[4,4278190080],11],[0,-80],[1,-81,[5,100,40]]]],[3,"Label",1,7,[[15,"Follow",20,20,1,false,0,-82,[4,4278190080],18],[0,-83],[1,-84,[5,100,40]]]],[37,[1],[38,[39],[40,0.0035],[41],[42]]],[43,0,-1,60,320,4096,4294967295,14,[4,4278190080]]],0,[0,9,20,0,0,1,0,0,1,0,0,1,0,0,1,0,-1,14,0,-2,11,0,-3,3,0,-4,4,0,-5,2,0,0,2,0,0,2,0,0,2,0,0,2,0,-1,16,0,-2,10,0,0,3,0,0,3,0,0,3,0,0,3,0,0,3,0,0,3,0,0,4,0,10,5,0,11,9,0,0,4,0,0,4,0,0,4,0,-1,8,0,-2,5,0,0,5,0,0,5,0,0,5,0,-1,15,0,-2,9,0,0,6,0,0,6,0,0,6,0,0,6,0,-1,17,0,0,7,0,0,7,0,0,7,0,0,7,0,-1,18,0,0,8,0,0,8,0,0,8,0,0,8,0,0,8,0,0,9,0,0,9,0,0,9,0,0,9,0,0,10,0,0,10,0,0,10,0,-1,12,0,-2,13,0,0,11,0,0,11,0,0,11,0,0,11,0,0,12,0,0,12,0,0,12,0,0,13,0,0,13,0,0,13,0,-1,20,0,0,14,0,0,14,0,0,15,0,0,15,0,0,15,0,0,16,0,0,16,0,0,16,0,0,17,0,0,17,0,0,17,0,0,18,0,0,18,0,0,18,0,12,19,1,4,19,6,4,12,7,4,13,84],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[1,2,1,2,1,2,1,2,1,2,1,1,1,2,5,6,7,8,1,1,2,5,6,7,8],[0,2,0,2,0,11,0,3,0,3,0,0,0,1,1,1,4,5,0,0,1,1,1,4,5]],[[{"name":"plane-line-alpha","rect":{"x":29,"y":12,"width":142,"height":176},"offset":{"x":0,"y":0},"originalSize":{"width":200,"height":200},"rotated":false,"capInsets":[0,0,0,0],"texture":"c7739f1b-de64-4499-9846-1bcf521b6f6d@6c48a","packable":true}],[0],0,[0],[3],[12]],[[[44,[{}],[{"USE_TEXTURE":true}]]],0,0,[0],[13],[13]]]]
