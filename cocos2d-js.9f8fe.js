(function outer(modules, cache, entry) {
  function newRequire(name, jumped) {
    var module = cache[name];
    if (!module) {
      var moduleData = modules[name];
      if (!moduleData) return;
      var exports = {};
      module = cache[name] = {
        exports: exports
      };
      moduleData[0]((function(x) {
        return newRequire(moduleData[1][x] || x);
      }), module, exports);
    }
    return module.exports;
  }
  for (var i = 0; i < entry.length; i++) newRequire(entry[i]);
  return newRequire;
})({
  1: [ (function(require, module, exports) {
    module.exports = {
      1001: "cocos2d: removeAction: Target not found",
      1002: "cc.ActionManager.removeActionByTag(): an invalid tag",
      1003: "cc.ActionManager.removeActionByTag(): target must be non-null",
      1004: "cc.ActionManager.getActionByTag(): an invalid tag",
      1005: "cocos2d : getActionByTag(tag = %s): Action not found",
      1006: "[Action step]. override me",
      1007: "[Action update]. override me",
      1008: "cocos2d: FiniteTimeAction#reverse: Implement me",
      1009: "cc.EaseElastic.reverse(): it should be overridden in subclass.",
      1010: "cc.IntervalAction: reverse not implemented.",
      1011: "cc.ActionInterval.setAmplitudeRate(): it should be overridden in subclass.",
      1012: "cc.ActionInterval.getAmplitudeRate(): it should be overridden in subclass.",
      1013: "The speed parameter error",
      1014: "The repeat parameter error",
      1015: "parameters should not be ending with null in Javascript",
      1016: "cc.RotateTo.reverse(): it should be overridden in subclass.",
      1019: "Failed to construct, Sequence construction needs two or more actions.",
      1020: "Failed to construct, Spawn construction needs two or more actions.",
      1021: "cc.Speed.initWithAction(): action must be non nil",
      1022: "cc.Follow.initWithAction(): followedNode must be non nil",
      1023: "cc.ActionEase.initWithAction(): action must be non nil",
      1024: "Invalid configuration. It must at least have one control point",
      1025: "cc.Sequence.initWithTwoActions(): arguments must all be non nil",
      1026: "cc.RepeatForever.initWithAction(): action must be non null",
      1027: "cc.Spawn.initWithTwoActions(): arguments must all be non null",
      1028: "cc.ReverseTime.initWithAction(): action must be non null",
      1029: "cc.ReverseTime.initWithAction(): the action was already passed in.",
      1030: "cc.Animate.initWithAnimation(): animation must be non-NULL",
      1031: "Illegal parameter get passed in cc.tween: %s.",
      1100: "Expected 'data' dict, but not found. Config file: %s",
      1101: "Please load the resource first : %s",
      1200: "cocos2d: Director: Error in gettimeofday",
      1201: "cocos2d: Director: unrecognized projection",
      1203: "cocos2d: Director: Error in gettimeofday",
      1204: "running scene should not null",
      1205: "the scene should not null",
      1206: "loadScene: The scene index to load (%s) is out of range.",
      1207: "loadScene: Unknown name type to load: '%s'",
      1208: "loadScene: Failed to load scene '%s' because '%s' is already being loaded.",
      1209: "loadScene: Can not load the scene '%s' because it was not in the build settings before playing.",
      1210: "Failed to preload '%s', %s",
      1211: "loadScene: The scene index to load (%s) is out of range.",
      1212: "loadScene: Unknown name type to load: '%s'",
      1213: "loadScene: Failed to load scene '%s' because '%s' is already loading",
      1214: "loadScene: Can not load the scene '%s' because it was not in the build settings before playing.",
      1215: "Failed to preload '%s', %s",
      1216: "Director.runSceneImmediate: scene is not valid",
      1300: "element type is wrong!",
      1400: "'%s' is deprecated, please use '%s' instead.",
      1404: "cc.spriteFrameCache is removed, please use cc.loader to load and cache sprite frames of atlas format.",
      1405: "The '%s' has been removed, please use '%s' instead.",
      1406: "'%s.%s' is removed",
      1408: "'%s' is not support in the '%s', please use '%s' instead.",
      1502: "cc.scheduler.scheduleCallbackForTarget(): target should be non-null.",
      1503: "cc.Scheduler.pauseTarget():target should be non-null",
      1504: "cc.Scheduler.resumeTarget():target should be non-null",
      1505: "cc.Scheduler.isTargetPaused():target should be non-null",
      1506: "warning: you CANNOT change update priority in scheduled function",
      1507: 'CCScheduler#scheduleSelector. Selector already scheduled. Updating interval from: %s to %s"',
      1508: "Argument callback must not be empty",
      1509: "Argument target must be non-nullptr",
      1510: "cc.Scheduler: Illegal target which doesn't have uuid or instanceId.",
      1511: "cc.Scheduler: pause state of the scheduled task doesn't match the element pause state in Scheduler, the given paused state will be ignored.",
      1513: "cc.Scheduler: scheduler stopped using `__instanceId` as id since v2.0, you should do scheduler.enableForTarget(target) before all scheduler API usage on target",
      1605: "child already added. It can't be added again",
      1606: "child must be non-null",
      1610: "cocos2d: removeChildByTag(tag = %s): child not found!",
      1612: "cc.Node.stopActionBy(): argument tag an invalid tag",
      1613: "cc.Node.getActionByTag(): argument tag is an invalid tag",
      1617: "child must be non-null",
      1618: "cc.Node.runAction(): action must be non-null",
      1619: "callback function must be non-null",
      1620: "interval must be positive",
      1623: "Set '%s' to normal node (not persist root node).",
      1624: "Replacing with the same sgNode",
      1625: "The replacement sgNode should not contain any child.",
      1626: "Should not set alpha via 'color', set 'opacity' please.",
      1627: "Not support for asynchronous creating node in SG",
      1632: "Node name can not include '/'.",
      1633: "Internal error, should not remove unknown node from parent.",
      1634: "addChild: The child to add must be instance of cc.Node, not %s.",
      1635: "reorderChild: this child is not in children list.",
      1636: "Node's zIndex value can't be greater than cc.macro.MAX_ZINDEX, setting to the maximum value",
      1637: "Node's zIndex value can't be smaller than cc.macro.MIN_ZINDEX, setting to the minimum value",
      1638: "Private node's zIndex can't be set, it will keep cc.macro.MIN_ZINDEX as its value",
      1639: "cc.Action is deprecated, please use cc.TweenAction instead",
      1800: "cc._EventListenerKeyboard.checkAvailable(): Invalid EventListenerKeyboard!",
      1801: "cc._EventListenerTouchOneByOne.checkAvailable(): Invalid EventListenerTouchOneByOne!",
      1802: "cc._EventListenerTouchAllAtOnce.checkAvailable(): Invalid EventListenerTouchAllAtOnce!",
      1803: "cc._EventListenerAcceleration.checkAvailable(): _onAccelerationEvent must be non-nil",
      1900: "Invalid parameter.",
      2000: "Don't call this method if the event is for touch.",
      2200: "Design resolution not valid",
      2201: "should set resolutionPolicy",
      2300: "The touches is more than MAX_TOUCHES, nUnusedIndex = %s",
      2400: "WebGL error %s",
      2602: "cc.Sprite.setDisplayFrameWithAnimationName(): Frame not found",
      2603: "cc.Sprite.setDisplayFrameWithAnimationName(): Invalid frame index",
      2606: "cc.Sprite.initWithSpriteFrame(): spriteFrame should be non-null",
      2607: "cc.Sprite.initWithSpriteFrameName(): spriteFrameName should be non-null",
      2608: "%s is null, please check.",
      2609: "cc.Sprite.initWithFile(): filename should be non-null",
      2610: "cc.Sprite.setDisplayFrameWithAnimationName(): animationName must be non-null",
      2614: "cc.Sprite.addChild(): child should be non-null",
      2616: "cc.SpriteBatchNode.updateQuadFromSprite(): cc.SpriteBatchNode only supports cc.Sprites as children",
      2617: "cc.SpriteBatchNode.insertQuadFromSprite(): cc.SpriteBatchNode only supports cc.Sprites as children",
      2618: "cc.SpriteBatchNode.addChild(): cc.SpriteBatchNode only supports cc.Sprites as children",
      2619: "cc.SpriteBatchNode.addChild(): cc.Sprite is not using the same texture",
      2623: "cc.SpriteBatchNode.updateQuadFromSprite(): sprite should be non-null",
      2625: "too many tiles, only 16384 tiles will be show",
      2626: "Unrecognized fill type in bar fill",
      2627: "Can not generate quad",
      2628: "%s does not exist",
      2712: "Invalid spriteFrameName",
      3005: "cocos2d: '%s' id=%s %s x %s",
      3006: "cocos2d: '%s' id= HTMLCanvasElement %s x %s",
      3007: "cocos2d: TextureCache dumpDebugInfo: %s textures, HTMLCanvasElement for %s KB (%s MB)",
      3103: "cc.Texture.addImage(): path should be non-null",
      3112: "cc.Texture.addImage(): path should be non-null",
      3113: "NSInternalInconsistencyException",
      3116: "WebGLRenderingContext.CLAMP_TO_EDGE should be used in NPOT textures",
      3117: "Mimpap texture only works in POT textures",
      3119: "Lazy init texture with image element failed due to image loading failure: %s",
      3120: "Loading texture from '%s' with unsupported type: '%s'. Add '%s' into 'cc.macro.SUPPORT_TEXTURE_FORMATS' please.",
      3300: "Rect width exceeds maximum margin: %s",
      3400: "Rect height exceeds maximum margin: %s",
      3401: "Set texture with a url of image is not supported anymore. Please use cc.assetManager.loadRemote to load a texture first.",
      3500: "0 priority is forbidden for fixed priority since it's used for scene graph based priority.",
      3501: "Invalid listener type!",
      3502: "Can't set fixed priority with scene graph based listener.",
      3503: "Invalid parameters.",
      3504: "listener must be a cc.EventListener object when adding a fixed priority listener",
      3505: "The listener has been registered, please don't register it again.",
      3506: "Unsupported listener target.",
      3507: "Invalid scene graph priority!",
      3508: "If program goes here, there should be event in dispatch.",
      3509: "_inDispatch should be 1 here.",
      3510: "%s's scene graph node not contains in the parent's children",
      3511: "event is undefined",
      3600: "cc.Class will automatically call super constructor of %s, you should not call it manually.",
      3601: "The editor property 'playOnFocus' should be used with 'executeInEditMode' in class '%s'",
      3602: "Unknown editor property '%s' in class '%s'.",
      3603: "Use 'cc.Float' or 'cc.Integer' instead of 'cc.Number' please.",
      3604: "Can only indicate one type attribute for %s.",
      3605: "The default value of %s is not instance of %s.",
      3606: "No needs to indicate the '%s' attribute for %s, which its default value is type of %s.",
      3607: "The default value of %s must be an empty string.",
      3608: "The type of %s must be cc.String, not String.",
      3609: "The type of %s must be cc.Boolean, not Boolean.",
      3610: "The type of %s must be cc.Float or cc.Integer, not Number.",
      3611: "Can not indicate the '%s' attribute for %s, which its default value is type of %s.",
      3612: "%s Just set the default value to 'new %s()' and it will be handled properly.",
      3613: "'No need to use 'serializable: false' or 'editorOnly: true' for the getter of '%s.%s', every getter is actually non-serialized.",
      3614: "Should not define constructor for cc.Component %s.",
      3615: "Each script can have at most one Component.",
      3616: "Should not specify class name %s for Component which defines in project.",
      3617: "Can not instantiate CCClass '%s' with arguments.",
      3618: "ctor of '%s' can not be another CCClass",
      3619: "ctor of '%s' must be function type",
      3620: "this._super declared in '%s.%s' but no super method defined",
      3621: "Unknown type of %s.%s, maybe you want is '%s'.",
      3622: "Unknown type of %s.%s, property should be defined in 'properties' or 'ctor'",
      3623: "Can not use 'editor' attribute, '%s' not inherits from Components.",
      3624: "'%s' overrided '%s' but '%s' is defined as 'false' so the super method will not be called. You can set '%s' to null to disable this warning.",
      3625: "[isChildClassOf] superclass should be function type, not",
      3626: "Can't remove '%s' because '%s' depends on it.",
      3627: "Should not add renderer component (%s) to a Canvas node.",
      3628: "Should not add %s to a node which size is already used by its other component.",
      3633: "Properties function of '%s' should return an object!",
      3634: "Disallow to use '.' in property name",
      3635: "Default array must be empty, set default value of %s.%s to [], and initialize in 'onLoad' or 'ctor' please. (just like 'this.%s = [...];')",
      3636: "Do not set default value to non-empty object, unless the object defines its own 'clone' function. Set default value of %s.%s to null or {}, and initialize in 'onLoad' or 'ctor' please. (just like 'this.%s = {foo: bar};')",
      3637: "Can not declare %s.%s, it is already defined in the prototype of %s",
      3638: "'%s': the getter of '%s' is already defined!",
      3639: "Can not apply the specified attribute to the getter of '%s.%s', attribute index: %s",
      3640: "'%s': the setter of '%s' is already defined!",
      3641: "Can not construct %s because it contains object property.",
      3642: "Cannot define %s.%s because static member name can not be '%s'.",
      3643: "Can not define a member called 'constructor' in the class '%s', please use 'ctor' instead.",
      3644: "Please define 'type' parameter of %s.%s as the actual constructor.",
      3645: "Please define 'type' parameter of %s.%s as the constructor of %s.",
      3646: "Unknown 'type' parameter of %s.%s\uff1a%s",
      3647: "The length of range array must be equal or greater than 2",
      3648: "Can not declare %s.%s method, it is already defined in the properties of %s.",
      3649: "CCClass %s have conflict between its ctor and __ctor__.",
      3651: 'Can not call `_super` or `prototype.ctor` in ES6 Classes "%s", use `super` instead please.',
      3652: "Failed to `new %s()` under the hood, %s\nIt is used for getting default values declared in TypeScript in the first place.\nPlease ensure the constructor can be called during the script's initialization.",
      3653: 'Please do not specifiy "default" attribute in decorator of "%s" property in "%s" class.  \nDefault value must be initialized at their declaration:\n \n// Before:\n@property({\n  type: cc.Integer\n  default: 0  // <--\n})\nmyProp;\n// After:\n@property({\n  type: cc.Integer\n})\nmyProp = 0;   // <--',
      3654: 'Please specifiy a default value for "%s.%s" at its declaration:\n \n// Before:\n@property(...)\nmyProp;\n// After:\n@property(...)\nmyProp = 0;',
      3655: 'Can not specifiy "get" or "set"  attribute in decorator for "%s" property in "%s" class.  \nPlease use:\n \n@property(...)\nget %s () {\n    ...\n}\n@property\nset %s (value) {\n    ...\n}',
      3700: "internal error: _prefab is undefined",
      3701: "Failed to load prefab asset for node '%s'",
      3800: "The target can not be made persist because it's not a cc.Node or it doesn't have _id property.",
      3801: "The node can not be made persist because it's not under root node.",
      3802: "The node can not be made persist because it's not in current scene.",
      3803: "The target can not be made persist because it's not a cc.Node or it doesn't have _id property.",
      3804: "getComponent: Type must be non-nil",
      3805: "Can't add component '%s' because %s already contains the same component.",
      3806: "Can't add component '%s' to %s because it conflicts with the existing '%s' derived component.",
      3807: "addComponent: Failed to get class '%s'",
      3808: "addComponent: Should not add component ('%s') when the scripts are still loading.",
      3809: "addComponent: The component to add must be a constructor",
      3810: "addComponent: The component to add must be child class of cc.Component",
      3811: "_addComponentAt: The component to add must be a constructor",
      3812: "_addComponentAt: Index out of range",
      3813: "removeComponent: Component must be non-nil",
      3814: "Argument must be non-nil",
      3815: "Component not owned by this entity",
      3816: "Node '%s' is already activating",
      3817: "Sorry, the component of '%s' which with an index of %s is corrupted! It has been removed.",
      3818: "Failed to read or parse project.json",
      3819: "Warning: target element is not a DIV or CANVAS",
      3820: "The renderer doesn't support the renderMode %s",
      3821: "Cannot change hierarchy while activating or deactivating the parent.",
      3900: "Invalid clip to add",
      3901: "Invalid clip to remove",
      3902: "clip is defaultClip, set force to true to force remove clip and animation state",
      3903: "animation state is playing, set force to true to force stop and remove clip and animation state",
      3904: "motion path of target [%s] in prop [%s] frame [%s] is not valid",
      3905: "sprite frames must be an Array.",
      3906: "Can't find easing type [%s]",
      3907: "animator not added or already removed",
      3912: "already-playing",
      4003: "Label font size can't be shirnked less than 0!",
      4004: "force notify all fonts loaded!",
      4011: "Property spriteFrame of Font '%s' is invalid. Using system font instead.",
      4012: "The texture of Font '%s' must be already loaded on JSB. Using system font instead.",
      4013: "Sorry, lineHeight of system font not supported on JSB.",
      4200: "MaskType: IMAGE_STENCIL only support WebGL mode.",
      4201: "The alphaThreshold invalid in Canvas Mode.",
      4202: "The inverted invalid in Canvas Mode.",
      4300: "can not found the %s page.",
      4400: "Invalid RichText img tag! The sprite frame name can't be found in the ImageAtlas!",
      4600: "Script attached to '%s' is missing or invalid.",
      4700: "The dom control is not created!",
      4800: "unknown asset type",
      4901: "loadRes: should not specify the extname in %s %s",
      4902: "No need to release non-cached asset.",
      4903: "Can not get class '%s'",
      4914: "Resources url '%s' does not exist.",
      4915: "Pack indices and data do not match in size",
      4916: "Failed to download package for %s",
      4921: "Invalid pipe or invalid index provided!",
      4922: "The pipe to be inserted is already in the pipeline!",
      4923: "Uuid Loader: Parse asset [ %s ] failed : %s",
      4924: "JSON Loader: Input item doesn't contain string content",
      4925: "Uuid Loader: Deserialize asset [ %s ] failed : %s",
      4926: "Audio Downloader: no web audio context.",
      4927: "Audio Downloader: audio not supported on this browser!",
      4928: "Load %s failed!",
      4929: "Load Webp ( %s ) failed",
      4930: "Load image ( %s ) failed",
      4932: 'Since v1.10, for any atlas ("%s") in the "resources" directory, it is not possible to find the contained SpriteFrames via `loadRes`, `getRes` or `releaseRes`. Load the SpriteAtlas first and then use `spriteAtlas.getSpriteFrame(name)` instead please.',
      4933: "Download Font [ %s ] failed, using Arial or system default font instead",
      5000: "object already destroyed",
      5001: "object not yet destroyed",
      5100: "Not a plist file!",
      5200: "Warning: localStorage isn't enabled. Please confirm browser cookie or privacy option",
      5201: "browser don't support web audio",
      5202: "This feature supports WebGL render mode only.",
      5300: "Type of target to deserialize not matched with data: target is %s, data is %s",
      5301: "Can not find script '%s'",
      5302: "Can not find class '%s'",
      5402: "cc.js.addon called on non-object:",
      5403: "cc.js.mixin: arguments must be type object:",
      5404: "The base class to extend from must be non-nil",
      5405: "The class to extend must be non-nil",
      5406: "Class should be extended before assigning any prototype members.",
      5500: "'notify' can not be used in 'get/set' !",
      5501: "'notify' must be used with 'default' !",
      5507: "The 'default' attribute of '%s.%s' must be an array",
      5508: "Invalid type of %s.%s",
      5510: "The 'type' attribute of '%s.%s' can not be 'Number', use cc.Float or cc.Integer instead please.",
      5511: "The 'type' attribute of '%s.%s' is undefined when loading script",
      5512: "Can not serialize '%s.%s' because the specified type is anonymous, please provide a class name or set the 'serializable' attribute of '%s.%s' to 'false'.",
      5513: "The 'default' value of '%s.%s' should not be used with a 'get' function.",
      5514: "The 'default' value of '%s.%s' should not be used with a 'set' function.",
      5515: "The 'default' value of '%s.%s' can not be an constructor. Set default to null please.",
      5516: "Property '%s.%s' must define at least one of 'default', 'get' or 'set'.",
      5517: "'%s.%s' hides inherited property '%s.%s'. To make the current property override that implementation, add the `override: true` attribute please.",
      5601: "Can not get current scene.",
      5602: "Scene is destroyed",
      5603: "reference node is destroyed",
      5700: "no %s or %s on %s",
      5800: "%s.lerp not yet implemented.",
      5801: "%s.clone not yet implemented.",
      5802: "%s.equals not yet implemented.",
      5900: "MotionStreak only support WebGL mode.",
      5901: "cc.MotionStreak.getOpacity has not been supported.",
      5902: "cc.MotionStreak.setOpacity has not been supported.",
      6000: "Custom should not be false if file is not specified.",
      6001: "The new %s must not be NaN",
      6017: "Incomplete or corrupt PNG file",
      6018: "Invalid filter algorithm: %s",
      6019: "Invalid byte order value.",
      6020: "You forgot your towel!",
      6021: "Unknown Field Tag: %s",
      6022: "Too many bits requested",
      6023: "No bits requested",
      6024: "Cannot recover from missing StripByteCounts",
      6025: "Cannot handle sub-byte bits per sample",
      6026: "Cannot handle sub-byte bits per pixel",
      6027: "Palette image missing color map",
      6028: "Unknown Photometric Interpretation: %s",
      6029: "Unkown error",
      6030: "cc.ParticleSystem: error decoding or ungzipping textureImageData",
      6031: "cc.ParticleSystem: unknown image format with Data",
      6032: "cc.ParticleSystem.initWithDictionary() : error loading the texture",
      6400: "asset.url is not usable in core process",
      6402: "AssetLibrary has already been initialized!",
      6500: "Widget target must be one of the parent nodes of it",
      6600: "collider not added or already removed",
      6601: "Can't find testFunc for (%s, $s).",
      6700: "Can't init canvas '%s' because it conflicts with the existing '%s', the scene should only have one active canvas at the same time.",
      6800: "Callback of event must be non-nil",
      6801: "The message must be provided",
      6900: "The thing you want to instantiate must be an object",
      6901: "The thing you want to instantiate is nil",
      6902: "The thing you want to instantiate is destroyed",
      6903: "The instantiate method for given asset do not implemented",
      6904: "Can not instantiate array",
      6905: "Can not instantiate DOM element",
      7100: "%s already defined in Enum.",
      7101: "Sorry, 'cc.Enum' not available on this platform, please report this error here: https://github.com/cocos-creator/engine/issues/new",
      7200: "Method 'initWithTMXFile' is no effect now, please set property 'tmxAsset' instead.",
      7201: "Method 'initWithXML' is no effect now, please set property 'tmxAsset' instead.",
      7202: "Add component TiledLayer into node failed.",
      7203: "Property 'mapLoaded' is unused now. Please write the logic to the callback 'start'.",
      7210: "TMX Hexa zOrder not supported",
      7211: "TMX invalid value",
      7215: "cocos2d: Warning: TMX Layer %s has no tiles",
      7216: "cocos2d: TMXFormat: Unsupported TMX version: %s",
      7217: "cocos2d: TMXFomat: Unsupported orientation: %s",
      7218: "cc.TMXMapInfo.parseXMLFile(): unsupported compression method",
      7219: "cc.TMXMapInfo.parseXMLFile(): Only base64 and/or gzip/zlib maps are supported",
      7221: "cc.TMXMapInfo.parseXMLFile(): Texture '%s' not found.",
      7222: "Parse %s failed.",
      7236: "cc.TMXLayer.getTileAt(): TMXLayer: the tiles map has been released",
      7237: "cc.TMXLayer.getTileGIDAt(): TMXLayer: the tiles map has been released",
      7238: "cc.TMXLayer.setTileGID(): TMXLayer: the tiles map has been released",
      7239: "cc.TMXLayer.setTileGID(): invalid gid: %s",
      7240: "cc.TMXLayer.getTileFlagsAt(): TMXLayer: the tiles map has been released",
      7241: "cc.TiledMap.initWithXML(): Map not found. Please check the filename.",
      7401: "Failed to set _defaultArmatureIndex for '%s' because the index is out of range.",
      7402: "Failed to set _animationIndex for '%s' because the index is out of range.",
      7501: "Failed to set _defaultSkinIndex for '%s' because the index is out of range.",
      7502: "Failed to set _animationIndex for '%s' because its skeletonData is invalid.",
      7503: "Failed to set _animationIndex for '%s' because the index is out of range.",
      7504: "Can not render dynamic created SkeletonData",
      7506: "Failed to load spine atlas '$s'",
      7507: "Please re-import '%s' because its textures is not initialized! (This workflow will be improved in the future.)",
      7508: "The atlas asset of '%s' is not exists!",
      7509: "Spine: Animation not found: %s",
      7510: "Spine: Animation not found: %s",
      7600: "The context of RenderTexture is invalid.",
      7601: "cc.RenderTexture._initWithWidthAndHeightForWebGL() : only RGB and RGBA formats are valid for a render texture;",
      7602: "Could not attach texture to the framebuffer",
      7603: "clearDepth isn't supported on Cocos2d-Html5",
      7604: "saveToFile isn't supported on Cocos2d-Html5",
      7605: "newCCImage isn't supported on Cocos2d-Html5",
      7700: "On the web is always keep the aspect ratio",
      7701: "Can't know status",
      7702: "Video player's duration is not ready to get now!",
      7800: "Web does not support loading",
      7801: "Web does not support query history",
      7802: "Web does not support query history",
      7803: "The current browser does not support the GoBack",
      7804: "The current browser does not support the GoForward",
      7805: "Web does not support zoom",
      7900: "cc.math.Matrix3.assign(): current matrix equals matIn",
      7901: "cc.math.mat4Assign(): pOut equals pIn",
      7902: "cc.mat.Matrix4.assignFrom(): mat4 equals current matrix",
      7903: "cc.math.Matrix4 equal: pMat1 and pMat2 are same object.",
      7904: "cc.math.Matrix4.extractPlane: Invalid plane index",
      7905: "cc.math.mat4Assign(): pOut equals pIn",
      7906: "cc.mat.Matrix4.assignFrom(): mat4 equals current matrix",
      7907: "cc.math.Matrix4 equals: pMat1 and pMat2 are same object.",
      7908: "Invalid matrix mode specified",
      7909: "current quaternion is an invalid value",
      8000: "Can't handle this field type or size",
      8001: "No bytes requested",
      8002: "Too many bytes requested",
      8003: "Missing StripByteCounts!",
      8103: "cc.GLProgram.link(): Cannot link invalid program",
      8104: "cocos2d: ERROR: Failed to link program: %s",
      8105: "cocos2d: cc.shaderCache._loadDefaultShader, error shader type",
      8106: "Please load the resource firset : %s",
      8107: "cc.GLProgram.getUniformLocationForName(): uniform name should be non-null",
      8108: "cc.GLProgram.getUniformLocationForName(): Invalid operation. Cannot get uniform location when program is not initialized",
      8109: "modelView matrix is undefined.",
      8200: "Please set node's active instead of rigidbody's enabled.",
      8300: "Should only one camera exists, please check your project.",
      8301: "Camera does not support Canvas Mode.",
      8400: "Wrong type arguments, 'filePath' must be a String.",
      8401: "Since 1.10, `%s` accept %s instance directly, not a URL string. Please directly reference the %s object in your script, or load %s by loader first. Don't use %s's URL anymore.",
      9000: "Stencil manager does not support level bigger than %d in this device.",
      9001: "Stencil manager is already empty, cannot pop any mask.",
      9100: "LabelAtlas '%s' cannot be loaded, raw texture does not exist.",
      9101: "LabelAtlas '%s' cannot be loaded, fnt data does not exist.",
      9102: "Program not support highp precision, will change to mediump.",
      9103: "%s : Failed to set property [%s], property not found.",
      9104: "%s : Failed to define [%s], define not found.",
      9105: "%s : Failed to set property [%s], property length not correct.",
      9106: "%s : Set property [%s] warning : should transform object to ArrayBuffer.",
      9107: "%s : illegal property: [%s], myabe defined an unused property;",
      9200: "cc.view.enableAntiAlias is deprecated, please use cc.Texture2D.setFilters instead",
      "0100": "%s not yet implemented."
    };
  }), {} ],
  2: [ (function(require, module, exports) {
    "use strict";
    var js = cc.js;
    var Playable = require("./playable");
    var _require = require("./animation-curves"), EventAnimCurve = _require.EventAnimCurve, EventInfo = _require.EventInfo;
    var WrapModeMask = require("./types").WrapModeMask;
    var binarySearch = require("../core/utils/binary-search").binarySearchEpsilon;
    function AnimationAnimator(target, animation) {
      Playable.call(this);
      this.target = target;
      this.animation = animation;
      this._anims = new js.array.MutableForwardIterator([]);
    }
    js.extend(AnimationAnimator, Playable);
    var p = AnimationAnimator.prototype;
    p.playState = function(state, startTime) {
      if (!state.clip) return;
      state.curveLoaded || initClipData(this.target, state);
      state.animator = this;
      state.play();
      "number" === typeof startTime && state.setTime(startTime);
      this.play();
    };
    p.stopStatesExcept = function(state) {
      var iterator = this._anims;
      var array = iterator.array;
      for (iterator.i = 0; iterator.i < array.length; ++iterator.i) {
        var anim = array[iterator.i];
        if (anim === state) continue;
        this.stopState(anim);
      }
    };
    p.addAnimation = function(anim) {
      var index = this._anims.array.indexOf(anim);
      -1 === index && this._anims.push(anim);
      anim._setEventTarget(this.animation);
    };
    p.removeAnimation = function(anim) {
      var index = this._anims.array.indexOf(anim);
      if (index >= 0) {
        this._anims.fastRemoveAt(index);
        0 === this._anims.array.length && this.stop();
      } else cc.errorID(3907);
      anim.animator = null;
    };
    p.sample = function() {
      var iterator = this._anims;
      var array = iterator.array;
      for (iterator.i = 0; iterator.i < array.length; ++iterator.i) {
        var anim = array[iterator.i];
        anim.sample();
      }
    };
    p.stopState = function(state) {
      state && state.stop();
    };
    p.pauseState = function(state) {
      state && state.pause();
    };
    p.resumeState = function(state) {
      state && state.resume();
      this.isPaused && this.resume();
    };
    p.setStateTime = function(state, time) {
      if (void 0 !== time) {
        if (state) {
          state.setTime(time);
          state.sample();
        }
      } else {
        time = state;
        var array = this._anims.array;
        for (var i = 0; i < array.length; ++i) {
          var anim = array[i];
          anim.setTime(time);
          anim.sample();
        }
      }
    };
    p.onStop = function() {
      var iterator = this._anims;
      var array = iterator.array;
      for (iterator.i = 0; iterator.i < array.length; ++iterator.i) {
        var anim = array[iterator.i];
        anim.stop();
      }
    };
    p.onPause = function() {
      var array = this._anims.array;
      for (var i = 0; i < array.length; ++i) {
        var anim = array[i];
        anim.pause();
        anim.animator = null;
      }
    };
    p.onResume = function() {
      var array = this._anims.array;
      for (var i = 0; i < array.length; ++i) {
        var anim = array[i];
        anim.animator = this;
        anim.resume();
      }
    };
    p._reloadClip = function(state) {
      initClipData(this.target, state);
    };
    function createBatchedProperty(propPath, firstDotIndex, mainValue, animValue) {
      mainValue = mainValue.clone();
      var nextValue = mainValue;
      var leftIndex = firstDotIndex + 1;
      var rightIndex = propPath.indexOf(".", leftIndex);
      while (-1 !== rightIndex) {
        var nextName = propPath.slice(leftIndex, rightIndex);
        nextValue = nextValue[nextName];
        leftIndex = rightIndex + 1;
        rightIndex = propPath.indexOf(".", leftIndex);
      }
      var lastPropName = propPath.slice(leftIndex);
      nextValue[lastPropName] = animValue;
      return mainValue;
    }
    false;
    function initClipData(root, state) {
      var clip = state.clip;
      state.duration = clip.duration;
      state.speed = clip.speed;
      state.wrapMode = clip.wrapMode;
      state.frameRate = clip.sample;
      (state.wrapMode & WrapModeMask.Loop) === WrapModeMask.Loop ? state.repeatCount = Infinity : state.repeatCount = 1;
      var curves = state.curves = clip.createCurves(state, root);
      var events = clip.events;
      if (true, events) {
        var curve;
        for (var i = 0, l = events.length; i < l; i++) {
          if (!curve) {
            curve = new EventAnimCurve();
            curve.target = root;
            curves.push(curve);
          }
          var eventData = events[i];
          var ratio = eventData.frame / state.duration;
          var eventInfo = void 0;
          var index = binarySearch(curve.ratios, ratio);
          if (index >= 0) eventInfo = curve.events[index]; else {
            eventInfo = new EventInfo();
            curve.ratios.push(ratio);
            curve.events.push(eventInfo);
          }
          eventInfo.add(eventData.func, eventData.params);
        }
      }
    }
    false;
    module.exports = AnimationAnimator;
  }), {
    "../core/utils/binary-search": 204,
    "./animation-curves": 4,
    "./playable": 11,
    "./types": 12
  } ],
  3: [ (function(require, module, exports) {
    "use strict";
    var WrapMode = require("./types").WrapMode;
    var _require = require("./animation-curves"), DynamicAnimCurve = _require.DynamicAnimCurve, quickFindIndex = _require.quickFindIndex;
    var sampleMotionPaths = require("./motion-path-helper").sampleMotionPaths;
    var binarySearch = require("../core/utils/binary-search").binarySearchEpsilon;
    var AnimationClip = cc.Class({
      name: "cc.AnimationClip",
      extends: cc.Asset,
      properties: {
        _duration: {
          default: 0,
          type: cc.Float
        },
        duration: {
          get: function get() {
            return this._duration;
          }
        },
        sample: {
          default: 60
        },
        speed: {
          default: 1
        },
        wrapMode: {
          default: WrapMode.Normal
        },
        curveData: {
          default: {},
          visible: false
        },
        events: {
          default: [],
          visible: false
        }
      },
      statics: {
        createWithSpriteFrames: function createWithSpriteFrames(spriteFrames, sample) {
          if (!Array.isArray(spriteFrames)) {
            cc.errorID(3905);
            return null;
          }
          var clip = new AnimationClip();
          clip.sample = sample || clip.sample;
          clip._duration = spriteFrames.length / clip.sample;
          var frames = [];
          var step = 1 / clip.sample;
          for (var i = 0, l = spriteFrames.length; i < l; i++) frames[i] = {
            frame: i * step,
            value: spriteFrames[i]
          };
          clip.curveData = {
            comps: {
              "cc.Sprite": {
                spriteFrame: frames
              }
            }
          };
          return clip;
        }
      },
      onLoad: function onLoad() {
        this._duration = Number.parseFloat(this.duration);
        this.speed = Number.parseFloat(this.speed);
        this.wrapMode = Number.parseInt(this.wrapMode);
        this.frameRate = Number.parseFloat(this.sample);
      },
      createPropCurve: function createPropCurve(target, propPath, keyframes) {
        var motionPaths = [];
        var isMotionPathProp = target instanceof cc.Node && "position" === propPath;
        var curve = new DynamicAnimCurve();
        curve.target = target;
        curve.prop = propPath;
        for (var i = 0, l = keyframes.length; i < l; i++) {
          var keyframe = keyframes[i];
          var ratio = keyframe.frame / this.duration;
          curve.ratios.push(ratio);
          isMotionPathProp && motionPaths.push(keyframe.motionPath);
          var curveValue = keyframe.value;
          curve.values.push(curveValue);
          var curveTypes = keyframe.curve;
          if (curveTypes) {
            if ("string" === typeof curveTypes) {
              curve.types.push(curveTypes);
              continue;
            }
            if (Array.isArray(curveTypes)) {
              curveTypes[0] === curveTypes[1] && curveTypes[2] === curveTypes[3] ? curve.types.push(DynamicAnimCurve.Linear) : curve.types.push(DynamicAnimCurve.Bezier(curveTypes));
              continue;
            }
          }
          curve.types.push(DynamicAnimCurve.Linear);
        }
        isMotionPathProp && sampleMotionPaths(motionPaths, curve, this.duration, this.sample, target);
        var ratios = curve.ratios;
        var currRatioDif, lastRatioDif;
        var canOptimize = true;
        var EPSILON = 1e-6;
        for (var _i = 1, _l = ratios.length; _i < _l; _i++) {
          currRatioDif = ratios[_i] - ratios[_i - 1];
          if (1 === _i) lastRatioDif = currRatioDif; else if (Math.abs(currRatioDif - lastRatioDif) > EPSILON) {
            canOptimize = false;
            break;
          }
        }
        curve._findFrameIndex = canOptimize ? quickFindIndex : binarySearch;
        var firstValue = curve.values[0];
        void 0 === firstValue || null === firstValue || curve._lerp || ("number" === typeof firstValue ? curve._lerp = DynamicAnimCurve.prototype._lerpNumber : firstValue instanceof cc.Quat ? curve._lerp = DynamicAnimCurve.prototype._lerpQuat : firstValue instanceof cc.Vec2 ? curve._lerp = DynamicAnimCurve.prototype._lerpVector2 : firstValue instanceof cc.Vec3 ? curve._lerp = DynamicAnimCurve.prototype._lerpVector3 : firstValue.lerp && (curve._lerp = DynamicAnimCurve.prototype._lerpObject));
        return curve;
      },
      createTargetCurves: function createTargetCurves(target, curveData, curves) {
        var propsData = curveData.props;
        var compsData = curveData.comps;
        if (propsData) for (var propPath in propsData) {
          var data = propsData[propPath];
          var curve = this.createPropCurve(target, propPath, data);
          curves.push(curve);
        }
        if (compsData) for (var compName in compsData) {
          var comp = target.getComponent(compName);
          if (!comp) continue;
          var compData = compsData[compName];
          for (var _propPath in compData) {
            var _data = compData[_propPath];
            var _curve = this.createPropCurve(comp, _propPath, _data);
            curves.push(_curve);
          }
        }
      },
      createCurves: function createCurves(state, root) {
        var curveData = this.curveData;
        var childrenCurveDatas = curveData.paths;
        var curves = [];
        this.createTargetCurves(root, curveData, curves);
        for (var namePath in childrenCurveDatas) {
          var target = cc.find(namePath, root);
          if (!target) continue;
          var childCurveDatas = childrenCurveDatas[namePath];
          this.createTargetCurves(target, childCurveDatas, curves);
        }
        return curves;
      }
    });
    cc.AnimationClip = module.exports = AnimationClip;
  }), {
    "../core/utils/binary-search": 204,
    "./animation-curves": 4,
    "./motion-path-helper": 10,
    "./types": 12
  } ],
  4: [ (function(require, module, exports) {
    "use strict";
    var bezierByTime = require("./bezier").bezierByTime;
    var binarySearch = require("../core/utils/binary-search").binarySearchEpsilon;
    var WrapModeMask = require("./types").WrapModeMask;
    var WrappedInfo = require("./types").WrappedInfo;
    function computeRatioByType(ratio, type) {
      if ("string" === typeof type) {
        var func = cc.easing[type];
        func ? ratio = func(ratio) : cc.errorID(3906, type);
      } else Array.isArray(type) && (ratio = bezierByTime(type, ratio));
      return ratio;
    }
    var AnimCurve = cc.Class({
      name: "cc.AnimCurve",
      sample: function sample(time, ratio, state) {},
      onTimeChangedManually: void 0
    });
    function quickFindIndex(ratios, ratio) {
      var length = ratios.length - 1;
      if (0 === length) return 0;
      var start = ratios[0];
      if (ratio < start) return 0;
      var end = ratios[length];
      if (ratio > end) return ~ratios.length;
      ratio = (ratio - start) / (end - start);
      var eachLength = 1 / length;
      var index = ratio / eachLength;
      var floorIndex = 0 | index;
      var EPSILON = 1e-6;
      if (index - floorIndex < EPSILON) return floorIndex;
      if (floorIndex + 1 - index < EPSILON) return floorIndex + 1;
      return ~(floorIndex + 1);
    }
    var DynamicAnimCurve = cc.Class({
      name: "cc.DynamicAnimCurve",
      extends: AnimCurve,
      ctor: function ctor() {
        this._cachedIndex = 0;
      },
      properties: {
        target: null,
        prop: "",
        values: [],
        ratios: [],
        types: []
      },
      _findFrameIndex: binarySearch,
      _lerp: void 0,
      _lerpNumber: function _lerpNumber(from, to, t) {
        return from + (to - from) * t;
      },
      _lerpObject: function _lerpObject(from, to, t) {
        return from.lerp(to, t);
      },
      _lerpQuat: (function() {
        var out = cc.quat();
        return function(from, to, t) {
          return from.lerp(to, t, out);
        };
      })(),
      _lerpVector2: (function() {
        var out = cc.v2();
        return function(from, to, t) {
          return from.lerp(to, t, out);
        };
      })(),
      _lerpVector3: (function() {
        var out = cc.v3();
        return function(from, to, t) {
          return from.lerp(to, t, out);
        };
      })(),
      sample: function sample(time, ratio, state) {
        var values = this.values;
        var ratios = this.ratios;
        var frameCount = ratios.length;
        if (0 === frameCount) return;
        var shoudRefind = true;
        var cachedIndex = this._cachedIndex;
        if (cachedIndex < 0) {
          cachedIndex = ~cachedIndex;
          if (cachedIndex > 0 && cachedIndex < ratios.length) {
            var _fromRatio = ratios[cachedIndex - 1];
            var _toRatio = ratios[cachedIndex];
            ratio > _fromRatio && ratio < _toRatio && (shoudRefind = false);
          }
        }
        shoudRefind && (this._cachedIndex = this._findFrameIndex(ratios, ratio));
        var value;
        var index = this._cachedIndex;
        if (index < 0) {
          index = ~index;
          if (index <= 0) value = values[0]; else if (index >= frameCount) value = values[frameCount - 1]; else {
            var fromVal = values[index - 1];
            if (this._lerp) {
              var fromRatio = ratios[index - 1];
              var toRatio = ratios[index];
              var type = this.types[index - 1];
              var ratioBetweenFrames = (ratio - fromRatio) / (toRatio - fromRatio);
              type && (ratioBetweenFrames = computeRatioByType(ratioBetweenFrames, type));
              var toVal = values[index];
              value = this._lerp(fromVal, toVal, ratioBetweenFrames);
            } else value = fromVal;
          }
        } else value = values[index];
        this.target[this.prop] = value;
      }
    });
    DynamicAnimCurve.Linear = null;
    DynamicAnimCurve.Bezier = function(controlPoints) {
      return controlPoints;
    };
    var EventInfo = function EventInfo() {
      this.events = [];
    };
    EventInfo.prototype.add = function(func, params) {
      this.events.push({
        func: func || "",
        params: params || []
      });
    };
    var EventAnimCurve = cc.Class({
      name: "cc.EventAnimCurve",
      extends: AnimCurve,
      properties: {
        target: null,
        ratios: [],
        events: [],
        _wrappedInfo: {
          default: function _default() {
            return new WrappedInfo();
          }
        },
        _lastWrappedInfo: null,
        _ignoreIndex: NaN
      },
      _wrapIterations: function _wrapIterations(iterations) {
        iterations - (0 | iterations) === 0 && (iterations -= 1);
        return 0 | iterations;
      },
      sample: function sample(time, ratio, state) {
        var length = this.ratios.length;
        var currentWrappedInfo = state.getWrappedInfo(state.time, this._wrappedInfo);
        var direction = currentWrappedInfo.direction;
        var currentIndex = binarySearch(this.ratios, currentWrappedInfo.ratio);
        if (currentIndex < 0) {
          currentIndex = ~currentIndex - 1;
          direction < 0 && (currentIndex += 1);
        }
        this._ignoreIndex !== currentIndex && (this._ignoreIndex = NaN);
        currentWrappedInfo.frameIndex = currentIndex;
        if (!this._lastWrappedInfo) {
          this._fireEvent(currentIndex);
          this._lastWrappedInfo = new WrappedInfo(currentWrappedInfo);
          return;
        }
        var wrapMode = state.wrapMode;
        var currentIterations = this._wrapIterations(currentWrappedInfo.iterations);
        var lastWrappedInfo = this._lastWrappedInfo;
        var lastIterations = this._wrapIterations(lastWrappedInfo.iterations);
        var lastIndex = lastWrappedInfo.frameIndex;
        var lastDirection = lastWrappedInfo.direction;
        var interationsChanged = -1 !== lastIterations && currentIterations !== lastIterations;
        if (lastIndex === currentIndex && interationsChanged && 1 === length) this._fireEvent(0); else if (lastIndex !== currentIndex || interationsChanged) {
          direction = lastDirection;
          do {
            if (lastIndex !== currentIndex) {
              if (-1 === direction && 0 === lastIndex && currentIndex > 0) {
                (wrapMode & WrapModeMask.PingPong) === WrapModeMask.PingPong ? direction *= -1 : lastIndex = length;
                lastIterations++;
              } else if (1 === direction && lastIndex === length - 1 && currentIndex < length - 1) {
                (wrapMode & WrapModeMask.PingPong) === WrapModeMask.PingPong ? direction *= -1 : lastIndex = -1;
                lastIterations++;
              }
              if (lastIndex === currentIndex) break;
              if (lastIterations > currentIterations) break;
            }
            lastIndex += direction;
            cc.director.getAnimationManager().pushDelayEvent(this, "_fireEvent", [ lastIndex ]);
          } while (lastIndex !== currentIndex && lastIndex > -1 && lastIndex < length);
        }
        this._lastWrappedInfo.set(currentWrappedInfo);
      },
      _fireEvent: function _fireEvent(index) {
        if (index < 0 || index >= this.events.length || this._ignoreIndex === index) return;
        var eventInfo = this.events[index];
        var events = eventInfo.events;
        if (!this.target.isValid) return;
        var components = this.target._components;
        for (var i = 0; i < events.length; i++) {
          var event = events[i];
          var funcName = event.func;
          for (var j = 0; j < components.length; j++) {
            var component = components[j];
            var func = component[funcName];
            func && func.apply(component, event.params);
          }
        }
      },
      onTimeChangedManually: function onTimeChangedManually(time, state) {
        this._lastWrappedInfo = null;
        this._ignoreIndex = NaN;
        var info = state.getWrappedInfo(time, this._wrappedInfo);
        var direction = info.direction;
        var frameIndex = binarySearch(this.ratios, info.ratio);
        if (frameIndex < 0) {
          frameIndex = ~frameIndex - 1;
          direction < 0 && (frameIndex += 1);
          this._ignoreIndex = frameIndex;
        }
      }
    });
    false;
    module.exports = {
      AnimCurve: AnimCurve,
      DynamicAnimCurve: DynamicAnimCurve,
      EventAnimCurve: EventAnimCurve,
      EventInfo: EventInfo,
      computeRatioByType: computeRatioByType,
      quickFindIndex: quickFindIndex
    };
  }), {
    "../core/utils/binary-search": 204,
    "./bezier": 7,
    "./types": 12
  } ],
  5: [ (function(require, module, exports) {
    "use strict";
    var js = cc.js;
    var AnimationManager = cc.Class({
      ctor: function ctor() {
        this._anims = new js.array.MutableForwardIterator([]);
        this._delayEvents = [];
        cc.director._scheduler && cc.director._scheduler.enableForTarget(this);
      },
      update: function update(dt) {
        var iterator = this._anims;
        var array = iterator.array;
        for (iterator.i = 0; iterator.i < array.length; ++iterator.i) {
          var anim = array[iterator.i];
          anim._isPlaying && !anim._isPaused && anim.update(dt);
        }
        var events = this._delayEvents;
        for (var i = 0; i < events.length; i++) {
          var event = events[i];
          event.target[event.func].apply(event.target, event.args);
        }
        events.length = 0;
      },
      destruct: function destruct() {},
      addAnimation: function addAnimation(anim) {
        var index = this._anims.array.indexOf(anim);
        -1 === index && this._anims.push(anim);
      },
      removeAnimation: function removeAnimation(anim) {
        var index = this._anims.array.indexOf(anim);
        index >= 0 ? this._anims.fastRemoveAt(index) : cc.errorID(3907);
      },
      pushDelayEvent: function pushDelayEvent(target, func, args) {
        this._delayEvents.push({
          target: target,
          func: func,
          args: args
        });
      }
    });
    cc.AnimationManager = module.exports = AnimationManager;
  }), {} ],
  6: [ (function(require, module, exports) {
    "use strict";
    var js = cc.js;
    var Playable = require("./playable");
    var Types = require("./types");
    var WrappedInfo = Types.WrappedInfo;
    var WrapMode = Types.WrapMode;
    var WrapModeMask = Types.WrapModeMask;
    function AnimationState(clip, name) {
      Playable.call(this);
      this._currentFramePlayed = false;
      this._delay = 0;
      this._delayTime = 0;
      this._wrappedInfo = new WrappedInfo();
      this._lastWrappedInfo = null;
      this._process = process;
      this._clip = clip;
      this._name = name || clip && clip.name;
      this.animator = null;
      this.curves = [];
      this.delay = 0;
      this.repeatCount = 1;
      this.duration = 1;
      this.speed = 1;
      this.wrapMode = WrapMode.Normal;
      this.time = 0;
      this._target = null;
      this._lastframeEventOn = false;
      this.emit = function() {
        var args = new Array(arguments.length);
        for (var i = 0, l = args.length; i < l; i++) args[i] = arguments[i];
        cc.director.getAnimationManager().pushDelayEvent(this, "_emit", args);
      };
    }
    js.extend(AnimationState, Playable);
    var proto = AnimationState.prototype;
    proto._emit = function(type, state) {
      this._target && this._target.isValid && this._target.emit(type, type, state);
    };
    proto.on = function(type, callback, target) {
      if (this._target && this._target.isValid) {
        "lastframe" === type && (this._lastframeEventOn = true);
        return this._target.on(type, callback, target);
      }
      return null;
    };
    proto.once = function(type, callback, target) {
      if (this._target && this._target.isValid) {
        "lastframe" === type && (this._lastframeEventOn = true);
        var self = this;
        return this._target.once(type, (function(event) {
          callback.call(target, event);
          self._lastframeEventOn = false;
        }));
      }
      return null;
    };
    proto.off = function(type, callback, target) {
      if (this._target && this._target.isValid) {
        "lastframe" === type && (this._target.hasEventListener(type) || (this._lastframeEventOn = false));
        this._target.off(type, callback, target);
      }
    };
    proto._setEventTarget = function(target) {
      this._target = target;
    };
    proto.onPlay = function() {
      this.setTime(0);
      this._delayTime = this._delay;
      cc.director.getAnimationManager().addAnimation(this);
      this.animator && this.animator.addAnimation(this);
      this.emit("play", this);
    };
    proto.onStop = function() {
      this.isPaused || cc.director.getAnimationManager().removeAnimation(this);
      this.animator && this.animator.removeAnimation(this);
      this.emit("stop", this);
    };
    proto.onResume = function() {
      cc.director.getAnimationManager().addAnimation(this);
      this.emit("resume", this);
    };
    proto.onPause = function() {
      cc.director.getAnimationManager().removeAnimation(this);
      this.emit("pause", this);
    };
    proto.setTime = function(time) {
      this._currentFramePlayed = false;
      this.time = time || 0;
      var curves = this.curves;
      for (var i = 0, l = curves.length; i < l; i++) {
        var curve = curves[i];
        curve.onTimeChangedManually && curve.onTimeChangedManually(time, this);
      }
    };
    function process() {
      var info = this.sample();
      if (this._lastframeEventOn) {
        var lastInfo;
        lastInfo = this._lastWrappedInfo ? this._lastWrappedInfo : this._lastWrappedInfo = new WrappedInfo(info);
        this.repeatCount > 1 && (0 | info.iterations) > (0 | lastInfo.iterations) && this.emit("lastframe", this);
        lastInfo.set(info);
      }
      if (info.stopped) {
        this.stop();
        this.emit("finished", this);
      }
    }
    function simpleProcess() {
      var time = this.time;
      var duration = this.duration;
      if (time > duration) {
        time %= duration;
        0 === time && (time = duration);
      } else if (time < 0) {
        time %= duration;
        0 !== time && (time += duration);
      }
      var ratio = time / duration;
      var curves = this.curves;
      for (var i = 0, len = curves.length; i < len; i++) {
        var curve = curves[i];
        curve.sample(time, ratio, this);
      }
      if (this._lastframeEventOn) {
        void 0 === this._lastIterations && (this._lastIterations = ratio);
        (this.time > 0 && this._lastIterations > ratio || this.time < 0 && this._lastIterations < ratio) && this.emit("lastframe", this);
        this._lastIterations = ratio;
      }
    }
    proto.update = function(delta) {
      if (this._delayTime > 0) {
        this._delayTime -= delta;
        if (this._delayTime > 0) return;
      }
      this._currentFramePlayed ? this.time += delta * this.speed : this._currentFramePlayed = true;
      this._process();
    };
    proto._needRevers = function(currentIterations) {
      var wrapMode = this.wrapMode;
      var needRevers = false;
      if ((wrapMode & WrapModeMask.PingPong) === WrapModeMask.PingPong) {
        var isEnd = currentIterations - (0 | currentIterations) === 0;
        isEnd && currentIterations > 0 && (currentIterations -= 1);
        var isOddIteration = 1 & currentIterations;
        isOddIteration && (needRevers = !needRevers);
      }
      (wrapMode & WrapModeMask.Reverse) === WrapModeMask.Reverse && (needRevers = !needRevers);
      return needRevers;
    };
    proto.getWrappedInfo = function(time, info) {
      info = info || new WrappedInfo();
      var stopped = false;
      var duration = this.duration;
      var repeatCount = this.repeatCount;
      var currentIterations = time > 0 ? time / duration : -time / duration;
      if (currentIterations >= repeatCount) {
        currentIterations = repeatCount;
        stopped = true;
        var tempRatio = repeatCount - (0 | repeatCount);
        0 === tempRatio && (tempRatio = 1);
        time = tempRatio * duration * (time > 0 ? 1 : -1);
      }
      if (time > duration) {
        var tempTime = time % duration;
        time = 0 === tempTime ? duration : tempTime;
      } else if (time < 0) {
        time %= duration;
        0 !== time && (time += duration);
      }
      var needRevers = false;
      var shouldWrap = this._wrapMode & WrapModeMask.ShouldWrap;
      shouldWrap && (needRevers = this._needRevers(currentIterations));
      var direction = needRevers ? -1 : 1;
      this.speed < 0 && (direction *= -1);
      shouldWrap && needRevers && (time = duration - time);
      info.ratio = time / duration;
      info.time = time;
      info.direction = direction;
      info.stopped = stopped;
      info.iterations = currentIterations;
      return info;
    };
    proto.sample = function() {
      var info = this.getWrappedInfo(this.time, this._wrappedInfo);
      var curves = this.curves;
      for (var i = 0, len = curves.length; i < len; i++) {
        var curve = curves[i];
        curve.sample(info.time, info.ratio, this);
      }
      return info;
    };
    js.get(proto, "clip", (function() {
      return this._clip;
    }));
    js.get(proto, "name", (function() {
      return this._name;
    }));
    js.obsolete(proto, "AnimationState.length", "duration");
    js.getset(proto, "curveLoaded", (function() {
      return this.curves.length > 0;
    }), (function() {
      this.curves.length = 0;
    }));
    js.getset(proto, "wrapMode", (function() {
      return this._wrapMode;
    }), (function(value) {
      this._wrapMode = value;
      false;
      this.time = 0;
      value & WrapModeMask.Loop ? this.repeatCount = Infinity : this.repeatCount = 1;
    }));
    js.getset(proto, "repeatCount", (function() {
      return this._repeatCount;
    }), (function(value) {
      this._repeatCount = value;
      var shouldWrap = this._wrapMode & WrapModeMask.ShouldWrap;
      var reverse = (this.wrapMode & WrapModeMask.Reverse) === WrapModeMask.Reverse;
      this._process = Infinity !== value || shouldWrap || reverse ? process : simpleProcess;
    }));
    js.getset(proto, "delay", (function() {
      return this._delay;
    }), (function(value) {
      this._delayTime = this._delay = value;
    }));
    cc.AnimationState = module.exports = AnimationState;
  }), {
    "./playable": 11,
    "./types": 12
  } ],
  7: [ (function(require, module, exports) {
    "use strict";
    function bezier(C1, C2, C3, C4, t) {
      var t1 = 1 - t;
      return t1 * (t1 * (C1 + (3 * C2 - C1) * t) + 3 * C3 * t * t) + C4 * t * t * t;
    }
    var cos = Math.cos, acos = Math.acos, max = Math.max, pi = Math.PI, tau = 2 * pi, sqrt = Math.sqrt;
    function crt(v) {
      return v < 0 ? -Math.pow(-v, 1 / 3) : Math.pow(v, 1 / 3);
    }
    function cardano(curve, x) {
      var pa = x - 0;
      var pb = x - curve[0];
      var pc = x - curve[2];
      var pd = x - 1;
      var pa3 = 3 * pa;
      var pb3 = 3 * pb;
      var pc3 = 3 * pc;
      var d = -pa + pb3 - pc3 + pd, rd = 1 / d, r3 = 1 / 3, a = (pa3 - 6 * pb + pc3) * rd, a3 = a * r3, b = (-pa3 + pb3) * rd, c = pa * rd, p = (3 * b - a * a) * r3, p3 = p * r3, q = (2 * a * a * a - 9 * a * b + 27 * c) / 27, q2 = q / 2, discriminant = q2 * q2 + p3 * p3 * p3, u1, v1, x1, x2, x3;
      if (discriminant < 0) {
        var mp3 = -p * r3, mp33 = mp3 * mp3 * mp3, r = sqrt(mp33), t = -q / (2 * r), cosphi = t < -1 ? -1 : t > 1 ? 1 : t, phi = acos(cosphi), crtr = crt(r), t1 = 2 * crtr;
        x1 = t1 * cos(phi * r3) - a3;
        x2 = t1 * cos((phi + tau) * r3) - a3;
        x3 = t1 * cos((phi + 2 * tau) * r3) - a3;
        return 0 <= x1 && x1 <= 1 ? 0 <= x2 && x2 <= 1 ? 0 <= x3 && x3 <= 1 ? max(x1, x2, x3) : max(x1, x2) : 0 <= x3 && x3 <= 1 ? max(x1, x3) : x1 : 0 <= x2 && x2 <= 1 ? 0 <= x3 && x3 <= 1 ? max(x2, x3) : x2 : x3;
      }
      if (0 === discriminant) {
        u1 = q2 < 0 ? crt(-q2) : -crt(q2);
        x1 = 2 * u1 - a3;
        x2 = -u1 - a3;
        return 0 <= x1 && x1 <= 1 ? 0 <= x2 && x2 <= 1 ? max(x1, x2) : x1 : x2;
      }
      var sd = sqrt(discriminant);
      u1 = crt(-q2 + sd);
      v1 = crt(q2 + sd);
      x1 = u1 - v1 - a3;
      return x1;
    }
    function bezierByTime(controlPoints, x) {
      var percent = cardano(controlPoints, x);
      var p1y = controlPoints[1];
      var p2y = controlPoints[3];
      return ((1 - percent) * (p1y + (p2y - p1y) * percent) * 3 + percent * percent) * percent;
    }
    false;
    module.exports = {
      bezier: bezier,
      bezierByTime: bezierByTime
    };
  }), {} ],
  8: [ (function(require, module, exports) {
    "use strict";
    var easing = {
      constant: function constant() {
        return 0;
      },
      linear: function linear(k) {
        return k;
      },
      quadIn: function quadIn(k) {
        return k * k;
      },
      quadOut: function quadOut(k) {
        return k * (2 - k);
      },
      quadInOut: function quadInOut(k) {
        if ((k *= 2) < 1) return .5 * k * k;
        return -.5 * (--k * (k - 2) - 1);
      },
      cubicIn: function cubicIn(k) {
        return k * k * k;
      },
      cubicOut: function cubicOut(k) {
        return --k * k * k + 1;
      },
      cubicInOut: function cubicInOut(k) {
        if ((k *= 2) < 1) return .5 * k * k * k;
        return .5 * ((k -= 2) * k * k + 2);
      },
      quartIn: function quartIn(k) {
        return k * k * k * k;
      },
      quartOut: function quartOut(k) {
        return 1 - --k * k * k * k;
      },
      quartInOut: function quartInOut(k) {
        if ((k *= 2) < 1) return .5 * k * k * k * k;
        return -.5 * ((k -= 2) * k * k * k - 2);
      },
      quintIn: function quintIn(k) {
        return k * k * k * k * k;
      },
      quintOut: function quintOut(k) {
        return --k * k * k * k * k + 1;
      },
      quintInOut: function quintInOut(k) {
        if ((k *= 2) < 1) return .5 * k * k * k * k * k;
        return .5 * ((k -= 2) * k * k * k * k + 2);
      },
      sineIn: function sineIn(k) {
        return 1 - Math.cos(k * Math.PI / 2);
      },
      sineOut: function sineOut(k) {
        return Math.sin(k * Math.PI / 2);
      },
      sineInOut: function sineInOut(k) {
        return .5 * (1 - Math.cos(Math.PI * k));
      },
      expoIn: function expoIn(k) {
        return 0 === k ? 0 : Math.pow(1024, k - 1);
      },
      expoOut: function expoOut(k) {
        return 1 === k ? 1 : 1 - Math.pow(2, -10 * k);
      },
      expoInOut: function expoInOut(k) {
        if (0 === k) return 0;
        if (1 === k) return 1;
        if ((k *= 2) < 1) return .5 * Math.pow(1024, k - 1);
        return .5 * (2 - Math.pow(2, -10 * (k - 1)));
      },
      circIn: function circIn(k) {
        return 1 - Math.sqrt(1 - k * k);
      },
      circOut: function circOut(k) {
        return Math.sqrt(1 - --k * k);
      },
      circInOut: function circInOut(k) {
        if ((k *= 2) < 1) return -.5 * (Math.sqrt(1 - k * k) - 1);
        return .5 * (Math.sqrt(1 - (k -= 2) * k) + 1);
      },
      elasticIn: function elasticIn(k) {
        var s, a = .1, p = .4;
        if (0 === k) return 0;
        if (1 === k) return 1;
        if (!a || a < 1) {
          a = 1;
          s = p / 4;
        } else s = p * Math.asin(1 / a) / (2 * Math.PI);
        return -a * Math.pow(2, 10 * (k -= 1)) * Math.sin((k - s) * (2 * Math.PI) / p);
      },
      elasticOut: function elasticOut(k) {
        var s, a = .1, p = .4;
        if (0 === k) return 0;
        if (1 === k) return 1;
        if (!a || a < 1) {
          a = 1;
          s = p / 4;
        } else s = p * Math.asin(1 / a) / (2 * Math.PI);
        return a * Math.pow(2, -10 * k) * Math.sin((k - s) * (2 * Math.PI) / p) + 1;
      },
      elasticInOut: function elasticInOut(k) {
        var s, a = .1, p = .4;
        if (0 === k) return 0;
        if (1 === k) return 1;
        if (!a || a < 1) {
          a = 1;
          s = p / 4;
        } else s = p * Math.asin(1 / a) / (2 * Math.PI);
        if ((k *= 2) < 1) return a * Math.pow(2, 10 * (k -= 1)) * Math.sin((k - s) * (2 * Math.PI) / p) * -.5;
        return a * Math.pow(2, -10 * (k -= 1)) * Math.sin((k - s) * (2 * Math.PI) / p) * .5 + 1;
      },
      backIn: function backIn(k) {
        var s = 1.70158;
        return k * k * ((s + 1) * k - s);
      },
      backOut: function backOut(k) {
        var s = 1.70158;
        return --k * k * ((s + 1) * k + s) + 1;
      },
      backInOut: function backInOut(k) {
        var s = 2.5949095;
        if ((k *= 2) < 1) return k * k * ((s + 1) * k - s) * .5;
        return .5 * ((k -= 2) * k * ((s + 1) * k + s) + 2);
      },
      bounceIn: function bounceIn(k) {
        return 1 - easing.bounceOut(1 - k);
      },
      bounceOut: function bounceOut(k) {
        return k < 1 / 2.75 ? 7.5625 * k * k : k < 2 / 2.75 ? 7.5625 * (k -= 1.5 / 2.75) * k + .75 : k < 2.5 / 2.75 ? 7.5625 * (k -= 2.25 / 2.75) * k + .9375 : 7.5625 * (k -= 2.625 / 2.75) * k + .984375;
      },
      bounceInOut: function bounceInOut(k) {
        if (k < .5) return .5 * easing.bounceIn(2 * k);
        return .5 * easing.bounceOut(2 * k - 1) + .5;
      },
      smooth: function smooth(t) {
        if (t <= 0) return 0;
        if (t >= 1) return 1;
        return t * t * (3 - 2 * t);
      },
      fade: function fade(t) {
        if (t <= 0) return 0;
        if (t >= 1) return 1;
        return t * t * t * (t * (6 * t - 15) + 10);
      }
    };
    function _makeOutIn(fnIn, fnOut) {
      return function(k) {
        if (k < .5) return fnOut(2 * k) / 2;
        return fnIn(2 * k - 1) / 2 + .5;
      };
    }
    easing.quadOutIn = _makeOutIn(easing.quadIn, easing.quadOut);
    easing.cubicOutIn = _makeOutIn(easing.cubicIn, easing.cubicOut);
    easing.quartOutIn = _makeOutIn(easing.quartIn, easing.quartOut);
    easing.quintOutIn = _makeOutIn(easing.quintIn, easing.quintOut);
    easing.sineOutIn = _makeOutIn(easing.sineIn, easing.sineOut);
    easing.expoOutIn = _makeOutIn(easing.expoIn, easing.expoOut);
    easing.circOutIn = _makeOutIn(easing.circIn, easing.circOut);
    easing.backOutIn = _makeOutIn(easing.backIn, easing.backOut);
    easing.bounceIn = function(k) {
      return 1 - easing.bounceOut(1 - k);
    };
    easing.bounceInOut = function(k) {
      if (k < .5) return .5 * easing.bounceIn(2 * k);
      return .5 * easing.bounceOut(2 * k - 1) + .5;
    };
    easing.bounceOutIn = _makeOutIn(easing.bounceIn, easing.bounceOut);
    cc.easing = module.exports = easing;
  }), {} ],
  9: [ (function(require, module, exports) {
    "use strict";
    require("./bezier");
    require("./easing");
    require("./types");
    require("./motion-path-helper");
    require("./animation-curves");
    require("./animation-clip");
    require("./animation-manager");
    require("./animation-state");
    require("./animation-animator");
  }), {
    "./animation-animator": 2,
    "./animation-clip": 3,
    "./animation-curves": 4,
    "./animation-manager": 5,
    "./animation-state": 6,
    "./bezier": 7,
    "./easing": 8,
    "./motion-path-helper": 10,
    "./types": 12
  } ],
  10: [ (function(require, module, exports) {
    "use strict";
    var DynamicAnimCurve = require("./animation-curves").DynamicAnimCurve;
    var computeRatioByType = require("./animation-curves").computeRatioByType;
    var bezier = require("./bezier").bezier;
    var binarySearch = require("../core/utils/binary-search").binarySearchEpsilon;
    var v2 = cc.v2;
    function Curve(points) {
      this.points = points || [];
      this.beziers = [];
      this.ratios = [];
      this.progresses = [];
      this.length = 0;
      this.computeBeziers();
    }
    Curve.prototype.computeBeziers = function() {
      this.beziers.length = 0;
      this.ratios.length = 0;
      this.progresses.length = 0;
      this.length = 0;
      var bezier;
      for (var i = 1; i < this.points.length; i++) {
        var startPoint = this.points[i - 1];
        var endPoint = this.points[i];
        bezier = new Bezier();
        bezier.start = startPoint.pos;
        bezier.startCtrlPoint = startPoint.out;
        bezier.end = endPoint.pos;
        bezier.endCtrlPoint = endPoint["in"];
        this.beziers.push(bezier);
        this.length += bezier.getLength();
      }
      var current = 0;
      for (var i = 0; i < this.beziers.length; i++) {
        bezier = this.beziers[i];
        this.ratios[i] = bezier.getLength() / this.length;
        this.progresses[i] = current += this.ratios[i];
      }
      return this.beziers;
    };
    function Bezier() {
      this.start = v2();
      this.end = v2();
      this.startCtrlPoint = v2();
      this.endCtrlPoint = v2();
    }
    Bezier.prototype.getPointAt = function(u) {
      var t = this.getUtoTmapping(u);
      return this.getPoint(t);
    };
    Bezier.prototype.getPoint = function(t) {
      var x = bezier(this.start.x, this.startCtrlPoint.x, this.endCtrlPoint.x, this.end.x, t);
      var y = bezier(this.start.y, this.startCtrlPoint.y, this.endCtrlPoint.y, this.end.y, t);
      return new v2(x, y);
    };
    Bezier.prototype.getLength = function() {
      var lengths = this.getLengths();
      return lengths[lengths.length - 1];
    };
    Bezier.prototype.getLengths = function(divisions) {
      divisions || (divisions = this.__arcLengthDivisions ? this.__arcLengthDivisions : 200);
      if (this.cacheArcLengths && this.cacheArcLengths.length === divisions + 1) return this.cacheArcLengths;
      var cache = [];
      var current, last = this.getPoint(0), vector = v2();
      var p, sum = 0;
      cache.push(0);
      for (p = 1; p <= divisions; p++) {
        current = this.getPoint(p / divisions);
        vector.x = last.x - current.x;
        vector.y = last.y - current.y;
        sum += vector.mag();
        cache.push(sum);
        last = current;
      }
      this.cacheArcLengths = cache;
      return cache;
    };
    Bezier.prototype.getUtoTmapping = function(u, distance) {
      var arcLengths = this.getLengths();
      var i = 0, il = arcLengths.length;
      var targetArcLength;
      targetArcLength = distance || u * arcLengths[il - 1];
      var low = 0, high = il - 1, comparison;
      while (low <= high) {
        i = Math.floor(low + (high - low) / 2);
        comparison = arcLengths[i] - targetArcLength;
        if (comparison < 0) {
          low = i + 1;
          continue;
        }
        if (comparison > 0) {
          high = i - 1;
          continue;
        }
        high = i;
        break;
      }
      i = high;
      if (arcLengths[i] === targetArcLength) {
        var t = i / (il - 1);
        return t;
      }
      var lengthBefore = arcLengths[i];
      var lengthAfter = arcLengths[i + 1];
      var segmentLength = lengthAfter - lengthBefore;
      var segmentFraction = (targetArcLength - lengthBefore) / segmentLength;
      var t = (i + segmentFraction) / (il - 1);
      return t;
    };
    function checkMotionPath(motionPath) {
      if (!Array.isArray(motionPath)) return false;
      for (var i = 0, l = motionPath.length; i < l; i++) {
        var controls = motionPath[i];
        if (!Array.isArray(controls) || 6 !== controls.length) return false;
      }
      return true;
    }
    function sampleMotionPaths(motionPaths, data, duration, fps, target) {
      function createControlPoints(array) {
        if (array instanceof cc.Vec2) return {
          in: array,
          pos: array,
          out: array
        };
        if (Array.isArray(array) && 6 === array.length) return {
          in: v2(array[2], array[3]),
          pos: v2(array[0], array[1]),
          out: v2(array[4], array[5])
        };
        return {
          in: cc.Vec2.ZERO,
          pos: cc.Vec2.ZERO,
          out: cc.Vec2.ZERO
        };
      }
      var values = data.values = data.values.map((function(value) {
        Array.isArray(value) && (value = 2 === value.length ? cc.v2(value[0], value[1]) : cc.v3(value[0], value[1], value[2]));
        return value;
      }));
      if (0 === motionPaths.length || 0 === values.length) return;
      var motionPathValid = false;
      for (var _i = 0; _i < motionPaths.length; _i++) {
        var _motionPath = motionPaths[_i];
        if (_motionPath && !checkMotionPath(_motionPath)) {
          cc.errorID(3904, target ? target.name : "", "position", _i);
          _motionPath = null;
        }
        if (_motionPath && _motionPath.length > 0) {
          motionPathValid = true;
          break;
        }
      }
      if (!motionPathValid) return;
      if (1 === values.length) return;
      var types = data.types;
      var ratios = data.ratios;
      var newValues = data.values = [];
      var newTypes = data.types = [];
      var newRatios = data.ratios = [];
      function addNewDatas(value, type, ratio) {
        newValues.push(value);
        newTypes.push(type);
        newRatios.push(ratio);
      }
      var startRatioOffset = 0;
      var EPSILON = 1e-6;
      var newType = DynamicAnimCurve.Linear;
      for (var i = 0, l = motionPaths.length; i < l - 1; i++) {
        var motionPath = motionPaths[i];
        var ratio = ratios[i];
        var nextRatio = ratios[i + 1];
        var betweenRatio = nextRatio - ratio;
        var value = values[i];
        var nextValue = values[i + 1];
        var type = types[i];
        var results = [];
        var progress = startRatioOffset / betweenRatio;
        var speed = 1 / (betweenRatio * duration * fps);
        var finalProgress;
        if (motionPath && motionPath.length > 0) {
          var points = [];
          points.push(createControlPoints(value));
          for (var j = 0, l2 = motionPath.length; j < l2; j++) {
            var controlPoints = createControlPoints(motionPath[j]);
            points.push(controlPoints);
          }
          points.push(createControlPoints(nextValue));
          var curve = new Curve(points);
          curve.computeBeziers();
          var progresses = curve.progresses;
          while (1 - progress > EPSILON) {
            finalProgress = progress;
            finalProgress = computeRatioByType(finalProgress, type);
            var pos, bezier, normal, length;
            if (finalProgress < 0) {
              bezier = curve.beziers[0];
              length = (0 - finalProgress) * bezier.getLength();
              normal = bezier.start.sub(bezier.endCtrlPoint).normalize();
              pos = bezier.start.add(normal.mul(length));
            } else if (finalProgress > 1) {
              bezier = curve.beziers[curve.beziers.length - 1];
              length = (finalProgress - 1) * bezier.getLength();
              normal = bezier.end.sub(bezier.startCtrlPoint).normalize();
              pos = bezier.end.add(normal.mul(length));
            } else {
              var bezierIndex = binarySearch(progresses, finalProgress);
              bezierIndex < 0 && (bezierIndex = ~bezierIndex);
              finalProgress -= bezierIndex > 0 ? progresses[bezierIndex - 1] : 0;
              finalProgress /= curve.ratios[bezierIndex];
              pos = curve.beziers[bezierIndex].getPointAt(finalProgress);
            }
            results.push(pos);
            progress += speed;
          }
        } else while (1 - progress > EPSILON) {
          finalProgress = progress;
          finalProgress = computeRatioByType(finalProgress, type);
          results.push(value.lerp(nextValue, finalProgress));
          progress += speed;
        }
        newType = "constant" === type ? type : DynamicAnimCurve.Linear;
        for (var j = 0, l2 = results.length; j < l2; j++) {
          var newRatio = ratio + startRatioOffset + speed * j * betweenRatio;
          addNewDatas(results[j], newType, newRatio);
        }
        startRatioOffset = Math.abs(progress - 1) > EPSILON ? (progress - 1) * betweenRatio : 0;
      }
      ratios[ratios.length - 1] !== newRatios[newRatios.length - 1] && addNewDatas(values[values.length - 1], newType, ratios[ratios.length - 1]);
    }
    false;
    module.exports = {
      sampleMotionPaths: sampleMotionPaths,
      Curve: Curve,
      Bezier: Bezier
    };
  }), {
    "../core/utils/binary-search": 204,
    "./animation-curves": 4,
    "./bezier": 7
  } ],
  11: [ (function(require, module, exports) {
    "use strict";
    var js = cc.js;
    var debug = require("../core/CCDebug");
    function Playable() {
      this._isPlaying = false;
      this._isPaused = false;
      this._stepOnce = false;
    }
    var prototype = Playable.prototype;
    js.get(prototype, "isPlaying", (function() {
      return this._isPlaying;
    }), true);
    js.get(prototype, "isPaused", (function() {
      return this._isPaused;
    }), true);
    var virtual = function virtual() {};
    prototype.onPlay = virtual;
    prototype.onPause = virtual;
    prototype.onResume = virtual;
    prototype.onStop = virtual;
    prototype.onError = virtual;
    prototype.play = function() {
      if (this._isPlaying) if (this._isPaused) {
        this._isPaused = false;
        this.onResume();
      } else this.onError(debug.getError(3912)); else {
        this._isPlaying = true;
        this.onPlay();
      }
    };
    prototype.stop = function() {
      if (this._isPlaying) {
        this._isPlaying = false;
        this.onStop();
        this._isPaused = false;
      }
    };
    prototype.pause = function() {
      if (this._isPlaying && !this._isPaused) {
        this._isPaused = true;
        this.onPause();
      }
    };
    prototype.resume = function() {
      if (this._isPlaying && this._isPaused) {
        this._isPaused = false;
        this.onResume();
      }
    };
    prototype.step = function() {
      this.pause();
      this._stepOnce = true;
      this._isPlaying || this.play();
    };
    module.exports = Playable;
  }), {
    "../core/CCDebug": 13
  } ],
  12: [ (function(require, module, exports) {
    "use strict";
    var WrapModeMask = {
      Loop: 2,
      ShouldWrap: 4,
      PingPong: 22,
      Reverse: 36
    };
    var WrapMode = cc.Enum({
      Default: 0,
      Normal: 1,
      Reverse: WrapModeMask.Reverse,
      Loop: WrapModeMask.Loop,
      LoopReverse: WrapModeMask.Loop | WrapModeMask.Reverse,
      PingPong: WrapModeMask.PingPong,
      PingPongReverse: WrapModeMask.PingPong | WrapModeMask.Reverse
    });
    cc.WrapMode = WrapMode;
    function WrappedInfo(info) {
      if (info) {
        this.set(info);
        return;
      }
      this.ratio = 0;
      this.time = 0;
      this.direction = 1;
      this.stopped = true;
      this.iterations = 0;
      this.frameIndex = void 0;
    }
    WrappedInfo.prototype.set = function(info) {
      this.ratio = info.ratio;
      this.time = info.time;
      this.direction = info.direction;
      this.stopped = info.stopped;
      this.iterations = info.iterations;
      this.frameIndex = info.frameIndex;
    };
    module.exports = {
      WrapModeMask: WrapModeMask,
      WrapMode: WrapMode,
      WrappedInfo: WrappedInfo
    };
  }), {} ],
  13: [ (function(require, module, exports) {
    "use strict";
    var utils = require("./platform/utils");
    var debugInfos = require("../../DebugInfos") || {};
    var ERROR_MAP_URL = "https://github.com/cocos-creator/engine/blob/master/EngineErrorMap.md";
    var logList;
    cc.log = cc.warn = cc.error = cc.assert = console.log.bind ? console.log.bind(console) : console.log;
    var resetDebugSetting = function resetDebugSetting(mode) {
      cc.log = cc.warn = cc.error = cc.assert = function() {};
      if (mode === DebugMode.NONE) return;
      if (mode > DebugMode.ERROR) {
        var logToWebPage = function logToWebPage(msg) {
          if (!cc.game.canvas) return;
          if (!logList) {
            var logDiv = document.createElement("Div");
            logDiv.setAttribute("id", "logInfoDiv");
            logDiv.setAttribute("width", "200");
            logDiv.setAttribute("height", cc.game.canvas.height);
            var logDivStyle = logDiv.style;
            logDivStyle.zIndex = "99999";
            logDivStyle.position = "absolute";
            logDivStyle.top = logDivStyle.left = "0";
            logList = document.createElement("textarea");
            logList.setAttribute("rows", "20");
            logList.setAttribute("cols", "30");
            logList.setAttribute("disabled", "true");
            var logListStyle = logList.style;
            logListStyle.backgroundColor = "transparent";
            logListStyle.borderBottom = "1px solid #cccccc";
            logListStyle.borderTopWidth = logListStyle.borderLeftWidth = logListStyle.borderRightWidth = "0px";
            logListStyle.borderTopStyle = logListStyle.borderLeftStyle = logListStyle.borderRightStyle = "none";
            logListStyle.padding = "0px";
            logListStyle.margin = 0;
            logDiv.appendChild(logList);
            cc.game.canvas.parentNode.appendChild(logDiv);
          }
          logList.value = logList.value + msg + "\r\n";
          logList.scrollTop = logList.scrollHeight;
        };
        cc.error = function() {
          logToWebPage("ERROR :  " + cc.js.formatStr.apply(null, arguments));
        };
        cc.assert = function(cond, msg) {
          if (!cond && msg) {
            msg = cc.js.formatStr.apply(null, cc.js.shiftArguments.apply(null, arguments));
            logToWebPage("ASSERT: " + msg);
          }
        };
        mode !== DebugMode.ERROR_FOR_WEB_PAGE && (cc.warn = function() {
          logToWebPage("WARN :  " + cc.js.formatStr.apply(null, arguments));
        });
        mode === DebugMode.INFO_FOR_WEB_PAGE && (cc.log = function() {
          logToWebPage(cc.js.formatStr.apply(null, arguments));
        });
      } else if (console && console.log.apply) {
        console.error || (console.error = console.log);
        console.warn || (console.warn = console.log);
        false;
        console.error.bind ? cc.error = console.error.bind(console) : cc.error = (false, 
        function() {
          return console.error.apply(console, arguments);
        });
        cc.assert = function(cond, msg) {
          if (!cond) {
            msg && (msg = cc.js.formatStr.apply(null, cc.js.shiftArguments.apply(null, arguments)));
            false;
            false;
            throw new Error(msg);
          }
        };
      }
      if (mode !== DebugMode.ERROR) {
        false;
        console.warn.bind ? cc.warn = console.warn.bind(console) : cc.warn = (false, function() {
          return console.warn.apply(console, arguments);
        });
      }
      false;
      if (mode === DebugMode.INFO) {
        false, false;
        console.log.bind ? cc.log = console.log.bind(console) : cc.log = function() {
          return console.log.apply(console, arguments);
        };
      }
    };
    cc._throw = function(error) {
      utils.callInNextTick((function() {
        throw error;
      }));
    };
    function getTypedFormatter(type) {
      return function() {
        var id = arguments[0];
        var msg = debugInfos[id] || "unknown id";
        if (1 === arguments.length) return msg;
        if (2 === arguments.length) return cc.js.formatStr(msg, arguments[1]);
        var argsArray = cc.js.shiftArguments.apply(null, arguments);
        return cc.js.formatStr.apply(null, [ msg ].concat(argsArray));
      };
    }
    var logFormatter = getTypedFormatter("Log");
    cc.logID = function() {
      cc.log(logFormatter.apply(null, arguments));
    };
    var warnFormatter = getTypedFormatter("Warning");
    cc.warnID = function() {
      cc.warn(warnFormatter.apply(null, arguments));
    };
    var errorFormatter = getTypedFormatter("Error");
    cc.errorID = function() {
      cc.error(errorFormatter.apply(null, arguments));
    };
    var assertFormatter = getTypedFormatter("Assert");
    cc.assertID = function(cond) {
      if (cond) return;
      cc.assert(false, assertFormatter.apply(null, cc.js.shiftArguments.apply(null, arguments)));
    };
    var DebugMode = cc.Enum({
      NONE: 0,
      INFO: 1,
      WARN: 2,
      ERROR: 3,
      INFO_FOR_WEB_PAGE: 4,
      WARN_FOR_WEB_PAGE: 5,
      ERROR_FOR_WEB_PAGE: 6
    });
    module.exports = cc.debug = {
      DebugMode: DebugMode,
      _resetDebugSetting: resetDebugSetting,
      getError: getTypedFormatter("ERROR"),
      isDisplayStats: function isDisplayStats() {
        return !!cc.profiler && cc.profiler.isShowingStats();
      },
      setDisplayStats: function setDisplayStats(displayStats) {
        if (cc.profiler && cc.game.renderType !== cc.game.RENDER_TYPE_CANVAS) {
          displayStats ? cc.profiler.showStats() : cc.profiler.hideStats();
          cc.game.config.showFPS = !!displayStats;
        }
      }
    };
  }), {
    "../../DebugInfos": 1,
    "./platform/utils": 164
  } ],
  14: [ (function(require, module, exports) {
    "use strict";
    var EventTarget = require("./event/event-target");
    var ComponentScheduler = require("./component-scheduler");
    var NodeActivator = require("./node-activator");
    var Obj = require("./platform/CCObject");
    var game = require("./CCGame");
    var renderer = require("./renderer");
    var eventManager = require("./event-manager");
    var Scheduler = require("./CCScheduler");
    cc.Director = function() {
      EventTarget.call(this);
      this._paused = false;
      this._purgeDirectorInNextLoop = false;
      this._winSizeInPoints = null;
      this._scene = null;
      this._loadingScene = "";
      this._totalFrames = 0;
      this._lastUpdate = 0;
      this._deltaTime = 0;
      this._startTime = 0;
      this._maxParticleDeltaTime = 0;
      this._scheduler = null;
      this._compScheduler = null;
      this._nodeActivator = null;
      this._actionManager = null;
      var self = this;
      game.on(game.EVENT_SHOW, (function() {
        self._lastUpdate = performance.now();
      }));
      game.once(game.EVENT_ENGINE_INITED, this.init, this);
    };
    cc.Director.prototype = {
      constructor: cc.Director,
      init: function init() {
        this._totalFrames = 0;
        this._lastUpdate = performance.now();
        this._startTime = this._lastUpdate;
        this._paused = false;
        this._purgeDirectorInNextLoop = false;
        this._winSizeInPoints = cc.size(0, 0);
        this._scheduler = new Scheduler();
        if (cc.ActionManager) {
          this._actionManager = new cc.ActionManager();
          this._scheduler.scheduleUpdate(this._actionManager, Scheduler.PRIORITY_SYSTEM, false);
        } else this._actionManager = null;
        this.sharedInit();
        return true;
      },
      sharedInit: function sharedInit() {
        this._compScheduler = new ComponentScheduler();
        this._nodeActivator = new NodeActivator();
        eventManager && eventManager.setEnabled(true);
        if (cc.AnimationManager) {
          this._animationManager = new cc.AnimationManager();
          this._scheduler.scheduleUpdate(this._animationManager, Scheduler.PRIORITY_SYSTEM, false);
        } else this._animationManager = null;
        if (cc.CollisionManager) {
          this._collisionManager = new cc.CollisionManager();
          this._scheduler.scheduleUpdate(this._collisionManager, Scheduler.PRIORITY_SYSTEM, false);
        } else this._collisionManager = null;
        if (cc.PhysicsManager) {
          this._physicsManager = new cc.PhysicsManager();
          this._scheduler.scheduleUpdate(this._physicsManager, Scheduler.PRIORITY_SYSTEM, false);
        } else this._physicsManager = null;
        if (cc.Physics3DManager) {
          this._physics3DManager = new cc.Physics3DManager();
          this._scheduler.scheduleUpdate(this._physics3DManager, Scheduler.PRIORITY_SYSTEM, false);
        } else this._physics3DManager = null;
        cc._widgetManager && cc._widgetManager.init(this);
      },
      calculateDeltaTime: function calculateDeltaTime(now) {
        now || (now = performance.now());
        this._deltaTime = now > this._lastUpdate ? (now - this._lastUpdate) / 1e3 : 0;
        (true, this._deltaTime > 1) && (this._deltaTime = 1 / 60);
        this._lastUpdate = now;
      },
      convertToGL: function convertToGL(uiPoint) {
        var container = game.container;
        var view = cc.view;
        var box = container.getBoundingClientRect();
        var left = box.left + window.pageXOffset - container.clientLeft;
        var top = box.top + window.pageYOffset - container.clientTop;
        var x = view._devicePixelRatio * (uiPoint.x - left);
        var y = view._devicePixelRatio * (top + box.height - uiPoint.y);
        return view._isRotated ? cc.v2(view._viewportRect.width - y, x) : cc.v2(x, y);
      },
      convertToUI: function convertToUI(glPoint) {
        var container = game.container;
        var view = cc.view;
        var box = container.getBoundingClientRect();
        var left = box.left + window.pageXOffset - container.clientLeft;
        var top = box.top + window.pageYOffset - container.clientTop;
        var uiPoint = cc.v2(0, 0);
        if (view._isRotated) {
          uiPoint.x = left + glPoint.y / view._devicePixelRatio;
          uiPoint.y = top + box.height - (view._viewportRect.width - glPoint.x) / view._devicePixelRatio;
        } else {
          uiPoint.x = left + glPoint.x * view._devicePixelRatio;
          uiPoint.y = top + box.height - glPoint.y * view._devicePixelRatio;
        }
        return uiPoint;
      },
      end: function end() {
        this._purgeDirectorInNextLoop = true;
      },
      getWinSize: function getWinSize() {
        return cc.size(cc.winSize);
      },
      getWinSizeInPixels: function getWinSizeInPixels() {
        return cc.size(cc.winSize);
      },
      pause: function pause() {
        if (this._paused) return;
        this._paused = true;
      },
      purgeCachedData: function purgeCachedData() {
        cc.assetManager.releaseAll();
      },
      purgeDirector: function purgeDirector() {
        this._scheduler.unscheduleAll();
        this._compScheduler.unscheduleAll();
        this._nodeActivator.reset();
        eventManager && eventManager.setEnabled(false);
        true;
        cc.isValid(this._scene) && this._scene.destroy();
        this._scene = null;
        cc.renderer.clear();
        cc.assetManager.builtins.clear();
        cc.game.pause();
        cc.assetManager.releaseAll();
      },
      reset: function reset() {
        this.purgeDirector();
        eventManager && eventManager.setEnabled(true);
        this._actionManager && this._scheduler.scheduleUpdate(this._actionManager, cc.Scheduler.PRIORITY_SYSTEM, false);
        this._animationManager && this._scheduler.scheduleUpdate(this._animationManager, cc.Scheduler.PRIORITY_SYSTEM, false);
        this._collisionManager && this._scheduler.scheduleUpdate(this._collisionManager, cc.Scheduler.PRIORITY_SYSTEM, false);
        this._physicsManager && this._scheduler.scheduleUpdate(this._physicsManager, cc.Scheduler.PRIORITY_SYSTEM, false);
        cc.game.resume();
      },
      runSceneImmediate: function runSceneImmediate(scene, onBeforeLoadScene, onLaunched) {
        cc.assertID(scene instanceof cc.Scene || scene instanceof cc.SceneAsset, 1216);
        scene instanceof cc.SceneAsset && (scene = scene.scene);
        (true, true) && console.time("InitScene");
        scene._load();
        (true, true) && console.timeEnd("InitScene");
        (true, true) && console.time("AttachPersist");
        var persistNodeList = Object.keys(game._persistRootNodes).map((function(x) {
          return game._persistRootNodes[x];
        }));
        for (var i = 0; i < persistNodeList.length; i++) {
          var node = persistNodeList[i];
          var existNode = scene.getChildByUuid(node.uuid);
          if (existNode) {
            var index = existNode.getSiblingIndex();
            existNode._destroyImmediate();
            scene.insertChild(node, index);
          } else node.parent = scene;
        }
        (true, true) && console.timeEnd("AttachPersist");
        var oldScene = this._scene;
        true;
        (true, true) && console.time("AutoRelease");
        cc.assetManager._releaseManager._autoRelease(oldScene, scene, persistNodeList);
        (true, true) && console.timeEnd("AutoRelease");
        (true, true) && console.time("Destroy");
        cc.isValid(oldScene) && oldScene.destroy();
        this._scene = null;
        Obj._deferredDestroy();
        (true, true) && console.timeEnd("Destroy");
        onBeforeLoadScene && onBeforeLoadScene();
        this.emit(cc.Director.EVENT_BEFORE_SCENE_LAUNCH, scene);
        this._scene = scene;
        (true, true) && console.time("Activate");
        scene._activate();
        (true, true) && console.timeEnd("Activate");
        cc.game.resume();
        onLaunched && onLaunched(null, scene);
        this.emit(cc.Director.EVENT_AFTER_SCENE_LAUNCH, scene);
      },
      runScene: function runScene(scene, onBeforeLoadScene, onLaunched) {
        cc.assertID(scene, 1205);
        cc.assertID(scene instanceof cc.Scene || scene instanceof cc.SceneAsset, 1216);
        scene instanceof cc.SceneAsset && (scene = scene.scene);
        scene._load();
        this.once(cc.Director.EVENT_AFTER_DRAW, (function() {
          this.runSceneImmediate(scene, onBeforeLoadScene, onLaunched);
        }), this);
      },
      loadScene: function loadScene(sceneName, onLaunched, _onUnloaded) {
        if (this._loadingScene) {
          cc.warnID(1208, sceneName, this._loadingScene);
          return false;
        }
        var bundle = cc.assetManager.bundles.find((function(bundle) {
          return bundle.getSceneInfo(sceneName);
        }));
        if (bundle) {
          this.emit(cc.Director.EVENT_BEFORE_SCENE_LOADING, sceneName);
          this._loadingScene = sceneName;
          var self = this;
          console.time("LoadScene " + sceneName);
          bundle.loadScene(sceneName, (function(err, scene) {
            console.timeEnd("LoadScene " + sceneName);
            self._loadingScene = "";
            if (!err) {
              self.runSceneImmediate(scene, _onUnloaded, onLaunched);
              return;
            }
            err = "Failed to load scene: " + err;
            cc.error(err);
            onLaunched && onLaunched(err);
          }));
          return true;
        }
        cc.errorID(1209, sceneName);
        return false;
      },
      preloadScene: function preloadScene(sceneName, onProgress, onLoaded) {
        var bundle = cc.assetManager.bundles.find((function(bundle) {
          return bundle.getSceneInfo(sceneName);
        }));
        if (!bundle) {
          cc.errorID(1209, sceneName);
          return null;
        }
        bundle.preloadScene(sceneName, null, onProgress, onLoaded);
      },
      resume: function resume() {
        if (!this._paused) return;
        this._lastUpdate = performance.now();
        this._lastUpdate || cc.logID(1200);
        this._paused = false;
        this._deltaTime = 0;
      },
      setDepthTest: function setDepthTest(value) {
        if (!cc.Camera.main) return;
        cc.Camera.main.depth = !!value;
      },
      setClearColor: function setClearColor(clearColor) {
        if (!cc.Camera.main) return;
        cc.Camera.main.backgroundColor = clearColor;
      },
      getRunningScene: function getRunningScene() {
        return this._scene;
      },
      getScene: function getScene() {
        return this._scene;
      },
      getAnimationInterval: function getAnimationInterval() {
        return 1e3 / game.getFrameRate();
      },
      setAnimationInterval: function setAnimationInterval(value) {
        game.setFrameRate(Math.round(1e3 / value));
      },
      getDeltaTime: function getDeltaTime() {
        return this._deltaTime;
      },
      getTotalTime: function getTotalTime() {
        return performance.now() - this._startTime;
      },
      getTotalFrames: function getTotalFrames() {
        return this._totalFrames;
      },
      isPaused: function isPaused() {
        return this._paused;
      },
      getScheduler: function getScheduler() {
        return this._scheduler;
      },
      setScheduler: function setScheduler(scheduler) {
        this._scheduler !== scheduler && (this._scheduler = scheduler);
      },
      getActionManager: function getActionManager() {
        return this._actionManager;
      },
      setActionManager: function setActionManager(actionManager) {
        if (this._actionManager !== actionManager) {
          this._actionManager && this._scheduler.unscheduleUpdate(this._actionManager);
          this._actionManager = actionManager;
          this._scheduler.scheduleUpdate(this._actionManager, cc.Scheduler.PRIORITY_SYSTEM, false);
        }
      },
      getAnimationManager: function getAnimationManager() {
        return this._animationManager;
      },
      getCollisionManager: function getCollisionManager() {
        return this._collisionManager;
      },
      getPhysicsManager: function getPhysicsManager() {
        return this._physicsManager;
      },
      getPhysics3DManager: function getPhysics3DManager() {
        return this._physics3DManager;
      },
      startAnimation: function startAnimation() {
        cc.game.resume();
      },
      stopAnimation: function stopAnimation() {
        cc.game.pause();
      },
      _resetDeltaTime: function _resetDeltaTime() {
        this._lastUpdate = performance.now();
        this._deltaTime = 0;
      },
      mainLoop: function(now) {
        if (this._purgeDirectorInNextLoop) {
          this._purgeDirectorInNextLoop = false;
          this.purgeDirector();
        } else {
          this.calculateDeltaTime(now);
          if (!this._paused) {
            this.emit(cc.Director.EVENT_BEFORE_UPDATE);
            this._compScheduler.startPhase();
            this._compScheduler.updatePhase(this._deltaTime);
            this._scheduler.update(this._deltaTime);
            this._compScheduler.lateUpdatePhase(this._deltaTime);
            this.emit(cc.Director.EVENT_AFTER_UPDATE);
            Obj._deferredDestroy();
          }
          this.emit(cc.Director.EVENT_BEFORE_DRAW);
          renderer.render(this._scene, this._deltaTime);
          this.emit(cc.Director.EVENT_AFTER_DRAW);
          eventManager.frameUpdateListeners();
          this._totalFrames++;
        }
      },
      __fastOn: function __fastOn(type, callback, target) {
        this.on(type, callback, target);
      },
      __fastOff: function __fastOff(type, callback, target) {
        this.off(type, callback, target);
      }
    };
    cc.js.addon(cc.Director.prototype, EventTarget.prototype);
    cc.Director.EVENT_PROJECTION_CHANGED = "director_projection_changed";
    cc.Director.EVENT_BEFORE_SCENE_LOADING = "director_before_scene_loading";
    cc.Director.EVENT_BEFORE_SCENE_LAUNCH = "director_before_scene_launch";
    cc.Director.EVENT_AFTER_SCENE_LAUNCH = "director_after_scene_launch";
    cc.Director.EVENT_BEFORE_UPDATE = "director_before_update";
    cc.Director.EVENT_AFTER_UPDATE = "director_after_update";
    cc.Director.EVENT_BEFORE_VISIT = "director_before_draw";
    cc.Director.EVENT_AFTER_VISIT = "director_before_draw";
    cc.Director.EVENT_BEFORE_DRAW = "director_before_draw";
    cc.Director.EVENT_AFTER_DRAW = "director_after_draw";
    cc.Director.PROJECTION_2D = 0;
    cc.Director.PROJECTION_3D = 1;
    cc.Director.PROJECTION_CUSTOM = 3;
    cc.Director.PROJECTION_DEFAULT = cc.Director.PROJECTION_2D;
    cc.Director.EVENT_BEFORE_PHYSICS = "director_before_physics";
    cc.Director.EVENT_AFTER_PHYSICS = "director_after_physics";
    cc.director = new cc.Director();
    module.exports = cc.director;
  }), {
    "./CCGame": 15,
    "./CCScheduler": 19,
    "./component-scheduler": 85,
    "./event-manager": 103,
    "./event/event-target": 105,
    "./node-activator": 114,
    "./platform/CCObject": 147,
    "./renderer": 171
  } ],
  15: [ (function(require, module, exports) {
    "use strict";
    var EventTarget = require("./event/event-target");
    require("../audio/CCAudioEngine");
    var debug = require("./CCDebug");
    var renderer = require("./renderer/index.js");
    var dynamicAtlasManager = require("../core/renderer/utils/dynamic-atlas/manager");
    var game = {
      EVENT_HIDE: "game_on_hide",
      EVENT_SHOW: "game_on_show",
      EVENT_RESTART: "game_on_restart",
      EVENT_GAME_INITED: "game_inited",
      EVENT_ENGINE_INITED: "engine_inited",
      EVENT_RENDERER_INITED: "engine_inited",
      RENDER_TYPE_CANVAS: 0,
      RENDER_TYPE_WEBGL: 1,
      RENDER_TYPE_OPENGL: 2,
      _persistRootNodes: {},
      _paused: true,
      _configLoaded: false,
      _isCloning: false,
      _prepared: false,
      _rendererInitialized: false,
      _renderContext: null,
      _intervalId: null,
      _lastTime: null,
      _frameTime: null,
      frame: null,
      container: null,
      canvas: null,
      renderType: -1,
      config: null,
      onStart: null,
      setFrameRate: function setFrameRate(frameRate) {
        var config = this.config;
        config.frameRate = frameRate;
        this._intervalId && window.cancelAnimFrame(this._intervalId);
        this._intervalId = 0;
        this._paused = true;
        this._setAnimFrame();
        this._runMainLoop();
      },
      getFrameRate: function getFrameRate() {
        return this.config.frameRate;
      },
      step: function step() {
        cc.director.mainLoop();
      },
      pause: function pause() {
        if (this._paused) return;
        this._paused = true;
        cc.audioEngine && cc.audioEngine._break();
        this._intervalId && window.cancelAnimFrame(this._intervalId);
        this._intervalId = 0;
      },
      resume: function resume() {
        if (!this._paused) return;
        this._paused = false;
        cc.audioEngine && cc.audioEngine._restore();
        cc.director._resetDeltaTime();
        this._runMainLoop();
      },
      isPaused: function isPaused() {
        return this._paused;
      },
      restart: function restart() {
        cc.director.once(cc.Director.EVENT_AFTER_DRAW, (function() {
          for (var id in game._persistRootNodes) game.removePersistRootNode(game._persistRootNodes[id]);
          cc.director.getScene().destroy();
          cc.Object._deferredDestroy();
          cc.audioEngine && cc.audioEngine.uncacheAll();
          cc.director.reset();
          game.pause();
          cc.assetManager.builtins.init((function() {
            game.onStart();
            game.emit(game.EVENT_RESTART);
          }));
        }));
      },
      end: function end() {
        close();
      },
      _initEngine: function _initEngine() {
        if (this._rendererInitialized) return;
        this._initRenderer();
        true;
        this._initEvents();
        this.emit(this.EVENT_ENGINE_INITED);
      },
      _loadPreviewScript: function _loadPreviewScript(cb) {
        false;
        cb();
      },
      _prepareFinished: function _prepareFinished(cb) {
        var _this = this;
        this._initEngine();
        this._setAnimFrame();
        cc.assetManager.builtins.init((function() {
          console.log("Cocos Creator v" + cc.ENGINE_VERSION);
          _this._prepared = true;
          _this._runMainLoop();
          _this.emit(_this.EVENT_GAME_INITED);
          cb && cb();
        }));
      },
      eventTargetOn: EventTarget.prototype.on,
      eventTargetOnce: EventTarget.prototype.once,
      on: function on(type, callback, target, once) {
        this._prepared && type === this.EVENT_ENGINE_INITED || !this._paused && type === this.EVENT_GAME_INITED ? callback.call(target) : this.eventTargetOn(type, callback, target, once);
      },
      once: function once(type, callback, target) {
        this._prepared && type === this.EVENT_ENGINE_INITED || !this._paused && type === this.EVENT_GAME_INITED ? callback.call(target) : this.eventTargetOnce(type, callback, target);
      },
      prepare: function prepare(cb) {
        var _this2 = this;
        if (this._prepared) {
          cb && cb();
          return;
        }
        this._loadPreviewScript((function() {
          _this2._prepareFinished(cb);
        }));
      },
      run: function run(config, onStart) {
        this._initConfig(config);
        this.onStart = onStart;
        this.prepare(game.onStart && game.onStart.bind(game));
      },
      addPersistRootNode: function addPersistRootNode(node) {
        if (!cc.Node.isNode(node) || !node.uuid) {
          cc.warnID(3800);
          return;
        }
        var id = node.uuid;
        if (!this._persistRootNodes[id]) {
          var scene = cc.director._scene;
          if (cc.isValid(scene)) if (node.parent) {
            if (!(node.parent instanceof cc.Scene)) {
              cc.warnID(3801);
              return;
            }
            if (node.parent !== scene) {
              cc.warnID(3802);
              return;
            }
          } else node.parent = scene;
          this._persistRootNodes[id] = node;
          node._persistNode = true;
          cc.assetManager._releaseManager._addPersistNodeRef(node);
        }
      },
      removePersistRootNode: function removePersistRootNode(node) {
        var id = node.uuid || "";
        if (node === this._persistRootNodes[id]) {
          delete this._persistRootNodes[id];
          node._persistNode = false;
          cc.assetManager._releaseManager._removePersistNodeRef(node);
        }
      },
      isPersistRootNode: function isPersistRootNode(node) {
        return node._persistNode;
      },
      _setAnimFrame: function _setAnimFrame() {
        this._lastTime = performance.now();
        var frameRate = game.config.frameRate;
        this._frameTime = 1e3 / frameRate;
        cc.director._maxParticleDeltaTime = this._frameTime / 1e3 * 2;
        false, false;
        if (60 !== frameRate && 30 !== frameRate) {
          window.requestAnimFrame = this._stTime;
          window.cancelAnimFrame = this._ctTime;
        } else {
          window.requestAnimFrame = window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame || this._stTime;
          window.cancelAnimFrame = window.cancelAnimationFrame || window.cancelRequestAnimationFrame || window.msCancelRequestAnimationFrame || window.mozCancelRequestAnimationFrame || window.oCancelRequestAnimationFrame || window.webkitCancelRequestAnimationFrame || window.msCancelAnimationFrame || window.mozCancelAnimationFrame || window.webkitCancelAnimationFrame || window.oCancelAnimationFrame || this._ctTime;
        }
      },
      _stTime: function _stTime(callback) {
        var currTime = performance.now();
        var timeToCall = Math.max(0, game._frameTime - (currTime - game._lastTime));
        var id = window.setTimeout((function() {
          callback();
        }), timeToCall);
        game._lastTime = currTime + timeToCall;
        return id;
      },
      _ctTime: function _ctTime(id) {
        window.clearTimeout(id);
      },
      _runMainLoop: function _runMainLoop() {
        false;
        if (!this._prepared) return;
        var self = this, _callback, config = self.config, director = cc.director, skip = true, frameRate = config.frameRate;
        debug.setDisplayStats(config.showFPS);
        _callback = function callback(now) {
          if (!self._paused) {
            self._intervalId = window.requestAnimFrame(_callback);
            if ((true, true) && 30 === frameRate && (skip = !skip)) return;
            director.mainLoop(now);
          }
        };
        self._intervalId = window.requestAnimFrame(_callback);
        self._paused = false;
      },
      _initConfig: function _initConfig(config) {
        "number" !== typeof config.debugMode && (config.debugMode = 0);
        config.exposeClassName = !!config.exposeClassName;
        "number" !== typeof config.frameRate && (config.frameRate = 60);
        var renderMode = config.renderMode;
        ("number" !== typeof renderMode || renderMode > 2 || renderMode < 0) && (config.renderMode = 0);
        "boolean" !== typeof config.registerSystemEvent && (config.registerSystemEvent = true);
        config.showFPS = 1 !== renderMode && !!config.showFPS;
        this.collisionMatrix = config.collisionMatrix || [];
        this.groupList = config.groupList || [];
        debug._resetDebugSetting(config.debugMode);
        this.config = config;
        this._configLoaded = true;
      },
      _determineRenderType: function _determineRenderType() {
        var config = this.config, userRenderMode = parseInt(config.renderMode) || 0;
        this.renderType = this.RENDER_TYPE_CANVAS;
        var supportRender = false;
        if (0 === userRenderMode) {
          if (cc.sys.capabilities["opengl"]) {
            this.renderType = this.RENDER_TYPE_WEBGL;
            supportRender = true;
          } else if (cc.sys.capabilities["canvas"]) {
            this.renderType = this.RENDER_TYPE_CANVAS;
            supportRender = true;
          }
        } else if (1 === userRenderMode && cc.sys.capabilities["canvas"]) {
          this.renderType = this.RENDER_TYPE_CANVAS;
          supportRender = true;
        } else if (2 === userRenderMode && cc.sys.capabilities["opengl"]) {
          this.renderType = this.RENDER_TYPE_WEBGL;
          supportRender = true;
        }
        if (!supportRender) throw new Error(debug.getError(3820, userRenderMode));
      },
      _initRenderer: function _initRenderer() {
        if (this._rendererInitialized) return;
        var el = this.config.id, width, height, localCanvas, localContainer;
        false, false;
        var addClass = function addClass(element, name) {
          var hasClass = (" " + element.className + " ").indexOf(" " + name + " ") > -1;
          if (!hasClass) {
            element.className && (element.className += " ");
            element.className += name;
          }
        };
        var element = el instanceof HTMLElement ? el : document.querySelector(el) || document.querySelector("#" + el);
        if ("CANVAS" === element.tagName) {
          width = element.width;
          height = element.height;
          this.canvas = localCanvas = element;
          this.container = localContainer = document.createElement("DIV");
          localCanvas.parentNode && localCanvas.parentNode.insertBefore(localContainer, localCanvas);
        } else {
          "DIV" !== element.tagName && cc.warnID(3819);
          width = element.clientWidth;
          height = element.clientHeight;
          this.canvas = localCanvas = document.createElement("CANVAS");
          this.container = localContainer = document.createElement("DIV");
          element.appendChild(localContainer);
        }
        localContainer.setAttribute("id", "Cocos2dGameContainer");
        localContainer.appendChild(localCanvas);
        this.frame = localContainer.parentNode === document.body ? document.documentElement : localContainer.parentNode;
        addClass(localCanvas, "gameCanvas");
        localCanvas.setAttribute("width", width || 480);
        localCanvas.setAttribute("height", height || 320);
        localCanvas.setAttribute("tabindex", 99);
        this._determineRenderType();
        if (this.renderType === this.RENDER_TYPE_WEBGL) {
          var opts = {
            stencil: true,
            antialias: cc.macro.ENABLE_WEBGL_ANTIALIAS,
            alpha: cc.macro.ENABLE_TRANSPARENT_CANVAS
          };
          renderer.initWebGL(localCanvas, opts);
          this._renderContext = renderer.device._gl;
          !cc.macro.CLEANUP_IMAGE_CACHE && dynamicAtlasManager && (dynamicAtlasManager.enabled = true);
        }
        if (!this._renderContext) {
          this.renderType = this.RENDER_TYPE_CANVAS;
          renderer.initCanvas(localCanvas);
          this._renderContext = renderer.device._ctx;
        }
        this.canvas.oncontextmenu = function() {
          if (!cc._isContextMenuEnable) return false;
        };
        this._rendererInitialized = true;
      },
      _initEvents: function _initEvents() {
        var win = window, hiddenPropName;
        this.config.registerSystemEvent && cc.internal.inputManager.registerSystemEvent(this.canvas);
        "undefined" !== typeof document.hidden ? hiddenPropName = "hidden" : "undefined" !== typeof document.mozHidden ? hiddenPropName = "mozHidden" : "undefined" !== typeof document.msHidden ? hiddenPropName = "msHidden" : "undefined" !== typeof document.webkitHidden && (hiddenPropName = "webkitHidden");
        var hidden = false;
        function onHidden() {
          if (!hidden) {
            hidden = true;
            game.emit(game.EVENT_HIDE);
          }
        }
        function onShown(arg0, arg1, arg2, arg3, arg4) {
          if (hidden) {
            hidden = false;
            game.emit(game.EVENT_SHOW, arg0, arg1, arg2, arg3, arg4);
          }
        }
        if (hiddenPropName) {
          var changeList = [ "visibilitychange", "mozvisibilitychange", "msvisibilitychange", "webkitvisibilitychange", "qbrowserVisibilityChange" ];
          for (var i = 0; i < changeList.length; i++) document.addEventListener(changeList[i], (function(event) {
            var visible = document[hiddenPropName];
            visible = visible || event["hidden"];
            visible ? onHidden() : onShown();
          }));
        } else {
          win.addEventListener("blur", onHidden);
          win.addEventListener("focus", onShown);
        }
        navigator.userAgent.indexOf("MicroMessenger") > -1 && (win.onfocus = onShown);
        if ("onpageshow" in window && "onpagehide" in window) {
          win.addEventListener("pagehide", onHidden);
          win.addEventListener("pageshow", onShown);
          document.addEventListener("pagehide", onHidden);
          document.addEventListener("pageshow", onShown);
        }
        this.on(game.EVENT_HIDE, (function() {
          game.pause();
        }));
        this.on(game.EVENT_SHOW, (function() {
          game.resume();
        }));
      }
    };
    EventTarget.call(game);
    cc.js.addon(game, EventTarget.prototype);
    cc.game = module.exports = game;
  }), {
    "../audio/CCAudioEngine": void 0,
    "../core/renderer/utils/dynamic-atlas/manager": void 0,
    "./CCDebug": 13,
    "./event/event-target": 105,
    "./renderer/index.js": 171
  } ],
  16: [ (function(require, module, exports) {
    "use strict";
    var _valueTypes = require("./value-types");
    var BaseNode = require("./utils/base-node");
    var PrefabHelper = require("./utils/prefab-helper");
    var nodeMemPool = require("./utils/trans-pool").NodeMemPool;
    var AffineTrans = require("./utils/affine-transform");
    var eventManager = require("./event-manager");
    var macro = require("./platform/CCMacro");
    var js = require("./platform/js");
    var Event = require("./event/event");
    var EventTarget = require("./event/event-target");
    var RenderFlow = require("./renderer/render-flow");
    var Flags = cc.Object.Flags;
    var Destroying = Flags.Destroying;
    var ERR_INVALID_NUMBER = false;
    var ONE_DEGREE = Math.PI / 180;
    var ActionManagerExist = !!cc.ActionManager;
    var emptyFunc = function emptyFunc() {};
    var _gwpVec3 = new _valueTypes.Vec3();
    var _gwpQuat = new _valueTypes.Quat();
    var _tpVec3a = new _valueTypes.Vec3();
    var _tpVec3b = new _valueTypes.Vec3();
    var _tpQuata = new _valueTypes.Quat();
    var _tpQuatb = new _valueTypes.Quat();
    var _swpVec3 = new _valueTypes.Vec3();
    var _gwsVec3 = new _valueTypes.Vec3();
    var _swsVec3 = new _valueTypes.Vec3();
    var _gwrtVec3a = new _valueTypes.Vec3();
    var _gwrtVec3b = new _valueTypes.Vec3();
    var _gwrtQuata = new _valueTypes.Quat();
    var _gwrtQuatb = new _valueTypes.Quat();
    var _laVec3 = new _valueTypes.Vec3();
    var _laQuat = new _valueTypes.Quat();
    var _urfVec3 = new _valueTypes.Vec3();
    var _urfQuat = new _valueTypes.Quat();
    var _htVec3a = new _valueTypes.Vec3();
    var _htVec3b = new _valueTypes.Vec3();
    var _gwrQuat = new _valueTypes.Quat();
    var _swrQuat = new _valueTypes.Quat();
    var _quata = new _valueTypes.Quat();
    var _mat4_temp = cc.mat4();
    var _vec3_temp = new _valueTypes.Vec3();
    var _cachedArray = new Array(16);
    _cachedArray.length = 0;
    var POSITION_ON = 1;
    var SCALE_ON = 2;
    var ROTATION_ON = 4;
    var SIZE_ON = 8;
    var ANCHOR_ON = 16;
    var COLOR_ON = 32;
    var BuiltinGroupIndex = cc.Enum({
      DEBUG: 31
    });
    var LocalDirtyFlag = cc.Enum({
      POSITION: 1,
      SCALE: 2,
      ROTATION: 4,
      SKEW: 8,
      TRS: 7,
      RS: 6,
      TRSS: 15,
      PHYSICS_POSITION: 16,
      PHYSICS_SCALE: 32,
      PHYSICS_ROTATION: 64,
      PHYSICS_TRS: 112,
      PHYSICS_RS: 96,
      ALL_POSITION: 17,
      ALL_SCALE: 34,
      ALL_ROTATION: 68,
      ALL_TRS: 119,
      ALL: 65535
    });
    var EventType = cc.Enum({
      TOUCH_START: "touchstart",
      TOUCH_MOVE: "touchmove",
      TOUCH_END: "touchend",
      TOUCH_CANCEL: "touchcancel",
      MOUSE_DOWN: "mousedown",
      MOUSE_MOVE: "mousemove",
      MOUSE_ENTER: "mouseenter",
      MOUSE_LEAVE: "mouseleave",
      MOUSE_UP: "mouseup",
      MOUSE_WHEEL: "mousewheel",
      POSITION_CHANGED: "position-changed",
      ROTATION_CHANGED: "rotation-changed",
      SCALE_CHANGED: "scale-changed",
      SIZE_CHANGED: "size-changed",
      ANCHOR_CHANGED: "anchor-changed",
      COLOR_CHANGED: "color-changed",
      CHILD_ADDED: "child-added",
      CHILD_REMOVED: "child-removed",
      CHILD_REORDER: "child-reorder",
      GROUP_CHANGED: "group-changed",
      SIBLING_ORDER_CHANGED: "sibling-order-changed"
    });
    var _touchEvents = [ EventType.TOUCH_START, EventType.TOUCH_MOVE, EventType.TOUCH_END, EventType.TOUCH_CANCEL ];
    var _mouseEvents = [ EventType.MOUSE_DOWN, EventType.MOUSE_ENTER, EventType.MOUSE_MOVE, EventType.MOUSE_LEAVE, EventType.MOUSE_UP, EventType.MOUSE_WHEEL ];
    var _skewNeedWarn = true;
    var _skewWarn = function _skewWarn(value, node) {
      if (0 !== value) {
        var nodePath = "";
        var NodeUtils;
        false;
        _skewNeedWarn && cc.warn("`cc.Node.skewX/Y` is deprecated since v2.2.1, please use 3D node instead.", nodePath);
        true, _skewNeedWarn = false;
      }
    };
    var _currentHovered = null;
    var _touchStartHandler = function _touchStartHandler(touch, event) {
      var pos = touch.getLocation();
      var node = this.owner;
      if (node._hitTest(pos, this)) {
        event.type = EventType.TOUCH_START;
        event.touch = touch;
        event.bubbles = true;
        node.dispatchEvent(event);
        return true;
      }
      return false;
    };
    var _touchMoveHandler = function _touchMoveHandler(touch, event) {
      var node = this.owner;
      event.type = EventType.TOUCH_MOVE;
      event.touch = touch;
      event.bubbles = true;
      node.dispatchEvent(event);
    };
    var _touchEndHandler = function _touchEndHandler(touch, event) {
      var pos = touch.getLocation();
      var node = this.owner;
      node._hitTest(pos, this) ? event.type = EventType.TOUCH_END : event.type = EventType.TOUCH_CANCEL;
      event.touch = touch;
      event.bubbles = true;
      node.dispatchEvent(event);
    };
    var _touchCancelHandler = function _touchCancelHandler(touch, event) {
      var pos = touch.getLocation();
      var node = this.owner;
      event.type = EventType.TOUCH_CANCEL;
      event.touch = touch;
      event.bubbles = true;
      node.dispatchEvent(event);
    };
    var _mouseDownHandler = function _mouseDownHandler(event) {
      var pos = event.getLocation();
      var node = this.owner;
      if (node._hitTest(pos, this)) {
        event.type = EventType.MOUSE_DOWN;
        event.bubbles = true;
        node.dispatchEvent(event);
      }
    };
    var _mouseMoveHandler = function _mouseMoveHandler(event) {
      var pos = event.getLocation();
      var node = this.owner;
      var hit = node._hitTest(pos, this);
      if (hit) {
        if (!this._previousIn) {
          if (_currentHovered && _currentHovered._mouseListener) {
            event.type = EventType.MOUSE_LEAVE;
            _currentHovered.dispatchEvent(event);
            _currentHovered._mouseListener._previousIn = false;
          }
          _currentHovered = this.owner;
          event.type = EventType.MOUSE_ENTER;
          node.dispatchEvent(event);
          this._previousIn = true;
        }
        event.type = EventType.MOUSE_MOVE;
        event.bubbles = true;
        node.dispatchEvent(event);
      } else {
        if (!this._previousIn) return;
        event.type = EventType.MOUSE_LEAVE;
        node.dispatchEvent(event);
        this._previousIn = false;
        _currentHovered = null;
      }
      event.stopPropagation();
    };
    var _mouseUpHandler = function _mouseUpHandler(event) {
      var pos = event.getLocation();
      var node = this.owner;
      if (node._hitTest(pos, this)) {
        event.type = EventType.MOUSE_UP;
        event.bubbles = true;
        node.dispatchEvent(event);
        event.stopPropagation();
      }
    };
    var _mouseWheelHandler = function _mouseWheelHandler(event) {
      var pos = event.getLocation();
      var node = this.owner;
      if (node._hitTest(pos, this)) {
        event.type = EventType.MOUSE_WHEEL;
        event.bubbles = true;
        node.dispatchEvent(event);
        event.stopPropagation();
      }
    };
    function _searchComponentsInParent(node, comp) {
      if (comp) {
        var index = 0;
        var list = null;
        for (var curr = node; curr && cc.Node.isNode(curr); curr = curr._parent, ++index) if (curr.getComponent(comp)) {
          var next = {
            index: index,
            node: curr
          };
          list ? list.push(next) : list = [ next ];
        }
        return list;
      }
      return null;
    }
    function _checkListeners(node, events) {
      if (!(node._objFlags & Destroying)) {
        if (node._bubblingListeners) for (var i = 0, l = events.length; i < l; ++i) if (node._bubblingListeners.hasEventListener(events[i])) return true;
        if (node._capturingListeners) for (var _i = 0, _l = events.length; _i < _l; ++_i) if (node._capturingListeners.hasEventListener(events[_i])) return true;
        return false;
      }
      return true;
    }
    function _doDispatchEvent(owner, event) {
      var target, i;
      event.target = owner;
      _cachedArray.length = 0;
      owner._getCapturingTargets(event.type, _cachedArray);
      event.eventPhase = 1;
      for (i = _cachedArray.length - 1; i >= 0; --i) {
        target = _cachedArray[i];
        if (target._capturingListeners) {
          event.currentTarget = target;
          target._capturingListeners.emit(event.type, event, _cachedArray);
          if (event._propagationStopped) {
            _cachedArray.length = 0;
            return;
          }
        }
      }
      _cachedArray.length = 0;
      event.eventPhase = 2;
      event.currentTarget = owner;
      owner._capturingListeners && owner._capturingListeners.emit(event.type, event);
      !event._propagationImmediateStopped && owner._bubblingListeners && owner._bubblingListeners.emit(event.type, event);
      if (!event._propagationStopped && event.bubbles) {
        owner._getBubblingTargets(event.type, _cachedArray);
        event.eventPhase = 3;
        for (i = 0; i < _cachedArray.length; ++i) {
          target = _cachedArray[i];
          if (target._bubblingListeners) {
            event.currentTarget = target;
            target._bubblingListeners.emit(event.type, event);
            if (event._propagationStopped) {
              _cachedArray.length = 0;
              return;
            }
          }
        }
      }
      _cachedArray.length = 0;
    }
    function _getActualGroupIndex(node) {
      var groupIndex = node.groupIndex;
      0 === groupIndex && node.parent && (groupIndex = _getActualGroupIndex(node.parent));
      return groupIndex;
    }
    function _updateCullingMask(node) {
      var index = _getActualGroupIndex(node);
      node._cullingMask = 1 << index;
      false;
      for (var i = 0; i < node._children.length; i++) _updateCullingMask(node._children[i]);
    }
    function updateLocalMatrix3D() {
      if (this._localMatDirty & LocalDirtyFlag.TRSS) {
        var t = this._matrix;
        var tm = t.m;
        _valueTypes.Trs.toMat4(t, this._trs);
        if (this._skewX || this._skewY) {
          var a = tm[0], b = tm[1], c = tm[4], d = tm[5];
          var skx = Math.tan(this._skewX * ONE_DEGREE);
          var sky = Math.tan(this._skewY * ONE_DEGREE);
          Infinity === skx && (skx = 99999999);
          Infinity === sky && (sky = 99999999);
          tm[0] = a + c * sky;
          tm[1] = b + d * sky;
          tm[4] = c + a * skx;
          tm[5] = d + b * skx;
        }
        this._localMatDirty &= ~LocalDirtyFlag.TRSS;
        this._worldMatDirty = true;
      }
    }
    function updateLocalMatrix2D() {
      var dirtyFlag = this._localMatDirty;
      if (!(dirtyFlag & LocalDirtyFlag.TRSS)) return;
      var t = this._matrix;
      var tm = t.m;
      var trs = this._trs;
      if (dirtyFlag & (LocalDirtyFlag.RS | LocalDirtyFlag.SKEW)) {
        var rotation = -this._eulerAngles.z;
        var hasSkew = this._skewX || this._skewY;
        var sx = trs[7], sy = trs[8];
        if (rotation || hasSkew) {
          var a = 1, b = 0, c = 0, d = 1;
          if (rotation) {
            var rotationRadians = rotation * ONE_DEGREE;
            c = Math.sin(rotationRadians);
            d = Math.cos(rotationRadians);
            a = d;
            b = -c;
          }
          tm[0] = a *= sx;
          tm[1] = b *= sx;
          tm[4] = c *= sy;
          tm[5] = d *= sy;
          if (hasSkew) {
            var _a = tm[0], _b = tm[1], _c = tm[4], _d = tm[5];
            var skx = Math.tan(this._skewX * ONE_DEGREE);
            var sky = Math.tan(this._skewY * ONE_DEGREE);
            Infinity === skx && (skx = 99999999);
            Infinity === sky && (sky = 99999999);
            tm[0] = _a + _c * sky;
            tm[1] = _b + _d * sky;
            tm[4] = _c + _a * skx;
            tm[5] = _d + _b * skx;
          }
        } else {
          tm[0] = sx;
          tm[1] = 0;
          tm[4] = 0;
          tm[5] = sy;
        }
      }
      tm[12] = trs[0];
      tm[13] = trs[1];
      this._localMatDirty &= ~LocalDirtyFlag.TRSS;
      this._worldMatDirty = true;
    }
    function calculWorldMatrix3D() {
      this._localMatDirty & LocalDirtyFlag.TRSS && this._updateLocalMatrix();
      if (this._parent) {
        var parentMat = this._parent._worldMatrix;
        _valueTypes.Mat4.mul(this._worldMatrix, parentMat, this._matrix);
      } else _valueTypes.Mat4.copy(this._worldMatrix, this._matrix);
      this._worldMatDirty = false;
    }
    function calculWorldMatrix2D() {
      this._localMatDirty & LocalDirtyFlag.TRSS && this._updateLocalMatrix();
      var parent = this._parent;
      parent ? this._mulMat(this._worldMatrix, parent._worldMatrix, this._matrix) : _valueTypes.Mat4.copy(this._worldMatrix, this._matrix);
      this._worldMatDirty = false;
    }
    function mulMat2D(out, a, b) {
      var am = a.m, bm = b.m, outm = out.m;
      var aa = am[0], ab = am[1], ac = am[4], ad = am[5], atx = am[12], aty = am[13];
      var ba = bm[0], bb = bm[1], bc = bm[4], bd = bm[5], btx = bm[12], bty = bm[13];
      if (0 !== ab || 0 !== ac) {
        outm[0] = ba * aa + bb * ac;
        outm[1] = ba * ab + bb * ad;
        outm[4] = bc * aa + bd * ac;
        outm[5] = bc * ab + bd * ad;
        outm[12] = aa * btx + ac * bty + atx;
        outm[13] = ab * btx + ad * bty + aty;
      } else {
        outm[0] = ba * aa;
        outm[1] = bb * ad;
        outm[4] = bc * aa;
        outm[5] = bd * ad;
        outm[12] = aa * btx + atx;
        outm[13] = ad * bty + aty;
      }
    }
    var mulMat3D = _valueTypes.Mat4.mul;
    var NodeDefines = {
      name: "cc.Node",
      extends: BaseNode,
      properties: {
        _opacity: 255,
        _color: cc.Color.WHITE,
        _contentSize: cc.Size,
        _anchorPoint: cc.v2(.5, .5),
        _position: void 0,
        _scale: void 0,
        _trs: null,
        _eulerAngles: cc.Vec3,
        _skewX: 0,
        _skewY: 0,
        _zIndex: {
          default: void 0,
          type: cc.Integer
        },
        _localZOrder: {
          default: 0,
          serializable: false
        },
        _is3DNode: false,
        _groupIndex: {
          default: 0,
          formerlySerializedAs: "groupIndex"
        },
        groupIndex: {
          get: function get() {
            return this._groupIndex;
          },
          set: function set(value) {
            this._groupIndex = value;
            _updateCullingMask(this);
            this.emit(EventType.GROUP_CHANGED, this);
          }
        },
        group: {
          get: function get() {
            return cc.game.groupList[this.groupIndex] || "";
          },
          set: function set(value) {
            this.groupIndex = cc.game.groupList.indexOf(value);
          }
        },
        x: {
          get: function get() {
            return this._trs[0];
          },
          set: function set(value) {
            var trs = this._trs;
            if (value !== trs[0]) {
              true;
              var oldValue;
              false;
              trs[0] = value;
              this.setLocalDirty(LocalDirtyFlag.ALL_POSITION);
              if (this._eventMask & POSITION_ON) {
                false;
                this.emit(EventType.POSITION_CHANGED);
              }
            }
          }
        },
        y: {
          get: function get() {
            return this._trs[1];
          },
          set: function set(value) {
            var trs = this._trs;
            if (value !== trs[1]) {
              true;
              var oldValue;
              false;
              trs[1] = value;
              this.setLocalDirty(LocalDirtyFlag.ALL_POSITION);
              if (this._eventMask & POSITION_ON) {
                false;
                this.emit(EventType.POSITION_CHANGED);
              }
            }
          }
        },
        z: {
          get: function get() {
            return this._trs[2];
          },
          set: function set(value) {
            var trs = this._trs;
            if (value !== trs[2]) {
              true;
              trs[2] = value;
              this.setLocalDirty(LocalDirtyFlag.ALL_POSITION);
              true, this._renderFlag |= RenderFlow.FLAG_WORLD_TRANSFORM;
              this._eventMask & POSITION_ON && this.emit(EventType.POSITION_CHANGED);
            }
          }
        },
        rotation: {
          get: function get() {
            true;
            cc.warn("`cc.Node.rotation` is deprecated since v2.1.0, please use `-angle` instead. (`this.node.rotation` -> `-this.node.angle`)");
            return -this.angle;
          },
          set: function set(value) {
            true;
            cc.warn("`cc.Node.rotation` is deprecated since v2.1.0, please set `-angle` instead. (`this.node.rotation = x` -> `this.node.angle = -x`)");
            this.angle = -value;
          }
        },
        angle: {
          get: function get() {
            return this._eulerAngles.z;
          },
          set: function set(value) {
            _valueTypes.Vec3.set(this._eulerAngles, 0, 0, value);
            _valueTypes.Trs.fromAngleZ(this._trs, value);
            this.setLocalDirty(LocalDirtyFlag.ALL_ROTATION);
            this._eventMask & ROTATION_ON && this.emit(EventType.ROTATION_CHANGED);
          }
        },
        rotationX: {
          get: function get() {
            true;
            cc.warn("`cc.Node.rotationX` is deprecated since v2.1.0, please use `eulerAngles.x` instead. (`this.node.rotationX` -> `this.node.eulerAngles.x`)");
            return this._eulerAngles.x;
          },
          set: function set(value) {
            true;
            cc.warn("`cc.Node.rotationX` is deprecated since v2.1.0, please set `eulerAngles` instead. (`this.node.rotationX = x` -> `this.node.is3DNode = true; this.node.eulerAngles = cc.v3(x, 0, 0)`");
            if (this._eulerAngles.x !== value) {
              this._eulerAngles.x = value;
              this._eulerAngles.x === this._eulerAngles.y ? _valueTypes.Trs.fromAngleZ(this._trs, -value) : _valueTypes.Trs.fromEulerNumber(this._trs, value, this._eulerAngles.y, 0);
              this.setLocalDirty(LocalDirtyFlag.ALL_ROTATION);
              this._eventMask & ROTATION_ON && this.emit(EventType.ROTATION_CHANGED);
            }
          }
        },
        rotationY: {
          get: function get() {
            true;
            cc.warn("`cc.Node.rotationY` is deprecated since v2.1.0, please use `eulerAngles.y` instead. (`this.node.rotationY` -> `this.node.eulerAngles.y`)");
            return this._eulerAngles.y;
          },
          set: function set(value) {
            true;
            cc.warn("`cc.Node.rotationY` is deprecated since v2.1.0, please set `eulerAngles` instead. (`this.node.rotationY = y` -> `this.node.is3DNode = true; this.node.eulerAngles = cc.v3(0, y, 0)`");
            if (this._eulerAngles.y !== value) {
              this._eulerAngles.y = value;
              this._eulerAngles.x === this._eulerAngles.y ? _valueTypes.Trs.fromAngleZ(this._trs, -value) : _valueTypes.Trs.fromEulerNumber(this._trs, this._eulerAngles.x, value, 0);
              this.setLocalDirty(LocalDirtyFlag.ALL_ROTATION);
              this._eventMask & ROTATION_ON && this.emit(EventType.ROTATION_CHANGED);
            }
          }
        },
        eulerAngles: {
          get: function get() {
            false;
            return _valueTypes.Trs.toEuler(this._eulerAngles, this._trs);
          },
          set: function set(v) {
            false;
            _valueTypes.Trs.fromEuler(this._trs, v);
            this.setLocalDirty(LocalDirtyFlag.ALL_ROTATION);
            true, this._renderFlag |= RenderFlow.FLAG_TRANSFORM;
            this._eventMask & ROTATION_ON && this.emit(EventType.ROTATION_CHANGED);
          }
        },
        quat: {
          get: function get() {
            var trs = this._trs;
            return new _valueTypes.Quat(trs[3], trs[4], trs[5], trs[6]);
          },
          set: function set(v) {
            this.setRotation(v);
          }
        },
        scale: {
          get: function get() {
            return this._trs[7];
          },
          set: function set(v) {
            this.setScale(v);
          }
        },
        scaleX: {
          get: function get() {
            return this._trs[7];
          },
          set: function set(value) {
            if (this._trs[7] !== value) {
              this._trs[7] = value;
              this.setLocalDirty(LocalDirtyFlag.ALL_SCALE);
              this._eventMask & SCALE_ON && this.emit(EventType.SCALE_CHANGED);
            }
          }
        },
        scaleY: {
          get: function get() {
            return this._trs[8];
          },
          set: function set(value) {
            if (this._trs[8] !== value) {
              this._trs[8] = value;
              this.setLocalDirty(LocalDirtyFlag.ALL_SCALE);
              this._eventMask & SCALE_ON && this.emit(EventType.SCALE_CHANGED);
            }
          }
        },
        scaleZ: {
          get: function get() {
            return this._trs[9];
          },
          set: function set(value) {
            if (this._trs[9] !== value) {
              this._trs[9] = value;
              this.setLocalDirty(LocalDirtyFlag.ALL_SCALE);
              true, this._renderFlag |= RenderFlow.FLAG_TRANSFORM;
              this._eventMask & SCALE_ON && this.emit(EventType.SCALE_CHANGED);
            }
          }
        },
        skewX: {
          get: function get() {
            return this._skewX;
          },
          set: function set(value) {
            _skewWarn(value, this);
            this._skewX = value;
            this.setLocalDirty(LocalDirtyFlag.SKEW);
            false;
          }
        },
        skewY: {
          get: function get() {
            return this._skewY;
          },
          set: function set(value) {
            _skewWarn(value, this);
            this._skewY = value;
            this.setLocalDirty(LocalDirtyFlag.SKEW);
            false;
          }
        },
        opacity: {
          get: function get() {
            return this._opacity;
          },
          set: function set(value) {
            value = cc.misc.clampf(value, 0, 255);
            if (this._opacity !== value) {
              this._opacity = value;
              false;
              this._renderFlag |= RenderFlow.FLAG_OPACITY_COLOR;
            }
          },
          range: [ 0, 255 ]
        },
        color: {
          get: function get() {
            return this._color.clone();
          },
          set: function set(value) {
            if (!this._color.equals(value)) {
              this._color.set(value);
              false;
              this._renderFlag |= RenderFlow.FLAG_COLOR;
              this._eventMask & COLOR_ON && this.emit(EventType.COLOR_CHANGED, value);
            }
          }
        },
        anchorX: {
          get: function get() {
            return this._anchorPoint.x;
          },
          set: function set(value) {
            var anchorPoint = this._anchorPoint;
            if (anchorPoint.x !== value) {
              anchorPoint.x = value;
              this._eventMask & ANCHOR_ON && this.emit(EventType.ANCHOR_CHANGED);
            }
          }
        },
        anchorY: {
          get: function get() {
            return this._anchorPoint.y;
          },
          set: function set(value) {
            var anchorPoint = this._anchorPoint;
            if (anchorPoint.y !== value) {
              anchorPoint.y = value;
              this._eventMask & ANCHOR_ON && this.emit(EventType.ANCHOR_CHANGED);
            }
          }
        },
        width: {
          get: function get() {
            return this._contentSize.width;
          },
          set: function set(value) {
            if (value !== this._contentSize.width) {
              var clone;
              false;
              this._contentSize.width = value;
              if (this._eventMask & SIZE_ON) {
                false;
                this.emit(EventType.SIZE_CHANGED);
              }
            }
          }
        },
        height: {
          get: function get() {
            return this._contentSize.height;
          },
          set: function set(value) {
            if (value !== this._contentSize.height) {
              var clone;
              false;
              this._contentSize.height = value;
              if (this._eventMask & SIZE_ON) {
                false;
                this.emit(EventType.SIZE_CHANGED);
              }
            }
          }
        },
        zIndex: {
          get: function get() {
            return this._localZOrder >> 16;
          },
          set: function set(value) {
            if (value > macro.MAX_ZINDEX) {
              cc.warnID(1636);
              value = macro.MAX_ZINDEX;
            } else if (value < macro.MIN_ZINDEX) {
              cc.warnID(1637);
              value = macro.MIN_ZINDEX;
            }
            if (this.zIndex !== value) {
              this._localZOrder = 65535 & this._localZOrder | value << 16;
              this.emit(EventType.SIBLING_ORDER_CHANGED);
              this._onSiblingIndexChanged();
            }
          }
        },
        is3DNode: {
          get: function get() {
            return this._is3DNode;
          },
          set: function set(v) {
            this._is3DNode = v;
            this._update3DFunction();
          }
        },
        up: {
          get: function get() {
            var _up = _valueTypes.Vec3.transformQuat(_urfVec3, _valueTypes.Vec3.UP, this.getWorldRotation(_urfQuat));
            return _up.clone();
          }
        },
        right: {
          get: function get() {
            var _right = _valueTypes.Vec3.transformQuat(_urfVec3, _valueTypes.Vec3.RIGHT, this.getWorldRotation(_urfQuat));
            return _right.clone();
          }
        },
        forward: {
          get: function get() {
            var _forward = _valueTypes.Vec3.transformQuat(_urfVec3, _valueTypes.Vec3.FORWARD, this.getWorldRotation(_urfQuat));
            return _forward.clone();
          }
        }
      },
      ctor: function ctor() {
        this._reorderChildDirty = false;
        this._widget = null;
        this._renderComponent = null;
        this._capturingListeners = null;
        this._bubblingListeners = null;
        this._touchListener = null;
        this._mouseListener = null;
        this._initDataFromPool();
        this._eventMask = 0;
        this._cullingMask = 1;
        this._childArrivalOrder = 1;
        false;
        this._renderFlag = RenderFlow.FLAG_TRANSFORM | RenderFlow.FLAG_OPACITY_COLOR;
      },
      statics: {
        EventType: EventType,
        _LocalDirtyFlag: LocalDirtyFlag,
        isNode: function isNode(obj) {
          return obj instanceof Node && (obj.constructor === Node || !(obj instanceof cc.Scene));
        },
        BuiltinGroupIndex: BuiltinGroupIndex
      },
      _onSiblingIndexChanged: function _onSiblingIndexChanged() {
        this._parent && this._parent._delaySort();
      },
      _onPreDestroy: function _onPreDestroy() {
        var destroyByParent = this._onPreDestroyBase();
        ActionManagerExist && cc.director.getActionManager().removeAllActionsFromTarget(this);
        _currentHovered === this && (_currentHovered = null);
        if (this._touchListener || this._mouseListener) {
          eventManager.removeListeners(this);
          if (this._touchListener) {
            this._touchListener.owner = null;
            this._touchListener.mask = null;
            this._touchListener = null;
          }
          if (this._mouseListener) {
            this._mouseListener.owner = null;
            this._mouseListener.mask = null;
            this._mouseListener = null;
          }
        }
        false;
        this._backDataIntoPool();
        this._reorderChildDirty && cc.director.__fastOff(cc.Director.EVENT_AFTER_UPDATE, this.sortAllChildren, this);
        destroyByParent || false;
      },
      _onPostActivated: function _onPostActivated(active) {
        var actionManager = ActionManagerExist ? cc.director.getActionManager() : null;
        if (active) {
          this._renderFlag |= RenderFlow.FLAG_WORLD_TRANSFORM;
          actionManager && actionManager.resumeTarget(this);
          eventManager.resumeTarget(this);
          this._checkListenerMask();
        } else {
          actionManager && actionManager.pauseTarget(this);
          eventManager.pauseTarget(this);
        }
      },
      _onHierarchyChanged: function _onHierarchyChanged(oldParent) {
        this._updateOrderOfArrival();
        _updateCullingMask(this);
        this._parent && this._parent._delaySort();
        this._renderFlag |= RenderFlow.FLAG_WORLD_TRANSFORM;
        this._onHierarchyChangedBase(oldParent);
        cc._widgetManager && (cc._widgetManager._nodesOrderDirty = true);
        oldParent && this._activeInHierarchy && this._checkListenerMask();
        false;
      },
      _update3DFunction: function _update3DFunction() {
        if (this._is3DNode) {
          this._updateLocalMatrix = updateLocalMatrix3D;
          this._calculWorldMatrix = calculWorldMatrix3D;
          this._mulMat = mulMat3D;
        } else {
          this._updateLocalMatrix = updateLocalMatrix2D;
          this._calculWorldMatrix = calculWorldMatrix2D;
          this._mulMat = mulMat2D;
        }
        this._renderComponent && this._renderComponent._on3DNodeChanged && this._renderComponent._on3DNodeChanged();
        this._renderFlag |= RenderFlow.FLAG_TRANSFORM;
        this._localMatDirty = LocalDirtyFlag.ALL;
        false;
      },
      _initDataFromPool: function _initDataFromPool() {
        if (!this._spaceInfo) {
          false, false;
          this._spaceInfo = nodeMemPool.pop();
        }
        var spaceInfo = this._spaceInfo;
        this._matrix = cc.mat4(spaceInfo.localMat);
        _valueTypes.Mat4.identity(this._matrix);
        this._worldMatrix = cc.mat4(spaceInfo.worldMat);
        _valueTypes.Mat4.identity(this._worldMatrix);
        this._localMatDirty = LocalDirtyFlag.ALL;
        this._worldMatDirty = true;
        var trs = this._trs = spaceInfo.trs;
        trs[0] = 0;
        trs[1] = 0;
        trs[2] = 0;
        trs[3] = 0;
        trs[4] = 0;
        trs[5] = 0;
        trs[6] = 1;
        trs[7] = 1;
        trs[8] = 1;
        trs[9] = 1;
      },
      _backDataIntoPool: function _backDataIntoPool() {
        if (!(false, false)) {
          nodeMemPool.push(this._spaceInfo);
          this._matrix = null;
          this._worldMatrix = null;
          this._trs = null;
          this._spaceInfo = null;
        }
      },
      _toEuler: function _toEuler() {
        if (this.is3DNode) _valueTypes.Trs.toEuler(this._eulerAngles, this._trs); else {
          var z = Math.asin(this._trs[5]) / ONE_DEGREE * 2;
          _valueTypes.Vec3.set(this._eulerAngles, 0, 0, z);
        }
      },
      _fromEuler: function _fromEuler() {
        this.is3DNode ? _valueTypes.Trs.fromEuler(this._trs, this._eulerAngles) : _valueTypes.Trs.fromAngleZ(this._trs, this._eulerAngles.z);
      },
      _upgrade_1x_to_2x: function _upgrade_1x_to_2x() {
        this._is3DNode && this._update3DFunction();
        var trs = this._trs;
        if (trs) {
          var desTrs = trs;
          trs = this._trs = this._spaceInfo.trs;
          11 === desTrs.length ? trs.set(desTrs.subarray(1)) : trs.set(desTrs);
        } else trs = this._trs = this._spaceInfo.trs;
        if (void 0 !== this._zIndex) {
          this._localZOrder = this._zIndex << 16;
          this._zIndex = void 0;
        }
        var NodeUtils;
        false;
        this._fromEuler();
        0 !== this._localZOrder && (this._zIndex = (4294901760 & this._localZOrder) >> 16);
        if (this._color.a < 255 && 255 === this._opacity) {
          this._opacity = this._color.a;
          this._color.a = 255;
        }
        false;
      },
      _onBatchCreated: function _onBatchCreated() {
        var prefabInfo = this._prefab;
        if (prefabInfo && prefabInfo.sync && prefabInfo.root === this) {
          false;
          PrefabHelper.syncWithPrefab(this);
        }
        this._upgrade_1x_to_2x();
        this._updateOrderOfArrival();
        this._cullingMask = 1 << _getActualGroupIndex(this);
        false;
        if (!this._activeInHierarchy) {
          ActionManagerExist && cc.director.getActionManager().pauseTarget(this);
          eventManager.pauseTarget(this);
        }
        var children = this._children;
        for (var i = 0, len = children.length; i < len; i++) children[i]._onBatchCreated();
        children.length > 0 && (this._renderFlag |= RenderFlow.FLAG_CHILDREN);
        false;
      },
      _onBatchRestored: function _onBatchRestored() {
        this._upgrade_1x_to_2x();
        this._cullingMask = 1 << _getActualGroupIndex(this);
        false;
        if (!this._activeInHierarchy) {
          var manager = cc.director.getActionManager();
          manager && manager.pauseTarget(this);
          eventManager.pauseTarget(this);
        }
        var children = this._children;
        for (var i = 0, len = children.length; i < len; i++) children[i]._onBatchRestored();
        children.length > 0 && (this._renderFlag |= RenderFlow.FLAG_CHILDREN);
        false;
      },
      _checkListenerMask: function _checkListenerMask() {
        if (this._touchListener) {
          var mask = this._touchListener.mask = _searchComponentsInParent(this, cc.Mask);
          this._mouseListener && (this._mouseListener.mask = mask);
        } else this._mouseListener && (this._mouseListener.mask = _searchComponentsInParent(this, cc.Mask));
      },
      _checknSetupSysEvent: function _checknSetupSysEvent(type) {
        var newAdded = false;
        var forDispatch = false;
        if (-1 !== _touchEvents.indexOf(type)) {
          if (!this._touchListener) {
            this._touchListener = cc.EventListener.create({
              event: cc.EventListener.TOUCH_ONE_BY_ONE,
              swallowTouches: true,
              owner: this,
              mask: _searchComponentsInParent(this, cc.Mask),
              onTouchBegan: _touchStartHandler,
              onTouchMoved: _touchMoveHandler,
              onTouchEnded: _touchEndHandler,
              onTouchCancelled: _touchCancelHandler
            });
            eventManager.addListener(this._touchListener, this);
            newAdded = true;
          }
          forDispatch = true;
        } else if (-1 !== _mouseEvents.indexOf(type)) {
          if (!this._mouseListener) {
            this._mouseListener = cc.EventListener.create({
              event: cc.EventListener.MOUSE,
              _previousIn: false,
              owner: this,
              mask: _searchComponentsInParent(this, cc.Mask),
              onMouseDown: _mouseDownHandler,
              onMouseMove: _mouseMoveHandler,
              onMouseUp: _mouseUpHandler,
              onMouseScroll: _mouseWheelHandler
            });
            eventManager.addListener(this._mouseListener, this);
            newAdded = true;
          }
          forDispatch = true;
        }
        newAdded && !this._activeInHierarchy && cc.director.getScheduler().schedule((function() {
          this._activeInHierarchy || eventManager.pauseTarget(this);
        }), this, 0, 0, 0, false);
        return forDispatch;
      },
      on: function on(type, callback, target, useCapture) {
        var forDispatch = this._checknSetupSysEvent(type);
        if (forDispatch) return this._onDispatch(type, callback, target, useCapture);
        switch (type) {
         case EventType.POSITION_CHANGED:
          this._eventMask |= POSITION_ON;
          break;

         case EventType.SCALE_CHANGED:
          this._eventMask |= SCALE_ON;
          break;

         case EventType.ROTATION_CHANGED:
          this._eventMask |= ROTATION_ON;
          break;

         case EventType.SIZE_CHANGED:
          this._eventMask |= SIZE_ON;
          break;

         case EventType.ANCHOR_CHANGED:
          this._eventMask |= ANCHOR_ON;
          break;

         case EventType.COLOR_CHANGED:
          this._eventMask |= COLOR_ON;
        }
        this._bubblingListeners || (this._bubblingListeners = new EventTarget());
        return this._bubblingListeners.on(type, callback, target);
      },
      once: function once(type, callback, target, useCapture) {
        var forDispatch = this._checknSetupSysEvent(type);
        var listeners = null;
        listeners = forDispatch && useCapture ? this._capturingListeners = this._capturingListeners || new EventTarget() : this._bubblingListeners = this._bubblingListeners || new EventTarget();
        listeners.once(type, callback, target);
      },
      _onDispatch: function _onDispatch(type, callback, target, useCapture) {
        if ("boolean" === typeof target) {
          useCapture = target;
          target = void 0;
        } else useCapture = !!useCapture;
        if (!callback) {
          cc.errorID(6800);
          return;
        }
        var listeners = null;
        listeners = useCapture ? this._capturingListeners = this._capturingListeners || new EventTarget() : this._bubblingListeners = this._bubblingListeners || new EventTarget();
        if (!listeners.hasEventListener(type, callback, target)) {
          listeners.on(type, callback, target);
          target && target.__eventTargets && target.__eventTargets.push(this);
        }
        return callback;
      },
      off: function off(type, callback, target, useCapture) {
        var touchEvent = -1 !== _touchEvents.indexOf(type);
        var mouseEvent = !touchEvent && -1 !== _mouseEvents.indexOf(type);
        if (touchEvent || mouseEvent) {
          this._offDispatch(type, callback, target, useCapture);
          if (touchEvent) {
            if (this._touchListener && !_checkListeners(this, _touchEvents)) {
              eventManager.removeListener(this._touchListener);
              this._touchListener = null;
            }
          } else if (mouseEvent && this._mouseListener && !_checkListeners(this, _mouseEvents)) {
            eventManager.removeListener(this._mouseListener);
            this._mouseListener = null;
          }
        } else if (this._bubblingListeners) {
          this._bubblingListeners.off(type, callback, target);
          var hasListeners = this._bubblingListeners.hasEventListener(type);
          if (!hasListeners) switch (type) {
           case EventType.POSITION_CHANGED:
            this._eventMask &= ~POSITION_ON;
            break;

           case EventType.SCALE_CHANGED:
            this._eventMask &= ~SCALE_ON;
            break;

           case EventType.ROTATION_CHANGED:
            this._eventMask &= ~ROTATION_ON;
            break;

           case EventType.SIZE_CHANGED:
            this._eventMask &= ~SIZE_ON;
            break;

           case EventType.ANCHOR_CHANGED:
            this._eventMask &= ~ANCHOR_ON;
            break;

           case EventType.COLOR_CHANGED:
            this._eventMask &= ~COLOR_ON;
          }
        }
      },
      _offDispatch: function _offDispatch(type, callback, target, useCapture) {
        if ("boolean" === typeof target) {
          useCapture = target;
          target = void 0;
        } else useCapture = !!useCapture;
        if (callback) {
          var listeners = useCapture ? this._capturingListeners : this._bubblingListeners;
          if (listeners) {
            listeners.off(type, callback, target);
            target && target.__eventTargets && js.array.fastRemove(target.__eventTargets, this);
          }
        } else {
          this._capturingListeners && this._capturingListeners.removeAll(type);
          this._bubblingListeners && this._bubblingListeners.removeAll(type);
        }
      },
      targetOff: function targetOff(target) {
        var listeners = this._bubblingListeners;
        if (listeners) {
          listeners.targetOff(target);
          this._eventMask & POSITION_ON && !listeners.hasEventListener(EventType.POSITION_CHANGED) && (this._eventMask &= ~POSITION_ON);
          this._eventMask & SCALE_ON && !listeners.hasEventListener(EventType.SCALE_CHANGED) && (this._eventMask &= ~SCALE_ON);
          this._eventMask & ROTATION_ON && !listeners.hasEventListener(EventType.ROTATION_CHANGED) && (this._eventMask &= ~ROTATION_ON);
          this._eventMask & SIZE_ON && !listeners.hasEventListener(EventType.SIZE_CHANGED) && (this._eventMask &= ~SIZE_ON);
          this._eventMask & ANCHOR_ON && !listeners.hasEventListener(EventType.ANCHOR_CHANGED) && (this._eventMask &= ~ANCHOR_ON);
          this._eventMask & COLOR_ON && !listeners.hasEventListener(EventType.COLOR_CHANGED) && (this._eventMask &= ~COLOR_ON);
        }
        this._capturingListeners && this._capturingListeners.targetOff(target);
        target && target.__eventTargets && js.array.fastRemove(target.__eventTargets, this);
        if (this._touchListener && !_checkListeners(this, _touchEvents)) {
          eventManager.removeListener(this._touchListener);
          this._touchListener = null;
        }
        if (this._mouseListener && !_checkListeners(this, _mouseEvents)) {
          eventManager.removeListener(this._mouseListener);
          this._mouseListener = null;
        }
      },
      hasEventListener: function hasEventListener(type) {
        var has = false;
        this._bubblingListeners && (has = this._bubblingListeners.hasEventListener(type));
        !has && this._capturingListeners && (has = this._capturingListeners.hasEventListener(type));
        return has;
      },
      emit: function emit(type, arg1, arg2, arg3, arg4, arg5) {
        this._bubblingListeners && this._bubblingListeners.emit(type, arg1, arg2, arg3, arg4, arg5);
      },
      dispatchEvent: function dispatchEvent(event) {
        _doDispatchEvent(this, event);
        _cachedArray.length = 0;
      },
      pauseSystemEvents: function pauseSystemEvents(recursive) {
        eventManager.pauseTarget(this, recursive);
      },
      resumeSystemEvents: function resumeSystemEvents(recursive) {
        eventManager.resumeTarget(this, recursive);
      },
      _hitTest: function _hitTest(point, listener) {
        var w = this._contentSize.width, h = this._contentSize.height, cameraPt = _htVec3a, testPt = _htVec3b;
        var camera = cc.Camera.findCamera(this);
        camera ? camera.getScreenToWorldPoint(point, cameraPt) : cameraPt.set(point);
        this._updateWorldMatrix();
        if (!_valueTypes.Mat4.invert(_mat4_temp, this._worldMatrix)) return false;
        _valueTypes.Vec2.transformMat4(testPt, cameraPt, _mat4_temp);
        testPt.x += this._anchorPoint.x * w;
        testPt.y += this._anchorPoint.y * h;
        var hit = false;
        if (testPt.x >= 0 && testPt.y >= 0 && testPt.x <= w && testPt.y <= h) {
          hit = true;
          if (listener && listener.mask) {
            var mask = listener.mask;
            var parent = this;
            var length = mask ? mask.length : 0;
            for (var i = 0, j = 0; parent && j < length; ++i, parent = parent.parent) {
              var temp = mask[j];
              if (i === temp.index) {
                if (parent !== temp.node) {
                  mask.length = j;
                  break;
                }
                var comp = parent.getComponent(cc.Mask);
                if (comp && comp._enabled && !comp._hitTest(cameraPt)) {
                  hit = false;
                  break;
                }
                j++;
              } else if (i > temp.index) {
                mask.length = j;
                break;
              }
            }
          }
        }
        return hit;
      },
      _getCapturingTargets: function _getCapturingTargets(type, array) {
        var parent = this.parent;
        while (parent) {
          parent._capturingListeners && parent._capturingListeners.hasEventListener(type) && array.push(parent);
          parent = parent.parent;
        }
      },
      _getBubblingTargets: function _getBubblingTargets(type, array) {
        var parent = this.parent;
        while (parent) {
          parent._bubblingListeners && parent._bubblingListeners.hasEventListener(type) && array.push(parent);
          parent = parent.parent;
        }
      },
      runAction: ActionManagerExist ? function(action) {
        if (!this.active) return;
        cc.assertID(action, 1618);
        var am = cc.director.getActionManager();
        if (!am._suppressDeprecation) {
          am._suppressDeprecation = true;
          cc.warnID(1639);
        }
        am.addAction(action, this, false);
        return action;
      } : emptyFunc,
      pauseAllActions: ActionManagerExist ? function() {
        cc.director.getActionManager().pauseTarget(this);
      } : emptyFunc,
      resumeAllActions: ActionManagerExist ? function() {
        cc.director.getActionManager().resumeTarget(this);
      } : emptyFunc,
      stopAllActions: ActionManagerExist ? function() {
        cc.director.getActionManager().removeAllActionsFromTarget(this);
      } : emptyFunc,
      stopAction: ActionManagerExist ? function(action) {
        cc.director.getActionManager().removeAction(action);
      } : emptyFunc,
      stopActionByTag: ActionManagerExist ? function(tag) {
        if (tag === cc.Action.TAG_INVALID) {
          cc.logID(1612);
          return;
        }
        cc.director.getActionManager().removeActionByTag(tag, this);
      } : emptyFunc,
      getActionByTag: ActionManagerExist ? function(tag) {
        if (tag === cc.Action.TAG_INVALID) {
          cc.logID(1613);
          return null;
        }
        return cc.director.getActionManager().getActionByTag(tag, this);
      } : function() {
        return null;
      },
      getNumberOfRunningActions: ActionManagerExist ? function() {
        return cc.director.getActionManager().getNumberOfRunningActionsInTarget(this);
      } : function() {
        return 0;
      },
      getPosition: function getPosition(out) {
        out = out || new _valueTypes.Vec3();
        return _valueTypes.Trs.toPosition(out, this._trs);
      },
      setPosition: function setPosition(newPosOrX, y, z) {
        var x;
        if (void 0 === y) {
          x = newPosOrX.x;
          y = newPosOrX.y;
          z = newPosOrX.z || 0;
        } else {
          x = newPosOrX;
          z = z || 0;
        }
        var trs = this._trs;
        if (trs[0] === x && trs[1] === y && trs[2] === z) return;
        var oldPosition;
        false;
        trs[0] = x;
        trs[1] = y;
        trs[2] = z;
        this.setLocalDirty(LocalDirtyFlag.ALL_POSITION);
        true, this._renderFlag |= RenderFlow.FLAG_WORLD_TRANSFORM;
        if (this._eventMask & POSITION_ON) {
          false;
          this.emit(EventType.POSITION_CHANGED);
        }
      },
      getScale: function getScale(out) {
        if (void 0 !== out) return _valueTypes.Trs.toScale(out, this._trs);
        cc.errorID(1400, "cc.Node.getScale", "cc.Node.scale or cc.Node.getScale(cc.Vec3)");
        return this._trs[7];
      },
      setScale: function setScale(x, y, z) {
        if (x && "number" !== typeof x) {
          y = x.y;
          z = void 0 === x.z ? 1 : x.z;
          x = x.x;
        } else if (void 0 !== x && void 0 === y) {
          y = x;
          z = x;
        } else void 0 === z && (z = 1);
        var trs = this._trs;
        if (trs[7] !== x || trs[8] !== y || trs[9] !== z) {
          trs[7] = x;
          trs[8] = y;
          trs[9] = z;
          this.setLocalDirty(LocalDirtyFlag.ALL_SCALE);
          true, this._renderFlag |= RenderFlow.FLAG_TRANSFORM;
          this._eventMask & SCALE_ON && this.emit(EventType.SCALE_CHANGED);
        }
      },
      getRotation: function getRotation(out) {
        if (out instanceof _valueTypes.Quat) return _valueTypes.Trs.toRotation(out, this._trs);
        true;
        cc.warn("`cc.Node.getRotation()` is deprecated since v2.1.0, please use `-cc.Node.angle` instead. (`this.node.getRotation()` -> `-this.node.angle`)");
        return -this.angle;
      },
      setRotation: function setRotation(rotation, y, z, w) {
        if ("number" === typeof rotation && void 0 === y) {
          true;
          cc.warn("`cc.Node.setRotation(degree)` is deprecated since v2.1.0, please set `-cc.Node.angle` instead. (`this.node.setRotation(x)` -> `this.node.angle = -x`)");
          this.angle = -rotation;
        } else {
          var x = rotation;
          if (void 0 === y) {
            x = rotation.x;
            y = rotation.y;
            z = rotation.z;
            w = rotation.w;
          }
          var trs = this._trs;
          if (trs[3] !== x || trs[4] !== y || trs[5] !== z || trs[6] !== w) {
            trs[3] = x;
            trs[4] = y;
            trs[5] = z;
            trs[6] = w;
            this.setLocalDirty(LocalDirtyFlag.ALL_ROTATION);
            this._eventMask & ROTATION_ON && this.emit(EventType.ROTATION_CHANGED);
            false;
          }
        }
      },
      getContentSize: function getContentSize() {
        return cc.size(this._contentSize.width, this._contentSize.height);
      },
      setContentSize: function setContentSize(size, height) {
        var locContentSize = this._contentSize;
        var clone;
        if (void 0 === height) {
          if (size.width === locContentSize.width && size.height === locContentSize.height) return;
          false;
          locContentSize.width = size.width;
          locContentSize.height = size.height;
        } else {
          if (size === locContentSize.width && height === locContentSize.height) return;
          false;
          locContentSize.width = size;
          locContentSize.height = height;
        }
        if (this._eventMask & SIZE_ON) {
          false;
          this.emit(EventType.SIZE_CHANGED);
        }
      },
      getAnchorPoint: function getAnchorPoint() {
        return cc.v2(this._anchorPoint);
      },
      setAnchorPoint: function setAnchorPoint(point, y) {
        var locAnchorPoint = this._anchorPoint;
        if (void 0 === y) {
          if (point.x === locAnchorPoint.x && point.y === locAnchorPoint.y) return;
          locAnchorPoint.x = point.x;
          locAnchorPoint.y = point.y;
        } else {
          if (point === locAnchorPoint.x && y === locAnchorPoint.y) return;
          locAnchorPoint.x = point;
          locAnchorPoint.y = y;
        }
        this.setLocalDirty(LocalDirtyFlag.ALL_POSITION);
        this._eventMask & ANCHOR_ON && this.emit(EventType.ANCHOR_CHANGED);
      },
      _invTransformPoint: function _invTransformPoint(out, pos) {
        this._parent ? this._parent._invTransformPoint(out, pos) : _valueTypes.Vec3.copy(out, pos);
        var ltrs = this._trs;
        _valueTypes.Trs.toPosition(_tpVec3a, ltrs);
        _valueTypes.Vec3.sub(out, out, _tpVec3a);
        _valueTypes.Trs.toRotation(_tpQuata, ltrs);
        _valueTypes.Quat.conjugate(_tpQuatb, _tpQuata);
        _valueTypes.Vec3.transformQuat(out, out, _tpQuatb);
        _valueTypes.Trs.toScale(_tpVec3a, ltrs);
        _valueTypes.Vec3.inverseSafe(_tpVec3b, _tpVec3a);
        _valueTypes.Vec3.mul(out, out, _tpVec3b);
        return out;
      },
      getWorldPosition: function getWorldPosition(out) {
        _valueTypes.Trs.toPosition(out, this._trs);
        var curr = this._parent;
        var ltrs;
        while (curr) {
          ltrs = curr._trs;
          _valueTypes.Trs.toScale(_gwpVec3, ltrs);
          _valueTypes.Vec3.mul(out, out, _gwpVec3);
          _valueTypes.Trs.toRotation(_gwpQuat, ltrs);
          _valueTypes.Vec3.transformQuat(out, out, _gwpQuat);
          _valueTypes.Trs.toPosition(_gwpVec3, ltrs);
          _valueTypes.Vec3.add(out, out, _gwpVec3);
          curr = curr._parent;
        }
        return out;
      },
      setWorldPosition: function setWorldPosition(pos) {
        var ltrs = this._trs;
        var oldPosition;
        false;
        this._parent ? this._parent._invTransformPoint(_swpVec3, pos) : _valueTypes.Vec3.copy(_swpVec3, pos);
        _valueTypes.Trs.fromPosition(ltrs, _swpVec3);
        this.setLocalDirty(LocalDirtyFlag.ALL_POSITION);
        if (this._eventMask & POSITION_ON) {
          false;
          this.emit(EventType.POSITION_CHANGED);
        }
      },
      getWorldRotation: function getWorldRotation(out) {
        _valueTypes.Trs.toRotation(_gwrQuat, this._trs);
        _valueTypes.Quat.copy(out, _gwrQuat);
        var curr = this._parent;
        while (curr) {
          _valueTypes.Trs.toRotation(_gwrQuat, curr._trs);
          _valueTypes.Quat.mul(out, _gwrQuat, out);
          curr = curr._parent;
        }
        return out;
      },
      setWorldRotation: function setWorldRotation(val) {
        if (this._parent) {
          this._parent.getWorldRotation(_swrQuat);
          _valueTypes.Quat.conjugate(_swrQuat, _swrQuat);
          _valueTypes.Quat.mul(_swrQuat, _swrQuat, val);
        } else _valueTypes.Quat.copy(_swrQuat, val);
        _valueTypes.Trs.fromRotation(this._trs, _swrQuat);
        false;
        this.setLocalDirty(LocalDirtyFlag.ALL_ROTATION);
      },
      getWorldScale: function getWorldScale(out) {
        _valueTypes.Trs.toScale(_gwsVec3, this._trs);
        _valueTypes.Vec3.copy(out, _gwsVec3);
        var curr = this._parent;
        while (curr) {
          _valueTypes.Trs.toScale(_gwsVec3, curr._trs);
          _valueTypes.Vec3.mul(out, out, _gwsVec3);
          curr = curr._parent;
        }
        return out;
      },
      setWorldScale: function setWorldScale(scale) {
        if (this._parent) {
          this._parent.getWorldScale(_swsVec3);
          _valueTypes.Vec3.div(_swsVec3, scale, _swsVec3);
        } else _valueTypes.Vec3.copy(_swsVec3, scale);
        _valueTypes.Trs.fromScale(this._trs, _swsVec3);
        this.setLocalDirty(LocalDirtyFlag.ALL_SCALE);
      },
      getWorldRT: function getWorldRT(out) {
        var opos = _gwrtVec3a;
        var orot = _gwrtQuata;
        var ltrs = this._trs;
        _valueTypes.Trs.toPosition(opos, ltrs);
        _valueTypes.Trs.toRotation(orot, ltrs);
        var curr = this._parent;
        while (curr) {
          ltrs = curr._trs;
          _valueTypes.Trs.toScale(_gwrtVec3b, ltrs);
          _valueTypes.Vec3.mul(opos, opos, _gwrtVec3b);
          _valueTypes.Trs.toRotation(_gwrtQuatb, ltrs);
          _valueTypes.Vec3.transformQuat(opos, opos, _gwrtQuatb);
          _valueTypes.Trs.toPosition(_gwrtVec3b, ltrs);
          _valueTypes.Vec3.add(opos, opos, _gwrtVec3b);
          _valueTypes.Quat.mul(orot, _gwrtQuatb, orot);
          curr = curr._parent;
        }
        _valueTypes.Mat4.fromRT(out, orot, opos);
        return out;
      },
      lookAt: function lookAt(pos, up) {
        this.getWorldPosition(_laVec3);
        _valueTypes.Vec3.sub(_laVec3, _laVec3, pos);
        _valueTypes.Vec3.normalize(_laVec3, _laVec3);
        _valueTypes.Quat.fromViewUp(_laQuat, _laVec3, up);
        this.setWorldRotation(_laQuat);
      },
      _updateLocalMatrix: updateLocalMatrix2D,
      _calculWorldMatrix: function _calculWorldMatrix() {
        this._localMatDirty & LocalDirtyFlag.TRSS && this._updateLocalMatrix();
        var parent = this._parent;
        parent ? this._mulMat(this._worldMatrix, parent._worldMatrix, this._matrix) : _valueTypes.Mat4.copy(this._worldMatrix, this._matrix);
        this._worldMatDirty = false;
      },
      _mulMat: mulMat2D,
      _updateWorldMatrix: function _updateWorldMatrix() {
        this._parent && this._parent._updateWorldMatrix();
        if (this._worldMatDirty) {
          this._calculWorldMatrix();
          var children = this._children;
          for (var i = 0, l = children.length; i < l; i++) children[i]._worldMatDirty = true;
        }
      },
      setLocalDirty: function setLocalDirty(flag) {
        this._localMatDirty |= flag;
        this._worldMatDirty = true;
        flag === LocalDirtyFlag.ALL_POSITION || flag === LocalDirtyFlag.POSITION ? this._renderFlag |= RenderFlow.FLAG_WORLD_TRANSFORM : this._renderFlag |= RenderFlow.FLAG_TRANSFORM;
      },
      setWorldDirty: function setWorldDirty() {
        this._worldMatDirty = true;
      },
      getLocalMatrix: function getLocalMatrix(out) {
        this._updateLocalMatrix();
        return _valueTypes.Mat4.copy(out, this._matrix);
      },
      getWorldMatrix: function getWorldMatrix(out) {
        this._updateWorldMatrix();
        return _valueTypes.Mat4.copy(out, this._worldMatrix);
      },
      convertToNodeSpaceAR: function convertToNodeSpaceAR(worldPoint, out) {
        this._updateWorldMatrix();
        _valueTypes.Mat4.invert(_mat4_temp, this._worldMatrix);
        if (worldPoint instanceof cc.Vec2) {
          out = out || new cc.Vec2();
          return _valueTypes.Vec2.transformMat4(out, worldPoint, _mat4_temp);
        }
        out = out || new cc.Vec3();
        return _valueTypes.Vec3.transformMat4(out, worldPoint, _mat4_temp);
      },
      convertToWorldSpaceAR: function convertToWorldSpaceAR(nodePoint, out) {
        this._updateWorldMatrix();
        if (nodePoint instanceof cc.Vec2) {
          out = out || new cc.Vec2();
          return _valueTypes.Vec2.transformMat4(out, nodePoint, this._worldMatrix);
        }
        out = out || new cc.Vec3();
        return _valueTypes.Vec3.transformMat4(out, nodePoint, this._worldMatrix);
      },
      convertToNodeSpace: function convertToNodeSpace(worldPoint) {
        this._updateWorldMatrix();
        _valueTypes.Mat4.invert(_mat4_temp, this._worldMatrix);
        var out = new cc.Vec2();
        _valueTypes.Vec2.transformMat4(out, worldPoint, _mat4_temp);
        out.x += this._anchorPoint.x * this._contentSize.width;
        out.y += this._anchorPoint.y * this._contentSize.height;
        return out;
      },
      convertToWorldSpace: function convertToWorldSpace(nodePoint) {
        this._updateWorldMatrix();
        var out = new cc.Vec2(nodePoint.x - this._anchorPoint.x * this._contentSize.width, nodePoint.y - this._anchorPoint.y * this._contentSize.height);
        return _valueTypes.Vec2.transformMat4(out, out, this._worldMatrix);
      },
      getNodeToParentTransform: function getNodeToParentTransform(out) {
        out || (out = AffineTrans.identity());
        this._updateLocalMatrix();
        var contentSize = this._contentSize;
        _vec3_temp.x = -this._anchorPoint.x * contentSize.width;
        _vec3_temp.y = -this._anchorPoint.y * contentSize.height;
        _valueTypes.Mat4.copy(_mat4_temp, this._matrix);
        _valueTypes.Mat4.transform(_mat4_temp, _mat4_temp, _vec3_temp);
        return AffineTrans.fromMat4(out, _mat4_temp);
      },
      getNodeToParentTransformAR: function getNodeToParentTransformAR(out) {
        out || (out = AffineTrans.identity());
        this._updateLocalMatrix();
        return AffineTrans.fromMat4(out, this._matrix);
      },
      getNodeToWorldTransform: function getNodeToWorldTransform(out) {
        out || (out = AffineTrans.identity());
        this._updateWorldMatrix();
        var contentSize = this._contentSize;
        _vec3_temp.x = -this._anchorPoint.x * contentSize.width;
        _vec3_temp.y = -this._anchorPoint.y * contentSize.height;
        _valueTypes.Mat4.copy(_mat4_temp, this._worldMatrix);
        _valueTypes.Mat4.transform(_mat4_temp, _mat4_temp, _vec3_temp);
        return AffineTrans.fromMat4(out, _mat4_temp);
      },
      getNodeToWorldTransformAR: function getNodeToWorldTransformAR(out) {
        out || (out = AffineTrans.identity());
        this._updateWorldMatrix();
        return AffineTrans.fromMat4(out, this._worldMatrix);
      },
      getParentToNodeTransform: function getParentToNodeTransform(out) {
        out || (out = AffineTrans.identity());
        this._updateLocalMatrix();
        _valueTypes.Mat4.invert(_mat4_temp, this._matrix);
        return AffineTrans.fromMat4(out, _mat4_temp);
      },
      getWorldToNodeTransform: function getWorldToNodeTransform(out) {
        out || (out = AffineTrans.identity());
        this._updateWorldMatrix();
        _valueTypes.Mat4.invert(_mat4_temp, this._worldMatrix);
        return AffineTrans.fromMat4(out, _mat4_temp);
      },
      convertTouchToNodeSpace: function convertTouchToNodeSpace(touch) {
        return this.convertToNodeSpace(touch.getLocation());
      },
      convertTouchToNodeSpaceAR: function convertTouchToNodeSpaceAR(touch) {
        return this.convertToNodeSpaceAR(touch.getLocation());
      },
      getBoundingBox: function getBoundingBox() {
        this._updateLocalMatrix();
        var width = this._contentSize.width;
        var height = this._contentSize.height;
        var rect = cc.rect(-this._anchorPoint.x * width, -this._anchorPoint.y * height, width, height);
        return rect.transformMat4(rect, this._matrix);
      },
      getBoundingBoxToWorld: function getBoundingBoxToWorld() {
        if (this._parent) {
          this._parent._updateWorldMatrix();
          return this._getBoundingBoxTo();
        }
        return this.getBoundingBox();
      },
      _getBoundingBoxTo: function _getBoundingBoxTo() {
        var width = this._contentSize.width;
        var height = this._contentSize.height;
        var rect = cc.rect(-this._anchorPoint.x * width, -this._anchorPoint.y * height, width, height);
        this._calculWorldMatrix();
        rect.transformMat4(rect, this._worldMatrix);
        if (!this._children) return rect;
        var locChildren = this._children;
        for (var i = 0; i < locChildren.length; i++) {
          var child = locChildren[i];
          if (child && child.active) {
            var childRect = child._getBoundingBoxTo();
            childRect && rect.union(rect, childRect);
          }
        }
        return rect;
      },
      _updateOrderOfArrival: function _updateOrderOfArrival() {
        var arrivalOrder = this._parent ? ++this._parent._childArrivalOrder : 0;
        this._localZOrder = 4294901760 & this._localZOrder | arrivalOrder;
        this.emit(EventType.SIBLING_ORDER_CHANGED);
      },
      addChild: function addChild(child, zIndex, name) {
        false;
        cc.assertID(child, 1606);
        cc.assertID(null === child._parent, 1605);
        child.parent = this;
        void 0 !== zIndex && (child.zIndex = zIndex);
        void 0 !== name && (child.name = name);
      },
      cleanup: function cleanup() {
        ActionManagerExist && cc.director.getActionManager().removeAllActionsFromTarget(this);
        eventManager.removeListeners(this);
        var i, len = this._children.length, node;
        for (i = 0; i < len; ++i) {
          node = this._children[i];
          node && node.cleanup();
        }
      },
      sortAllChildren: function sortAllChildren() {
        if (this._reorderChildDirty) {
          this._reorderChildDirty = false;
          var _children = this._children, child;
          this._childArrivalOrder = 1;
          for (var i = 0, len = _children.length; i < len; i++) {
            child = _children[i];
            child._updateOrderOfArrival();
          }
          eventManager._setDirtyForNode(this);
          if (_children.length > 1) {
            var _child, child2;
            for (var _i2 = 1, count = _children.length; _i2 < count; _i2++) {
              _child = _children[_i2];
              var j = _i2;
              for (;j > 0 && (child2 = _children[j - 1])._localZOrder > _child._localZOrder; j--) _children[j] = child2;
              _children[j] = _child;
            }
            this.emit(EventType.CHILD_REORDER, this);
          }
          cc.director.__fastOff(cc.Director.EVENT_AFTER_UPDATE, this.sortAllChildren, this);
        }
      },
      _delaySort: function _delaySort() {
        if (!this._reorderChildDirty) {
          this._reorderChildDirty = true;
          cc.director.__fastOn(cc.Director.EVENT_AFTER_UPDATE, this.sortAllChildren, this);
        }
      },
      _restoreProperties: false,
      onRestore: false
    };
    false;
    var Node = cc.Class(NodeDefines);
    var _p = Node.prototype;
    js.getset(_p, "position", _p.getPosition, _p.setPosition, false, true);
    var vec3_tmp;
    false;
    cc.Node = module.exports = Node;
  }), {
    "./event-manager": 103,
    "./event/event": 106,
    "./event/event-target": 105,
    "./platform/CCMacro": 146,
    "./platform/js": 161,
    "./renderer/render-flow": 172,
    "./utils/affine-transform": 202,
    "./utils/base-node": 203,
    "./utils/prefab-helper": 213,
    "./utils/trans-pool": 219,
    "./value-types": 225
  } ],
  17: [ (function(require, module, exports) {
    "use strict";
    var Node = require("./CCNode");
    var RenderFlow = require("./renderer/render-flow");
    var HideInHierarchy = cc.Object.Flags.HideInHierarchy;
    var LocalDirtyFlag = Node._LocalDirtyFlag;
    var POSITION_ON = 1;
    var PrivateNode = cc.Class({
      name: "cc.PrivateNode",
      extends: Node,
      properties: {
        x: {
          get: function get() {
            return this._originPos.x;
          },
          set: function set(value) {
            var localPosition = this._originPos;
            if (value !== localPosition.x) {
              localPosition.x = value;
              this._posDirty(true);
            }
          },
          override: true
        },
        y: {
          get: function get() {
            return this._originPos.y;
          },
          set: function set(value) {
            var localPosition = this._originPos;
            if (value !== localPosition.y) {
              localPosition.y = value;
              this._posDirty(true);
            }
          },
          override: true
        },
        zIndex: {
          get: function get() {
            return cc.macro.MIN_ZINDEX;
          },
          set: function set() {
            cc.warnID(1638);
          },
          override: true
        },
        showInEditor: {
          default: false,
          editorOnly: true,
          override: true
        }
      },
      ctor: function ctor(name) {
        this._localZOrder = cc.macro.MIN_ZINDEX << 16;
        this._originPos = cc.v2();
        false;
      },
      _posDirty: function _posDirty(sendEvent) {
        this.setLocalDirty(LocalDirtyFlag.POSITION);
        true, this._renderFlag |= RenderFlow.FLAG_TRANSFORM;
        true === sendEvent && this._eventMask & POSITION_ON && this.emit(Node.EventType.POSITION_CHANGED);
      },
      _updateLocalMatrix: function _updateLocalMatrix() {
        if (!this._localMatDirty) return;
        var parent = this.parent;
        if (parent) {
          this._trs[0] = this._originPos.x - (parent._anchorPoint.x - .5) * parent._contentSize.width;
          this._trs[1] = this._originPos.y - (parent._anchorPoint.y - .5) * parent._contentSize.height;
        }
        this._super();
      },
      getPosition: function getPosition() {
        return new cc.Vec2(this._originPos);
      },
      setPosition: function setPosition(x, y) {
        if (void 0 === y) {
          x = x.x;
          y = x.y;
        }
        var pos = this._originPos;
        if (pos.x === x && pos.y === y) return;
        pos.x = x;
        pos.y = y;
        this._posDirty(true);
      },
      setParent: function setParent(value) {
        var oldParent = this._parent;
        this._super(value);
        if (oldParent !== value) {
          oldParent && oldParent.off(Node.EventType.ANCHOR_CHANGED, this._posDirty, this);
          value && value.on(Node.EventType.ANCHOR_CHANGED, this._posDirty, this);
        }
      },
      _updateOrderOfArrival: function _updateOrderOfArrival() {}
    });
    cc.js.getset(PrivateNode.prototype, "parent", PrivateNode.prototype.getParent, PrivateNode.prototype.setParent);
    cc.js.getset(PrivateNode.prototype, "position", PrivateNode.prototype.getPosition, PrivateNode.prototype.setPosition);
    cc.PrivateNode = module.exports = PrivateNode;
  }), {
    "./CCNode": 16,
    "./renderer/render-flow": 172
  } ],
  18: [ (function(require, module, exports) {
    "use strict";
    var NIL = function NIL() {};
    cc.Scene = cc.Class({
      name: "cc.Scene",
      extends: require("./CCNode"),
      properties: {
        _is3DNode: {
          default: true,
          override: true
        },
        autoReleaseAssets: true
      },
      ctor: function ctor() {
        this._anchorPoint.x = 0;
        this._anchorPoint.y = 0;
        this._activeInHierarchy = false;
        this._inited = !cc.game._isCloning;
        false;
        this.dependAssets = null;
      },
      destroy: function destroy() {
        if (cc.Object.prototype.destroy.call(this)) {
          var children = this._children;
          for (var i = 0; i < children.length; ++i) children[i].active = false;
        }
        this._active = false;
        this._activeInHierarchy = false;
      },
      _onHierarchyChanged: NIL,
      _instantiate: null,
      _load: function _load() {
        if (!this._inited) {
          false;
          false;
          this._onBatchCreated();
          this._inited = true;
        }
      },
      _activate: function _activate(active) {
        active = false !== active;
        false, false;
        cc.director._nodeActivator.activateNode(this, active);
      }
    });
    module.exports = cc.Scene;
  }), {
    "./CCNode": 16
  } ],
  19: [ (function(require, module, exports) {
    "use strict";
    var js = require("./platform/js");
    var IdGenerater = require("./platform/id-generater");
    var MAX_POOL_SIZE = 20;
    var idGenerater = new IdGenerater("Scheduler");
    var ListEntry = function ListEntry(target, priority, paused, markedForDeletion) {
      this.target = target;
      this.priority = priority;
      this.paused = paused;
      this.markedForDeletion = markedForDeletion;
    };
    var _listEntries = [];
    ListEntry.get = function(target, priority, paused, markedForDeletion) {
      var result = _listEntries.pop();
      if (result) {
        result.target = target;
        result.priority = priority;
        result.paused = paused;
        result.markedForDeletion = markedForDeletion;
      } else result = new ListEntry(target, priority, paused, markedForDeletion);
      return result;
    };
    ListEntry.put = function(entry) {
      if (_listEntries.length < MAX_POOL_SIZE) {
        entry.target = null;
        _listEntries.push(entry);
      }
    };
    var HashUpdateEntry = function HashUpdateEntry(list, entry, target, callback) {
      this.list = list;
      this.entry = entry;
      this.target = target;
      this.callback = callback;
    };
    var _hashUpdateEntries = [];
    HashUpdateEntry.get = function(list, entry, target, callback) {
      var result = _hashUpdateEntries.pop();
      if (result) {
        result.list = list;
        result.entry = entry;
        result.target = target;
        result.callback = callback;
      } else result = new HashUpdateEntry(list, entry, target, callback);
      return result;
    };
    HashUpdateEntry.put = function(entry) {
      if (_hashUpdateEntries.length < MAX_POOL_SIZE) {
        entry.list = entry.entry = entry.target = entry.callback = null;
        _hashUpdateEntries.push(entry);
      }
    };
    var HashTimerEntry = function HashTimerEntry(timers, target, timerIndex, currentTimer, currentTimerSalvaged, paused) {
      var _t = this;
      _t.timers = timers;
      _t.target = target;
      _t.timerIndex = timerIndex;
      _t.currentTimer = currentTimer;
      _t.currentTimerSalvaged = currentTimerSalvaged;
      _t.paused = paused;
    };
    var _hashTimerEntries = [];
    HashTimerEntry.get = function(timers, target, timerIndex, currentTimer, currentTimerSalvaged, paused) {
      var result = _hashTimerEntries.pop();
      if (result) {
        result.timers = timers;
        result.target = target;
        result.timerIndex = timerIndex;
        result.currentTimer = currentTimer;
        result.currentTimerSalvaged = currentTimerSalvaged;
        result.paused = paused;
      } else result = new HashTimerEntry(timers, target, timerIndex, currentTimer, currentTimerSalvaged, paused);
      return result;
    };
    HashTimerEntry.put = function(entry) {
      if (_hashTimerEntries.length < MAX_POOL_SIZE) {
        entry.timers = entry.target = entry.currentTimer = null;
        _hashTimerEntries.push(entry);
      }
    };
    function CallbackTimer() {
      this._lock = false;
      this._scheduler = null;
      this._elapsed = -1;
      this._runForever = false;
      this._useDelay = false;
      this._timesExecuted = 0;
      this._repeat = 0;
      this._delay = 0;
      this._interval = 0;
      this._target = null;
      this._callback = null;
    }
    var proto = CallbackTimer.prototype;
    proto.initWithCallback = function(scheduler, callback, target, seconds, repeat, delay) {
      this._lock = false;
      this._scheduler = scheduler;
      this._target = target;
      this._callback = callback;
      this._elapsed = -1;
      this._interval = seconds;
      this._delay = delay;
      this._useDelay = this._delay > 0;
      this._repeat = repeat;
      this._runForever = this._repeat === cc.macro.REPEAT_FOREVER;
      return true;
    };
    proto.getInterval = function() {
      return this._interval;
    };
    proto.setInterval = function(interval) {
      this._interval = interval;
    };
    proto.update = function(dt) {
      if (-1 === this._elapsed) {
        this._elapsed = 0;
        this._timesExecuted = 0;
      } else {
        this._elapsed += dt;
        if (this._runForever && !this._useDelay) {
          if (this._elapsed >= this._interval) {
            this.trigger();
            this._elapsed = 0;
          }
        } else {
          if (this._useDelay) {
            if (this._elapsed >= this._delay) {
              this.trigger();
              this._elapsed -= this._delay;
              this._timesExecuted += 1;
              this._useDelay = false;
            }
          } else if (this._elapsed >= this._interval) {
            this.trigger();
            this._elapsed = 0;
            this._timesExecuted += 1;
          }
          this._callback && !this._runForever && this._timesExecuted > this._repeat && this.cancel();
        }
      }
    };
    proto.getCallback = function() {
      return this._callback;
    };
    proto.trigger = function() {
      if (this._target && this._callback) {
        this._lock = true;
        this._callback.call(this._target, this._elapsed);
        this._lock = false;
      }
    };
    proto.cancel = function() {
      this._scheduler.unschedule(this._callback, this._target);
    };
    var _timers = [];
    CallbackTimer.get = function() {
      return _timers.pop() || new CallbackTimer();
    };
    CallbackTimer.put = function(timer) {
      if (_timers.length < MAX_POOL_SIZE && !timer._lock) {
        timer._scheduler = timer._target = timer._callback = null;
        _timers.push(timer);
      }
    };
    cc.Scheduler = function() {
      this._timeScale = 1;
      this._updatesNegList = [];
      this._updates0List = [];
      this._updatesPosList = [];
      this._hashForUpdates = js.createMap(true);
      this._hashForTimers = js.createMap(true);
      this._currentTarget = null;
      this._currentTargetSalvaged = false;
      this._updateHashLocked = false;
      this._arrayForTimers = [];
    };
    cc.Scheduler.prototype = {
      constructor: cc.Scheduler,
      _removeHashElement: function _removeHashElement(element) {
        delete this._hashForTimers[element.target._id];
        var arr = this._arrayForTimers;
        for (var i = 0, l = arr.length; i < l; i++) if (arr[i] === element) {
          arr.splice(i, 1);
          break;
        }
        HashTimerEntry.put(element);
      },
      _removeUpdateFromHash: function _removeUpdateFromHash(entry) {
        var targetId = entry.target._id;
        var self = this, element = self._hashForUpdates[targetId];
        if (element) {
          var list = element.list, listEntry = element.entry;
          for (var i = 0, l = list.length; i < l; i++) if (list[i] === listEntry) {
            list.splice(i, 1);
            break;
          }
          delete self._hashForUpdates[targetId];
          ListEntry.put(listEntry);
          HashUpdateEntry.put(element);
        }
      },
      _priorityIn: function _priorityIn(ppList, listElement, priority) {
        for (var i = 0; i < ppList.length; i++) if (priority < ppList[i].priority) {
          ppList.splice(i, 0, listElement);
          return;
        }
        ppList.push(listElement);
      },
      _appendIn: function _appendIn(ppList, listElement) {
        ppList.push(listElement);
      },
      enableForTarget: function enableForTarget(target) {
        target._id || (target.__instanceId ? cc.warnID(1513) : target._id = idGenerater.getNewId());
      },
      setTimeScale: function setTimeScale(timeScale) {
        this._timeScale = timeScale;
      },
      getTimeScale: function getTimeScale() {
        return this._timeScale;
      },
      update: function update(dt) {
        this._updateHashLocked = true;
        1 !== this._timeScale && (dt *= this._timeScale);
        var i, list, len, entry;
        for (i = 0, list = this._updatesNegList, len = list.length; i < len; i++) {
          entry = list[i];
          entry.paused || entry.markedForDeletion || entry.target.update(dt);
        }
        for (i = 0, list = this._updates0List, len = list.length; i < len; i++) {
          entry = list[i];
          entry.paused || entry.markedForDeletion || entry.target.update(dt);
        }
        for (i = 0, list = this._updatesPosList, len = list.length; i < len; i++) {
          entry = list[i];
          entry.paused || entry.markedForDeletion || entry.target.update(dt);
        }
        var elt, arr = this._arrayForTimers;
        for (i = 0; i < arr.length; i++) {
          elt = arr[i];
          this._currentTarget = elt;
          this._currentTargetSalvaged = false;
          if (!elt.paused) for (elt.timerIndex = 0; elt.timerIndex < elt.timers.length; ++elt.timerIndex) {
            elt.currentTimer = elt.timers[elt.timerIndex];
            elt.currentTimerSalvaged = false;
            elt.currentTimer.update(dt);
            elt.currentTimer = null;
          }
          if (this._currentTargetSalvaged && 0 === this._currentTarget.timers.length) {
            this._removeHashElement(this._currentTarget);
            --i;
          }
        }
        for (i = 0, list = this._updatesNegList; i < list.length; ) {
          entry = list[i];
          entry.markedForDeletion ? this._removeUpdateFromHash(entry) : i++;
        }
        for (i = 0, list = this._updates0List; i < list.length; ) {
          entry = list[i];
          entry.markedForDeletion ? this._removeUpdateFromHash(entry) : i++;
        }
        for (i = 0, list = this._updatesPosList; i < list.length; ) {
          entry = list[i];
          entry.markedForDeletion ? this._removeUpdateFromHash(entry) : i++;
        }
        this._updateHashLocked = false;
        this._currentTarget = null;
      },
      schedule: function schedule(callback, target, interval, repeat, delay, paused) {
        if ("function" !== typeof callback) {
          var tmp = callback;
          callback = target;
          target = tmp;
        }
        if (4 === arguments.length || 5 === arguments.length) {
          paused = !!repeat;
          repeat = cc.macro.REPEAT_FOREVER;
          delay = 0;
        }
        cc.assertID(target, 1502);
        var targetId = target._id;
        if (!targetId) if (target.__instanceId) {
          cc.warnID(1513);
          targetId = target._id = target.__instanceId;
        } else cc.errorID(1510);
        var element = this._hashForTimers[targetId];
        if (element) element.paused !== paused && cc.warnID(1511); else {
          element = HashTimerEntry.get(null, target, 0, null, null, paused);
          this._arrayForTimers.push(element);
          this._hashForTimers[targetId] = element;
        }
        var timer, i;
        if (null == element.timers) element.timers = []; else for (i = 0; i < element.timers.length; ++i) {
          timer = element.timers[i];
          if (timer && callback === timer._callback) {
            cc.logID(1507, timer.getInterval(), interval);
            timer._interval = interval;
            return;
          }
        }
        timer = CallbackTimer.get();
        timer.initWithCallback(this, callback, target, interval, repeat, delay);
        element.timers.push(timer);
        this._currentTarget === element && this._currentTargetSalvaged && (this._currentTargetSalvaged = false);
      },
      scheduleUpdate: function scheduleUpdate(target, priority, paused) {
        var targetId = target._id;
        if (!targetId) if (target.__instanceId) {
          cc.warnID(1513);
          targetId = target._id = target.__instanceId;
        } else cc.errorID(1510);
        var hashElement = this._hashForUpdates[targetId];
        if (hashElement && hashElement.entry) {
          if (hashElement.entry.priority === priority) {
            hashElement.entry.markedForDeletion = false;
            hashElement.entry.paused = paused;
            return;
          }
          if (this._updateHashLocked) {
            cc.logID(1506);
            hashElement.entry.markedForDeletion = false;
            hashElement.entry.paused = paused;
            return;
          }
          this.unscheduleUpdate(target);
        }
        var listElement = ListEntry.get(target, priority, paused, false);
        var ppList;
        if (0 === priority) {
          ppList = this._updates0List;
          this._appendIn(ppList, listElement);
        } else {
          ppList = priority < 0 ? this._updatesNegList : this._updatesPosList;
          this._priorityIn(ppList, listElement, priority);
        }
        this._hashForUpdates[targetId] = HashUpdateEntry.get(ppList, listElement, target, null);
      },
      unschedule: function unschedule(callback, target) {
        if (!target || !callback) return;
        var targetId = target._id;
        if (!targetId) if (target.__instanceId) {
          cc.warnID(1513);
          targetId = target._id = target.__instanceId;
        } else cc.errorID(1510);
        var self = this, element = self._hashForTimers[targetId];
        if (element) {
          var timers = element.timers;
          for (var i = 0, li = timers.length; i < li; i++) {
            var timer = timers[i];
            if (callback === timer._callback) {
              timer !== element.currentTimer || element.currentTimerSalvaged || (element.currentTimerSalvaged = true);
              timers.splice(i, 1);
              CallbackTimer.put(timer);
              element.timerIndex >= i && element.timerIndex--;
              0 === timers.length && (self._currentTarget === element ? self._currentTargetSalvaged = true : self._removeHashElement(element));
              return;
            }
          }
        }
      },
      unscheduleUpdate: function unscheduleUpdate(target) {
        if (!target) return;
        var targetId = target._id;
        if (!targetId) if (target.__instanceId) {
          cc.warnID(1513);
          targetId = target._id = target.__instanceId;
        } else cc.errorID(1510);
        var element = this._hashForUpdates[targetId];
        element && (this._updateHashLocked ? element.entry.markedForDeletion = true : this._removeUpdateFromHash(element.entry));
      },
      unscheduleAllForTarget: function unscheduleAllForTarget(target) {
        if (!target) return;
        var targetId = target._id;
        if (!targetId) if (target.__instanceId) {
          cc.warnID(1513);
          targetId = target._id = target.__instanceId;
        } else cc.errorID(1510);
        var element = this._hashForTimers[targetId];
        if (element) {
          var timers = element.timers;
          timers.indexOf(element.currentTimer) > -1 && !element.currentTimerSalvaged && (element.currentTimerSalvaged = true);
          for (var i = 0, l = timers.length; i < l; i++) CallbackTimer.put(timers[i]);
          timers.length = 0;
          this._currentTarget === element ? this._currentTargetSalvaged = true : this._removeHashElement(element);
        }
        this.unscheduleUpdate(target);
      },
      unscheduleAll: function unscheduleAll() {
        this.unscheduleAllWithMinPriority(cc.Scheduler.PRIORITY_SYSTEM);
      },
      unscheduleAllWithMinPriority: function unscheduleAllWithMinPriority(minPriority) {
        var i, element, arr = this._arrayForTimers;
        for (i = arr.length - 1; i >= 0; i--) {
          element = arr[i];
          this.unscheduleAllForTarget(element.target);
        }
        var entry;
        var temp_length = 0;
        if (minPriority < 0) for (i = 0; i < this._updatesNegList.length; ) {
          temp_length = this._updatesNegList.length;
          entry = this._updatesNegList[i];
          entry && entry.priority >= minPriority && this.unscheduleUpdate(entry.target);
          temp_length == this._updatesNegList.length && i++;
        }
        if (minPriority <= 0) for (i = 0; i < this._updates0List.length; ) {
          temp_length = this._updates0List.length;
          entry = this._updates0List[i];
          entry && this.unscheduleUpdate(entry.target);
          temp_length == this._updates0List.length && i++;
        }
        for (i = 0; i < this._updatesPosList.length; ) {
          temp_length = this._updatesPosList.length;
          entry = this._updatesPosList[i];
          entry && entry.priority >= minPriority && this.unscheduleUpdate(entry.target);
          temp_length == this._updatesPosList.length && i++;
        }
      },
      isScheduled: function isScheduled(callback, target) {
        cc.assertID(callback, 1508);
        cc.assertID(target, 1509);
        var targetId = target._id;
        if (!targetId) if (target.__instanceId) {
          cc.warnID(1513);
          targetId = target._id = target.__instanceId;
        } else cc.errorID(1510);
        var element = this._hashForTimers[targetId];
        if (!element) return false;
        if (null == element.timers) return false;
        var timers = element.timers;
        for (var i = 0; i < timers.length; ++i) {
          var timer = timers[i];
          if (callback === timer._callback) return true;
        }
        return false;
      },
      pauseAllTargets: function pauseAllTargets() {
        return this.pauseAllTargetsWithMinPriority(cc.Scheduler.PRIORITY_SYSTEM);
      },
      pauseAllTargetsWithMinPriority: function pauseAllTargetsWithMinPriority(minPriority) {
        var idsWithSelectors = [];
        var self = this, element, locArrayForTimers = self._arrayForTimers;
        var i, li;
        for (i = 0, li = locArrayForTimers.length; i < li; i++) {
          element = locArrayForTimers[i];
          if (element) {
            element.paused = true;
            idsWithSelectors.push(element.target);
          }
        }
        var entry;
        if (minPriority < 0) for (i = 0; i < this._updatesNegList.length; i++) {
          entry = this._updatesNegList[i];
          if (entry && entry.priority >= minPriority) {
            entry.paused = true;
            idsWithSelectors.push(entry.target);
          }
        }
        if (minPriority <= 0) for (i = 0; i < this._updates0List.length; i++) {
          entry = this._updates0List[i];
          if (entry) {
            entry.paused = true;
            idsWithSelectors.push(entry.target);
          }
        }
        for (i = 0; i < this._updatesPosList.length; i++) {
          entry = this._updatesPosList[i];
          if (entry && entry.priority >= minPriority) {
            entry.paused = true;
            idsWithSelectors.push(entry.target);
          }
        }
        return idsWithSelectors;
      },
      resumeTargets: function resumeTargets(targetsToResume) {
        if (!targetsToResume) return;
        for (var i = 0; i < targetsToResume.length; i++) this.resumeTarget(targetsToResume[i]);
      },
      pauseTarget: function pauseTarget(target) {
        cc.assertID(target, 1503);
        var targetId = target._id;
        if (!targetId) if (target.__instanceId) {
          cc.warnID(1513);
          targetId = target._id = target.__instanceId;
        } else cc.errorID(1510);
        var self = this, element = self._hashForTimers[targetId];
        element && (element.paused = true);
        var elementUpdate = self._hashForUpdates[targetId];
        elementUpdate && (elementUpdate.entry.paused = true);
      },
      resumeTarget: function resumeTarget(target) {
        cc.assertID(target, 1504);
        var targetId = target._id;
        if (!targetId) if (target.__instanceId) {
          cc.warnID(1513);
          targetId = target._id = target.__instanceId;
        } else cc.errorID(1510);
        var self = this, element = self._hashForTimers[targetId];
        element && (element.paused = false);
        var elementUpdate = self._hashForUpdates[targetId];
        elementUpdate && (elementUpdate.entry.paused = false);
      },
      isTargetPaused: function isTargetPaused(target) {
        cc.assertID(target, 1505);
        var targetId = target._id;
        if (!targetId) if (target.__instanceId) {
          cc.warnID(1513);
          targetId = target._id = target.__instanceId;
        } else cc.errorID(1510);
        var element = this._hashForTimers[targetId];
        if (element) return element.paused;
        var elementUpdate = this._hashForUpdates[targetId];
        if (elementUpdate) return elementUpdate.entry.paused;
        return false;
      }
    };
    cc.Scheduler.PRIORITY_SYSTEM = 1 << 31;
    cc.Scheduler.PRIORITY_NON_SYSTEM = cc.Scheduler.PRIORITY_SYSTEM + 1;
    module.exports = cc.Scheduler;
  }), {
    "./platform/id-generater": 157,
    "./platform/js": 161
  } ],
  20: [ (function(require, module, exports) {
    "use strict";
    var preprocess = require("./preprocess");
    var fetch = require("./fetch");
    var Cache = require("./cache");
    var helper = require("./helper");
    var releaseManager = require("./releaseManager");
    var dependUtil = require("./depend-util");
    var load = require("./load");
    var Pipeline = require("./pipeline");
    var Task = require("./task");
    var RequestItem = require("./request-item");
    var downloader = require("./downloader");
    var parser = require("./parser");
    var packManager = require("./pack-manager");
    var Bundle = require("./bundle");
    var builtins = require("./builtins");
    var factory = require("./factory");
    var _require = require("./urlTransformer"), parse = _require.parse, combine = _require.combine;
    var _require2 = require("./utilities"), parseParameters = _require2.parseParameters, asyncify = _require2.asyncify;
    var _require3 = require("./shared"), assets = _require3.assets, files = _require3.files, parsed = _require3.parsed, pipeline = _require3.pipeline, transformPipeline = _require3.transformPipeline, fetchPipeline = _require3.fetchPipeline, RequestType = _require3.RequestType, bundles = _require3.bundles, BuiltinBundleName = _require3.BuiltinBundleName;
    function AssetManager() {
      this._preprocessPipe = preprocess;
      this._fetchPipe = fetch;
      this._loadPipe = load;
      this.pipeline = pipeline.append(preprocess).append(load);
      this.fetchPipeline = fetchPipeline.append(preprocess).append(fetch);
      this.transformPipeline = transformPipeline.append(parse).append(combine);
      this.bundles = bundles;
      this.assets = assets;
      this._files = files;
      this._parsed = parsed;
      this.generalImportBase = "";
      this.generalNativeBase = "";
      this.dependUtil = dependUtil;
      this._releaseManager = releaseManager;
      this.cacheAsset = true;
      this.force = false;
      this.utils = helper;
      this.downloader = downloader;
      this.parser = parser;
      this.builtins = builtins;
      this.packManager = packManager;
      this.factory = factory;
      this.cacheManager = null;
      this.presets = {
        default: {
          priority: 0
        },
        preload: {
          maxConcurrency: 2,
          maxRequestsPerFrame: 2,
          priority: -1
        },
        scene: {
          maxConcurrency: 8,
          maxRequestsPerFrame: 8,
          priority: 1
        },
        bundle: {
          maxConcurrency: 8,
          maxRequestsPerFrame: 8,
          priority: 2
        },
        remote: {
          maxRetryCount: 4
        },
        script: {
          priority: 2
        }
      };
    }
    AssetManager.Pipeline = Pipeline;
    AssetManager.Task = Task;
    AssetManager.Cache = Cache;
    AssetManager.RequestItem = RequestItem;
    AssetManager.Bundle = Bundle;
    AssetManager.BuiltinBundleName = BuiltinBundleName;
    AssetManager.prototype = {
      constructor: AssetManager,
      get main() {
        return bundles.get(BuiltinBundleName.MAIN);
      },
      get resources() {
        return bundles.get(BuiltinBundleName.RESOURCES);
      },
      get internal() {
        return bundles.get(BuiltinBundleName.INTERNAL);
      },
      init: function init(options) {
        options = options || Object.create(null);
        this._files.clear();
        this._parsed.clear();
        this._releaseManager.init();
        this.assets.clear();
        this.bundles.clear();
        this.packManager.init();
        this.downloader.init(options.bundleVers);
        this.parser.init();
        this.dependUtil.init();
        this.generalImportBase = options.importBase;
        this.generalNativeBase = options.nativeBase;
      },
      getBundle: function getBundle(name) {
        return bundles.get(name);
      },
      removeBundle: function removeBundle(bundle) {
        bundle._destroy();
        bundles.remove(bundle.name);
      },
      loadAny: function loadAny(requests, options, onProgress, onComplete) {
        var _parseParameters = parseParameters(options, onProgress, onComplete), options = _parseParameters.options, onProgress = _parseParameters.onProgress, onComplete = _parseParameters.onComplete;
        options.preset = options.preset || "default";
        var task = new Task({
          input: requests,
          onProgress: onProgress,
          onComplete: asyncify(onComplete),
          options: options
        });
        pipeline.async(task);
      },
      preloadAny: function preloadAny(requests, options, onProgress, onComplete) {
        var _parseParameters2 = parseParameters(options, onProgress, onComplete), options = _parseParameters2.options, onProgress = _parseParameters2.onProgress, onComplete = _parseParameters2.onComplete;
        options.preset = options.preset || "preload";
        var task = new Task({
          input: requests,
          onProgress: onProgress,
          onComplete: asyncify(onComplete),
          options: options
        });
        fetchPipeline.async(task);
      },
      postLoadNative: function postLoadNative(asset, options, onComplete) {
        if (!(asset instanceof cc.Asset)) throw new Error("input is not asset");
        var _parseParameters3 = parseParameters(options, void 0, onComplete), options = _parseParameters3.options, onComplete = _parseParameters3.onComplete;
        if (!asset._native || asset._nativeAsset) return asyncify(onComplete)(null);
        var depend = dependUtil.getNativeDep(asset._uuid);
        if (depend) {
          if (!bundles.has(depend.bundle)) {
            var bundle = bundles.find((function(bundle) {
              return bundle.getAssetInfo(asset._uuid);
            }));
            bundle && (depend.bundle = bundle.name);
          }
          this.loadAny(depend, options, (function(err, _native) {
            err ? cc.error(err.message, err.stack) : !asset._nativeAsset && (asset._nativeAsset = _native);
            onComplete && onComplete(err);
          }));
        }
      },
      loadRemote: function loadRemote(url, options, onComplete) {
        var _parseParameters4 = parseParameters(options, void 0, onComplete), options = _parseParameters4.options, onComplete = _parseParameters4.onComplete;
        options.__isNative__ = true;
        options.preset = options.preset || "remote";
        this.loadAny({
          url: url
        }, options, null, (function(err, data) {
          if (err) {
            cc.error(err.message, err.stack);
            onComplete && onComplete(err, null);
          } else factory.create(url, data, options.ext || cc.path.extname(url), options, onComplete);
        }));
      },
      loadScript: function loadScript(url, options, onComplete) {
        var _parseParameters5 = parseParameters(options, void 0, onComplete), options = _parseParameters5.options, onComplete = _parseParameters5.onComplete;
        options.__requestType__ = RequestType.URL;
        options.preset = options.preset || "script";
        this.loadAny(url, options, onComplete);
      },
      loadBundle: function loadBundle(nameOrUrl, options, onComplete) {
        var _parseParameters6 = parseParameters(options, void 0, onComplete), options = _parseParameters6.options, onComplete = _parseParameters6.onComplete;
        var bundleName = cc.path.basename(nameOrUrl);
        if (this.bundles.has(bundleName)) return asyncify(onComplete)(null, this.getBundle(bundleName));
        options.preset = options.preset || "bundle";
        options.ext = "bundle";
        this.loadRemote(nameOrUrl, options, onComplete);
      },
      releaseAsset: function releaseAsset(asset) {
        releaseManager.tryRelease(asset, true);
      },
      releaseUnusedAssets: function releaseUnusedAssets() {
        assets.forEach((function(asset) {
          releaseManager.tryRelease(asset);
        }));
      },
      releaseAll: function releaseAll() {
        assets.forEach((function(asset) {
          releaseManager.tryRelease(asset, true);
        }));
      },
      _transform: function _transform(input, options) {
        var subTask = Task.create({
          input: input,
          options: options
        });
        var urls = [];
        try {
          var result = transformPipeline.sync(subTask);
          for (var i = 0, l = result.length; i < l; i++) {
            var item = result[i];
            var url = item.url;
            item.recycle();
            urls.push(url);
          }
        } catch (e) {
          for (var i = 0, l = subTask.output.length; i < l; i++) subTask.output[i].recycle();
          cc.error(e.message, e.stack);
        }
        subTask.recycle();
        return urls.length > 1 ? urls : urls[0];
      }
    };
    cc.AssetManager = AssetManager;
    cc.assetManager = new AssetManager();
    Object.defineProperty(cc, "resources", {
      get: function get() {
        return bundles.get(BuiltinBundleName.RESOURCES);
      }
    });
    module.exports = cc.assetManager;
  }), {
    "./builtins": 21,
    "./bundle": 22,
    "./cache": 23,
    "./depend-util": 25,
    "./downloader": 32,
    "./factory": 33,
    "./fetch": 34,
    "./helper": 36,
    "./load": 38,
    "./pack-manager": 39,
    "./parser": 40,
    "./pipeline": 41,
    "./preprocess": 42,
    "./releaseManager": 43,
    "./request-item": 44,
    "./shared": 45,
    "./task": 46,
    "./urlTransformer": 47,
    "./utilities": 48
  } ],
  21: [ (function(require, module, exports) {
    "use strict";
    var Cache = require("./cache");
    var releaseManager = require("./releaseManager");
    var _require = require("./shared"), BuiltinBundleName = _require.BuiltinBundleName;
    var builtins = {
      _assets: new Cache({
        material: new Cache(),
        effect: new Cache()
      }),
      _loadBuiltins: function _loadBuiltins(name, cb) {
        var dirname = name + "s";
        var builtin = this._assets.get(name);
        return cc.assetManager.internal.loadDir(dirname, null, null, (function(err, assets) {
          if (err) cc.error(err.message, err.stack); else for (var i = 0; i < assets.length; i++) {
            var asset = assets[i];
            builtin.add(asset.name, asset.addRef());
          }
          cb();
        }));
      },
      init: function init(cb) {
        var _this = this;
        this.clear();
        if (cc.game.renderType === cc.game.RENDER_TYPE_CANVAS || !cc.assetManager.bundles.has(BuiltinBundleName.INTERNAL)) return cb && cb();
        this._loadBuiltins("effect", (function() {
          _this._loadBuiltins("material", cb);
        }));
      },
      getBuiltin: function getBuiltin(type, name) {
        return 0 === arguments.length ? this._assets : 1 === arguments.length ? this._assets.get(type) : this._assets.get(type).get(name);
      },
      clear: function clear() {
        this._assets.forEach((function(assets) {
          assets.forEach((function(asset) {
            releaseManager.tryRelease(asset, true);
          }));
          assets.clear();
        }));
      }
    };
    module.exports = builtins;
  }), {
    "./cache": 23,
    "./releaseManager": 43,
    "./shared": 45
  } ],
  22: [ (function(require, module, exports) {
    "use strict";
    var Config = require("./config");
    var releaseManager = require("./releaseManager");
    var _require = require("./utilities"), parseParameters = _require.parseParameters, parseLoadResArgs = _require.parseLoadResArgs;
    var _require2 = require("./shared"), RequestType = _require2.RequestType, assets = _require2.assets, bundles = _require2.bundles;
    function Bundle() {
      this._config = new Config();
    }
    Bundle.prototype = {
      constructor: Bundle,
      get name() {
        return this._config.name;
      },
      get deps() {
        return this._config.deps;
      },
      get base() {
        return this._config.base;
      },
      getInfoWithPath: function getInfoWithPath(path, type) {
        return this._config.getInfoWithPath(path, type);
      },
      getDirWithPath: function getDirWithPath(path, type, out) {
        return this._config.getDirWithPath(path, type, out);
      },
      getAssetInfo: function getAssetInfo(uuid) {
        return this._config.getAssetInfo(uuid);
      },
      getSceneInfo: function getSceneInfo(name) {
        return this._config.getSceneInfo(name);
      },
      init: function init(options) {
        this._config.init(options);
        bundles.add(options.name, this);
      },
      load: function load(paths, type, onProgress, onComplete) {
        var _parseLoadResArgs = parseLoadResArgs(type, onProgress, onComplete), type = _parseLoadResArgs.type, onProgress = _parseLoadResArgs.onProgress, onComplete = _parseLoadResArgs.onComplete;
        cc.assetManager.loadAny(paths, {
          __requestType__: RequestType.PATH,
          type: type,
          bundle: this.name
        }, onProgress, onComplete);
      },
      preload: function preload(paths, type, onProgress, onComplete) {
        var _parseLoadResArgs2 = parseLoadResArgs(type, onProgress, onComplete), type = _parseLoadResArgs2.type, onProgress = _parseLoadResArgs2.onProgress, onComplete = _parseLoadResArgs2.onComplete;
        cc.assetManager.preloadAny(paths, {
          __requestType__: RequestType.PATH,
          type: type,
          bundle: this.name
        }, onProgress, onComplete);
      },
      loadDir: function loadDir(dir, type, onProgress, onComplete) {
        var _parseLoadResArgs3 = parseLoadResArgs(type, onProgress, onComplete), type = _parseLoadResArgs3.type, onProgress = _parseLoadResArgs3.onProgress, onComplete = _parseLoadResArgs3.onComplete;
        cc.assetManager.loadAny(dir, {
          __requestType__: RequestType.DIR,
          type: type,
          bundle: this.name,
          __outputAsArray__: true
        }, onProgress, onComplete);
      },
      preloadDir: function preloadDir(dir, type, onProgress, onComplete) {
        var _parseLoadResArgs4 = parseLoadResArgs(type, onProgress, onComplete), type = _parseLoadResArgs4.type, onProgress = _parseLoadResArgs4.onProgress, onComplete = _parseLoadResArgs4.onComplete;
        cc.assetManager.preloadAny(dir, {
          __requestType__: RequestType.DIR,
          type: type,
          bundle: this.name
        }, onProgress, onComplete);
      },
      loadScene: function loadScene(sceneName, options, onProgress, onComplete) {
        var _parseParameters = parseParameters(options, onProgress, onComplete), options = _parseParameters.options, onProgress = _parseParameters.onProgress, onComplete = _parseParameters.onComplete;
        options.preset = options.preset || "scene";
        options.bundle = this.name;
        cc.assetManager.loadAny({
          scene: sceneName
        }, options, onProgress, (function(err, sceneAsset) {
          if (err) {
            cc.error(err.message, err.stack);
            onComplete && onComplete(err);
          } else if (sceneAsset instanceof cc.SceneAsset) {
            var scene = sceneAsset.scene;
            scene._id = sceneAsset._uuid;
            scene._name = sceneAsset._name;
            onComplete && onComplete(null, sceneAsset);
          } else onComplete && onComplete(new Error("The asset " + sceneAsset._uuid + " is not a scene"));
        }));
      },
      preloadScene: function preloadScene(sceneName, options, onProgress, onComplete) {
        var _parseParameters2 = parseParameters(options, onProgress, onComplete), options = _parseParameters2.options, onProgress = _parseParameters2.onProgress, onComplete = _parseParameters2.onComplete;
        options.bundle = this.name;
        cc.assetManager.preloadAny({
          scene: sceneName
        }, options, onProgress, (function(err) {
          err && cc.errorID(1210, sceneName, err.message);
          onComplete && onComplete(err);
        }));
      },
      get: function get(path, type) {
        var info = this.getInfoWithPath(path, type);
        return assets.get(info && info.uuid);
      },
      release: function release(path, type) {
        releaseManager.tryRelease(this.get(path, type), true);
      },
      releaseUnusedAssets: function releaseUnusedAssets() {
        var self = this;
        assets.forEach((function(asset) {
          var info = self.getAssetInfo(asset._uuid);
          info && !info.redirect && releaseManager.tryRelease(asset);
        }));
      },
      releaseAll: function releaseAll() {
        var self = this;
        assets.forEach((function(asset) {
          var info = self.getAssetInfo(asset._uuid);
          info && !info.redirect && releaseManager.tryRelease(asset, true);
        }));
      },
      _destroy: function _destroy() {
        this._config.destroy();
      }
    };
    module.exports = Bundle;
  }), {
    "./config": 24,
    "./releaseManager": 43,
    "./shared": 45,
    "./utilities": 48
  } ],
  23: [ (function(require, module, exports) {
    "use strict";
    var js = require("../platform/js");
    function Cache(map) {
      if (map) {
        this._map = map;
        this._count = Object.keys(map).length;
      } else {
        this._map = js.createMap(true);
        this._count = 0;
      }
    }
    Cache.prototype = {
      constructor: Cache,
      add: function add(key, val) {
        key in this._map || this._count++;
        return this._map[key] = val;
      },
      get: function get(key) {
        return this._map[key];
      },
      has: function has(key) {
        return key in this._map;
      },
      remove: function remove(key) {
        var out = this._map[key];
        if (key in this._map) {
          delete this._map[key];
          this._count--;
        }
        return out;
      },
      clear: function clear() {
        if (0 !== this._count) {
          this._map = js.createMap(true);
          this._count = 0;
        }
      },
      forEach: function forEach(func) {
        for (var key in this._map) func(this._map[key], key);
      },
      find: function find(predicate) {
        for (var key in this._map) if (predicate(this._map[key], key)) return this._map[key];
        return null;
      },
      get count() {
        return this._count;
      },
      destroy: function destroy() {
        this._map = null;
      }
    };
    module.exports = Cache;
  }), {
    "../platform/js": 161
  } ],
  24: [ (function(require, module, exports) {
    "use strict";
    var js = require("../platform/js");
    var Cache = require("./cache");
    var _require = require("./helper"), normalize = _require.normalize;
    var _require2 = require("./utilities"), processOptions = _require2.processOptions;
    function Config() {
      this.name = "";
      this.base = "";
      this.importBase = "";
      this.nativeBase = "";
      this.deps = null;
      this.assetInfos = new Cache();
      this.scenes = new Cache();
      this.paths = new Cache();
    }
    Config.prototype = {
      constructor: Config,
      init: function init(options) {
        processOptions(options);
        this.importBase = options.importBase || "";
        this.nativeBase = options.nativeBase || "";
        this.base = options.base || "";
        this.name = options.name || "";
        this.deps = options.deps || [];
        this._initUuid(options.uuids);
        this._initPath(options.paths);
        this._initScene(options.scenes);
        this._initPackage(options.packs);
        this._initVersion(options.versions);
        this._initRedirect(options.redirect);
      },
      _initUuid: function _initUuid(uuidList) {
        if (!uuidList) return;
        this.assetInfos.clear();
        for (var i = 0, l = uuidList.length; i < l; i++) {
          var uuid = uuidList[i];
          this.assetInfos.add(uuid, {
            uuid: uuid
          });
        }
      },
      _initPath: function _initPath(pathList) {
        if (!pathList) return;
        var paths = this.paths;
        paths.clear();
        for (var uuid in pathList) {
          var info = pathList[uuid];
          var path = info[0];
          var type = info[1];
          var isSubAsset = 3 === info.length;
          var assetInfo = this.assetInfos.get(uuid);
          assetInfo.path = path;
          assetInfo.ctor = js._getClassById(type);
          paths.has(path) ? isSubAsset ? paths.get(path).push(assetInfo) : paths.get(path).splice(0, 0, assetInfo) : paths.add(path, [ assetInfo ]);
        }
      },
      _initScene: function _initScene(sceneList) {
        if (!sceneList) return;
        var scenes = this.scenes;
        scenes.clear();
        var assetInfos = this.assetInfos;
        for (var sceneName in sceneList) {
          var uuid = sceneList[sceneName];
          var assetInfo = assetInfos.get(uuid);
          assetInfo.url = sceneName;
          scenes.add(sceneName, assetInfo);
        }
      },
      _initPackage: function _initPackage(packageList) {
        if (!packageList) return;
        var assetInfos = this.assetInfos;
        for (var packUuid in packageList) {
          var uuids = packageList[packUuid];
          var pack = {
            uuid: packUuid,
            packs: uuids,
            ext: ".json"
          };
          assetInfos.add(packUuid, pack);
          for (var i = 0, l = uuids.length; i < l; i++) {
            var uuid = uuids[i];
            var assetInfo = assetInfos.get(uuid);
            var assetPacks = assetInfo.packs;
            assetPacks ? 1 === l ? assetPacks.splice(0, 0, pack) : assetPacks.push(pack) : assetInfo.packs = [ pack ];
          }
        }
      },
      _initVersion: function _initVersion(versions) {
        if (!versions) return;
        var assetInfos = this.assetInfos;
        var entries = versions["import"];
        if (entries) for (var i = 0, l = entries.length; i < l; i += 2) {
          var uuid = entries[i];
          var assetInfo = assetInfos.get(uuid);
          assetInfo.ver = entries[i + 1];
        }
        entries = versions["native"];
        if (entries) for (var i = 0, l = entries.length; i < l; i += 2) {
          var uuid = entries[i];
          var assetInfo = assetInfos.get(uuid);
          assetInfo.nativeVer = entries[i + 1];
        }
      },
      _initRedirect: function _initRedirect(redirect) {
        if (!redirect) return;
        var assetInfos = this.assetInfos;
        for (var i = 0, l = redirect.length; i < l; i += 2) {
          var uuid = redirect[i];
          var assetInfo = assetInfos.get(uuid);
          assetInfo.redirect = redirect[i + 1];
        }
      },
      getInfoWithPath: function getInfoWithPath(path, type) {
        if (!path) return null;
        path = normalize(path);
        var items = this.paths.get(path);
        if (items) {
          if (!type) return items[0];
          for (var i = 0, l = items.length; i < l; i++) {
            var assetInfo = items[i];
            if (js.isChildClassOf(assetInfo.ctor, type)) return assetInfo;
          }
        }
        return null;
      },
      getDirWithPath: function getDirWithPath(path, type, out) {
        path = normalize(path);
        "/" === path[path.length - 1] && (path = path.slice(0, -1));
        var infos = out || [];
        function isMatchByWord(path, test) {
          if (path.length > test.length) {
            var nextAscii = path.charCodeAt(test.length);
            return 47 === nextAscii;
          }
          return true;
        }
        this.paths.forEach((function(items, p) {
          if (p.startsWith(path) && isMatchByWord(p, path) || !path) for (var i = 0, l = items.length; i < l; i++) {
            var entry = items[i];
            type && !js.isChildClassOf(entry.ctor, type) || infos.push(entry);
          }
        }));
        return infos;
      },
      getAssetInfo: function getAssetInfo(uuid) {
        return this.assetInfos.get(uuid);
      },
      getSceneInfo: function getSceneInfo(name) {
        name.endsWith(".fire") || (name += ".fire");
        "/" === name[0] || name.startsWith("db://") || (name = "/" + name);
        var info = this.scenes.find((function(val, key) {
          return key.endsWith(name);
        }));
        return info;
      },
      destroy: function destroy() {
        this.paths.destroy();
        this.scenes.destroy();
        this.assetInfos.destroy();
      }
    };
    false;
    module.exports = Config;
  }), {
    "../platform/js": 161,
    "./cache": 23,
    "./helper": 36,
    "./utilities": 48
  } ],
  25: [ (function(require, module, exports) {
    "use strict";
    var Cache = require("./cache");
    var js = require("../platform/js");
    var dependUtil = {
      _depends: new Cache(),
      init: function init() {
        this._depends.clear();
      },
      getNativeDep: function getNativeDep(uuid) {
        var depend = this._depends.get(uuid);
        if (depend) return depend.nativeDep && Object.assign({}, depend.nativeDep);
        return null;
      },
      getDeps: function getDeps(uuid) {
        if (this._depends.has(uuid)) return this._depends.get(uuid).deps;
        return [];
      },
      getDepsRecursively: function getDepsRecursively(uuid) {
        var exclude = Object.create(null), depends = [];
        this._descend(uuid, exclude, depends);
        return depends;
      },
      _descend: function _descend(uuid, exclude, depends) {
        var deps = this.getDeps(uuid);
        for (var i = 0; i < deps.length; i++) {
          var depend = deps[i];
          if (!exclude[depend]) {
            exclude[depend] = true;
            depends.push(depend);
            this._descend(depend, exclude, depends);
          }
        }
      },
      remove: function remove(uuid) {
        this._depends.remove(uuid);
      },
      parse: function parse(uuid, json) {
        var out = null;
        if (Array.isArray(json)) {
          if (this._depends.has(uuid)) return this._depends.get(uuid);
          out = {
            deps: cc.Asset._parseDepsFromJson(json),
            asyncLoadAssets: json[0].asyncLoadAssets
          };
        } else if (json.__type__) {
          if (this._depends.has(uuid)) return this._depends.get(uuid);
          var ctor = js._getClassById(json.__type__);
          out = {
            preventPreloadNativeObject: ctor.preventPreloadNativeObject,
            preventDeferredLoadDependents: ctor.preventDeferredLoadDependents,
            deps: ctor._parseDepsFromJson(json),
            nativeDep: ctor._parseNativeDepFromJson(json)
          };
          out.nativeDep && (out.nativeDep.uuid = uuid);
        } else {
          if ((true, out = this._depends.get(uuid)) && out.parsedFromExistAsset) return out;
          var asset = json;
          out = {
            deps: [],
            parsedFromExistAsset: true,
            preventPreloadNativeObject: asset.constructor.preventPreloadNativeObject,
            preventDeferredLoadDependents: asset.constructor.preventDeferredLoadDependents
          };
          var deps = asset.__depends__;
          for (var i = 0, l = deps.length; i < l; i++) {
            var dep = deps[i].uuid;
            out.deps.push(dep);
          }
          asset.__nativeDepend__ && (out.nativeDep = asset._nativeDep);
        }
        this._depends.add(uuid, out);
        return out;
      }
    };
    module.exports = dependUtil;
  }), {
    "../platform/js": 161,
    "./cache": 23
  } ],
  26: [ (function(require, module, exports) {
    "use strict";
    var js = require("../platform/js");
    require("../CCDirector");
    var utilities = require("./utilities");
    var dependUtil = require("./depend-util");
    var releaseManager = require("./releaseManager");
    var downloader = require("./downloader");
    var ImageFmts = [ ".png", ".jpg", ".bmp", ".jpeg", ".gif", ".ico", ".tiff", ".webp", ".image", ".pvr", ".pkm" ];
    var AudioFmts = [ ".mp3", ".ogg", ".wav", ".m4a" ];
    function GetTrue() {
      return true;
    }
    var md5Pipe = {
      transformURL: function transformURL(url) {
        url = url.replace(/.*[/\\][0-9a-fA-F]{2}[/\\]([0-9a-fA-F-]{8,})/, (function(match, uuid) {
          var bundle = cc.assetManager.bundles.find((function(bundle) {
            return bundle.getAssetInfo(uuid);
          }));
          var hashValue = "";
          if (bundle) {
            var info = bundle.getAssetInfo(uuid);
            hashValue = url.startsWith(bundle.base + bundle._config.nativeBase) ? info.nativeVer : info.ver;
          }
          return hashValue ? match + "." + hashValue : match;
        }));
        return url;
      }
    };
    var loader = {
      onProgress: null,
      _autoReleaseSetting: Object.create(null),
      get _cache() {
        return cc.assetManager.assets._map;
      },
      load: function load(resources, progressCallback, completeCallback) {
        if (void 0 === completeCallback && void 0 !== progressCallback) {
          completeCallback = progressCallback;
          progressCallback = null;
        }
        resources = Array.isArray(resources) ? resources : [ resources ];
        for (var i = 0; i < resources.length; i++) {
          var item = resources[i];
          if ("string" === typeof item) resources[i] = {
            url: item,
            __isNative__: true
          }; else {
            if (item.type) {
              item.ext = "." + item.type;
              item.type = void 0;
            }
            item.url && (item.__isNative__ = true);
          }
        }
        var images = [];
        var audios = [];
        cc.assetManager.loadAny(resources, null, (function(finish, total, item) {
          item.content && (ImageFmts.includes(item.ext) ? images.push(item.content) : AudioFmts.includes(item.ext) && audios.push(item.content));
          progressCallback && progressCallback(finish, total, item);
        }), (function(err, _native) {
          var res = null;
          if (!err) {
            _native = Array.isArray(_native) ? _native : [ _native ];
            for (var i = 0; i < _native.length; i++) {
              var item = _native[i];
              if (!(item instanceof cc.Asset)) {
                var asset = item;
                var url = resources[i].url;
                if (images.includes(asset)) {
                  asset = new cc.Texture2D();
                  asset._nativeUrl = url;
                  asset._nativeAsset = item;
                  _native[i] = asset;
                  asset._uuid = url;
                } else if (audios.includes(asset)) {
                  asset = new cc.AudioClip();
                  asset._nativeUrl = url;
                  asset._nativeAsset = item;
                  _native[i] = asset;
                  asset._uuid = url;
                }
                cc.assetManager.assets.add(url, asset);
              }
            }
            if (_native.length > 1) {
              var map = Object.create(null);
              _native.forEach((function(asset) {
                map[asset._uuid] = asset;
              }));
              res = {
                isCompleted: GetTrue,
                _map: map
              };
            } else res = _native[0];
          }
          completeCallback && completeCallback(err, res);
        }));
      },
      getXMLHttpRequest: function getXMLHttpRequest() {
        return new XMLHttpRequest();
      },
      _parseLoadResArgs: utilities.parseLoadResArgs,
      getItem: function getItem(key) {
        return cc.assetManager.assets.has(key) ? {
          content: cc.assetManager.assets.get(key)
        } : null;
      },
      loadRes: function loadRes(url, type, progressCallback, completeCallback) {
        var _this$_parseLoadResAr = this._parseLoadResArgs(type, progressCallback, completeCallback), type = _this$_parseLoadResAr.type, onProgress = _this$_parseLoadResAr.onProgress, onComplete = _this$_parseLoadResAr.onComplete;
        var extname = cc.path.extname(url);
        extname && (url = url.slice(0, -extname.length));
        cc.resources.load(url, type, onProgress, onComplete);
      },
      loadResArray: function loadResArray(urls, type, progressCallback, completeCallback) {
        var _this$_parseLoadResAr2 = this._parseLoadResArgs(type, progressCallback, completeCallback), type = _this$_parseLoadResAr2.type, onProgress = _this$_parseLoadResAr2.onProgress, onComplete = _this$_parseLoadResAr2.onComplete;
        urls.forEach((function(url, i) {
          var extname = cc.path.extname(url);
          extname && (urls[i] = url.slice(0, -extname.length));
        }));
        cc.resources.load(urls, type, onProgress, onComplete);
      },
      loadResDir: function loadResDir(url, type, progressCallback, completeCallback) {
        var _this$_parseLoadResAr3 = this._parseLoadResArgs(type, progressCallback, completeCallback), type = _this$_parseLoadResAr3.type, onProgress = _this$_parseLoadResAr3.onProgress, onComplete = _this$_parseLoadResAr3.onComplete;
        cc.resources.loadDir(url, type, onProgress, (function(err, assets) {
          var urls = [];
          if (!err) {
            var infos = cc.resources.getDirWithPath(url, type);
            urls = infos.map((function(info) {
              return info.path;
            }));
          }
          onComplete && onComplete(err, assets, urls);
        }));
      },
      getRes: function getRes(url, type) {
        return cc.assetManager.assets.has(url) ? cc.assetManager.assets.get(url) : cc.resources.get(url, type);
      },
      getResCount: function getResCount() {
        return cc.assetManager.assets.count;
      },
      getDependsRecursively: function getDependsRecursively(owner) {
        if (!owner) return [];
        return dependUtil.getDepsRecursively("string" === typeof owner ? owner : owner._uuid).concat([ owner._uuid ]);
      },
      get assetLoader() {
        true;
        cc.error("cc.loader.assetLoader was removed, assetLoader and md5Pipe were merged into cc.assetManager.transformPipeline");
      },
      get md5Pipe() {
        return md5Pipe;
      },
      get downloader() {
        return cc.assetManager.downloader;
      },
      get loader() {
        return cc.assetManager.parser;
      },
      addDownloadHandlers: function addDownloadHandlers(extMap) {
        true;
        cc.warn("`cc.loader.addDownloadHandlers` is deprecated, please use `cc.assetManager.downloader.register` instead");
        var handler = Object.create(null);
        for (var type in extMap) {
          var func = extMap[type];
          handler["." + type] = function(url, options, onComplete) {
            func({
              url: url
            }, onComplete);
          };
        }
        cc.assetManager.downloader.register(handler);
      },
      addLoadHandlers: function addLoadHandlers(extMap) {
        true;
        cc.warn("`cc.loader.addLoadHandlers` is deprecated, please use `cc.assetManager.parser.register` instead");
        var handler = Object.create(null);
        for (var type in extMap) {
          var func = extMap[type];
          handler["." + type] = function(file, options, onComplete) {
            func({
              content: file
            }, onComplete);
          };
        }
        cc.assetManager.parser.register(handler);
      },
      flowInDeps: function flowInDeps() {
        true;
        cc.error("cc.loader.flowInDeps was removed");
      },
      release: function release(asset) {
        if (Array.isArray(asset)) for (var i = 0; i < asset.length; i++) {
          var key = asset[i];
          "string" === typeof key && (key = cc.assetManager.assets.get(key));
          var isBuiltin = cc.assetManager.builtins._assets.find((function(assets) {
            return assets.find((function(builtinAsset) {
              return builtinAsset === key;
            }));
          }));
          if (isBuiltin) continue;
          cc.assetManager.releaseAsset(key);
        } else if (asset) {
          "string" === typeof asset && (asset = cc.assetManager.assets.get(asset));
          var _isBuiltin = cc.assetManager.builtins._assets.find((function(assets) {
            return assets.find((function(builtinAsset) {
              return builtinAsset === asset;
            }));
          }));
          if (_isBuiltin) return;
          cc.assetManager.releaseAsset(asset);
        }
      },
      releaseAsset: function releaseAsset(asset) {
        cc.assetManager.releaseAsset(asset);
      },
      releaseRes: function releaseRes(url, type) {
        cc.resources.release(url, type);
      },
      releaseResDir: function releaseResDir() {
        true;
        cc.error("cc.loader.releaseResDir was removed, please use cc.assetManager.releaseAsset instead");
      },
      releaseAll: function releaseAll() {
        cc.assetManager.releaseAll();
        cc.assetManager.assets.clear();
      },
      removeItem: function removeItem(key) {
        cc.assetManager.assets.remove(key);
      },
      setAutoRelease: function setAutoRelease(asset, autoRelease) {
        "object" === typeof asset && (asset = asset._uuid);
        this._autoReleaseSetting[asset] = !!autoRelease;
      },
      setAutoReleaseRecursively: function setAutoReleaseRecursively(asset, autoRelease) {
        "object" === typeof asset && (asset = asset._uuid);
        autoRelease = !!autoRelease;
        this._autoReleaseSetting[asset] = autoRelease;
        var depends = dependUtil.getDepsRecursively(asset);
        for (var i = 0; i < depends.length; i++) {
          var depend = depends[i];
          this._autoReleaseSetting[depend] = autoRelease;
        }
      },
      isAutoRelease: function isAutoRelease(asset) {
        "object" === typeof asset && (asset = asset._uuid);
        return !!this._autoReleaseSetting[asset];
      }
    };
    downloader.loadSubpackage = function(name, completeCallback) {
      cc.assetManager.loadBundle(name, null, completeCallback);
    };
    var AssetLibrary = {
      init: function init(options) {
        options.importBase = options.libraryPath;
        options.nativeBase = options.rawAssetsBase;
        cc.assetManager.init(options);
        if (options.rawAssets) {
          var resources = new cc.AssetManager.Bundle();
          resources.init({
            name: cc.AssetManager.BuiltinBundleName.RESOURCES,
            importBase: options.importBase,
            nativeBase: options.nativeBase,
            paths: options.rawAssets.assets,
            uuids: Object.keys(options.rawAssets.assets)
          });
        }
      },
      loadAsset: function loadAsset(uuid, onComplete) {
        cc.assetManager.loadAny(uuid, onComplete);
      },
      getLibUrlNoExt: function getLibUrlNoExt() {
        true;
        cc.error("cc.AssetLibrary.getLibUrlNoExt was removed, if you want to transform url, please use cc.assetManager.helper.getUrlWithUuid instead");
      },
      queryAssetInfo: function queryAssetInfo() {
        true;
        cc.error("cc.AssetLibrary.queryAssetInfo was removed, only available in the editor by using cc.assetManager.editorExtend.queryAssetInfo");
      }
    };
    cc.url = {
      normalize: function normalize(url) {
        cc.warnID(1400, "cc.url.normalize", "cc.assetManager.utils.normalize");
        return cc.assetManager.utils.normalize(url);
      },
      raw: function raw(url) {
        cc.warnID(1400, "cc.url.raw", "cc.resources.load");
        if (url.startsWith("resources/")) return cc.assetManager._transform({
          path: cc.path.changeExtname(url.substr(10)),
          bundle: cc.AssetManager.BuiltinBundleName.RESOURCES,
          __isNative__: true,
          ext: cc.path.extname(url)
        });
        return "";
      }
    };
    var onceWarns = {
      loader: true,
      assetLibrary: true
    };
    Object.defineProperties(cc, {
      loader: {
        get: function get() {
          true;
          if (onceWarns.loader) {
            onceWarns.loader = false;
            cc.log("cc.loader is deprecated, use cc.assetManager instead please. See https://docs.cocos.com/creator/manual/zh/release-notes/asset-manager-upgrade-guide.html");
          }
          return loader;
        }
      },
      AssetLibrary: {
        get: function get() {
          true;
          if (onceWarns.assetLibrary) {
            onceWarns.assetLibrary = false;
            cc.log("cc.AssetLibrary is deprecated, use cc.assetManager instead please. See https://docs.cocos.com/creator/manual/zh/release-notes/asset-manager-upgrade-guide.html");
          }
          return AssetLibrary;
        }
      },
      LoadingItems: {
        get: function get() {
          cc.warnID(1400, "cc.LoadingItems", "cc.AssetManager.Task");
          return cc.AssetManager.Task;
        }
      },
      Pipeline: {
        get: function get() {
          cc.warnID(1400, "cc.Pipeline", "cc.AssetManager.Pipeline");
          return cc.AssetManager.Pipeline;
        }
      }
    });
    js.obsolete(cc, "cc.RawAsset", "cc.Asset");
    js.obsolete(cc.Asset.prototype, "cc.Asset.url", "nativeUrl");
    Object.defineProperties(cc.macro, {
      DOWNLOAD_MAX_CONCURRENT: {
        get: function get() {
          return cc.assetManager.downloader.maxConcurrency;
        },
        set: function set(val) {
          cc.assetManager.downloader.maxConcurrency = val;
        }
      }
    });
    Object.assign(cc.director, {
      _getSceneUuid: function _getSceneUuid(sceneName) {
        cc.assetManager.main.getSceneInfo(sceneName);
      }
    });
    Object.defineProperties(cc.game, {
      _sceneInfos: {
        get: function get() {
          var scenes = [];
          cc.assetManager.main._config.scenes.forEach((function(val) {
            scenes.push(val);
          }));
          return scenes;
        }
      }
    });
    var parseParameters = utilities.parseParameters;
    utilities.parseParameters = function(options, onProgress, onComplete) {
      var result = parseParameters(options, onProgress, onComplete);
      result.onProgress = result.onProgress || loader.onProgress;
      return result;
    };
    var autoRelease = releaseManager._autoRelease;
    releaseManager._autoRelease = function() {
      autoRelease.apply(this, arguments);
      var releaseSettings = loader._autoReleaseSetting;
      var keys = Object.keys(releaseSettings);
      for (var i = 0; i < keys.length; i++) {
        var key = keys[i];
        if (true === releaseSettings[key]) {
          var asset = cc.assetManager.assets.get(key);
          asset && releaseManager.tryRelease(asset);
        }
      }
    };
  }), {
    "../CCDirector": 14,
    "../platform/js": 161,
    "./depend-util": 25,
    "./downloader": 32,
    "./releaseManager": 43,
    "./utilities": 48
  } ],
  27: [ (function(require, module, exports) {
    "use strict";
    var js = require("../platform/js");
    var helper = require("./helper");
    var MissingClass = false;
    require("../platform/deserialize");
    function deserialize(json, options) {
      var classFinder, missingClass;
      var isScene = helper.isSceneObj(json);
      if (isScene) {
        false;
        classFinder = cc._MissingScript.safeFindClass;
      } else classFinder = function classFinder(id) {
        var cls = js._getClassById(id);
        if (cls) return cls;
        cc.warnID(4903, id);
        return Object;
      };
      var tdInfo = cc.deserialize.Details.pool.get();
      var asset;
      try {
        asset = cc.deserialize(json, tdInfo, {
          classFinder: classFinder,
          customEnv: options
        });
      } catch (e) {
        cc.deserialize.Details.pool.put(tdInfo);
        throw e;
      }
      false;
      var uuidList = tdInfo.uuidList;
      var objList = tdInfo.uuidObjList;
      var propList = tdInfo.uuidPropList;
      var depends = [];
      for (var i = 0; i < uuidList.length; i++) {
        var dependUuid = uuidList[i];
        depends[i] = {
          uuid: helper.decodeUuid(dependUuid),
          owner: objList[i],
          prop: propList[i]
        };
      }
      asset.__depends__ = depends;
      asset._native && (asset.__nativeDepend__ = true);
      cc.deserialize.Details.pool.put(tdInfo);
      return asset;
    }
    module.exports = deserialize;
  }), {
    "../platform/deserialize": 156,
    "../platform/js": 161,
    "./helper": 36
  } ],
  28: [ (function(require, module, exports) {
    "use strict";
    var __audioSupport = cc.sys.__audioSupport;
    var _require = require("./utilities"), parseParameters = _require.parseParameters;
    function downloadDomAudio(url, options, onComplete) {
      var _parseParameters = parseParameters(options, void 0, onComplete), options = _parseParameters.options, onComplete = _parseParameters.onComplete;
      var dom = document.createElement("audio");
      dom.src = url;
      var clearEvent = function clearEvent() {
        clearTimeout(timer);
        dom.removeEventListener("canplaythrough", success, false);
        dom.removeEventListener("error", failure, false);
        __audioSupport.USE_LOADER_EVENT && dom.removeEventListener(__audioSupport.USE_LOADER_EVENT, success, false);
      };
      var timer = setTimeout((function() {
        0 === dom.readyState ? failure() : success();
      }), 8e3);
      var success = function success() {
        clearEvent();
        onComplete && onComplete(null, dom);
      };
      var failure = function failure() {
        clearEvent();
        var message = "load audio failure - " + url;
        cc.log(message);
        onComplete && onComplete(new Error(message));
      };
      dom.addEventListener("canplaythrough", success, false);
      dom.addEventListener("error", failure, false);
      __audioSupport.USE_LOADER_EVENT && dom.addEventListener(__audioSupport.USE_LOADER_EVENT, success, false);
      return dom;
    }
    module.exports = downloadDomAudio;
  }), {
    "./utilities": 48
  } ],
  29: [ (function(require, module, exports) {
    "use strict";
    var _require = require("./utilities"), parseParameters = _require.parseParameters;
    function downloadDomImage(url, options, onComplete) {
      var _parseParameters = parseParameters(options, void 0, onComplete), options = _parseParameters.options, onComplete = _parseParameters.onComplete;
      var img = new Image();
      "file:" !== window.location.protocol && (img.crossOrigin = "anonymous");
      function loadCallback() {
        img.removeEventListener("load", loadCallback);
        img.removeEventListener("error", errorCallback);
        onComplete && onComplete(null, img);
      }
      function errorCallback() {
        img.removeEventListener("load", loadCallback);
        img.removeEventListener("error", errorCallback);
        onComplete && onComplete(new Error(cc.debug.getError(4930, url)));
      }
      img.addEventListener("load", loadCallback);
      img.addEventListener("error", errorCallback);
      img.src = url;
      return img;
    }
    module.exports = downloadDomImage;
  }), {
    "./utilities": 48
  } ],
  30: [ (function(require, module, exports) {
    "use strict";
    var _require = require("./utilities"), parseParameters = _require.parseParameters;
    function downloadFile(url, options, onProgress, onComplete) {
      var _parseParameters = parseParameters(options, onProgress, onComplete), options = _parseParameters.options, onProgress = _parseParameters.onProgress, onComplete = _parseParameters.onComplete;
      var xhr = new XMLHttpRequest(), errInfo = "download failed: " + url + ", status: ";
      xhr.open("GET", url, true);
      void 0 !== options.responseType && (xhr.responseType = options.responseType);
      void 0 !== options.withCredentials && (xhr.withCredentials = options.withCredentials);
      void 0 !== options.mimeType && xhr.overrideMimeType && xhr.overrideMimeType(options.mimeType);
      void 0 !== options.timeout && (xhr.timeout = options.timeout);
      if (options.header) for (var header in options.header) xhr.setRequestHeader(header, options.header[header]);
      xhr.onload = function() {
        200 === xhr.status || 0 === xhr.status ? onComplete && onComplete(null, xhr.response) : onComplete && onComplete(new Error(errInfo + xhr.status + "(no response)"));
      };
      onProgress && (xhr.onprogress = function(e) {
        e.lengthComputable && onProgress(e.loaded, e.total);
      });
      xhr.onerror = function() {
        onComplete && onComplete(new Error(errInfo + xhr.status + "(error)"));
      };
      xhr.ontimeout = function() {
        onComplete && onComplete(new Error(errInfo + xhr.status + "(time out)"));
      };
      xhr.onabort = function() {
        onComplete && onComplete(new Error(errInfo + xhr.status + "(abort)"));
      };
      xhr.send(null);
      return xhr;
    }
    module.exports = downloadFile;
  }), {
    "./utilities": 48
  } ],
  31: [ (function(require, module, exports) {
    "use strict";
    var _require = require("./utilities"), parseParameters = _require.parseParameters;
    var downloaded = {};
    function downloadScript(url, options, onComplete) {
      var _parseParameters = parseParameters(options, void 0, onComplete), options = _parseParameters.options, onComplete = _parseParameters.onComplete;
      if (downloaded[url]) return onComplete && onComplete(null);
      var d = document, s = document.createElement("script");
      "file:" !== window.location.protocol && (s.crossOrigin = "anonymous");
      s.async = options.async;
      s.src = url;
      function loadHandler() {
        s.parentNode.removeChild(s);
        s.removeEventListener("load", loadHandler, false);
        s.removeEventListener("error", errorHandler, false);
        downloaded[url] = true;
        onComplete && onComplete(null);
      }
      function errorHandler() {
        s.parentNode.removeChild(s);
        s.removeEventListener("load", loadHandler, false);
        s.removeEventListener("error", errorHandler, false);
        onComplete && onComplete(new Error(cc.debug.getError(4928, url)));
      }
      s.addEventListener("load", loadHandler, false);
      s.addEventListener("error", errorHandler, false);
      d.body.appendChild(s);
    }
    module.exports = downloadScript;
  }), {
    "./utilities": 48
  } ],
  32: [ (function(require, module, exports) {
    "use strict";
    var js = require("../platform/js");
    var debug = require("../CCDebug");
    var _require = require("./font-loader"), loadFont = _require.loadFont;
    var callInNextTick = require("../platform/utils").callInNextTick;
    var downloadDomImage = require("./download-dom-image");
    var downloadDomAudio = require("./download-dom-audio");
    var downloadFile = require("./download-file");
    var downloadScript = require("./download-script.js");
    var Cache = require("./cache");
    var _require2 = require("./shared"), files = _require2.files;
    var _require3 = require("../platform/CCSys"), __audioSupport = _require3.__audioSupport, capabilities = _require3.capabilities;
    var _require4 = require("./utilities"), urlAppendTimestamp = _require4.urlAppendTimestamp, retry = _require4.retry;
    var REGEX = /^\w+:\/\/.*/;
    var formatSupport = __audioSupport.format || [];
    var unsupported = function unsupported(url, options, onComplete) {
      onComplete(new Error(debug.getError(4927)));
    };
    var downloadAudio = function downloadAudio(url, options, onComplete) {
      options.audioLoadMode !== cc.AudioClip.LoadMode.DOM_AUDIO ? downloadArrayBuffer(url, options, onComplete) : downloadDomAudio(url, options, onComplete);
    };
    var downloadAudio = 0 === formatSupport.length ? unsupported : __audioSupport.WEB_AUDIO ? downloadAudio : downloadDomAudio;
    var downloadImage = function downloadImage(url, options, onComplete) {
      var func = capabilities.imageBitmap && cc.macro.ALLOW_IMAGE_BITMAP ? downloadBlob : downloadDomImage;
      func.apply(this, arguments);
    };
    var downloadBlob = function downloadBlob(url, options, onComplete) {
      options.responseType = "blob";
      downloadFile(url, options, options.onFileProgress, onComplete);
    };
    var downloadJson = function downloadJson(url, options, onComplete) {
      options.responseType = "json";
      downloadFile(url, options, options.onFileProgress, (function(err, data) {
        if (!err && "string" === typeof data) try {
          data = JSON.parse(data);
        } catch (e) {
          err = e;
        }
        onComplete && onComplete(err, data);
      }));
    };
    var downloadArrayBuffer = function downloadArrayBuffer(url, options, onComplete) {
      options.responseType = "arraybuffer";
      downloadFile(url, options, options.onFileProgress, onComplete);
    };
    var downloadText = function downloadText(url, options, onComplete) {
      options.responseType = "text";
      downloadFile(url, options, options.onFileProgress, onComplete);
    };
    var downloadVideo = function downloadVideo(url, options, onComplete) {
      onComplete(null, url);
    };
    var downloadBundle = function downloadBundle(nameOrUrl, options, onComplete) {
      var bundleName = cc.path.basename(nameOrUrl);
      var url = nameOrUrl;
      REGEX.test(url) || (url = "assets/" + bundleName);
      var version = options.version || downloader.bundleVers[bundleName];
      var count = 0;
      var config = url + "/config." + (version ? version + "." : "") + "json";
      var out = null, error = null;
      downloadJson(config, options, (function(err, response) {
        err && (error = err);
        out = response;
        out && (out.base = url + "/");
        count++;
        2 === count && onComplete(error, out);
      }));
      var js = url + "/index." + (version ? version + "." : "") + "js";
      downloadScript(js, options, (function(err) {
        err && (error = err);
        count++;
        2 === count && onComplete(error, out);
      }));
    };
    var _downloading = new Cache();
    var _queue = [];
    var _queueDirty = false;
    var _totalNum = 0;
    var _totalNumThisPeriod = 0;
    var _lastDate = -1;
    var _checkNextPeriod = false;
    var updateTime = function updateTime() {
      var now = Date.now();
      if (now - _lastDate > 1e3 * cc.director._deltaTime) {
        _totalNumThisPeriod = 0;
        _lastDate = now;
      }
    };
    var handleQueue = function handleQueue(maxConcurrency, maxRequestsPerFrame) {
      _checkNextPeriod = false;
      updateTime();
      while (_queue.length > 0 && _totalNum < maxConcurrency && _totalNumThisPeriod < maxRequestsPerFrame) {
        if (_queueDirty) {
          _queue.sort((function(a, b) {
            return a.priority - b.priority;
          }));
          _queueDirty = false;
        }
        var nextOne = _queue.pop();
        if (!nextOne) break;
        _totalNum++;
        _totalNumThisPeriod++;
        nextOne.invoke();
      }
      if (_queue.length > 0 && _totalNum < maxConcurrency) {
        callInNextTick(handleQueue, maxConcurrency, maxRequestsPerFrame);
        _checkNextPeriod = true;
      }
    };
    var downloader = {
      maxConcurrency: 6,
      maxRequestsPerFrame: 6,
      maxRetryCount: 3,
      appendTimeStamp: false,
      limited: true,
      retryInterval: 2e3,
      bundleVers: null,
      downloadDomImage: downloadDomImage,
      downloadDomAudio: downloadDomAudio,
      downloadFile: downloadFile,
      downloadScript: downloadScript,
      init: function init(bundleVers) {
        _downloading.clear();
        _queue.length = 0;
        this.bundleVers = bundleVers || Object.create(null);
      },
      register: function register(type, handler) {
        "object" === typeof type ? js.mixin(downloaders, type) : downloaders[type] = handler;
      },
      download: function download(id, url, type, options, onComplete) {
        var func = downloaders[type] || downloaders["default"];
        var self = this;
        var file, downloadCallbacks;
        if (file = files.get(id)) onComplete(null, file); else if (downloadCallbacks = _downloading.get(id)) {
          downloadCallbacks.push(onComplete);
          for (var i = 0, l = _queue.length; i < l; i++) {
            var item = _queue[i];
            if (item.id === id) {
              var priority = options.priority || 0;
              if (item.priority < priority) {
                item.priority = priority;
                _queueDirty = true;
              }
              return;
            }
          }
        } else {
          var process = function process(index, callback) {
            0 === index && _downloading.add(id, [ onComplete ]);
            if (!self.limited) return func(urlAppendTimestamp(url), options, callback);
            updateTime();
            function invoke() {
              func(urlAppendTimestamp(url), options, (function() {
                _totalNum--;
                if (!_checkNextPeriod && _queue.length > 0) {
                  callInNextTick(handleQueue, maxConcurrency, maxRequestsPerFrame);
                  _checkNextPeriod = true;
                }
                callback.apply(this, arguments);
              }));
            }
            if (_totalNum < maxConcurrency && _totalNumThisPeriod < maxRequestsPerFrame) {
              invoke();
              _totalNum++;
              _totalNumThisPeriod++;
            } else {
              _queue.push({
                id: id,
                priority: options.priority || 0,
                invoke: invoke
              });
              _queueDirty = true;
              if (!_checkNextPeriod && _totalNum < maxConcurrency) {
                callInNextTick(handleQueue, maxConcurrency, maxRequestsPerFrame);
                _checkNextPeriod = true;
              }
            }
          };
          var finale = function finale(err, result) {
            err || files.add(id, result);
            var callbacks = _downloading.remove(id);
            for (var _i = 0, _l = callbacks.length; _i < _l; _i++) callbacks[_i](err, result);
          };
          var maxRetryCount = options.maxRetryCount || this.maxRetryCount;
          var maxConcurrency = options.maxConcurrency || this.maxConcurrency;
          var maxRequestsPerFrame = options.maxRequestsPerFrame || this.maxRequestsPerFrame;
          retry(process, maxRetryCount, this.retryInterval, finale);
        }
      }
    };
    var downloaders = {
      ".png": downloadImage,
      ".jpg": downloadImage,
      ".bmp": downloadImage,
      ".jpeg": downloadImage,
      ".gif": downloadImage,
      ".ico": downloadImage,
      ".tiff": downloadImage,
      ".webp": downloadImage,
      ".image": downloadImage,
      ".pvr": downloadArrayBuffer,
      ".pkm": downloadArrayBuffer,
      ".mp3": downloadAudio,
      ".ogg": downloadAudio,
      ".wav": downloadAudio,
      ".m4a": downloadAudio,
      ".txt": downloadText,
      ".xml": downloadText,
      ".vsh": downloadText,
      ".fsh": downloadText,
      ".atlas": downloadText,
      ".tmx": downloadText,
      ".tsx": downloadText,
      ".json": downloadJson,
      ".ExportJson": downloadJson,
      ".plist": downloadText,
      ".fnt": downloadText,
      ".font": loadFont,
      ".eot": loadFont,
      ".ttf": loadFont,
      ".woff": loadFont,
      ".svg": loadFont,
      ".ttc": loadFont,
      ".mp4": downloadVideo,
      ".avi": downloadVideo,
      ".mov": downloadVideo,
      ".mpg": downloadVideo,
      ".mpeg": downloadVideo,
      ".rm": downloadVideo,
      ".rmvb": downloadVideo,
      ".binary": downloadArrayBuffer,
      ".bin": downloadArrayBuffer,
      ".dbbin": downloadArrayBuffer,
      ".skel": downloadArrayBuffer,
      ".js": downloadScript,
      bundle: downloadBundle,
      default: downloadText
    };
    module.exports = downloader;
  }), {
    "../CCDebug": 13,
    "../platform/CCSys": 150,
    "../platform/js": 161,
    "../platform/utils": 164,
    "./cache": 23,
    "./download-dom-audio": 28,
    "./download-dom-image": 29,
    "./download-file": 30,
    "./download-script.js": 31,
    "./font-loader": 35,
    "./shared": 45,
    "./utilities": 48
  } ],
  33: [ (function(require, module, exports) {
    "use strict";
    var Bundle = require("./bundle");
    function createTexture(id, data, options, onComplete) {
      var out = null, err = null;
      try {
        out = new cc.Texture2D();
        out._uuid = id;
        out._nativeUrl = id;
        out._nativeAsset = data;
      } catch (e) {
        err = e;
      }
      onComplete && onComplete(err, out);
    }
    function createAudioClip(id, data, options, onComplete) {
      var out = new cc.AudioClip();
      out._uuid = id;
      out._nativeUrl = id;
      out._nativeAsset = data;
      out.duration = data.duration;
      onComplete && onComplete(null, out);
    }
    function createJsonAsset(id, data, options, onComplete) {
      var out = new cc.JsonAsset();
      out._uuid = id;
      out.json = data;
      onComplete && onComplete(null, out);
    }
    function createTextAsset(id, data, options, onComplete) {
      var out = new cc.TextAsset();
      out._uuid = id;
      out.text = data;
      onComplete && onComplete(null, out);
    }
    function createFont(id, data, options, onComplete) {
      var out = new cc.TTFFont();
      out._uuid = id;
      out._nativeUrl = id;
      out._nativeAsset = data;
      onComplete && onComplete(null, out);
    }
    function createBufferAsset(id, data, options, onComplete) {
      var out = new cc.BufferAsset();
      out._uuid = id;
      out._nativeUrl = id;
      out._nativeAsset = data;
      onComplete && onComplete(null, out);
    }
    function createAsset(id, data, options, onComplete) {
      var out = new cc.Asset();
      out._uuid = id;
      out._nativeUrl = id;
      out._nativeAsset = data;
      onComplete && onComplete(null, out);
    }
    function createBundle(id, data, options, onComplete) {
      var bundle = new Bundle();
      data.base = data.base || id + "/";
      bundle.init(data);
      onComplete && onComplete(null, bundle);
    }
    var factory = {
      register: function register(type, handler) {
        "object" === typeof type ? cc.js.mixin(producers, type) : producers[type] = handler;
      },
      create: function create(id, data, type, options, onComplete) {
        var func = producers[type] || producers["default"];
        func(id, data, options, onComplete);
      }
    };
    var producers = {
      ".png": createTexture,
      ".jpg": createTexture,
      ".bmp": createTexture,
      ".jpeg": createTexture,
      ".gif": createTexture,
      ".ico": createTexture,
      ".tiff": createTexture,
      ".webp": createTexture,
      ".image": createTexture,
      ".pvr": createTexture,
      ".pkm": createTexture,
      ".mp3": createAudioClip,
      ".ogg": createAudioClip,
      ".wav": createAudioClip,
      ".m4a": createAudioClip,
      ".txt": createTextAsset,
      ".xml": createTextAsset,
      ".vsh": createTextAsset,
      ".fsh": createTextAsset,
      ".atlas": createTextAsset,
      ".tmx": createTextAsset,
      ".tsx": createTextAsset,
      ".fnt": createTextAsset,
      ".json": createJsonAsset,
      ".ExportJson": createJsonAsset,
      ".font": createFont,
      ".eot": createFont,
      ".ttf": createFont,
      ".woff": createFont,
      ".svg": createFont,
      ".ttc": createFont,
      ".binary": createBufferAsset,
      ".bin": createBufferAsset,
      ".dbbin": createBufferAsset,
      ".skel": createBufferAsset,
      bundle: createBundle,
      default: createAsset
    };
    module.exports = factory;
  }), {
    "./bundle": 22
  } ],
  34: [ (function(require, module, exports) {
    "use strict";
    var packManager = require("./pack-manager");
    var Task = require("./task");
    var _require = require("./utilities"), getDepends = _require.getDepends, clear = _require.clear, forEach = _require.forEach;
    var _require2 = require("./shared"), assets = _require2.assets, fetchPipeline = _require2.fetchPipeline;
    function fetch(task, done) {
      var firstTask = false;
      if (!task.progress) {
        task.progress = {
          finish: 0,
          total: task.input.length
        };
        firstTask = true;
      }
      var options = task.options, depends = [], progress = task.progress, total = progress.total;
      options.__exclude__ = options.__exclude__ || Object.create(null);
      task.output = [];
      forEach(task.input, (function(item, cb) {
        if (!item.isNative && assets.has(item.uuid)) {
          var asset = assets.get(item.uuid);
          asset.addRef();
          handle(item, task, asset, null, asset.__asyncLoadAssets__, depends, total, done);
          return cb();
        }
        packManager.load(item, task.options, (function(err, data) {
          if (err) {
            if (!task.isFinish) if (cc.assetManager.force) handle(item, task, null, null, false, depends, total, done); else {
              cc.error(err.message, err.stack);
              done(err);
            }
          } else task.isFinish || handle(item, task, null, data, !item.isNative, depends, total, done);
          cb();
        }));
      }), (function() {
        if (task.isFinish) {
          clear(task, true);
          return task.dispatch("error");
        }
        if (depends.length > 0) {
          var subTask = Task.create({
            name: task.name + " dependencies",
            input: depends,
            progress: progress,
            options: options,
            onProgress: task.onProgress,
            onError: Task.prototype.recycle,
            onComplete: function onComplete(err) {
              if (!err) {
                task.output.push.apply(task.output, this.output);
                subTask.recycle();
              }
              firstTask && decreaseRef(task);
              done(err);
            }
          });
          fetchPipeline.async(subTask);
          return;
        }
        firstTask && decreaseRef(task);
        done();
      }));
    }
    function decreaseRef(task) {
      var output = task.output;
      for (var i = 0, l = output.length; i < l; i++) output[i].content && output[i].content.decRef(false);
    }
    function handle(item, task, content, file, loadDepends, depends, last, done) {
      var exclude = task.options.__exclude__;
      var progress = task.progress;
      item.content = content;
      item.file = file;
      task.output.push(item);
      if (loadDepends) {
        exclude[item.uuid] = true;
        var err = getDepends(item.uuid, file || content, exclude, depends, true, false, item.config);
        if (err) {
          if (!cc.assetManager.force) {
            cc.error(err.message, err.stack);
            return done(err);
          }
          item.file = null;
        }
        progress.total = last + depends.length;
      }
      task.dispatch("progress", ++progress.finish, progress.total, item);
    }
    module.exports = fetch;
  }), {
    "./pack-manager": 39,
    "./shared": 45,
    "./task": 46,
    "./utilities": 48
  } ],
  35: [ (function(require, module, exports) {
    "use strict";
    var textUtils = require("../utils/text-utils");
    var _canvasContext = null;
    var _testString = "BES bswy:->@123\u4e01\u3041\u1101";
    var _fontFaces = Object.create(null);
    var _intervalId = -1;
    var _loadingFonts = [];
    var _timeout = 3e3;
    var useNativeCheck = (function() {
      var nativeCheck = void 0;
      return function() {
        if (void 0 === nativeCheck) if (!window.FontFace) nativeCheck = false; else {
          var match = /Gecko.*Firefox\/(\d+)/.exec(window.navigator.userAgent);
          var safari10Match = /OS X.*Version\/10\..*Safari/.exec(window.navigator.userAgent) && /Apple/.exec(window.navigator.vendor);
          nativeCheck = match ? parseInt(match[1], 10) > 42 : !safari10Match;
        }
        return nativeCheck;
      };
    })();
    function _checkFontLoaded() {
      var allFontsLoaded = true;
      var now = Date.now();
      for (var i = _loadingFonts.length - 1; i >= 0; i--) {
        var fontLoadHandle = _loadingFonts[i];
        var fontFamily = fontLoadHandle.fontFamilyName;
        if (now - fontLoadHandle.startTime > _timeout) {
          cc.warnID(4933, fontFamily);
          fontLoadHandle.onComplete(null, fontFamily);
          _loadingFonts.splice(i, 1);
          continue;
        }
        var oldWidth = fontLoadHandle.refWidth;
        var fontDesc = "40px " + fontFamily;
        _canvasContext.font = fontDesc;
        var newWidth = textUtils.safeMeasureText(_canvasContext, _testString, fontDesc);
        if (oldWidth !== newWidth) {
          _loadingFonts.splice(i, 1);
          fontLoadHandle.onComplete(null, fontFamily);
        } else allFontsLoaded = false;
      }
      if (allFontsLoaded) {
        clearInterval(_intervalId);
        _intervalId = -1;
      }
    }
    function nativeCheckFontLoaded(start, font, callback) {
      var loader = new Promise(function(resolve, reject) {
        var check = function check() {
          var now = Date.now();
          now - start >= _timeout ? reject() : document.fonts.load("40px " + font).then((function(fonts) {
            fonts.length >= 1 ? resolve() : setTimeout(check, 100);
          }), (function() {
            reject();
          }));
        };
        check();
      });
      var timeoutId = null, timer = new Promise(function(resolve, reject) {
        timeoutId = setTimeout(reject, _timeout);
      });
      Promise.race([ timer, loader ]).then((function() {
        if (timeoutId) {
          clearTimeout(timeoutId);
          timeoutId = null;
        }
        callback(null, font);
      }), (function() {
        cc.warnID(4933, font);
        callback(null, font);
      }));
    }
    var fontLoader = {
      loadFont: function loadFont(url, options, onComplete) {
        var fontFamilyName = fontLoader._getFontFamily(url);
        if (_fontFaces[fontFamilyName]) return onComplete(null, fontFamilyName);
        if (!_canvasContext) {
          var labelCanvas = document.createElement("canvas");
          labelCanvas.width = 100;
          labelCanvas.height = 100;
          _canvasContext = labelCanvas.getContext("2d");
        }
        var fontDesc = "40px " + fontFamilyName;
        _canvasContext.font = fontDesc;
        var refWidth = textUtils.safeMeasureText(_canvasContext, _testString, fontDesc);
        var fontStyle = document.createElement("style");
        fontStyle.type = "text/css";
        var fontStr = "";
        isNaN(fontFamilyName - 0) ? fontStr += "@font-face { font-family:" + fontFamilyName + "; src:" : fontStr += "@font-face { font-family:'" + fontFamilyName + "'; src:";
        fontStr += "url('" + url + "');";
        fontStyle.textContent = fontStr + "}";
        document.body.appendChild(fontStyle);
        var preloadDiv = document.createElement("div");
        var divStyle = preloadDiv.style;
        divStyle.fontFamily = fontFamilyName;
        preloadDiv.innerHTML = ".";
        divStyle.position = "absolute";
        divStyle.left = "-100px";
        divStyle.top = "-100px";
        document.body.appendChild(preloadDiv);
        if (useNativeCheck()) nativeCheckFontLoaded(Date.now(), fontFamilyName, onComplete); else {
          var fontLoadHandle = {
            fontFamilyName: fontFamilyName,
            refWidth: refWidth,
            onComplete: onComplete,
            startTime: Date.now()
          };
          _loadingFonts.push(fontLoadHandle);
          -1 === _intervalId && (_intervalId = setInterval(_checkFontLoaded, 100));
        }
        _fontFaces[fontFamilyName] = fontStyle;
      },
      _getFontFamily: function _getFontFamily(fontHandle) {
        var ttfIndex = fontHandle.lastIndexOf(".ttf");
        if (-1 === ttfIndex) return fontHandle;
        var slashPos = fontHandle.lastIndexOf("/");
        var fontFamilyName;
        fontFamilyName = -1 === slashPos ? fontHandle.substring(0, ttfIndex) + "_LABEL" : fontHandle.substring(slashPos + 1, ttfIndex) + "_LABEL";
        -1 !== fontFamilyName.indexOf(" ") && (fontFamilyName = '"' + fontFamilyName + '"');
        return fontFamilyName;
      }
    };
    module.exports = fontLoader;
  }), {
    "../utils/text-utils": 217
  } ],
  36: [ (function(require, module, exports) {
    "use strict";
    var _require = require("./shared"), bundles = _require.bundles;
    var helper = {
      decodeUuid: require("../utils/decode-uuid"),
      getUuidFromURL: (function() {
        var _uuidRegex = /.*[/\\][0-9a-fA-F]{2}[/\\]([0-9a-fA-F-]{8,})/;
        return function(url) {
          var matches = url.match(_uuidRegex);
          if (matches) return matches[1];
          return "";
        };
      })(),
      getUrlWithUuid: function getUrlWithUuid(uuid, options) {
        options = options || Object.create(null);
        options.__isNative__ = options.isNative;
        var bundle = bundles.find((function(bundle) {
          return bundle.getAssetInfo(uuid);
        }));
        bundle && (options.bundle = bundle.name);
        return cc.assetManager._transform(uuid, options);
      },
      isSceneObj: function isSceneObj(json) {
        var SCENE_ID = "cc.Scene", PREFAB_ID = "cc.Prefab";
        return json && (json[0] && json[0].__type__ === SCENE_ID || json[1] && json[1].__type__ === SCENE_ID || json[0] && json[0].__type__ === PREFAB_ID);
      },
      isScene: function isScene(asset) {
        return asset && (asset.constructor === cc.SceneAsset || asset instanceof cc.Scene);
      },
      normalize: function normalize(url) {
        url && (46 === url.charCodeAt(0) && 47 === url.charCodeAt(1) ? url = url.slice(2) : 47 === url.charCodeAt(0) && (url = url.slice(1)));
        return url;
      }
    };
    module.exports = helper;
  }), {
    "../utils/decode-uuid": 206,
    "./shared": 45
  } ],
  37: [ (function(require, module, exports) {
    "use strict";
    require("./deprecated");
    require("./CCAssetManager");
  }), {
    "./CCAssetManager": 20,
    "./deprecated": 26
  } ],
  38: [ (function(require, module, exports) {
    "use strict";
    var packManager = require("./pack-manager");
    var Pipeline = require("./pipeline");
    var parser = require("./parser");
    var _require = require("./utilities"), getDepends = _require.getDepends, cache = _require.cache, gatherAsset = _require.gatherAsset, setProperties = _require.setProperties, forEach = _require.forEach, clear = _require.clear, checkCircleReference = _require.checkCircleReference;
    var _require2 = require("./shared"), assets = _require2.assets, files = _require2.files, parsed = _require2.parsed, pipeline = _require2.pipeline;
    var Task = require("./task");
    function load(task, done) {
      task.progress || (task.progress = {
        finish: 0,
        total: task.input.length
      });
      var options = task.options, progress = task.progress;
      options.__exclude__ = options.__exclude__ || Object.create(null);
      task.output = [];
      forEach(task.input, (function(item, cb) {
        var subTask = Task.create({
          input: item,
          onProgress: task.onProgress,
          options: options,
          progress: progress,
          onComplete: function onComplete(err, item) {
            !err || task.isFinish || cc.assetManager.force || done(err);
            task.output.push(item);
            subTask.recycle();
            cb();
          }
        });
        loadOneAssetPipeline.async(subTask);
      }), (function() {
        options.__exclude__ = null;
        if (task.isFinish) {
          clear(task, true);
          return task.dispatch("error");
        }
        gatherAsset(task);
        clear(task, true);
        done();
      }));
    }
    var loadOneAssetPipeline = new Pipeline("loadOneAsset", [ function fetch(task, done) {
      var item = task.output = task.input;
      var options = item.options, isNative = item.isNative, uuid = item.uuid, file = item.file;
      var reload = options.reload;
      if (file || !reload && !isNative && assets.has(uuid)) return done();
      packManager.load(item, task.options, (function(err, data) {
        if (err) {
          cc.assetManager.force ? err = null : cc.error(err.message, err.stack);
          data = null;
        }
        item.file = data;
        done(err);
      }));
    }, function parse(task, done) {
      var item = task.output = task.input, progress = task.progress, exclude = task.options.__exclude__;
      var id = item.id, file = item.file, options = item.options;
      if (item.isNative) parser.parse(id, file, item.ext, options, (function(err, asset) {
        if (err && !cc.assetManager.force) {
          cc.error(err.message, err.stack);
          return done(err);
        }
        item.content = asset;
        task.dispatch("progress", ++progress.finish, progress.total, item);
        files.remove(id);
        parsed.remove(id);
        done();
      })); else {
        var uuid = item.uuid;
        if (uuid in exclude) {
          var _exclude$uuid = exclude[uuid], finish = _exclude$uuid.finish, content = _exclude$uuid.content, err = _exclude$uuid.err, callbacks = _exclude$uuid.callbacks;
          task.dispatch("progress", ++progress.finish, progress.total, item);
          if (finish || checkCircleReference(uuid, uuid, exclude)) {
            content && content.addRef();
            item.content = content;
            done(err);
          } else callbacks.push({
            done: done,
            item: item
          });
        } else if (!options.reload && assets.has(uuid)) {
          var asset = assets.get(uuid);
          if (options.__asyncLoadAssets__ || !asset.__asyncLoadAssets__) {
            item.content = asset.addRef();
            task.dispatch("progress", ++progress.finish, progress.total, item);
            done();
          } else loadDepends(task, asset, done, false);
        } else parser.parse(id, file, "import", options, (function(err, asset) {
          if (err) {
            cc.assetManager.force ? err = null : cc.error(err.message, err.stack);
            return done(err);
          }
          asset._uuid = uuid;
          loadDepends(task, asset, done, true);
        }));
      }
    } ]);
    function loadDepends(task, asset, done, init) {
      var item = task.input, progress = task.progress;
      var uuid = item.uuid, id = item.id, options = item.options, config = item.config;
      var __asyncLoadAssets__ = options.__asyncLoadAssets__, cacheAsset = options.cacheAsset;
      var depends = [];
      asset.addRef && asset.addRef();
      getDepends(uuid, asset, Object.create(null), depends, false, __asyncLoadAssets__, config);
      task.dispatch("progress", ++progress.finish, progress.total += depends.length, item);
      var repeatItem = task.options.__exclude__[uuid] = {
        content: asset,
        finish: false,
        callbacks: [ {
          done: done,
          item: item
        } ]
      };
      var subTask = Task.create({
        input: depends,
        options: task.options,
        onProgress: task.onProgress,
        onError: Task.prototype.recycle,
        progress: progress,
        onComplete: function onComplete(err) {
          asset.decRef && asset.decRef(false);
          asset.__asyncLoadAssets__ = __asyncLoadAssets__;
          repeatItem.finish = true;
          repeatItem.err = err;
          if (!err) {
            var assets = Array.isArray(subTask.output) ? subTask.output : [ subTask.output ];
            var map = Object.create(null);
            for (var _i = 0, _l = assets.length; _i < _l; _i++) {
              var dependAsset = assets[_i];
              dependAsset && (map[dependAsset instanceof cc.Asset ? dependAsset._uuid + "@import" : uuid + "@native"] = dependAsset);
            }
            if (init) {
              var missingAsset = setProperties(uuid, asset, map);
              if (!missingAsset) try {
                asset.onLoad && asset.onLoad();
              } catch (e) {
                cc.error(e.message, e.stack);
              }
              files.remove(id);
              parsed.remove(id);
              cache(uuid, asset, void 0 !== cacheAsset ? cacheAsset : cc.assetManager.cacheAsset);
            } else if (asset.__nativeDepend__ && !asset._nativeAsset) {
              var missingAsset = setProperties(uuid, asset, map);
              if (!missingAsset) try {
                asset.onLoad && asset.onLoad();
              } catch (e) {
                cc.error(e.message, e.stack);
              }
            }
            subTask.recycle();
          }
          var callbacks = repeatItem.callbacks;
          for (var i = 0, l = callbacks.length; i < l; i++) {
            var cb = callbacks[i];
            asset.addRef && asset.addRef();
            cb.item.content = asset;
            cb.done(err);
          }
          callbacks.length = 0;
        }
      });
      pipeline.async(subTask);
    }
    module.exports = load;
  }), {
    "./pack-manager": 39,
    "./parser": 40,
    "./pipeline": 41,
    "./shared": 45,
    "./task": 46,
    "./utilities": 48
  } ],
  39: [ (function(require, module, exports) {
    "use strict";
    var downloader = require("./downloader");
    var Cache = require("./cache");
    var js = require("../platform/js");
    var _require = require("./shared"), files = _require.files;
    var _loading = new Cache();
    function isLoading(val) {
      return _loading.has(val.uuid);
    }
    var packManager = {
      unpackJson: function unpackJson(pack, json, options, onComplete) {
        var out = Object.create(null), err = null;
        if (Array.isArray(json)) {
          json.length !== pack.length && cc.errorID(4915);
          for (var i = 0; i < pack.length; i++) {
            var key = pack[i] + "@import";
            out[key] = json[i];
          }
        } else if (json.type === js._getClassId(cc.Texture2D)) {
          if (json.data) {
            var datas = json.data.split("|");
            datas.length !== pack.length && cc.errorID(4915);
            for (var _i = 0; _i < pack.length; _i++) out[pack[_i] + "@import"] = {
              __type__: json.type,
              content: datas[_i]
            };
          }
        } else {
          err = new Error("unmatched type pack!");
          out = null;
        }
        onComplete && onComplete(err, out);
      },
      init: function init() {
        _loading.clear();
      },
      register: function register(type, handler) {
        "object" === typeof type ? js.mixin(unpackers, type) : unpackers[type] = handler;
      },
      unpack: function unpack(pack, data, type, options, onComplete) {
        if (!data) {
          onComplete && onComplete(new Error("package data is wrong!"));
          return;
        }
        var unpacker = unpackers[type];
        unpacker(pack, data, options, onComplete);
      },
      load: function load(item, options, onComplete) {
        if (item.isNative || !item.info || !item.info.packs) return downloader.download(item.id, item.url, item.ext, item.options, onComplete);
        if (files.has(item.id)) return onComplete(null, files.get(item.id));
        var packs = item.info.packs;
        var pack = packs.find(isLoading);
        if (pack) return _loading.get(pack.uuid).push({
          onComplete: onComplete,
          id: item.id
        });
        pack = packs[0];
        _loading.add(pack.uuid, [ {
          onComplete: onComplete,
          id: item.id
        } ]);
        var url = cc.assetManager._transform(pack.uuid, {
          ext: pack.ext,
          bundle: item.config.name
        });
        downloader.download(pack.uuid, url, pack.ext, item.options, (function(err, data) {
          files.remove(pack.uuid);
          err && cc.error(err.message, err.stack);
          packManager.unpack(pack.packs, data, pack.ext, item.options, (function(err, result) {
            if (!err) for (var id in result) files.add(id, result[id]);
            var callbacks = _loading.remove(pack.uuid);
            for (var i = 0, l = callbacks.length; i < l; i++) {
              var cb = callbacks[i];
              if (err) {
                cb.onComplete(err);
                continue;
              }
              var data = result[cb.id];
              data ? cb.onComplete(null, data) : cb.onComplete(new Error("can not retrieve data from package"));
            }
          }));
        }));
      }
    };
    var unpackers = {
      ".json": packManager.unpackJson
    };
    module.exports = packManager;
  }), {
    "../platform/js": 161,
    "./cache": 23,
    "./downloader": 32,
    "./shared": 45
  } ],
  40: [ (function(require, module, exports) {
    "use strict";
    var plistParser = require("../platform/CCSAXParser").plistParser;
    var js = require("../platform/js");
    var deserialize = require("./deserialize");
    var Cache = require("./cache");
    var _require = require("./helper"), isScene = _require.isScene;
    var _require2 = require("./shared"), parsed = _require2.parsed, files = _require2.files;
    var _require3 = require("../platform/CCSys"), __audioSupport = _require3.__audioSupport, capabilities = _require3.capabilities;
    var _parsing = new Cache();
    var parser = {
      parseImage: function parseImage(file, options, onComplete) {
        if (capabilities.imageBitmap && file instanceof Blob) {
          var imageOptions = {};
          imageOptions.imageOrientation = options.__flipY__ ? "flipY" : "none";
          imageOptions.premultiplyAlpha = options.__premultiplyAlpha__ ? "premultiply" : "none";
          createImageBitmap(file, imageOptions).then((function(result) {
            result.flipY = !!options.__flipY__;
            result.premultiplyAlpha = !!options.__premultiplyAlpha__;
            onComplete && onComplete(null, result);
          }), (function(err) {
            onComplete && onComplete(err, null);
          }));
        } else onComplete && onComplete(null, file);
      },
      parseAudio: function parseAudio(file, options, onComplete) {
        file instanceof ArrayBuffer ? __audioSupport.context.decodeAudioData(file, (function(buffer) {
          onComplete && onComplete(null, buffer);
        }), (function(e) {
          onComplete && onComplete(e, null);
        })) : onComplete && onComplete(null, file);
      },
      parsePVRTex: (function() {
        var PVR_HEADER_LENGTH = 13;
        var PVR_MAGIC = 55727696;
        var PVR_HEADER_MAGIC = 0;
        var PVR_HEADER_FORMAT = 2;
        var PVR_HEADER_HEIGHT = 6;
        var PVR_HEADER_WIDTH = 7;
        var PVR_HEADER_MIPMAPCOUNT = 11;
        var PVR_HEADER_METADATA = 12;
        return function(file, options, onComplete) {
          var err = null, out = null;
          try {
            var buffer = file instanceof ArrayBuffer ? file : file.buffer;
            var header = new Int32Array(buffer, 0, PVR_HEADER_LENGTH);
            if (header[PVR_HEADER_MAGIC] != PVR_MAGIC) throw new Error("Invalid magic number in PVR header");
            var width = header[PVR_HEADER_WIDTH];
            var height = header[PVR_HEADER_HEIGHT];
            var dataOffset = header[PVR_HEADER_METADATA] + 52;
            var pvrtcData = new Uint8Array(buffer, dataOffset);
            out = {
              _data: pvrtcData,
              _compressed: true,
              width: width,
              height: height
            };
          } catch (e) {
            err = e;
          }
          onComplete && onComplete(err, out);
        };
      })(),
      parsePKMTex: (function() {
        var ETC_PKM_HEADER_SIZE = 16;
        var ETC_PKM_FORMAT_OFFSET = 6;
        var ETC_PKM_ENCODED_WIDTH_OFFSET = 8;
        var ETC_PKM_ENCODED_HEIGHT_OFFSET = 10;
        var ETC_PKM_WIDTH_OFFSET = 12;
        var ETC_PKM_HEIGHT_OFFSET = 14;
        var ETC1_RGB_NO_MIPMAPS = 0;
        var ETC2_RGB_NO_MIPMAPS = 1;
        var ETC2_RGBA_NO_MIPMAPS = 3;
        function readBEUint16(header, offset) {
          return header[offset] << 8 | header[offset + 1];
        }
        return function(file, options, onComplete) {
          var err = null, out = null;
          try {
            var buffer = file instanceof ArrayBuffer ? file : file.buffer;
            var header = new Uint8Array(buffer);
            var format = readBEUint16(header, ETC_PKM_FORMAT_OFFSET);
            if (format !== ETC1_RGB_NO_MIPMAPS && format !== ETC2_RGB_NO_MIPMAPS && format !== ETC2_RGBA_NO_MIPMAPS) return new Error("Invalid magic number in ETC header");
            var width = readBEUint16(header, ETC_PKM_WIDTH_OFFSET);
            var height = readBEUint16(header, ETC_PKM_HEIGHT_OFFSET);
            var encodedWidth = readBEUint16(header, ETC_PKM_ENCODED_WIDTH_OFFSET);
            var encodedHeight = readBEUint16(header, ETC_PKM_ENCODED_HEIGHT_OFFSET);
            var etcData = new Uint8Array(buffer, ETC_PKM_HEADER_SIZE);
            out = {
              _data: etcData,
              _compressed: true,
              width: width,
              height: height
            };
          } catch (e) {
            err = e;
          }
          onComplete && onComplete(err, out);
        };
      })(),
      parsePlist: function parsePlist(file, options, onComplete) {
        var err = null;
        var result = plistParser.parse(file);
        result || (err = new Error("parse failed"));
        onComplete && onComplete(err, result);
      },
      parseImport: function parseImport(file, options, onComplete) {
        if (!file) return onComplete && onComplete(new Error("Json is empty"));
        var result, err = null;
        try {
          result = deserialize(file, options);
        } catch (e) {
          err = e;
        }
        onComplete && onComplete(err, result);
      },
      init: function init() {
        _parsing.clear();
      },
      register: function register(type, handler) {
        "object" === typeof type ? js.mixin(parsers, type) : parsers[type] = handler;
      },
      parse: function parse(id, file, type, options, onComplete) {
        var parsedAsset, parsing, parseHandler;
        if (parsedAsset = parsed.get(id)) onComplete(null, parsedAsset); else if (parsing = _parsing.get(id)) parsing.push(onComplete); else if (parseHandler = parsers[type]) {
          _parsing.add(id, [ onComplete ]);
          parseHandler(file, options, (function(err, data) {
            err ? files.remove(id) : isScene(data) || parsed.add(id, data);
            var callbacks = _parsing.remove(id);
            for (var i = 0, l = callbacks.length; i < l; i++) callbacks[i](err, data);
          }));
        } else onComplete(null, file);
      }
    };
    var parsers = {
      ".png": parser.parseImage,
      ".jpg": parser.parseImage,
      ".bmp": parser.parseImage,
      ".jpeg": parser.parseImage,
      ".gif": parser.parseImage,
      ".ico": parser.parseImage,
      ".tiff": parser.parseImage,
      ".webp": parser.parseImage,
      ".image": parser.parseImage,
      ".pvr": parser.parsePVRTex,
      ".pkm": parser.parsePKMTex,
      ".mp3": parser.parseAudio,
      ".ogg": parser.parseAudio,
      ".wav": parser.parseAudio,
      ".m4a": parser.parseAudio,
      ".plist": parser.parsePlist,
      import: parser.parseImport
    };
    module.exports = parser;
  }), {
    "../platform/CCSAXParser": 148,
    "../platform/CCSys": 150,
    "../platform/js": 161,
    "./cache": 23,
    "./deserialize": 27,
    "./helper": 36,
    "./shared": 45
  } ],
  41: [ (function(require, module, exports) {
    "use strict";
    var Task = require("./task");
    var _pipelineId = 0;
    function Pipeline(name, funcs) {
      if (!Array.isArray(funcs)) {
        cc.warn("funcs must be an array");
        return;
      }
      this.id = _pipelineId++;
      this.name = name;
      this.pipes = [];
      for (var i = 0, l = funcs.length; i < l; i++) "function" === typeof funcs[i] && this.pipes.push(funcs[i]);
    }
    Pipeline.prototype = {
      constructor: Pipeline,
      insert: function insert(func, index) {
        if ("function" !== typeof func || index > this.pipes.length) {
          cc.warnID(4921);
          return;
        }
        this.pipes.splice(index, 0, func);
        return this;
      },
      append: function append(func) {
        if ("function" !== typeof func) return;
        this.pipes.push(func);
        return this;
      },
      remove: function remove(index) {
        if ("number" !== typeof index) return;
        this.pipes.splice(index, 1);
        return this;
      },
      sync: function sync(task) {
        var pipes = this.pipes;
        if (!(task instanceof Task) || 0 === pipes.length) return;
        if (null != task.output) {
          task.input = task.output;
          task.output = null;
        }
        task._isFinish = false;
        for (var i = 0, l = pipes.length; i < l; ) {
          var pipe = pipes[i];
          var result = pipe(task);
          if (result) {
            task._isFinish = true;
            return result;
          }
          i++;
          if (i !== l) {
            task.input = task.output;
            task.output = null;
          }
        }
        task._isFinish = true;
        return task.output;
      },
      async: function async(task) {
        var pipes = this.pipes;
        if (!(task instanceof Task) || 0 === pipes.length) return;
        if (null != task.output) {
          task.input = task.output;
          task.output = null;
        }
        task._isFinish = false;
        this._flow(0, task);
      },
      _flow: function _flow(index, task) {
        var self = this;
        var pipe = this.pipes[index];
        pipe(task, (function(result) {
          if (result) {
            task._isFinish = true;
            task.onComplete && task.onComplete(result);
          } else {
            index++;
            if (index < self.pipes.length) {
              task.input = task.output;
              task.output = null;
              self._flow(index, task);
            } else {
              task._isFinish = true;
              task.onComplete && task.onComplete(result, task.output);
            }
          }
        }));
      }
    };
    module.exports = Pipeline;
  }), {
    "./task": 46
  } ],
  42: [ (function(require, module, exports) {
    "use strict";
    var Task = require("./task");
    var _require = require("./shared"), transformPipeline = _require.transformPipeline, RequestType = _require.RequestType;
    function preprocess(task, done) {
      var options = task.options, subOptions = Object.create(null), leftOptions = Object.create(null);
      for (var op in options) switch (op) {
       case RequestType.PATH:
       case RequestType.UUID:
       case RequestType.DIR:
       case RequestType.SCENE:
       case RequestType.URL:
        break;

       case "__requestType__":
       case "__isNative__":
       case "ext":
       case "type":
       case "__nativeName__":
       case "audioLoadMode":
       case "bundle":
        subOptions[op] = options[op];
        break;

       case "__exclude__":
       case "__outputAsArray__":
        leftOptions[op] = options[op];
        break;

       default:
        subOptions[op] = options[op];
        leftOptions[op] = options[op];
      }
      task.options = leftOptions;
      var subTask = Task.create({
        input: task.input,
        options: subOptions
      });
      var err = null;
      try {
        task.output = task.source = transformPipeline.sync(subTask);
      } catch (e) {
        err = e;
        for (var i = 0, l = subTask.output.length; i < l; i++) subTask.output[i].recycle();
      }
      subTask.recycle();
      done(err);
    }
    module.exports = preprocess;
  }), {
    "./shared": 45,
    "./task": 46
  } ],
  43: [ (function(require, module, exports) {
    "use strict";
    var dependUtil = require("./depend-util");
    var Cache = require("./cache");
    require("../assets/CCAsset");
    var _require = require("./shared"), assets = _require.assets;
    function visitAsset(asset, deps) {
      if (!asset._uuid) return;
      deps.push(asset._uuid);
    }
    function visitComponent(comp, deps) {
      var props = Object.getOwnPropertyNames(comp);
      for (var i = 0; i < props.length; i++) {
        var propName = props[i];
        if ("node" === propName || "__eventTargets" === propName) continue;
        var value = comp[propName];
        if ("object" === typeof value && value) if (Array.isArray(value)) for (var j = 0; j < value.length; j++) {
          var val = value[j];
          val instanceof cc.Asset && visitAsset(val, deps);
        } else if (value.constructor && value.constructor !== Object) value instanceof cc.Asset && visitAsset(value, deps); else {
          var keys = Object.getOwnPropertyNames(value);
          for (var _j = 0; _j < keys.length; _j++) {
            var _val = value[keys[_j]];
            _val instanceof cc.Asset && visitAsset(_val, deps);
          }
        }
      }
    }
    var _temp = [];
    function visitNode(node, deps) {
      for (var i = 0; i < node._components.length; i++) visitComponent(node._components[i], deps);
      for (var _i = 0; _i < node._children.length; _i++) visitNode(node._children[_i], deps);
    }
    function descendOpRef(asset, refs, exclude, op) {
      exclude.push(asset._uuid);
      var depends = dependUtil.getDeps(asset._uuid);
      for (var i = 0, l = depends.length; i < l; i++) {
        var dependAsset = assets.get(depends[i]);
        if (dependAsset) {
          var uuid = dependAsset._uuid;
          uuid in refs ? refs[uuid] += op : refs[uuid] = dependAsset.refCount + op;
          if (exclude.includes(uuid)) continue;
          descendOpRef(dependAsset, refs, exclude, op);
        }
      }
    }
    function checkCircularReference(asset) {
      var refs = Object.create(null);
      refs[asset._uuid] = asset.refCount;
      descendOpRef(asset, refs, _temp, -1);
      _temp.length = 0;
      if (0 !== refs[asset._uuid]) return refs[asset._uuid];
      for (var uuid in refs) 0 !== refs[uuid] && descendOpRef(assets.get(uuid), refs, _temp, 1);
      _temp.length = 0;
      return refs[asset._uuid];
    }
    var _persistNodeDeps = new Cache();
    var _toDelete = new Cache();
    var eventListener = false;
    function freeAssets() {
      eventListener = false;
      _toDelete.forEach((function(asset) {
        releaseManager._free(asset);
      }));
      _toDelete.clear();
    }
    var releaseManager = {
      init: function init() {
        _persistNodeDeps.clear();
        _toDelete.clear();
      },
      _addPersistNodeRef: function _addPersistNodeRef(node) {
        var deps = [];
        visitNode(node, deps);
        for (var i = 0, l = deps.length; i < l; i++) {
          var dependAsset = assets.get(deps[i]);
          dependAsset && dependAsset.addRef();
        }
        _persistNodeDeps.add(node.uuid, deps);
      },
      _removePersistNodeRef: function _removePersistNodeRef(node) {
        if (_persistNodeDeps.has(node.uuid)) {
          var deps = _persistNodeDeps.get(node.uuid);
          for (var i = 0, l = deps.length; i < l; i++) {
            var dependAsset = assets.get(deps[i]);
            dependAsset && dependAsset.decRef();
          }
          _persistNodeDeps.remove(node.uuid);
        }
      },
      _autoRelease: function _autoRelease(oldScene, newScene, persistNodes) {
        for (var i = 0, l = persistNodes.length; i < l; i++) {
          var node = persistNodes[i];
          var sceneDeps = dependUtil._depends.get(newScene._id);
          var deps = _persistNodeDeps.get(node.uuid);
          for (var _i2 = 0, _l = deps.length; _i2 < _l; _i2++) {
            var dependAsset = assets.get(deps[_i2]);
            dependAsset && dependAsset.addRef();
          }
          if (sceneDeps) {
            !sceneDeps.persistDeps && (sceneDeps.persistDeps = []);
            sceneDeps.persistDeps.push.apply(sceneDeps.persistDeps, deps);
          }
        }
        if (oldScene) {
          var childs = dependUtil.getDeps(oldScene._id);
          for (var _i3 = 0, _l2 = childs.length; _i3 < _l2; _i3++) {
            var asset = assets.get(childs[_i3]);
            asset && asset.decRef((false, oldScene.autoReleaseAssets));
          }
          var dependencies = dependUtil._depends.get(oldScene._id);
          if (dependencies && dependencies.persistDeps) {
            var persistDeps = dependencies.persistDeps;
            for (var _i4 = 0, _l3 = persistDeps.length; _i4 < _l3; _i4++) {
              var _asset = assets.get(persistDeps[_i4]);
              _asset && _asset.decRef((false, oldScene.autoReleaseAssets));
            }
          }
          dependUtil.remove(oldScene._id);
        }
      },
      _free: function _free(asset, force) {
        _toDelete.remove(asset._uuid);
        if (!cc.isValid(asset, true)) return;
        if (!force && asset.refCount > 0 && checkCircularReference(asset) > 0) return;
        assets.remove(asset._uuid);
        var depends = dependUtil.getDeps(asset._uuid);
        for (var i = 0, l = depends.length; i < l; i++) {
          var dependAsset = assets.get(depends[i]);
          if (dependAsset) {
            dependAsset.decRef(false);
            releaseManager._free(dependAsset, false);
          }
        }
        asset.destroy();
        dependUtil.remove(asset._uuid);
      },
      tryRelease: function tryRelease(asset, force) {
        if (!(asset instanceof cc.Asset)) return;
        if (force) releaseManager._free(asset, force); else {
          _toDelete.add(asset._uuid, asset);
          if (!eventListener) {
            eventListener = true;
            cc.director.once(cc.Director.EVENT_AFTER_DRAW, freeAssets);
          }
        }
      }
    };
    module.exports = releaseManager;
  }), {
    "../assets/CCAsset": 49,
    "./cache": 23,
    "./depend-util": 25,
    "./shared": 45
  } ],
  44: [ (function(require, module, exports) {
    "use strict";
    var MAX_DEAD_NUM = 500;
    var _deadPool = [];
    function RequestItem() {
      this._id = "";
      this.uuid = "";
      this.url = "";
      this.ext = ".json";
      this.content = null;
      this.file = null;
      this.info = null;
      this.config = null;
      this.isNative = false;
      this.options = Object.create(null);
    }
    RequestItem.prototype = {
      constructor: RequestItem,
      get id() {
        this._id || (this._id = this.uuid + "@" + (this.isNative ? "native" : "import"));
        return this._id;
      },
      recycle: function recycle() {
        if (_deadPool.length === MAX_DEAD_NUM) return;
        this._id = "";
        this.uuid = "";
        this.url = "";
        this.ext = ".json";
        this.content = null;
        this.file = null;
        this.info = null;
        this.config = null;
        this.isNative = false;
        this.options = Object.create(null);
        _deadPool.push(this);
      }
    };
    RequestItem.create = function() {
      var out = null;
      out = 0 !== _deadPool.length ? _deadPool.pop() : new RequestItem();
      return out;
    };
    module.exports = RequestItem;
  }), {} ],
  45: [ (function(require, module, exports) {
    "use strict";
    var Cache = require("./cache");
    var Pipeline = require("./pipeline");
    var assets = new Cache();
    var files = new Cache();
    var parsed = new Cache();
    var bundles = new Cache();
    var pipeline = new Pipeline("normal load", []);
    var fetchPipeline = new Pipeline("fetch", []);
    var transformPipeline = new Pipeline("transform url", []);
    var RequestType = {
      UUID: "uuid",
      PATH: "path",
      DIR: "dir",
      URL: "url",
      SCENE: "scene"
    };
    var BuiltinBundleName = {
      RESOURCES: "resources",
      INTERNAL: "internal",
      MAIN: "main",
      START_SCENE: "start-scene"
    };
    module.exports = {
      assets: assets,
      files: files,
      parsed: parsed,
      pipeline: pipeline,
      fetchPipeline: fetchPipeline,
      transformPipeline: transformPipeline,
      RequestType: RequestType,
      bundles: bundles,
      BuiltinBundleName: BuiltinBundleName
    };
  }), {
    "./cache": 23,
    "./pipeline": 41
  } ],
  46: [ (function(require, module, exports) {
    "use strict";
    var _taskId = 0;
    var MAX_DEAD_NUM = 500;
    var _deadPool = [];
    function Task(options) {
      this.id = _taskId++;
      this._isFinish = true;
      this.onComplete = null;
      this.onProgress = null;
      this.onError = null;
      this.source = null;
      this.output = null;
      this.input = null;
      this.progress = null;
      this.options = null;
      this.set(options);
    }
    Task.prototype = {
      constructor: Task,
      set: function set(options) {
        options = options || Object.create(null);
        this.onComplete = options.onComplete;
        this.onProgress = options.onProgress;
        this.onError = options.onError;
        this.source = this.input = options.input;
        this.output = null;
        this.progress = options.progress;
        this.options = options.options || Object.create(null);
      },
      dispatch: function dispatch(event, param1, param2, param3, param4) {
        switch (event) {
         case "complete":
          this.onComplete && this.onComplete(param1, param2, param3, param4);
          break;

         case "progress":
          this.onProgress && this.onProgress(param1, param2, param3, param4);
          break;

         case "error":
          this.onError && this.onError(param1, param2, param3, param4);
          break;

         default:
          var str = "on" + event[0].toUpperCase() + event.substr(1);
          "function" === typeof this[str] && this[str](param1, param2, param3, param4);
        }
      },
      recycle: function recycle() {
        if (_deadPool.length === MAX_DEAD_NUM) return;
        this.onComplete = null;
        this.onProgress = null;
        this.onError = null;
        this.source = this.output = this.input = null;
        this.progress = null;
        this.options = null;
        _deadPool.push(this);
      },
      get isFinish() {
        return this._isFinish;
      }
    };
    Task.create = function(options) {
      var out = null;
      if (0 !== _deadPool.length) {
        out = _deadPool.pop();
        out.set(options);
      } else out = new Task(options);
      return out;
    };
    module.exports = Task;
  }), {} ],
  47: [ (function(require, module, exports) {
    "use strict";
    var _require = require("./helper"), decodeUuid = _require.decodeUuid;
    var RequestItem = require("./request-item");
    var _require2 = require("./shared"), RequestType = _require2.RequestType, bundles = _require2.bundles;
    function parse(task) {
      var input = task.input, options = task.options;
      input = Array.isArray(input) ? input : [ input ];
      task.output = [];
      for (var i = 0; i < input.length; i++) {
        var item = input[i];
        var out = RequestItem.create();
        if ("string" === typeof item) {
          item = Object.create(null);
          item[options.__requestType__ || RequestType.UUID] = input[i];
        }
        if ("object" === typeof item) {
          cc.js.addon(item, options);
          item.preset && cc.js.addon(item, cc.assetManager.presets[item.preset]);
          for (var key in item) {
            switch (key) {
             case RequestType.UUID:
              var uuid = out.uuid = decodeUuid(item.uuid);
              if (bundles.has(item.bundle)) {
                var config = bundles.get(item.bundle)._config;
                var info = config.getAssetInfo(uuid);
                if (info && info.redirect) {
                  if (!bundles.has(info.redirect)) throw new Error("Please load bundle " + info.redirect + " first");
                  config = bundles.get(info.redirect)._config;
                  info = config.getAssetInfo(uuid);
                }
                out.config = config;
                out.info = info;
              }
              out.ext = item.ext || ".json";
              break;

             case "__requestType__":
             case "ext":
             case "bundle":
             case "preset":
             case "type":
              break;

             case RequestType.DIR:
              if (bundles.has(item.bundle)) {
                var infos = [];
                bundles.get(item.bundle)._config.getDirWithPath(item.dir, item.type, infos);
                for (var _i = 0, l = infos.length; _i < l; _i++) {
                  var info = infos[_i];
                  input.push({
                    uuid: info.uuid,
                    __isNative__: false,
                    ext: ".json",
                    bundle: item.bundle
                  });
                }
              }
              out.recycle();
              out = null;
              break;

             case RequestType.PATH:
              if (bundles.has(item.bundle)) {
                var config = bundles.get(item.bundle)._config;
                var info = config.getInfoWithPath(item.path, item.type);
                if (info && info.redirect) {
                  if (!bundles.has(info.redirect)) throw new Error("you need to load bundle " + info.redirect + " first");
                  config = bundles.get(info.redirect)._config;
                  info = config.getAssetInfo(info.uuid);
                }
                if (!info) {
                  out.recycle();
                  throw new Error("Bundle " + item.bundle + " doesn't contain " + item.path);
                }
                out.config = config;
                out.uuid = info.uuid;
                out.info = info;
              }
              out.ext = item.ext || ".json";
              break;

             case RequestType.SCENE:
              if (bundles.has(item.bundle)) {
                var config = bundles.get(item.bundle)._config;
                var info = config.getSceneInfo(item.scene);
                if (info && info.redirect) {
                  if (!bundles.has(info.redirect)) throw new Error("you need to load bundle " + info.redirect + " first");
                  config = bundles.get(info.redirect)._config;
                  info = config.getAssetInfo(info.uuid);
                }
                if (!info) {
                  out.recycle();
                  throw new Error("Bundle " + config.name + " doesn't contain scene " + item.scene);
                }
                out.config = config;
                out.uuid = info.uuid;
                out.info = info;
              }
              break;

             case "__isNative__":
              out.isNative = item.__isNative__;
              break;

             case RequestType.URL:
              out.url = item.url;
              out.uuid = item.uuid || item.url;
              out.ext = item.ext || cc.path.extname(item.url);
              out.isNative = void 0 === item.__isNative__ || item.__isNative__;
              break;

             default:
              out.options[key] = item[key];
            }
            if (!out) break;
          }
        }
        if (!out) continue;
        task.output.push(out);
        if (!out.uuid && !out.url) throw new Error("unknown input:" + item.toString());
      }
      return null;
    }
    function combine(task) {
      var input = task.output = task.input;
      for (var i = 0; i < input.length; i++) {
        var item = input[i];
        if (item.url) continue;
        var url = "", base = "";
        var config = item.config;
        base = item.isNative ? config && config.nativeBase ? config.base + config.nativeBase : cc.assetManager.generalNativeBase : config && config.importBase ? config.base + config.importBase : cc.assetManager.generalImportBase;
        var uuid = item.uuid;
        var ver = "";
        item.info && (ver = item.isNative ? item.info.nativeVer ? "." + item.info.nativeVer : "" : item.info.ver ? "." + item.info.ver : "");
        url = ".ttf" === item.ext ? base + "/" + uuid.slice(0, 2) + "/" + uuid + ver + "/" + item.options.__nativeName__ : base + "/" + uuid.slice(0, 2) + "/" + uuid + ver + item.ext;
        item.url = url;
      }
      return null;
    }
    module.exports = {
      parse: parse,
      combine: combine
    };
  }), {
    "./helper": 36,
    "./request-item": 44,
    "./shared": 45
  } ],
  48: [ (function(require, module, exports) {
    "use strict";
    var dependUtil = require("./depend-util");
    var _require = require("./helper"), isScene = _require.isScene, decodeUuid = _require.decodeUuid;
    var _require2 = require("./shared"), assets = _require2.assets;
    var _require3 = require("../platform/utils"), callInNextTick = _require3.callInNextTick;
    var MissingObjectReporter = false;
    require("../assets/CCAsset");
    var utils = {
      processOptions: function processOptions(options) {
        false;
        var uuids = options.uuids;
        var paths = options.paths;
        var types = options.types;
        var bundles = options.deps;
        var realEntries = options.paths = Object.create(null);
        if (false === options.debug) {
          for (var i = 0, l = uuids.length; i < l; i++) uuids[i] = decodeUuid(uuids[i]);
          for (var id in paths) {
            var entry = paths[id];
            var type = entry[1];
            entry[1] = types[type];
          }
        } else {
          var out = Object.create(null);
          for (var _i = 0, _l = uuids.length; _i < _l; _i++) {
            var uuid = uuids[_i];
            uuids[_i] = out[uuid] = decodeUuid(uuid);
          }
          uuids = out;
        }
        for (var _id in paths) {
          var _entry = paths[_id];
          realEntries[uuids[_id]] = _entry;
        }
        var scenes = options.scenes;
        for (var name in scenes) {
          var _uuid = scenes[name];
          scenes[name] = uuids[_uuid];
        }
        var packs = options.packs;
        for (var packId in packs) {
          var packedIds = packs[packId];
          for (var j = 0; j < packedIds.length; ++j) packedIds[j] = uuids[packedIds[j]];
        }
        var versions = options.versions;
        if (versions) for (var folder in versions) {
          var entries = versions[folder];
          for (var _i2 = 0; _i2 < entries.length; _i2 += 2) {
            var _uuid2 = entries[_i2];
            entries[_i2] = uuids[_uuid2] || _uuid2;
          }
        }
        var redirect = options.redirect;
        if (redirect) for (var _i3 = 0; _i3 < redirect.length; _i3 += 2) {
          redirect[_i3] = uuids[redirect[_i3]];
          redirect[_i3 + 1] = bundles[redirect[_i3 + 1]];
        }
      },
      clear: function clear(task, clearRef) {
        for (var i = 0, l = task.input.length; i < l; i++) {
          var item = task.input[i];
          clearRef && !item.isNative && item.content && item.content.decRef && item.content.decRef(false);
          item.recycle();
        }
        task.input = null;
      },
      urlAppendTimestamp: function urlAppendTimestamp(url) {
        if (cc.assetManager.downloader.appendTimeStamp && "string" === typeof url) return /\?/.test(url) ? url + "&_t=" + (new Date() - 0) : url + "?_t=" + (new Date() - 0);
        return url;
      },
      retry: function retry(process, times, wait, onComplete, index) {
        index = index || 0;
        process(index, (function(err, result) {
          index++;
          !err || index > times ? onComplete && onComplete(err, result) : setTimeout((function() {
            utils.retry(process, times, wait, onComplete, index);
          }), wait);
        }));
      },
      getDepends: function getDepends(uuid, data, exclude, depends, preload, asyncLoadAssets, config) {
        var err = null;
        try {
          var info = dependUtil.parse(uuid, data);
          var includeNative = true;
          data instanceof cc.Asset && (!data.__nativeDepend__ || data._nativeAsset) && (includeNative = false);
          if (preload) {
            for (var _i4 = 0, _l2 = info.deps.length; _i4 < _l2; _i4++) {
              var _dep = info.deps[_i4];
              if (!(_dep in exclude)) {
                exclude[_dep] = true;
                depends.push({
                  uuid: _dep,
                  bundle: config && config.name
                });
              }
            }
            if (includeNative && info.nativeDep) {
              config && (info.nativeDep.bundle = config.name);
              depends.push(Object.assign({}, info.nativeDep));
            }
          } else {
            asyncLoadAssets = (true, !!data.asyncLoadAssets || asyncLoadAssets && !info.preventDeferredLoadDependents);
            for (var i = 0, l = info.deps.length; i < l; i++) {
              var dep = info.deps[i];
              if (!(dep in exclude)) {
                exclude[dep] = true;
                depends.push({
                  uuid: dep,
                  __asyncLoadAssets__: asyncLoadAssets,
                  bundle: config && config.name
                });
              }
            }
            if (includeNative && !asyncLoadAssets && !info.preventPreloadNativeObject && info.nativeDep) {
              config && (info.nativeDep.bundle = config.name);
              depends.push(Object.assign({}, info.nativeDep));
            }
          }
        } catch (e) {
          err = e;
        }
        return err;
      },
      cache: function cache(id, asset, cacheAsset) {
        if (!asset) return;
        var _isScene = isScene(asset);
        !_isScene && cacheAsset && assets.add(id, asset);
        _isScene && false;
      },
      setProperties: function setProperties(uuid, asset, assetsMap) {
        var missingAsset = false;
        var depends = asset.__depends__;
        if (depends) {
          var missingAssetReporter = null;
          for (var i = 0, l = depends.length; i < l; i++) {
            var depend = depends[i];
            var dependAsset = assetsMap[depend.uuid + "@import"];
            if (dependAsset) depend.owner[depend.prop] = dependAsset.addRef(); else {
              false;
              cc.error("The asset " + depend.uuid + " is missing!");
              missingAsset = true;
            }
          }
          missingAssetReporter && missingAssetReporter.reportByOwner();
          asset.__depends__ = void 0;
        }
        if (asset.__nativeDepend__) {
          if (!asset._nativeAsset) if (assetsMap[uuid + "@native"]) asset._nativeAsset = assetsMap[uuid + "@native"]; else {
            missingAsset = true;
            false;
          }
          asset.__nativeDepend__ = void 0;
        }
        return missingAsset;
      },
      gatherAsset: function gatherAsset(task) {
        var source = task.source;
        if (task.options.__outputAsArray__ || 1 !== source.length) {
          var output = task.output = [];
          for (var i = 0, l = source.length; i < l; i++) output.push(source[i].content);
        } else task.output = source[0].content;
      },
      forEach: function forEach(array, process, onComplete) {
        var count = 0;
        var errs = [];
        0 === array.length && onComplete && onComplete(errs);
        for (var i = 0, l = array.length; i < l; i++) process(array[i], (function(err) {
          err && errs.push(err);
          count++;
          count === l && onComplete && onComplete(errs);
        }));
      },
      parseParameters: function parseParameters(options, onProgress, onComplete) {
        if (void 0 === onComplete) {
          var isCallback = "function" === typeof options;
          if (onProgress) {
            onComplete = onProgress;
            isCallback || (onProgress = null);
          } else if (void 0 === onProgress && isCallback) {
            onComplete = options;
            options = null;
            onProgress = null;
          }
          if (void 0 !== onProgress && isCallback) {
            onProgress = options;
            options = null;
          }
        }
        options = options || Object.create(null);
        return {
          options: options,
          onProgress: onProgress,
          onComplete: onComplete
        };
      },
      parseLoadResArgs: function parseLoadResArgs(type, onProgress, onComplete) {
        if (void 0 === onComplete) {
          var isValidType = cc.js.isChildClassOf(type, cc.Asset);
          if (onProgress) {
            onComplete = onProgress;
            isValidType && (onProgress = null);
          } else if (void 0 === onProgress && !isValidType) {
            onComplete = type;
            onProgress = null;
            type = null;
          }
          if (void 0 !== onProgress && !isValidType) {
            onProgress = type;
            type = null;
          }
        }
        return {
          type: type,
          onProgress: onProgress,
          onComplete: onComplete
        };
      },
      checkCircleReference: function checkCircleReference(owner, uuid, map, checked) {
        checked || (checked = Object.create(null));
        var item = map[uuid];
        if (!item || checked[uuid]) return false;
        checked[uuid] = true;
        var result = false;
        var deps = dependUtil.getDeps(uuid);
        if (deps) for (var i = 0, l = deps.length; i < l; i++) {
          var dep = deps[i];
          if (dep === owner || utils.checkCircleReference(owner, dep, map, checked)) {
            result = true;
            break;
          }
        }
        return result;
      },
      asyncify: function asyncify(cb) {
        return function(p1, p2) {
          cb && callInNextTick(cb, p1, p2);
        };
      }
    };
    module.exports = utils;
  }), {
    "../assets/CCAsset": 49,
    "../platform/utils": 164,
    "./depend-util": 25,
    "./helper": 36,
    "./shared": 45
  } ],
  49: [ (function(require, module, exports) {
    "use strict";
    var CCObject = require("../platform/CCObject");
    cc.Asset = cc.Class({
      name: "cc.Asset",
      extends: CCObject,
      ctor: function ctor() {
        Object.defineProperty(this, "_uuid", {
          value: "",
          writable: true
        });
        this.loaded = true;
        this._nativeUrl = "";
        this._ref = 0;
      },
      properties: {
        nativeUrl: {
          get: function get() {
            if (!this._nativeUrl && this._native) {
              var name = this._native;
              if (47 === name.charCodeAt(0)) return name.slice(1);
              46 === name.charCodeAt(0) ? this._nativeUrl = cc.assetManager.utils.getUrlWithUuid(this._uuid, {
                ext: name,
                isNative: true
              }) : this._nativeUrl = cc.assetManager.utils.getUrlWithUuid(this._uuid, {
                __nativeName__: name,
                ext: cc.path.extname(name),
                isNative: true
              });
            }
            return this._nativeUrl;
          },
          visible: false
        },
        refCount: {
          get: function get() {
            return this._ref;
          }
        },
        _native: "",
        _nativeAsset: {
          get: function get() {
            return this._$nativeAsset;
          },
          set: function set(obj) {
            this._$nativeAsset = obj;
          }
        },
        _nativeDep: {
          get: function get() {
            if (this._native) return {
              __isNative__: true,
              uuid: this._uuid,
              ext: this._native
            };
          }
        }
      },
      statics: {
        deserialize: false,
        preventDeferredLoadDependents: false,
        preventPreloadNativeObject: false,
        _parseDepsFromJson: function _parseDepsFromJson(json) {
          var depends = [];
          parseDependRecursively(json, depends);
          return depends;
        },
        _parseNativeDepFromJson: function _parseNativeDepFromJson(json) {
          if (json._native) return {
            __isNative__: true,
            ext: json._native
          };
          return null;
        }
      },
      toString: function toString() {
        return this.nativeUrl;
      },
      serialize: false,
      createNode: null,
      _setRawAsset: function _setRawAsset(filename, inLibrary) {
        this._native = false !== inLibrary ? filename || void 0 : "/" + filename;
      },
      addRef: function addRef() {
        this._ref++;
        return this;
      },
      decRef: function decRef(autoRelease) {
        this._ref--;
        false !== autoRelease && cc.assetManager._releaseManager.tryRelease(this);
        return this;
      }
    });
    function parseDependRecursively(data, out) {
      if (!data || "object" !== typeof data || data.__id__) return;
      var uuid = data.__uuid__;
      if (Array.isArray(data)) for (var i = 0, l = data.length; i < l; i++) parseDependRecursively(data[i], out); else if (uuid) out.push(cc.assetManager.utils.decodeUuid(uuid)); else for (var prop in data) parseDependRecursively(data[prop], out);
    }
    module.exports = cc.Asset;
  }), {
    "../platform/CCObject": 147
  } ],
  50: [ (function(require, module, exports) {
    "use strict";
    var Asset = require("./CCAsset");
    var EventTarget = require("../event/event-target");
    var LoadMode = cc.Enum({
      WEB_AUDIO: 0,
      DOM_AUDIO: 1
    });
    var AudioClip = cc.Class({
      name: "cc.AudioClip",
      extends: Asset,
      mixins: [ EventTarget ],
      ctor: function ctor() {
        this._loading = false;
        this.loaded = false;
        this._audio = null;
      },
      properties: {
        duration: 0,
        loadMode: {
          default: LoadMode.WEB_AUDIO,
          type: LoadMode
        },
        _nativeAsset: {
          get: function get() {
            return this._audio;
          },
          set: function set(value) {
            value instanceof cc.AudioClip ? this._audio = value._nativeAsset : this._audio = value;
            if (this._audio) {
              this.loaded = true;
              this.emit("load");
            }
          },
          override: true
        },
        _nativeDep: {
          get: function get() {
            return {
              uuid: this._uuid,
              audioLoadMode: this.loadMode,
              ext: cc.path.extname(this._native),
              __isNative__: true
            };
          },
          override: true
        }
      },
      statics: {
        LoadMode: LoadMode,
        _loadByUrl: function _loadByUrl(url, callback) {
          var audioClip = cc.assetManager.assets.get(url);
          audioClip ? callback(null, audioClip) : cc.assetManager.loadRemote(url, (function(error, data) {
            if (error) return callback(error);
            callback(null, data);
          }));
        },
        _parseDepsFromJson: function _parseDepsFromJson() {
          return [];
        },
        _parseNativeDepFromJson: function _parseNativeDepFromJson(json) {
          return {
            audioLoadMode: json.loadMode,
            ext: cc.path.extname(json._native),
            __isNative__: true
          };
        }
      },
      _ensureLoaded: function _ensureLoaded(onComplete) {
        if (this.loaded) return onComplete && onComplete();
        onComplete && this.once("load", onComplete);
        if (!this._loading) {
          this._loading = true;
          var self = this;
          cc.assetManager.postLoadNative(this, (function(err) {
            self._loading = false;
          }));
        }
      },
      destroy: function destroy() {
        cc.audioEngine.uncache(this);
        this._super();
      }
    });
    cc.AudioClip = AudioClip;
    module.exports = AudioClip;
  }), {
    "../event/event-target": 105,
    "./CCAsset": 49
  } ],
  51: [ (function(require, module, exports) {
    "use strict";
    var FontLetterDefinition = function FontLetterDefinition() {
      this.u = 0;
      this.v = 0;
      this.w = 0;
      this.h = 0;
      this.offsetX = 0;
      this.offsetY = 0;
      this.textureID = 0;
      this.valid = false;
      this.xAdvance = 0;
    };
    var FontAtlas = function FontAtlas(texture) {
      this._letterDefinitions = {};
      this._texture = texture;
    };
    FontAtlas.prototype = {
      constructor: FontAtlas,
      addLetterDefinitions: function addLetterDefinitions(letter, letterDefinition) {
        this._letterDefinitions[letter] = letterDefinition;
      },
      cloneLetterDefinition: function cloneLetterDefinition() {
        var copyLetterDefinitions = {};
        for (var key in this._letterDefinitions) {
          var value = new FontLetterDefinition();
          cc.js.mixin(value, this._letterDefinitions[key]);
          copyLetterDefinitions[key] = value;
        }
        return copyLetterDefinitions;
      },
      getTexture: function getTexture() {
        return this._texture;
      },
      getLetter: function getLetter(key) {
        return this._letterDefinitions[key];
      },
      getLetterDefinitionForChar: function getLetterDefinitionForChar(_char) {
        var key = _char.charCodeAt(0);
        var hasKey = this._letterDefinitions.hasOwnProperty(key);
        var letter;
        letter = hasKey ? this._letterDefinitions[key] : null;
        return letter;
      },
      clear: function clear() {
        this._letterDefinitions = {};
      }
    };
    var BitmapFont = cc.Class({
      name: "cc.BitmapFont",
      extends: cc.Font,
      properties: {
        fntDataStr: {
          default: ""
        },
        spriteFrame: {
          default: null,
          type: cc.SpriteFrame
        },
        fontSize: {
          default: -1
        },
        _fntConfig: null,
        _fontDefDictionary: null
      },
      onLoad: function onLoad() {
        var spriteFrame = this.spriteFrame;
        !this._fontDefDictionary && spriteFrame && (this._fontDefDictionary = new FontAtlas(spriteFrame._texture));
        var fntConfig = this._fntConfig;
        if (!fntConfig) return;
        var fontDict = fntConfig.fontDefDictionary;
        for (var fontDef in fontDict) {
          var letter = new FontLetterDefinition();
          var rect = fontDict[fontDef].rect;
          letter.offsetX = fontDict[fontDef].xOffset;
          letter.offsetY = fontDict[fontDef].yOffset;
          letter.w = rect.width;
          letter.h = rect.height;
          letter.u = rect.x;
          letter.v = rect.y;
          letter.textureID = 0;
          letter.valid = true;
          letter.xAdvance = fontDict[fontDef].xAdvance;
          this._fontDefDictionary.addLetterDefinitions(fontDef, letter);
        }
      }
    });
    cc.BitmapFont = BitmapFont;
    cc.BitmapFont.FontLetterDefinition = FontLetterDefinition;
    cc.BitmapFont.FontAtlas = FontAtlas;
    module.exports = BitmapFont;
  }), {} ],
  52: [ (function(require, module, exports) {
    "use strict";
    var BufferAsset = cc.Class({
      name: "cc.BufferAsset",
      extends: cc.Asset,
      ctor: function ctor() {
        this._buffer = null;
      },
      properties: {
        _nativeAsset: {
          get: function get() {
            return this._buffer;
          },
          set: function set(bin) {
            this._buffer = bin.buffer || bin;
          },
          override: true
        },
        buffer: function buffer() {
          return this._buffer;
        }
      }
    });
    cc.BufferAsset = module.exports = BufferAsset;
  }), {} ],
  53: [ (function(require, module, exports) {
    "use strict";
    var Font = cc.Class({
      name: "cc.Font",
      extends: cc.Asset
    });
    cc.Font = module.exports = Font;
  }), {} ],
  54: [ (function(require, module, exports) {
    "use strict";
    var JsonAsset = cc.Class({
      name: "cc.JsonAsset",
      extends: cc.Asset,
      properties: {
        json: null
      }
    });
    module.exports = cc.JsonAsset = JsonAsset;
  }), {} ],
  55: [ (function(require, module, exports) {
    "use strict";
    var LabelAtlas = cc.Class({
      name: "cc.LabelAtlas",
      extends: cc.BitmapFont,
      onLoad: function onLoad() {
        if (!this.spriteFrame) {
          cc.warnID(9100, this.name);
          return;
        }
        if (!this._fntConfig) {
          cc.warnID(9101, this.name);
          return;
        }
        this._super();
      }
    });
    cc.LabelAtlas = LabelAtlas;
    module.exports = LabelAtlas;
  }), {} ],
  56: [ (function(require, module, exports) {
    "use strict";
    var OptimizationPolicy = cc.Enum({
      AUTO: 0,
      SINGLE_INSTANCE: 1,
      MULTI_INSTANCE: 2
    });
    var Prefab = cc.Class({
      name: "cc.Prefab",
      extends: cc.Asset,
      ctor: function ctor() {
        this._createFunction = null;
        this._instantiatedTimes = 0;
      },
      properties: {
        data: null,
        optimizationPolicy: OptimizationPolicy.AUTO,
        asyncLoadAssets: false,
        readonly: {
          default: false,
          editorOnly: true
        }
      },
      statics: {
        OptimizationPolicy: OptimizationPolicy,
        OptimizationPolicyThreshold: 3
      },
      createNode: false,
      compileCreateFunction: function compileCreateFunction() {
        var jit = require("../platform/instantiate-jit");
        this._createFunction = jit.compile(this.data);
      },
      _doInstantiate: function _doInstantiate(rootToRedirect) {
        this.data._prefab ? this.data._prefab._synced = true : cc.warnID(3700);
        this._createFunction || this.compileCreateFunction();
        return this._createFunction(rootToRedirect);
      },
      _instantiate: function _instantiate() {
        var node, useJit = false;
        true;
        useJit = this.optimizationPolicy !== OptimizationPolicy.SINGLE_INSTANCE && (this.optimizationPolicy === OptimizationPolicy.MULTI_INSTANCE || this._instantiatedTimes + 1 >= Prefab.OptimizationPolicyThreshold);
        if (useJit) {
          node = this._doInstantiate();
          this.data._instantiate(node);
        } else {
          this.data._prefab._synced = true;
          node = this.data._instantiate();
        }
        ++this._instantiatedTimes;
        var PrefabUtils;
        false, false;
        return node;
      },
      destroy: function destroy() {
        this.data && this.data.destroy();
        this._super();
      }
    });
    cc.Prefab = module.exports = Prefab;
    cc.js.obsolete(cc, "cc._Prefab", "Prefab");
  }), {
    "../platform/instantiate-jit": 159
  } ],
  57: [ (function(require, module, exports) {
    "use strict";
    var _gfx = _interopRequireDefault(require("../../renderer/gfx"));
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }
    var renderer = require("../renderer");
    var Texture2D = require("./CCTexture2D");
    var DepthStencilFormat = cc.Enum({
      RB_FMT_D24S8: _gfx["default"].RB_FMT_D24S8,
      RB_FMT_S8: _gfx["default"].RB_FMT_S8,
      RB_FMT_D16: _gfx["default"].RB_FMT_D16
    });
    var RenderTexture = cc.Class({
      name: "cc.RenderTexture",
      extends: Texture2D,
      statics: {
        DepthStencilFormat: DepthStencilFormat
      },
      ctor: function ctor() {
        this._framebuffer = null;
      },
      initWithSize: function initWithSize(width, height, depthStencilFormat) {
        this.width = Math.floor(width || cc.visibleRect.width);
        this.height = Math.floor(height || cc.visibleRect.height);
        this._resetUnderlyingMipmaps();
        var opts = {
          colors: [ this._texture ]
        };
        this._depthStencilBuffer && this._depthStencilBuffer.destroy();
        var depthStencilBuffer;
        if (depthStencilFormat) {
          depthStencilBuffer = new _gfx["default"].RenderBuffer(renderer.device, depthStencilFormat, width, height);
          depthStencilFormat === _gfx["default"].RB_FMT_D24S8 ? opts.depthStencil = depthStencilBuffer : depthStencilFormat === _gfx["default"].RB_FMT_S8 ? opts.stencil = depthStencilBuffer : depthStencilFormat === _gfx["default"].RB_FMT_D16 && (opts.depth = depthStencilBuffer);
        }
        this._depthStencilBuffer = depthStencilBuffer;
        this._framebuffer && this._framebuffer.destroy();
        this._framebuffer = new _gfx["default"].FrameBuffer(renderer.device, width, height, opts);
        this._packable = false;
        this.loaded = true;
        this.emit("load");
      },
      updateSize: function updateSize(width, height) {
        this.width = Math.floor(width || cc.visibleRect.width);
        this.height = Math.floor(height || cc.visibleRect.height);
        this._resetUnderlyingMipmaps();
        var rbo = this._depthStencilBuffer;
        rbo && rbo.update(this.width, this.height);
        this._framebuffer._width = width;
        this._framebuffer._height = height;
      },
      drawTextureAt: function drawTextureAt(texture, x, y) {
        if (!texture._image || 0 === texture._image.width) return;
        this._texture.updateSubImage({
          x: x,
          y: y,
          image: texture._image,
          width: texture.width,
          height: texture.height,
          level: 0,
          flipY: false,
          premultiplyAlpha: texture._premultiplyAlpha
        });
      },
      readPixels: function readPixels(data, x, y, w, h) {
        if (!this._framebuffer || !this._texture) return data;
        x = x || 0;
        y = y || 0;
        var width = w || this.width;
        var height = h || this.height;
        data = data || new Uint8Array(width * height * 4);
        var gl = cc.game._renderContext;
        var oldFBO = gl.getParameter(gl.FRAMEBUFFER_BINDING);
        gl.bindFramebuffer(gl.FRAMEBUFFER, this._framebuffer.getHandle());
        gl.readPixels(x, y, width, height, gl.RGBA, gl.UNSIGNED_BYTE, data);
        gl.bindFramebuffer(gl.FRAMEBUFFER, oldFBO);
        return data;
      },
      destroy: function destroy() {
        this._super();
        if (this._framebuffer) {
          this._framebuffer.destroy();
          this._framebuffer = null;
        }
      }
    });
    cc.RenderTexture = module.exports = RenderTexture;
  }), {
    "../../renderer/gfx": 252,
    "../renderer": 171,
    "./CCTexture2D": 64
  } ],
  58: [ (function(require, module, exports) {
    "use strict";
    var Scene = cc.Class({
      name: "cc.SceneAsset",
      extends: cc.Asset,
      properties: {
        scene: null,
        asyncLoadAssets: void 0
      }
    });
    cc.SceneAsset = Scene;
    module.exports = Scene;
  }), {} ],
  59: [ (function(require, module, exports) {
    "use strict";
    var Script = cc.Class({
      name: "cc.Script",
      extends: cc.Asset
    });
    cc._Script = Script;
    var JavaScript = cc.Class({
      name: "cc.JavaScript",
      extends: Script
    });
    cc._JavaScript = JavaScript;
    var TypeScript = cc.Class({
      name: "cc.TypeScript",
      extends: Script
    });
    cc._TypeScript = TypeScript;
  }), {} ],
  60: [ (function(require, module, exports) {
    "use strict";
    var SpriteAtlas = cc.Class({
      name: "cc.SpriteAtlas",
      extends: cc.Asset,
      properties: {
        _spriteFrames: {
          default: {}
        }
      },
      getTexture: function getTexture() {
        var keys = Object.keys(this._spriteFrames);
        if (keys.length > 0) {
          var spriteFrame = this._spriteFrames[keys[0]];
          return spriteFrame ? spriteFrame.getTexture() : null;
        }
        return null;
      },
      getSpriteFrame: function getSpriteFrame(key) {
        var sf = this._spriteFrames[key];
        if (!sf) return null;
        sf.name || (sf.name = key);
        return sf;
      },
      getSpriteFrames: function getSpriteFrames() {
        var frames = [];
        var spriteFrames = this._spriteFrames;
        for (var key in spriteFrames) frames.push(this.getSpriteFrame(key));
        return frames;
      }
    });
    cc.SpriteAtlas = SpriteAtlas;
    module.exports = SpriteAtlas;
  }), {} ],
  61: [ (function(require, module, exports) {
    "use strict";
    var EventTarget = require("../event/event-target");
    var textureUtil = require("../utils/texture-util");
    var INSET_LEFT = 0;
    var INSET_TOP = 1;
    var INSET_RIGHT = 2;
    var INSET_BOTTOM = 3;
    var temp_uvs = [ {
      u: 0,
      v: 0
    }, {
      u: 0,
      v: 0
    }, {
      u: 0,
      v: 0
    }, {
      u: 0,
      v: 0
    } ];
    var SpriteFrame = cc.Class({
      name: "cc.SpriteFrame",
      extends: require("../assets/CCAsset"),
      mixins: [ EventTarget ],
      properties: {
        _textureSetter: {
          set: function set(texture) {
            if (texture) {
              false;
              this._texture !== texture && this._refreshTexture(texture);
            }
          }
        },
        insetTop: {
          get: function get() {
            return this._capInsets[INSET_TOP];
          },
          set: function set(value) {
            this._capInsets[INSET_TOP] = value;
            this._texture && this._calculateSlicedUV();
          }
        },
        insetBottom: {
          get: function get() {
            return this._capInsets[INSET_BOTTOM];
          },
          set: function set(value) {
            this._capInsets[INSET_BOTTOM] = value;
            this._texture && this._calculateSlicedUV();
          }
        },
        insetLeft: {
          get: function get() {
            return this._capInsets[INSET_LEFT];
          },
          set: function set(value) {
            this._capInsets[INSET_LEFT] = value;
            this._texture && this._calculateSlicedUV();
          }
        },
        insetRight: {
          get: function get() {
            return this._capInsets[INSET_RIGHT];
          },
          set: function set(value) {
            this._capInsets[INSET_RIGHT] = value;
            this._texture && this._calculateSlicedUV();
          }
        }
      },
      statics: {
        _parseDepsFromJson: function _parseDepsFromJson(json) {
          return [ cc.assetManager.utils.decodeUuid(json.content.texture) ];
        }
      },
      ctor: function ctor() {
        EventTarget.call(this);
        var filename = arguments[0];
        var rect = arguments[1];
        var rotated = arguments[2];
        var offset = arguments[3];
        var originalSize = arguments[4];
        this._rect = null;
        this.uv = [];
        this._texture = null;
        this._original = null;
        this._offset = null;
        this._originalSize = null;
        this._rotated = false;
        this._flipX = false;
        this._flipY = false;
        this.vertices = null;
        this._capInsets = [ 0, 0, 0, 0 ];
        this.uvSliced = [];
        false;
        void 0 !== filename && this.setTexture(filename, rect, rotated, offset, originalSize);
      },
      textureLoaded: function textureLoaded() {
        return this._texture && this._texture.loaded;
      },
      onTextureLoaded: function onTextureLoaded(callback, target) {
        if (!this.textureLoaded()) {
          this.once("load", callback, target);
          this.ensureLoadTexture();
          return false;
        }
        callback.call(target);
        return true;
      },
      isRotated: function isRotated() {
        return this._rotated;
      },
      setRotated: function setRotated(bRotated) {
        this._rotated = bRotated;
        this._texture && this._calculateUV();
      },
      isFlipX: function isFlipX() {
        return this._flipX;
      },
      isFlipY: function isFlipY() {
        return this._flipY;
      },
      setFlipX: function setFlipX(flipX) {
        this._flipX = flipX;
        this._texture && this._calculateUV();
      },
      setFlipY: function setFlipY(flipY) {
        this._flipY = flipY;
        this._texture && this._calculateUV();
      },
      getRect: function getRect() {
        return cc.rect(this._rect);
      },
      setRect: function setRect(rect) {
        this._rect = rect;
        this._texture && this._calculateUV();
      },
      getOriginalSize: function getOriginalSize() {
        return cc.size(this._originalSize);
      },
      setOriginalSize: function setOriginalSize(size) {
        if (this._originalSize) {
          this._originalSize.width = size.width;
          this._originalSize.height = size.height;
        } else this._originalSize = cc.size(size);
      },
      getTexture: function getTexture() {
        return this._texture;
      },
      _textureLoadedCallback: function _textureLoadedCallback() {
        var self = this;
        var texture = this._texture;
        if (!texture) return;
        var w = texture.width, h = texture.height;
        self._rect ? self._checkRect(self._texture) : self._rect = cc.rect(0, 0, w, h);
        self._originalSize || self.setOriginalSize(cc.size(w, h));
        self._offset || self.setOffset(cc.v2(0, 0));
        self._calculateUV();
        self.emit("load");
      },
      _refreshTexture: function _refreshTexture(texture) {
        this._texture = texture;
        texture.loaded ? this._textureLoadedCallback() : texture.once("load", this._textureLoadedCallback, this);
      },
      getOffset: function getOffset() {
        return cc.v2(this._offset);
      },
      setOffset: function setOffset(offsets) {
        this._offset = cc.v2(offsets);
      },
      clone: function clone() {
        return new SpriteFrame(this._texture, this._rect, this._rotated, this._offset, this._originalSize);
      },
      setTexture: function setTexture(texture, rect, rotated, offset, originalSize) {
        this._rect = rect || null;
        offset ? this.setOffset(offset) : this._offset = null;
        originalSize ? this.setOriginalSize(originalSize) : this._originalSize = null;
        this._rotated = rotated || false;
        if ("string" === typeof texture) {
          cc.errorID(3401);
          return;
        }
        texture instanceof cc.Texture2D && this._texture !== texture && this._refreshTexture(texture);
        return true;
      },
      ensureLoadTexture: function ensureLoadTexture() {
        if (this._texture && !this._texture.loaded) {
          this._refreshTexture(this._texture);
          cc.assetManager.postLoadNative(this._texture);
        }
      },
      _checkRect: function _checkRect(texture) {
        var rect = this._rect;
        var maxX = rect.x, maxY = rect.y;
        if (this._rotated) {
          maxX += rect.height;
          maxY += rect.width;
        } else {
          maxX += rect.width;
          maxY += rect.height;
        }
        maxX > texture.width && cc.errorID(3300, texture.nativeUrl + "/" + this.name, maxX, texture.width);
        maxY > texture.height && cc.errorID(3400, texture.nativeUrl + "/" + this.name, maxY, texture.height);
      },
      _flipXY: function _flipXY(uvs) {
        if (this._flipX) {
          var tempVal = uvs[0];
          uvs[0] = uvs[1];
          uvs[1] = tempVal;
          tempVal = uvs[2];
          uvs[2] = uvs[3];
          uvs[3] = tempVal;
        }
        if (this._flipY) {
          var _tempVal = uvs[0];
          uvs[0] = uvs[2];
          uvs[2] = _tempVal;
          _tempVal = uvs[1];
          uvs[1] = uvs[3];
          uvs[3] = _tempVal;
        }
      },
      _calculateSlicedUV: function _calculateSlicedUV() {
        var rect = this._rect;
        var atlasWidth = this._texture.width;
        var atlasHeight = this._texture.height;
        var leftWidth = this._capInsets[INSET_LEFT];
        var rightWidth = this._capInsets[INSET_RIGHT];
        var centerWidth = rect.width - leftWidth - rightWidth;
        var topHeight = this._capInsets[INSET_TOP];
        var bottomHeight = this._capInsets[INSET_BOTTOM];
        var centerHeight = rect.height - topHeight - bottomHeight;
        var uvSliced = this.uvSliced;
        uvSliced.length = 0;
        if (this._rotated) {
          temp_uvs[0].u = rect.x / atlasWidth;
          temp_uvs[1].u = (rect.x + bottomHeight) / atlasWidth;
          temp_uvs[2].u = (rect.x + bottomHeight + centerHeight) / atlasWidth;
          temp_uvs[3].u = (rect.x + rect.height) / atlasWidth;
          temp_uvs[3].v = rect.y / atlasHeight;
          temp_uvs[2].v = (rect.y + leftWidth) / atlasHeight;
          temp_uvs[1].v = (rect.y + leftWidth + centerWidth) / atlasHeight;
          temp_uvs[0].v = (rect.y + rect.width) / atlasHeight;
          this._flipXY(temp_uvs);
          for (var row = 0; row < 4; ++row) {
            var rowD = temp_uvs[row];
            for (var col = 0; col < 4; ++col) {
              var colD = temp_uvs[3 - col];
              uvSliced.push({
                u: rowD.u,
                v: colD.v
              });
            }
          }
        } else {
          temp_uvs[0].u = rect.x / atlasWidth;
          temp_uvs[1].u = (rect.x + leftWidth) / atlasWidth;
          temp_uvs[2].u = (rect.x + leftWidth + centerWidth) / atlasWidth;
          temp_uvs[3].u = (rect.x + rect.width) / atlasWidth;
          temp_uvs[3].v = rect.y / atlasHeight;
          temp_uvs[2].v = (rect.y + topHeight) / atlasHeight;
          temp_uvs[1].v = (rect.y + topHeight + centerHeight) / atlasHeight;
          temp_uvs[0].v = (rect.y + rect.height) / atlasHeight;
          this._flipXY(temp_uvs);
          for (var _row = 0; _row < 4; ++_row) {
            var _rowD = temp_uvs[_row];
            for (var _col = 0; _col < 4; ++_col) {
              var _colD = temp_uvs[_col];
              uvSliced.push({
                u: _colD.u,
                v: _rowD.v
              });
            }
          }
        }
      },
      _setDynamicAtlasFrame: function _setDynamicAtlasFrame(frame) {
        if (!frame) return;
        this._original = {
          _texture: this._texture,
          _x: this._rect.x,
          _y: this._rect.y
        };
        this._texture = frame.texture;
        this._rect.x = frame.x;
        this._rect.y = frame.y;
        this._calculateUV();
      },
      _resetDynamicAtlasFrame: function _resetDynamicAtlasFrame() {
        if (!this._original) return;
        this._rect.x = this._original._x;
        this._rect.y = this._original._y;
        this._texture = this._original._texture;
        this._original = null;
        this._calculateUV();
      },
      _calculateUV: function _calculateUV() {
        var rect = this._rect, texture = this._texture, uv = this.uv, texw = texture.width, texh = texture.height;
        if (this._rotated) {
          var l = 0 === texw ? 0 : rect.x / texw;
          var r = 0 === texw ? 0 : (rect.x + rect.height) / texw;
          var b = 0 === texh ? 0 : (rect.y + rect.width) / texh;
          var t = 0 === texh ? 0 : rect.y / texh;
          uv[0] = l;
          uv[1] = t;
          uv[2] = l;
          uv[3] = b;
          uv[4] = r;
          uv[5] = t;
          uv[6] = r;
          uv[7] = b;
        } else {
          var _l = 0 === texw ? 0 : rect.x / texw;
          var _r = 0 === texw ? 0 : (rect.x + rect.width) / texw;
          var _b = 0 === texh ? 0 : (rect.y + rect.height) / texh;
          var _t = 0 === texh ? 0 : rect.y / texh;
          uv[0] = _l;
          uv[1] = _b;
          uv[2] = _r;
          uv[3] = _b;
          uv[4] = _l;
          uv[5] = _t;
          uv[6] = _r;
          uv[7] = _t;
        }
        if (this._flipX) {
          var tempVal = uv[0];
          uv[0] = uv[2];
          uv[2] = tempVal;
          tempVal = uv[1];
          uv[1] = uv[3];
          uv[3] = tempVal;
          tempVal = uv[4];
          uv[4] = uv[6];
          uv[6] = tempVal;
          tempVal = uv[5];
          uv[5] = uv[7];
          uv[7] = tempVal;
        }
        if (this._flipY) {
          var _tempVal2 = uv[0];
          uv[0] = uv[4];
          uv[4] = _tempVal2;
          _tempVal2 = uv[1];
          uv[1] = uv[5];
          uv[5] = _tempVal2;
          _tempVal2 = uv[2];
          uv[2] = uv[6];
          uv[6] = _tempVal2;
          _tempVal2 = uv[3];
          uv[3] = uv[7];
          uv[7] = _tempVal2;
        }
        var vertices = this.vertices;
        if (vertices) {
          vertices.nu.length = 0;
          vertices.nv.length = 0;
          for (var i = 0; i < vertices.u.length; i++) {
            vertices.nu[i] = vertices.u[i] / texw;
            vertices.nv[i] = vertices.v[i] / texh;
          }
        }
        this._calculateSlicedUV();
      },
      _serialize: false,
      _deserialize: function _deserialize(data, handle) {
        var rect = data.rect;
        rect && (this._rect = new cc.Rect(rect[0], rect[1], rect[2], rect[3]));
        data.offset && this.setOffset(new cc.Vec2(data.offset[0], data.offset[1]));
        data.originalSize && this.setOriginalSize(new cc.Size(data.originalSize[0], data.originalSize[1]));
        this._rotated = 1 === data.rotated;
        this._name = data.name;
        var capInsets = data.capInsets;
        if (capInsets) {
          this._capInsets[INSET_LEFT] = capInsets[INSET_LEFT];
          this._capInsets[INSET_TOP] = capInsets[INSET_TOP];
          this._capInsets[INSET_RIGHT] = capInsets[INSET_RIGHT];
          this._capInsets[INSET_BOTTOM] = capInsets[INSET_BOTTOM];
        }
        false;
        this.vertices = data.vertices;
        if (this.vertices) {
          this.vertices.nu = [];
          this.vertices.nv = [];
        }
        var textureUuid = data.texture;
        textureUuid && handle.result.push(this, "_textureSetter", textureUuid);
      }
    });
    var proto = SpriteFrame.prototype;
    proto.copyWithZone = proto.clone;
    proto.copy = proto.clone;
    proto.initWithTexture = proto.setTexture;
    cc.SpriteFrame = SpriteFrame;
    module.exports = SpriteFrame;
  }), {
    "../assets/CCAsset": 49,
    "../event/event-target": 105,
    "../utils/texture-util": 218
  } ],
  62: [ (function(require, module, exports) {
    "use strict";
    var Font = require("./CCFont");
    var TTFFont = cc.Class({
      name: "cc.TTFFont",
      extends: Font,
      properties: {
        _fontFamily: null,
        _nativeAsset: {
          type: cc.String,
          get: function get() {
            return this._fontFamily;
          },
          set: function set(value) {
            this._fontFamily = value || "Arial";
          },
          override: true
        },
        _nativeDep: {
          get: function get() {
            return {
              uuid: this._uuid,
              __nativeName__: this._native,
              ext: cc.path.extname(this._native),
              __isNative__: true
            };
          },
          override: true
        }
      },
      statics: {
        _parseDepsFromJson: function _parseDepsFromJson() {
          return [];
        },
        _parseNativeDepFromJson: function _parseNativeDepFromJson(json) {
          return {
            __nativeName__: json._native,
            ext: cc.path.extname(json._native),
            __isNative__: true
          };
        }
      }
    });
    cc.TTFFont = module.exports = TTFFont;
  }), {
    "./CCFont": 53
  } ],
  63: [ (function(require, module, exports) {
    "use strict";
    var TextAsset = cc.Class({
      name: "cc.TextAsset",
      extends: cc.Asset,
      properties: {
        text: ""
      },
      toString: function toString() {
        return this.text;
      }
    });
    module.exports = cc.TextAsset = TextAsset;
  }), {} ],
  64: [ (function(require, module, exports) {
    "use strict";
    var _gfx = _interopRequireDefault(require("../../renderer/gfx"));
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }
    var EventTarget = require("../event/event-target");
    var renderer = require("../renderer");
    require("../platform/CCClass");
    var GL_NEAREST = 9728;
    var GL_LINEAR = 9729;
    var GL_REPEAT = 10497;
    var GL_CLAMP_TO_EDGE = 33071;
    var GL_MIRRORED_REPEAT = 33648;
    var GL_RGBA = 6408;
    var CHAR_CODE_0 = 48;
    var CHAR_CODE_1 = 49;
    var idGenerater = new (require("../platform/id-generater"))("Tex");
    var CUSTOM_PIXEL_FORMAT = 1024;
    var PixelFormat = cc.Enum({
      RGB565: _gfx["default"].TEXTURE_FMT_R5_G6_B5,
      RGB5A1: _gfx["default"].TEXTURE_FMT_R5_G5_B5_A1,
      RGBA4444: _gfx["default"].TEXTURE_FMT_R4_G4_B4_A4,
      RGB888: _gfx["default"].TEXTURE_FMT_RGB8,
      RGBA8888: _gfx["default"].TEXTURE_FMT_RGBA8,
      RGBA32F: _gfx["default"].TEXTURE_FMT_RGBA32F,
      A8: _gfx["default"].TEXTURE_FMT_A8,
      I8: _gfx["default"].TEXTURE_FMT_L8,
      AI8: _gfx["default"].TEXTURE_FMT_L8_A8,
      RGB_PVRTC_2BPPV1: _gfx["default"].TEXTURE_FMT_RGB_PVRTC_2BPPV1,
      RGBA_PVRTC_2BPPV1: _gfx["default"].TEXTURE_FMT_RGBA_PVRTC_2BPPV1,
      RGB_A_PVRTC_2BPPV1: CUSTOM_PIXEL_FORMAT++,
      RGB_PVRTC_4BPPV1: _gfx["default"].TEXTURE_FMT_RGB_PVRTC_4BPPV1,
      RGBA_PVRTC_4BPPV1: _gfx["default"].TEXTURE_FMT_RGBA_PVRTC_4BPPV1,
      RGB_A_PVRTC_4BPPV1: CUSTOM_PIXEL_FORMAT++,
      RGB_ETC1: _gfx["default"].TEXTURE_FMT_RGB_ETC1,
      RGBA_ETC1: CUSTOM_PIXEL_FORMAT++,
      RGB_ETC2: _gfx["default"].TEXTURE_FMT_RGB_ETC2,
      RGBA_ETC2: _gfx["default"].TEXTURE_FMT_RGBA_ETC2
    });
    var WrapMode = cc.Enum({
      REPEAT: GL_REPEAT,
      CLAMP_TO_EDGE: GL_CLAMP_TO_EDGE,
      MIRRORED_REPEAT: GL_MIRRORED_REPEAT
    });
    var Filter = cc.Enum({
      LINEAR: GL_LINEAR,
      NEAREST: GL_NEAREST
    });
    var FilterIndex = {
      9728: 0,
      9729: 1
    };
    var _images = [];
    var _sharedOpts = {
      width: void 0,
      height: void 0,
      minFilter: void 0,
      magFilter: void 0,
      wrapS: void 0,
      wrapT: void 0,
      format: void 0,
      genMipmaps: void 0,
      images: void 0,
      image: void 0,
      flipY: void 0,
      premultiplyAlpha: void 0
    };
    function _getSharedOptions() {
      for (var key in _sharedOpts) _sharedOpts[key] = void 0;
      _images.length = 0;
      _sharedOpts.images = _images;
      return _sharedOpts;
    }
    var Texture2D = cc.Class({
      name: "cc.Texture2D",
      extends: require("../assets/CCAsset"),
      mixins: [ EventTarget ],
      properties: {
        _nativeAsset: {
          get: function get() {
            return this._image;
          },
          set: function set(data) {
            data._compressed && data._data ? this.initWithData(data._data, this._format, data.width, data.height) : this.initWithElement(data);
          },
          override: true
        },
        _format: PixelFormat.RGBA8888,
        _premultiplyAlpha: false,
        _flipY: false,
        _minFilter: Filter.LINEAR,
        _magFilter: Filter.LINEAR,
        _mipFilter: Filter.LINEAR,
        _wrapS: WrapMode.CLAMP_TO_EDGE,
        _wrapT: WrapMode.CLAMP_TO_EDGE,
        _isAlphaAtlas: false,
        _genMipmaps: false,
        genMipmaps: {
          get: function get() {
            return this._genMipmaps;
          },
          set: function set(genMipmaps) {
            if (this._genMipmaps !== genMipmaps) {
              var opts = _getSharedOptions();
              opts.genMipmaps = genMipmaps;
              this.update(opts);
            }
          }
        },
        _packable: true,
        packable: {
          get: function get() {
            return this._packable;
          },
          set: function set(val) {
            this._packable = val;
          }
        },
        _nativeDep: {
          get: function get() {
            return {
              __isNative__: true,
              uuid: this._uuid,
              ext: this._native,
              __flipY__: this._flipY,
              __premultiplyAlpha__: this._premultiplyAlpha
            };
          },
          override: true
        }
      },
      statics: {
        PixelFormat: PixelFormat,
        WrapMode: WrapMode,
        Filter: Filter,
        _FilterIndex: FilterIndex,
        extnames: [ ".png", ".jpg", ".jpeg", ".bmp", ".webp", ".pvr", ".pkm" ],
        _parseNativeDepFromJson: function _parseNativeDepFromJson(json) {
          var data = json.content;
          var fields = data.split(",");
          var extIdStr = fields[0];
          var ext = "";
          if (extIdStr) {
            var result = Texture2D._parseExt(extIdStr, PixelFormat.RGBA8888);
            ext = result.bestExt || result.defaultExt;
          }
          return {
            __isNative__: true,
            ext: ext,
            __flipY__: false,
            __premultiplyAlpha__: fields[5] && fields[5].charCodeAt(0) === CHAR_CODE_1
          };
        },
        _parseExt: function _parseExt(extIdStr, defaultFormat) {
          var device = cc.renderer.device;
          var extIds = extIdStr.split("_");
          var defaultExt = "";
          var bestExt = "";
          var bestIndex = 999;
          var bestFormat = defaultFormat;
          var SupportTextureFormats = cc.macro.SUPPORT_TEXTURE_FORMATS;
          for (var i = 0; i < extIds.length; i++) {
            var extFormat = extIds[i].split("@");
            var tmpExt = extFormat[0];
            tmpExt = Texture2D.extnames[tmpExt.charCodeAt(0) - CHAR_CODE_0] || tmpExt;
            var index = SupportTextureFormats.indexOf(tmpExt);
            if (-1 !== index && index < bestIndex) {
              var tmpFormat = extFormat[1] ? parseInt(extFormat[1]) : defaultFormat;
              if (".pvr" === tmpExt && !device.ext("WEBGL_compressed_texture_pvrtc")) continue;
              if (!(tmpFormat !== PixelFormat.RGB_ETC1 && tmpFormat !== PixelFormat.RGBA_ETC1 || device.ext("WEBGL_compressed_texture_etc1"))) continue;
              if (!(tmpFormat !== PixelFormat.RGB_ETC2 && tmpFormat !== PixelFormat.RGBA_ETC2 || device.ext("WEBGL_compressed_texture_etc"))) continue;
              if (".webp" === tmpExt && !cc.sys.capabilities.webp) continue;
              bestIndex = index;
              bestExt = tmpExt;
              bestFormat = tmpFormat;
            } else defaultExt || (defaultExt = tmpExt);
          }
          return {
            bestExt: bestExt,
            bestFormat: bestFormat,
            defaultExt: defaultExt
          };
        },
        _parseDepsFromJson: function _parseDepsFromJson() {
          return [];
        }
      },
      ctor: function ctor() {
        this._id = idGenerater.getNewId();
        this.loaded = false;
        this.width = 0;
        this.height = 0;
        this._hashDirty = true;
        this._hash = 0;
        this._texture = null;
        false;
      },
      getImpl: function getImpl() {
        return this._texture;
      },
      getId: function getId() {
        return this._id;
      },
      toString: function toString() {
        return this.nativeUrl || "";
      },
      update: function update(options) {
        if (options) {
          var updateImg = false;
          void 0 !== options.width && (this.width = options.width);
          void 0 !== options.height && (this.height = options.height);
          if (void 0 !== options.minFilter) {
            this._minFilter = options.minFilter;
            options.minFilter = FilterIndex[options.minFilter];
          }
          if (void 0 !== options.magFilter) {
            this._magFilter = options.magFilter;
            options.magFilter = FilterIndex[options.magFilter];
          }
          if (void 0 !== options.mipFilter) {
            this._mipFilter = options.mipFilter;
            options.mipFilter = FilterIndex[options.mipFilter];
          }
          void 0 !== options.wrapS && (this._wrapS = options.wrapS);
          void 0 !== options.wrapT && (this._wrapT = options.wrapT);
          void 0 !== options.format && (this._format = options.format);
          if (void 0 !== options.flipY) {
            this._flipY = options.flipY;
            updateImg = true;
          }
          if (void 0 !== options.premultiplyAlpha) {
            this._premultiplyAlpha = options.premultiplyAlpha;
            updateImg = true;
          }
          void 0 !== options.genMipmaps && (this._genMipmaps = options.genMipmaps);
          cc.sys.capabilities.imageBitmap && this._image instanceof ImageBitmap ? this._checkImageBitmap(this._upload.bind(this, options, updateImg)) : this._upload(options, updateImg);
        }
      },
      _upload: function _upload(options, updateImg) {
        updateImg && this._image && (options.image = this._image);
        if (options.images && options.images.length > 0) this._image = options.images[0]; else if (void 0 !== options.image) {
          this._image = options.image;
          if (!options.images) {
            _images.length = 0;
            options.images = _images;
          }
          options.images.push(options.image);
        }
        this._texture && this._texture.update(options);
        this._hashDirty = true;
      },
      initWithElement: function initWithElement(element) {
        if (!element) return;
        this._image = element;
        if (element.complete || element instanceof HTMLCanvasElement) this.handleLoadedTexture(); else if (cc.sys.capabilities.imageBitmap && element instanceof ImageBitmap) this._checkImageBitmap(this.handleLoadedTexture.bind(this)); else {
          var self = this;
          element.addEventListener("load", (function() {
            self.handleLoadedTexture();
          }));
          element.addEventListener("error", (function(err) {
            cc.warnID(3119, err.message);
          }));
        }
      },
      initWithData: function initWithData(data, pixelFormat, pixelsWidth, pixelsHeight) {
        var opts = _getSharedOptions();
        opts.image = data;
        opts.images = [ opts.image ];
        opts.genMipmaps = this._genMipmaps;
        opts.premultiplyAlpha = this._premultiplyAlpha;
        opts.flipY = this._flipY;
        opts.minFilter = FilterIndex[this._minFilter];
        opts.magFilter = FilterIndex[this._magFilter];
        opts.wrapS = this._wrapS;
        opts.wrapT = this._wrapT;
        opts.format = this._getGFXPixelFormat(pixelFormat);
        opts.width = pixelsWidth;
        opts.height = pixelsHeight;
        this._texture ? this._texture.update(opts) : this._texture = new renderer.Texture2D(renderer.device, opts);
        this.width = pixelsWidth;
        this.height = pixelsHeight;
        this._updateFormat();
        this._checkPackable();
        this.loaded = true;
        this.emit("load");
        return true;
      },
      getHtmlElementObj: function getHtmlElementObj() {
        return this._image;
      },
      destroy: function destroy() {
        cc.sys.capabilities.imageBitmap && this._image instanceof ImageBitmap && this._image.close && this._image.close();
        this._packable && cc.dynamicAtlasManager && cc.dynamicAtlasManager.deleteAtlasTexture(this);
        this._image = null;
        this._texture && this._texture.destroy();
        this._super();
      },
      getPixelFormat: function getPixelFormat() {
        return this._format;
      },
      hasPremultipliedAlpha: function hasPremultipliedAlpha() {
        return this._premultiplyAlpha || false;
      },
      isAlphaAtlas: function isAlphaAtlas() {
        return this._isAlphaAtlas;
      },
      handleLoadedTexture: function handleLoadedTexture() {
        if (!this._image || !this._image.width || !this._image.height) return;
        this.width = this._image.width;
        this.height = this._image.height;
        var opts = _getSharedOptions();
        opts.image = this._image;
        opts.images = [ opts.image ];
        opts.width = this.width;
        opts.height = this.height;
        opts.genMipmaps = this._genMipmaps;
        opts.format = this._getGFXPixelFormat(this._format);
        opts.premultiplyAlpha = this._premultiplyAlpha;
        opts.flipY = this._flipY;
        opts.minFilter = FilterIndex[this._minFilter];
        opts.magFilter = FilterIndex[this._magFilter];
        opts.wrapS = this._wrapS;
        opts.wrapT = this._wrapT;
        this._texture ? this._texture.update(opts) : this._texture = new renderer.Texture2D(renderer.device, opts);
        this._updateFormat();
        this._checkPackable();
        this.loaded = true;
        this.emit("load");
        cc.macro.CLEANUP_IMAGE_CACHE && (this._image instanceof HTMLImageElement ? this._clearImage() : cc.sys.capabilities.imageBitmap && this._image instanceof ImageBitmap && this._image.close && this._image.close());
      },
      description: function description() {
        return "<cc.Texture2D | Name = " + this.nativeUrl + " | Dimensions = " + this.width + " x " + this.height + ">";
      },
      releaseTexture: function releaseTexture() {
        this._image = null;
        this._texture && this._texture.destroy();
      },
      setWrapMode: function setWrapMode(wrapS, wrapT) {
        if (this._wrapS !== wrapS || this._wrapT !== wrapT) {
          var opts = _getSharedOptions();
          opts.wrapS = wrapS;
          opts.wrapT = wrapT;
          this.update(opts);
        }
      },
      setFilters: function setFilters(minFilter, magFilter) {
        if (this._minFilter !== minFilter || this._magFilter !== magFilter) {
          var opts = _getSharedOptions();
          opts.minFilter = minFilter;
          opts.magFilter = magFilter;
          this.update(opts);
        }
      },
      setFlipY: function setFlipY(flipY) {
        if (this._flipY !== flipY) {
          var opts = _getSharedOptions();
          opts.flipY = flipY;
          opts.premultiplyAlpha = this._premultiplyAlpha;
          this.update(opts);
        }
      },
      setPremultiplyAlpha: function setPremultiplyAlpha(premultiply) {
        if (this._premultiplyAlpha !== premultiply) {
          var opts = _getSharedOptions();
          opts.flipY = this._flipY;
          opts.premultiplyAlpha = premultiply;
          this.update(opts);
        }
      },
      _updateFormat: function _updateFormat() {
        this._isAlphaAtlas = this._format === PixelFormat.RGBA_ETC1 || this._format === PixelFormat.RGB_A_PVRTC_4BPPV1 || this._format === PixelFormat.RGB_A_PVRTC_2BPPV1;
        false;
      },
      _checkPackable: function _checkPackable() {
        var dynamicAtlas = cc.dynamicAtlasManager;
        if (!dynamicAtlas) return;
        if (this._isCompressed()) {
          this._packable = false;
          return;
        }
        var w = this.width, h = this.height;
        if (!this._image || w > dynamicAtlas.maxFrameSize || h > dynamicAtlas.maxFrameSize || this._getHash() !== dynamicAtlas.Atlas.DEFAULT_HASH) {
          this._packable = false;
          return;
        }
        this._image && this._image instanceof HTMLCanvasElement && (this._packable = true);
      },
      _getOpts: function _getOpts() {
        var opts = _getSharedOptions();
        opts.width = this.width;
        opts.height = this.height;
        opts.genMipmaps = this._genMipmaps;
        opts.format = this._format;
        opts.premultiplyAlpha = this._premultiplyAlpha;
        opts.anisotropy = this._anisotropy;
        opts.flipY = this._flipY;
        opts.minFilter = FilterIndex[this._minFilter];
        opts.magFilter = FilterIndex[this._magFilter];
        opts.mipFilter = FilterIndex[this._mipFilter];
        opts.wrapS = this._wrapS;
        opts.wrapT = this._wrapT;
        return opts;
      },
      _getGFXPixelFormat: function _getGFXPixelFormat(format) {
        format === PixelFormat.RGBA_ETC1 ? format = PixelFormat.RGB_ETC1 : format === PixelFormat.RGB_A_PVRTC_4BPPV1 ? format = PixelFormat.RGB_PVRTC_4BPPV1 : format === PixelFormat.RGB_A_PVRTC_2BPPV1 && (format = PixelFormat.RGB_PVRTC_2BPPV1);
        return format;
      },
      _resetUnderlyingMipmaps: function _resetUnderlyingMipmaps(mipmapSources) {
        var opts = this._getOpts();
        opts.images = mipmapSources || [ null ];
        this._texture ? this._texture.update(opts) : this._texture = new renderer.Texture2D(renderer.device, opts);
      },
      _serialize: (false, false) && function() {
        var extId = "";
        var exportedExts = this._exportedExts;
        !exportedExts && this._native && (exportedExts = [ this._native ]);
        if (exportedExts) {
          var exts = [];
          for (var i = 0; i < exportedExts.length; i++) {
            var _extId = "";
            var ext = exportedExts[i];
            if (ext) {
              var extFormat = ext.split("@");
              _extId = Texture2D.extnames.indexOf(extFormat[0]);
              _extId < 0 && (_extId = ext);
              extFormat[1] && (_extId += "@" + extFormat[1]);
            }
            exts.push(_extId);
          }
          extId = exts.join("_");
        }
        var asset = extId + "," + this._minFilter + "," + this._magFilter + "," + this._wrapS + "," + this._wrapT + "," + (this._premultiplyAlpha ? 1 : 0) + "," + (this._genMipmaps ? 1 : 0) + "," + (this._packable ? 1 : 0);
        return asset;
      },
      _deserialize: function _deserialize(data, handle) {
        var fields = data.split(",");
        var extIdStr = fields[0];
        if (extIdStr) {
          var result = Texture2D._parseExt(extIdStr, this._format);
          if (result.bestExt) {
            this._setRawAsset(result.bestExt);
            this._format = result.bestFormat;
          } else {
            this._setRawAsset(result.defaultExt);
            cc.warnID(3120, handle.customEnv.url, result.defaultExt, result.defaultExt);
          }
        }
        if (8 === fields.length) {
          this._minFilter = parseInt(fields[1]);
          this._magFilter = parseInt(fields[2]);
          this._wrapS = parseInt(fields[3]);
          this._wrapT = parseInt(fields[4]);
          this._premultiplyAlpha = fields[5].charCodeAt(0) === CHAR_CODE_1;
          this._genMipmaps = fields[6].charCodeAt(0) === CHAR_CODE_1;
          this._packable = fields[7].charCodeAt(0) === CHAR_CODE_1;
        }
      },
      _getHash: function _getHash() {
        if (!this._hashDirty) return this._hash;
        var genMipmaps = this._genMipmaps ? 1 : 0;
        var premultiplyAlpha = this._premultiplyAlpha ? 1 : 0;
        var flipY = this._flipY ? 1 : 0;
        var minFilter = this._minFilter === Filter.LINEAR ? 1 : 2;
        var magFilter = this._magFilter === Filter.LINEAR ? 1 : 2;
        var wrapS = this._wrapS === WrapMode.REPEAT ? 1 : this._wrapS === WrapMode.CLAMP_TO_EDGE ? 2 : 3;
        var wrapT = this._wrapT === WrapMode.REPEAT ? 1 : this._wrapT === WrapMode.CLAMP_TO_EDGE ? 2 : 3;
        var pixelFormat = this._format;
        var image = this._image;
        false;
        this._hash = Number("" + minFilter + magFilter + pixelFormat + wrapS + wrapT + genMipmaps + premultiplyAlpha + flipY);
        this._hashDirty = false;
        return this._hash;
      },
      _isCompressed: function _isCompressed() {
        return this._format < PixelFormat.A8 || this._format > PixelFormat.RGBA32F;
      },
      _clearImage: function _clearImage() {
        this._image.src = "";
      },
      _checkImageBitmap: function _checkImageBitmap(cb) {
        var _this = this;
        var image = this._image;
        var flipY = this._flipY;
        var premultiplyAlpha = this._premultiplyAlpha;
        this._flipY !== image.flipY || this._premultiplyAlpha !== image.premultiplyAlpha ? createImageBitmap(image, {
          imageOrientation: flipY !== image.flipY ? "flipY" : "none",
          premultiplyAlpha: premultiplyAlpha ? "premultiply" : "none"
        }).then((function(result) {
          image.close && image.close();
          result.flipY = flipY;
          result.premultiplyAlpha = premultiplyAlpha;
          _this._image = result;
          cb();
        }), (function(err) {
          cc.error(err.message);
        })) : cb();
      }
    });
    cc.Texture2D = module.exports = Texture2D;
  }), {
    "../../renderer/gfx": 252,
    "../assets/CCAsset": 49,
    "../event/event-target": 105,
    "../platform/CCClass": 141,
    "../platform/id-generater": 157,
    "../renderer": 171
  } ],
  65: [ (function(require, module, exports) {
    "use strict";
    require("./CCAsset");
    require("./CCFont");
    require("./CCPrefab");
    require("./CCAudioClip");
    require("./CCScripts");
    require("./CCSceneAsset");
    require("./CCSpriteFrame");
    require("./CCTexture2D");
    require("./CCRenderTexture");
    require("./CCTTFFont");
    require("./CCSpriteAtlas");
    require("./CCBitmapFont");
    require("./CCLabelAtlas");
    require("./CCTextAsset");
    require("./CCJsonAsset");
    require("./CCBufferAsset");
    require("./material");
  }), {
    "./CCAsset": 49,
    "./CCAudioClip": 50,
    "./CCBitmapFont": 51,
    "./CCBufferAsset": 52,
    "./CCFont": 53,
    "./CCJsonAsset": 54,
    "./CCLabelAtlas": 55,
    "./CCPrefab": 56,
    "./CCRenderTexture": 57,
    "./CCSceneAsset": 58,
    "./CCScripts": 59,
    "./CCSpriteAtlas": 60,
    "./CCSpriteFrame": 61,
    "./CCTTFFont": 62,
    "./CCTextAsset": 63,
    "./CCTexture2D": 64,
    "./material": 72
  } ],
  66: [ (function(require, module, exports) {
    "use strict";
    var _CCAsset = _interopRequireDefault(require("../CCAsset"));
    var _effectParser = require("./effect-parser");
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }
    var EffectAsset = cc.Class({
      name: "cc.EffectAsset",
      extends: _CCAsset["default"],
      ctor: function ctor() {
        this._effect = null;
      },
      properties: {
        properties: Object,
        techniques: [],
        shaders: []
      },
      onLoad: function onLoad() {
        if (cc.game.renderType === cc.game.RENDER_TYPE_CANVAS) return;
        var lib = cc.renderer._forward._programLib;
        for (var i = 0; i < this.shaders.length; i++) lib.define(this.shaders[i]);
        this._initEffect();
      },
      _initEffect: function _initEffect() {
        if (this._effect) return;
        this._effect = (0, _effectParser.parseEffect)(this);
        Object.freeze(this._effect);
      },
      getInstantiatedEffect: function getInstantiatedEffect() {
        this._initEffect();
        return this._effect.clone();
      },
      getEffect: function getEffect() {
        this._initEffect();
        return this._effect;
      }
    });
    module.exports = cc.EffectAsset = EffectAsset;
  }), {
    "../CCAsset": 49,
    "./effect-parser": 69
  } ],
  67: [ (function(require, module, exports) {
    "use strict";
    exports.__esModule = true;
    exports["default"] = void 0;
    var Asset = require("../CCAsset");
    var Texture = require("../CCTexture2D");
    var PixelFormat = Texture.PixelFormat;
    var EffectAsset = require("./CCEffectAsset");
    var textureUtil = require("../../utils/texture-util");
    var gfx = cc.gfx;
    var BUILTIN_NAME = cc.Enum({
      SPRITE: "2d-sprite",
      GRAY_SPRITE: "2d-gray-sprite",
      UNLIT: "unlit"
    });
    var Material = cc.Class({
      name: "cc.Material",
      extends: Asset,
      ctor: function ctor() {
        this.loaded = false;
        this._manualHash = false;
        this._dirty = true;
        this._effect = null;
      },
      properties: {
        _defines: {
          default: void 0,
          type: Object
        },
        _props: {
          default: void 0,
          type: Object
        },
        _effectAsset: {
          type: EffectAsset,
          default: null
        },
        _techniqueIndex: 0,
        _techniqueData: Object,
        effectName: void 0,
        effectAsset: {
          get: function get() {
            return this._effectAsset;
          },
          set: function set(asset) {
            if (cc.game.renderType === cc.game.RENDER_TYPE_CANVAS) return;
            this._effectAsset = asset;
            if (!asset) {
              cc.error("Can not set an empty effect asset.");
              return;
            }
            this._effect = this._effectAsset.getInstantiatedEffect();
          }
        },
        effect: {
          get: function get() {
            return this._effect;
          }
        },
        techniqueIndex: {
          get: function get() {
            return this._techniqueIndex;
          },
          set: function set(v) {
            this._techniqueIndex = v;
            this._effect.switchTechnique(v);
          }
        }
      },
      statics: {
        getBuiltinMaterial: function getBuiltinMaterial(name) {
          if (cc.game.renderType === cc.game.RENDER_TYPE_CANVAS) return new cc.Material();
          return cc.assetManager.builtins.getBuiltin("material", "builtin-" + name);
        },
        BUILTIN_NAME: BUILTIN_NAME,
        createWithBuiltin: function createWithBuiltin(effectName, techniqueIndex) {
          void 0 === techniqueIndex && (techniqueIndex = 0);
          var effectAsset = cc.assetManager.builtins.getBuiltin("effect", "builtin-" + effectName);
          return Material.create(effectAsset, techniqueIndex);
        },
        create: function create(effectAsset, techniqueIndex) {
          void 0 === techniqueIndex && (techniqueIndex = 0);
          if (!effectAsset) return null;
          var material = new Material();
          material.effectAsset = effectAsset;
          material.techniqueIndex = techniqueIndex;
          return material;
        }
      },
      setProperty: function setProperty(name, val, passIdx, directly) {
        if (cc.game.renderType === cc.game.RENDER_TYPE_CANVAS) return;
        "string" === typeof passIdx && (passIdx = parseInt(passIdx));
        if (val instanceof Texture) {
          var loaded = function loaded() {
            this._effect.setProperty(name, val, passIdx);
          };
          var isAlphaAtlas = val.isAlphaAtlas();
          var key = "CC_USE_ALPHA_ATLAS_" + name;
          var def = this.getDefine(key, passIdx);
          (isAlphaAtlas || def) && this.define(key, isAlphaAtlas);
          if (!val.loaded) {
            val.once("load", loaded, this);
            cc.assetManager.postLoadNative(val);
            return;
          }
        }
        this._effect.setProperty(name, val, passIdx, directly);
      },
      getProperty: function getProperty(name, passIdx) {
        "string" === typeof passIdx && (passIdx = parseInt(passIdx));
        return this._effect.getProperty(name, passIdx);
      },
      define: function define(name, val, passIdx, force) {
        if (cc.game.renderType === cc.game.RENDER_TYPE_CANVAS) return;
        "string" === typeof passIdx && (passIdx = parseInt(passIdx));
        this._effect.define(name, val, passIdx, force);
      },
      getDefine: function getDefine(name, passIdx) {
        "string" === typeof passIdx && (passIdx = parseInt(passIdx));
        return this._effect.getDefine(name, passIdx);
      },
      setCullMode: function setCullMode(cullMode, passIdx) {
        void 0 === cullMode && (cullMode = gfx.CULL_BACK);
        this._effect.setCullMode(cullMode, passIdx);
      },
      setDepth: function setDepth(depthTest, depthWrite, depthFunc, passIdx) {
        void 0 === depthTest && (depthTest = false);
        void 0 === depthWrite && (depthWrite = false);
        void 0 === depthFunc && (depthFunc = gfx.DS_FUNC_LESS);
        this._effect.setDepth(depthTest, depthWrite, depthFunc, passIdx);
      },
      setBlend: function setBlend(enabled, blendEq, blendSrc, blendDst, blendAlphaEq, blendSrcAlpha, blendDstAlpha, blendColor, passIdx) {
        void 0 === enabled && (enabled = false);
        void 0 === blendEq && (blendEq = gfx.BLEND_FUNC_ADD);
        void 0 === blendSrc && (blendSrc = gfx.BLEND_SRC_ALPHA);
        void 0 === blendDst && (blendDst = gfx.BLEND_ONE_MINUS_SRC_ALPHA);
        void 0 === blendAlphaEq && (blendAlphaEq = gfx.BLEND_FUNC_ADD);
        void 0 === blendSrcAlpha && (blendSrcAlpha = gfx.BLEND_SRC_ALPHA);
        void 0 === blendDstAlpha && (blendDstAlpha = gfx.BLEND_ONE_MINUS_SRC_ALPHA);
        void 0 === blendColor && (blendColor = 4294967295);
        this._effect.setBlend(enabled, blendEq, blendSrc, blendDst, blendAlphaEq, blendSrcAlpha, blendDstAlpha, blendColor, passIdx);
      },
      setStencilEnabled: function setStencilEnabled(stencilTest, passIdx) {
        void 0 === stencilTest && (stencilTest = gfx.STENCIL_INHERIT);
        this._effect.setStencilEnabled(stencilTest, passIdx);
      },
      setStencil: function setStencil(stencilTest, stencilFunc, stencilRef, stencilMask, stencilFailOp, stencilZFailOp, stencilZPassOp, stencilWriteMask, passIdx) {
        void 0 === stencilTest && (stencilTest = gfx.STENCIL_INHERIT);
        void 0 === stencilFunc && (stencilFunc = gfx.DS_FUNC_ALWAYS);
        void 0 === stencilRef && (stencilRef = 0);
        void 0 === stencilMask && (stencilMask = 255);
        void 0 === stencilFailOp && (stencilFailOp = gfx.STENCIL_OP_KEEP);
        void 0 === stencilZFailOp && (stencilZFailOp = gfx.STENCIL_OP_KEEP);
        void 0 === stencilZPassOp && (stencilZPassOp = gfx.STENCIL_OP_KEEP);
        void 0 === stencilWriteMask && (stencilWriteMask = 255);
        this._effect.setStencil(stencilTest, stencilFunc, stencilRef, stencilMask, stencilFailOp, stencilZFailOp, stencilZPassOp, stencilWriteMask, passIdx);
      },
      updateHash: function updateHash(hash) {
        this._manualHash = hash;
        this._effect && this._effect.updateHash(hash);
      },
      getHash: function getHash() {
        return this._manualHash || this._effect && this._effect.getHash();
      },
      onLoad: function onLoad() {
        this.effectAsset = this._effectAsset;
        if (!this._effect) return;
        this._techniqueIndex && this._effect.switchTechnique(this._techniqueIndex);
        this._techniqueData = this._techniqueData || {};
        var passDatas = this._techniqueData;
        for (var index in passDatas) {
          index = parseInt(index);
          var passData = passDatas[index];
          if (!passData) continue;
          for (var def in passData.defines) this.define(def, passData.defines[def], index);
          for (var prop in passData.props) this.setProperty(prop, passData.props[prop], index);
        }
      }
    });
    var _default = Material;
    exports["default"] = _default;
    cc.Material = Material;
    module.exports = exports["default"];
  }), {
    "../../utils/texture-util": 218,
    "../CCAsset": 49,
    "../CCTexture2D": 64,
    "./CCEffectAsset": 66
  } ],
  68: [ (function(require, module, exports) {
    "use strict";
    exports.__esModule = true;
    exports["default"] = void 0;
    var _pass = _interopRequireDefault(require("../../../renderer/core/pass"));
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        "value" in descriptor && (descriptor.writable = true);
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      protoProps && _defineProperties(Constructor.prototype, protoProps);
      staticProps && _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    var gfx = cc.gfx;
    var EffectBase = (function() {
      function EffectBase() {
        this._dirty = true;
        this._name = "";
        this._technique = null;
      }
      var _proto = EffectBase.prototype;
      _proto._createPassProp = function _createPassProp(name, pass) {
        var prop = pass._properties[name];
        if (!prop) return;
        var uniform = Object.create(null);
        uniform.name = name;
        uniform.type = prop.type;
        prop.value instanceof Float32Array ? uniform.value = new Float32Array(prop.value) : uniform.value = prop.value;
        pass._properties[name] = uniform;
        return uniform;
      };
      _proto._setPassProperty = function _setPassProperty(name, value, pass, directly) {
        var properties = pass._properties;
        var uniform = properties.hasOwnProperty(name);
        if (uniform) {
          if (uniform.value === value) return;
        } else uniform = this._createPassProp(name, pass);
        this._dirty = true;
        return _pass["default"].prototype.setProperty.call(pass, name, value, directly);
      };
      _proto.setProperty = function setProperty(name, value, passIdx, directly) {
        var success = false;
        var passes = this.passes;
        var start = 0, end = passes.length;
        void 0 !== passIdx && (start = passIdx, end = passIdx + 1);
        for (var i = start; i < end; i++) this._setPassProperty(name, value, passes[i], directly) && (success = true);
        success || cc.warnID(9103, this.name, name);
      };
      _proto.getProperty = function getProperty(name, passIdx) {
        var passes = this.passes;
        if (passIdx >= passes.length) return;
        var start = 0, end = passes.length;
        void 0 !== passIdx && (start = passIdx, end = passIdx + 1);
        for (var i = start; i < end; i++) {
          var value = passes[i].getProperty(name);
          if (void 0 !== value) return value;
        }
      };
      _proto.define = function define(name, value, passIdx, force) {
        var success = false;
        var passes = this.passes;
        var start = 0, end = passes.length;
        void 0 !== passIdx && (start = passIdx, end = passIdx + 1);
        for (var i = start; i < end; i++) passes[i].define(name, value, force) && (success = true);
        success || cc.warnID(9104, this.name, name);
      };
      _proto.getDefine = function getDefine(name, passIdx) {
        var passes = this.passes;
        if (passIdx >= passes.length) return;
        var start = 0, end = passes.length;
        void 0 !== passIdx && (start = passIdx, end = passIdx + 1);
        for (var i = start; i < end; i++) {
          var value = passes[i].getDefine(name);
          if (void 0 !== value) return value;
        }
      };
      _proto.setCullMode = function setCullMode(cullMode, passIdx) {
        void 0 === cullMode && (cullMode = gfx.CULL_BACK);
        var passes = this.passes;
        var start = 0, end = passes.length;
        void 0 !== passIdx && (start = passIdx, end = passIdx + 1);
        for (var i = start; i < end; i++) passes[i].setCullMode(cullMode);
        this._dirty = true;
      };
      _proto.setDepth = function setDepth(depthTest, depthWrite, depthFunc, passIdx) {
        var passes = this.passes;
        var start = 0, end = passes.length;
        void 0 !== passIdx && (start = passIdx, end = passIdx + 1);
        for (var i = start; i < end; i++) passes[i].setDepth(depthTest, depthWrite, depthFunc);
        this._dirty = true;
      };
      _proto.setBlend = function setBlend(enabled, blendEq, blendSrc, blendDst, blendAlphaEq, blendSrcAlpha, blendDstAlpha, blendColor, passIdx) {
        var passes = this.passes;
        var start = 0, end = passes.length;
        void 0 !== passIdx && (start = passIdx, end = passIdx + 1);
        for (var i = start; i < end; i++) passes[i].setBlend(enabled, blendEq, blendSrc, blendDst, blendAlphaEq, blendSrcAlpha, blendDstAlpha, blendColor);
        this._dirty = true;
      };
      _proto.setStencilEnabled = function setStencilEnabled(stencilTest, passIdx) {
        void 0 === stencilTest && (stencilTest = gfx.STENCIL_INHERIT);
        var passes = this.passes;
        var start = 0, end = passes.length;
        void 0 !== passIdx && (start = passIdx, end = passIdx + 1);
        for (var i = start; i < end; i++) passes[i].setStencilEnabled(stencilTest);
        this._dirty = true;
      };
      _proto.setStencil = function setStencil(enabled, stencilFunc, stencilRef, stencilMask, stencilFailOp, stencilZFailOp, stencilZPassOp, stencilWriteMask, passIdx) {
        var passes = this.passes;
        var start = 0, end = passes.length;
        void 0 !== passIdx && (start = passIdx, end = passIdx + 1);
        for (var i = start; i < end; i++) {
          var pass = passes[i];
          pass.setStencilFront(enabled, stencilFunc, stencilRef, stencilMask, stencilFailOp, stencilZFailOp, stencilZPassOp, stencilWriteMask);
          pass.setStencilBack(enabled, stencilFunc, stencilRef, stencilMask, stencilFailOp, stencilZFailOp, stencilZPassOp, stencilWriteMask);
        }
        this._dirty = true;
      };
      _createClass(EffectBase, [ {
        key: "name",
        get: function get() {
          return this._name;
        }
      }, {
        key: "technique",
        get: function get() {
          return this._technique;
        }
      }, {
        key: "passes",
        get: function get() {
          return [];
        }
      } ]);
      return EffectBase;
    })();
    exports["default"] = EffectBase;
    cc.EffectBase = EffectBase;
    module.exports = exports["default"];
  }), {
    "../../../renderer/core/pass": 243
  } ],
  69: [ (function(require, module, exports) {
    "use strict";
    exports.__esModule = true;
    exports.parseEffect = parseEffect;
    var _pass = _interopRequireDefault(require("../../../renderer/core/pass"));
    var _types = require("../../../renderer/types");
    var _enums = _interopRequireDefault(require("../../../renderer/enums"));
    var _effect = _interopRequireDefault(require("./effect"));
    var _technique = _interopRequireDefault(require("../../../renderer/core/technique"));
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }
    function getInvolvedProgram(programName) {
      var lib = cc.renderer._forward._programLib;
      return lib.getTemplate(programName);
    }
    function parseProperties(effectAsset, passJson) {
      var propertiesJson = passJson.properties || {};
      var program = getInvolvedProgram(passJson.program);
      var _loop = function _loop(prop) {
        var uniformInfo = program.uniforms.find((function(u) {
          return u.name === prop;
        }));
        if (!uniformInfo) {
          cc.warnID(9107, effectAsset.name, prop);
          return "continue";
        }
      };
      for (var prop in propertiesJson) {
        var _ret = _loop(prop);
        if ("continue" === _ret) continue;
      }
      var properties = {};
      program.uniforms.forEach((function(u) {
        var name = u.name, prop = properties[name] = Object.assign({}, u), propInfo = propertiesJson[name];
        var value = _types.enums2default[u.type];
        value = propInfo ? propInfo.type === _enums["default"].PARAM_TEXTURE_2D ? null : propInfo.type === _enums["default"].PARAM_INT || propInfo.type === _enums["default"].PARAM_FLOAT ? Array.isArray(propInfo.value) ? propInfo.value[0] : propInfo.value : new Float32Array(propInfo.value) : _types.enums2default[u.type];
        prop.value = value;
      }));
      return properties;
    }
    function passDefines(pass) {
      var defines = {};
      var program = getInvolvedProgram(pass.program);
      program.defines.forEach((function(d) {
        defines[d.name] = _types.enums2default[d.type];
      }));
      return defines;
    }
    function parseTechniques(effectAsset) {
      var techNum = effectAsset.techniques.length;
      var techniques = new Array(techNum);
      for (var j = 0; j < techNum; ++j) {
        var tech = effectAsset.techniques[j];
        var techName = tech.name || j;
        var passNum = tech.passes.length;
        var passes = new Array(passNum);
        for (var k = 0; k < passNum; ++k) {
          var pass = tech.passes[k];
          var passName = pass.name || k;
          var detailName = effectAsset.name + "-" + techName + "-" + passName;
          var stage = pass.stage || "opaque";
          var properties = parseProperties(effectAsset, pass);
          var defines = passDefines(pass);
          var newPass = passes[k] = new _pass["default"](passName, detailName, pass.program, stage, properties, defines);
          pass.rasterizerState && newPass.setCullMode(pass.rasterizerState.cullMode);
          var blendState = pass.blendState && pass.blendState.targets[0];
          blendState && newPass.setBlend(blendState.blend, blendState.blendEq, blendState.blendSrc, blendState.blendDst, blendState.blendAlphaEq, blendState.blendSrcAlpha, blendState.blendDstAlpha, blendState.blendColor);
          var depthStencilState = pass.depthStencilState;
          if (depthStencilState) {
            newPass.setDepth(depthStencilState.depthTest, depthStencilState.depthWrite, depthStencilState.depthFunc);
            newPass.setStencilFront(depthStencilState.stencilTest, depthStencilState.stencilFuncFront, depthStencilState.stencilRefFront, depthStencilState.stencilMaskFront, depthStencilState.stencilFailOpFront, depthStencilState.stencilZFailOpFront, depthStencilState.stencilZPassOpFront, depthStencilState.stencilWriteMaskFront);
            newPass.setStencilBack(depthStencilState.stencilTest, depthStencilState.stencilFuncBack, depthStencilState.stencilRefBack, depthStencilState.stencilMaskBack, depthStencilState.stencilFailOpBack, depthStencilState.stencilZFailOpBack, depthStencilState.stencilZPassOpBack, depthStencilState.stencilWriteMaskBack);
          }
        }
        techniques[j] = new _technique["default"](techName, passes);
      }
      return techniques;
    }
    function parseEffect(effect) {
      var techniques = parseTechniques(effect);
      return new _effect["default"](effect.name, techniques, 0, effect);
    }
    false;
  }), {
    "../../../renderer/core/pass": 243,
    "../../../renderer/core/technique": 245,
    "../../../renderer/enums": 247,
    "../../../renderer/types": 275,
    "./effect": 71
  } ],
  70: [ (function(require, module, exports) {
    "use strict";
    exports.__esModule = true;
    exports["default"] = void 0;
    var _murmurhash2_gc = _interopRequireDefault(require("../../../renderer/murmurhash2_gc"));
    var _utils = _interopRequireDefault(require("./utils"));
    var _effectBase = _interopRequireDefault(require("./effect-base"));
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        "value" in descriptor && (descriptor.writable = true);
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      protoProps && _defineProperties(Constructor.prototype, protoProps);
      staticProps && _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    function _inheritsLoose(subClass, superClass) {
      subClass.prototype = Object.create(superClass.prototype);
      subClass.prototype.constructor = subClass;
      subClass.__proto__ = superClass;
    }
    var gfx = cc.gfx;
    var EffectVariant = (function(_EffectBase) {
      _inheritsLoose(EffectVariant, _EffectBase);
      _createClass(EffectVariant, [ {
        key: "effect",
        get: function get() {
          return this._effect;
        }
      }, {
        key: "name",
        get: function get() {
          return this._effect && this._effect.name + " (variant)";
        }
      }, {
        key: "passes",
        get: function get() {
          return this._passes;
        }
      }, {
        key: "stagePasses",
        get: function get() {
          return this._stagePasses;
        }
      } ]);
      function EffectVariant(effect) {
        var _this;
        _this = _EffectBase.call(this) || this;
        _this._effect = void 0;
        _this._passes = [];
        _this._stagePasses = {};
        _this._hash = 0;
        _this.init(effect);
        return _this;
      }
      var _proto = EffectVariant.prototype;
      _proto._onEffectChanged = function _onEffectChanged() {};
      _proto.init = function init(effect) {
        effect instanceof EffectVariant && (effect = effect.effect);
        this._effect = effect;
        this._dirty = true;
        if (effect) {
          var passes = effect.passes;
          var variantPasses = this._passes;
          variantPasses.length = 0;
          var stagePasses = this._stagePasses = {};
          for (var i = 0; i < passes.length; i++) {
            var variant = variantPasses[i] = Object.setPrototypeOf({}, passes[i]);
            variant._properties = Object.setPrototypeOf({}, passes[i]._properties);
            variant._defines = Object.setPrototypeOf({}, passes[i]._defines);
            stagePasses[variant._stage] || (stagePasses[variant._stage] = []);
            stagePasses[variant._stage].push(variant);
          }
        }
      };
      _proto.updateHash = function updateHash(hash) {};
      _proto.getHash = function getHash() {
        if (!this._dirty) return this._hash;
        this._dirty = false;
        var hash = "";
        hash += _utils["default"].serializePasses(this._passes);
        var effect = this._effect;
        effect && (hash += _utils["default"].serializePasses(effect.passes));
        this._hash = (0, _murmurhash2_gc["default"])(hash, 666);
        this.updateHash(this._hash);
        return this._hash;
      };
      return EffectVariant;
    })(_effectBase["default"]);
    exports["default"] = EffectVariant;
    cc.EffectVariant = EffectVariant;
    module.exports = exports["default"];
  }), {
    "../../../renderer/murmurhash2_gc": 270,
    "./effect-base": 68,
    "./utils": 75
  } ],
  71: [ (function(require, module, exports) {
    "use strict";
    exports.__esModule = true;
    exports["default"] = void 0;
    var _effectBase = _interopRequireDefault(require("./effect-base"));
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        "value" in descriptor && (descriptor.writable = true);
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      protoProps && _defineProperties(Constructor.prototype, protoProps);
      staticProps && _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    function _inheritsLoose(subClass, superClass) {
      subClass.prototype = Object.create(superClass.prototype);
      subClass.prototype.constructor = subClass;
      subClass.__proto__ = superClass;
    }
    var Effect = (function(_EffectBase) {
      _inheritsLoose(Effect, _EffectBase);
      _createClass(Effect, [ {
        key: "technique",
        get: function get() {
          return this._technique;
        }
      }, {
        key: "passes",
        get: function get() {
          return this._technique.passes;
        }
      } ]);
      function Effect(name, techniques, techniqueIndex, asset) {
        var _this;
        _this = _EffectBase.call(this) || this;
        _this._techniques = [];
        _this._asset = null;
        _this.init(name, techniques, techniqueIndex, asset, true);
        return _this;
      }
      var _proto = Effect.prototype;
      _proto.init = function init(name, techniques, techniqueIndex, asset, createNative) {
        this._name = name;
        this._techniques = techniques;
        this._technique = techniques[techniqueIndex];
        this._asset = asset;
      };
      _proto.switchTechnique = function switchTechnique(index) {
        if (index >= this._techniques.length) {
          cc.warn("Can not switch to technique with index [" + index + "]");
          return;
        }
        this._technique = this._techniques[index];
      };
      _proto.clear = function clear() {
        this._techniques = [];
      };
      _proto.clone = function clone() {
        var techniques = [];
        for (var i = 0; i < this._techniques.length; i++) techniques.push(this._techniques[i].clone());
        var techniqueIndex = this._techniques.indexOf(this._technique);
        return new Effect(this._name, techniques, techniqueIndex, this._asset);
      };
      return Effect;
    })(_effectBase["default"]);
    exports["default"] = Effect;
    cc.Effect = Effect;
    module.exports = exports["default"];
  }), {
    "./effect-base": 68
  } ],
  72: [ (function(require, module, exports) {
    "use strict";
    require("./CCEffectAsset");
    require("./CCMaterial");
    require("./material-variant");
  }), {
    "./CCEffectAsset": 66,
    "./CCMaterial": 67,
    "./material-variant": 74
  } ],
  73: [ (function(require, module, exports) {
    "use strict";
    exports.__esModule = true;
    exports["default"] = void 0;
    var _utils = _interopRequireDefault(require("./utils"));
    var _pool = _interopRequireDefault(require("../../utils/pool"));
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }
    function _inheritsLoose(subClass, superClass) {
      subClass.prototype = Object.create(superClass.prototype);
      subClass.prototype.constructor = subClass;
      subClass.__proto__ = superClass;
    }
    var MaterialPool = (function(_Pool) {
      _inheritsLoose(MaterialPool, _Pool);
      function MaterialPool() {
        var _this;
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) args[_key] = arguments[_key];
        _this = _Pool.call.apply(_Pool, [ this ].concat(args)) || this;
        _this.enabled = false;
        _this._pool = {};
        return _this;
      }
      var _proto = MaterialPool.prototype;
      _proto.get = function get(exampleMat, renderComponent) {
        var pool = this._pool;
        if (exampleMat instanceof cc.MaterialVariant) {
          if (!exampleMat._owner) {
            exampleMat._owner = renderComponent;
            return exampleMat;
          }
          if (exampleMat._owner === renderComponent) return exampleMat;
          exampleMat = exampleMat.material;
        }
        var instance;
        if (this.enabled) {
          var uuid = exampleMat.effectAsset._uuid;
          if (pool[uuid]) {
            var key = _utils["default"].serializeDefines(exampleMat._effect._defines) + _utils["default"].serializeTechniques(exampleMat._effect._techniques);
            instance = pool[uuid][key] && pool[uuid][key].pop();
          }
        }
        if (instance) this.count--; else {
          instance = new cc.MaterialVariant(exampleMat);
          instance._name = exampleMat._name + " (Instance)";
          instance._uuid = exampleMat._uuid;
        }
        instance._owner = renderComponent;
        return instance;
      };
      _proto.put = function put(mat) {
        if (!this.enabled || !mat._owner) return;
        var pool = this._pool;
        var uuid = mat.effectAsset._uuid;
        pool[uuid] || (pool[uuid] = {});
        var key = _utils["default"].serializeDefines(mat._effect._defines) + _utils["default"].serializeTechniques(mat._effect._techniques);
        pool[uuid][key] || (pool[uuid][key] = []);
        if (this.count > this.maxSize) return;
        this._clean(mat);
        pool[uuid][key].push(mat);
        this.count++;
      };
      _proto.clear = function clear() {
        this._pool = {};
        this.count = 0;
      };
      _proto._clean = function _clean(mat) {
        mat._owner = null;
      };
      return MaterialPool;
    })(_pool["default"]);
    var materialPool = new MaterialPool();
    _pool["default"].register("material", materialPool);
    var _default = materialPool;
    exports["default"] = _default;
    module.exports = exports["default"];
  }), {
    "../../utils/pool": 212,
    "./utils": 75
  } ],
  74: [ (function(require, module, exports) {
    "use strict";
    exports.__esModule = true;
    exports["default"] = void 0;
    var _CCMaterial = _interopRequireDefault(require("./CCMaterial"));
    var _effectVariant = _interopRequireDefault(require("./effect-variant"));
    var _materialPool = _interopRequireDefault(require("./material-pool"));
    var _dec, _class, _temp;
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        "value" in descriptor && (descriptor.writable = true);
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      protoProps && _defineProperties(Constructor.prototype, protoProps);
      staticProps && _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    function _inheritsLoose(subClass, superClass) {
      subClass.prototype = Object.create(superClass.prototype);
      subClass.prototype.constructor = subClass;
      subClass.__proto__ = superClass;
    }
    var ccclass = cc._decorator.ccclass;
    var MaterialVariant = (_dec = ccclass("cc.MaterialVariant"), _dec(_class = (_temp = (function(_Material) {
      _inheritsLoose(MaterialVariant, _Material);
      MaterialVariant.createWithBuiltin = function createWithBuiltin(materialName, owner) {
        return MaterialVariant.create(_CCMaterial["default"].getBuiltinMaterial(materialName), owner);
      };
      MaterialVariant.create = function create(material, owner) {
        if (!material) return null;
        return _materialPool["default"].get(material, owner);
      };
      _createClass(MaterialVariant, [ {
        key: "uuid",
        get: function get() {
          return this._material.uuid;
        }
      }, {
        key: "owner",
        get: function get() {
          return this._owner;
        }
      }, {
        key: "material",
        get: function get() {
          return this._material;
        }
      } ]);
      function MaterialVariant(material) {
        var _this;
        _this = _Material.call(this) || this;
        _this._owner = null;
        _this._material = null;
        _this.init(material);
        return _this;
      }
      var _proto = MaterialVariant.prototype;
      _proto.init = function init(material) {
        this._effect = new _effectVariant["default"](material.effect);
        this._effectAsset = material._effectAsset;
        this._material = material;
      };
      return MaterialVariant;
    })(_CCMaterial["default"]), _temp)) || _class);
    exports["default"] = MaterialVariant;
    cc.MaterialVariant = MaterialVariant;
    module.exports = exports["default"];
  }), {
    "./CCMaterial": 67,
    "./effect-variant": 70,
    "./material-pool": 73
  } ],
  75: [ (function(require, module, exports) {
    "use strict";
    exports.__esModule = true;
    exports["default"] = void 0;
    var _enums = _interopRequireDefault(require("../../../renderer/enums"));
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }
    function serializeDefines(defines) {
      var str = "";
      for (var name in defines) str += name + defines[name];
      return str;
    }
    function serializePass(pass, excludeProperties) {
      var str = pass._programName + pass._cullMode;
      pass._blend && (str += pass._blendEq + pass._blendAlphaEq + pass._blendSrc + pass._blendDst + pass._blendSrcAlpha + pass._blendDstAlpha + pass._blendColor);
      pass._depthTest && (str += pass._depthWrite + pass._depthFunc);
      pass._stencilTest && (str += pass._stencilFuncFront + pass._stencilRefFront + pass._stencilMaskFront + pass._stencilFailOpFront + pass._stencilZFailOpFront + pass._stencilZPassOpFront + pass._stencilWriteMaskFront + pass._stencilFuncBack + pass._stencilRefBack + pass._stencilMaskBack + pass._stencilFailOpBack + pass._stencilZFailOpBack + pass._stencilZPassOpBack + pass._stencilWriteMaskBack);
      excludeProperties || (str += serializeUniforms(pass._properties));
      str += serializeDefines(pass._defines);
      return str;
    }
    function serializePasses(passes) {
      var hashData = "";
      for (var i = 0; i < passes.length; i++) hashData += serializePass(passes[i]);
      return hashData;
    }
    function serializeUniforms(uniforms) {
      var hashData = "";
      for (var name in uniforms) {
        var param = uniforms[name];
        var prop = param.value;
        if (!prop) continue;
        param.type === _enums["default"].PARAM_TEXTURE_2D || param.type === _enums["default"].PARAM_TEXTURE_CUBE ? hashData += prop._id + ";" : hashData += prop.toString() + ";";
      }
      return hashData;
    }
    var _default = {
      serializeDefines: serializeDefines,
      serializePasses: serializePasses,
      serializeUniforms: serializeUniforms
    };
    exports["default"] = _default;
    module.exports = exports["default"];
  }), {
    "../../../renderer/enums": 247
  } ],
  76: [ (function(require, module, exports) {
    "use strict";
    var Event;
    true;
    Event = require("../CCNode").EventType;
    var TOP = 1;
    var MID = 2;
    var BOT = 4;
    var LEFT = 8;
    var CENTER = 16;
    var RIGHT = 32;
    var HORIZONTAL = LEFT | CENTER | RIGHT;
    var VERTICAL = TOP | MID | BOT;
    var AlignMode = cc.Enum({
      ONCE: 0,
      ON_WINDOW_RESIZE: 1,
      ALWAYS: 2
    });
    function getReadonlyNodeSize(parent) {
      return parent instanceof cc.Scene ? cc.visibleRect : parent._contentSize;
    }
    function computeInverseTransForTarget(widgetNode, target, out_inverseTranslate, out_inverseScale) {
      var scaleX = widgetNode._parent.scaleX;
      var scaleY = widgetNode._parent.scaleY;
      var translateX = 0;
      var translateY = 0;
      for (var node = widgetNode._parent; ;) {
        translateX += node.x;
        translateY += node.y;
        node = node._parent;
        if (!node) {
          out_inverseTranslate.x = out_inverseTranslate.y = 0;
          out_inverseScale.x = out_inverseScale.y = 1;
          return;
        }
        if (node === target) break;
        var sx = node.scaleX;
        var sy = node.scaleY;
        translateX *= sx;
        translateY *= sy;
        scaleX *= sx;
        scaleY *= sy;
      }
      out_inverseScale.x = 0 !== scaleX ? 1 / scaleX : 1;
      out_inverseScale.y = 0 !== scaleY ? 1 / scaleY : 1;
      out_inverseTranslate.x = -translateX;
      out_inverseTranslate.y = -translateY;
    }
    var tInverseTranslate = cc.Vec2.ZERO;
    var tInverseScale = cc.Vec2.ONE;
    function align(node, widget) {
      var hasTarget = widget._target;
      var target;
      var inverseTranslate, inverseScale;
      if (hasTarget) {
        target = hasTarget;
        inverseTranslate = tInverseTranslate;
        inverseScale = tInverseScale;
        computeInverseTransForTarget(node, target, inverseTranslate, inverseScale);
      } else target = node._parent;
      var targetSize = getReadonlyNodeSize(target);
      var targetAnchor = target._anchorPoint;
      var isRoot = (true, target instanceof cc.Scene);
      var x = node.x, y = node.y;
      var anchor = node._anchorPoint;
      if (widget._alignFlags & HORIZONTAL) {
        var localLeft, localRight, targetWidth = targetSize.width;
        if (isRoot) {
          localLeft = cc.visibleRect.left.x;
          localRight = cc.visibleRect.right.x;
        } else {
          localLeft = -targetAnchor.x * targetWidth;
          localRight = localLeft + targetWidth;
        }
        localLeft += widget._isAbsLeft ? widget._left : widget._left * targetWidth;
        localRight -= widget._isAbsRight ? widget._right : widget._right * targetWidth;
        if (hasTarget) {
          localLeft += inverseTranslate.x;
          localLeft *= inverseScale.x;
          localRight += inverseTranslate.x;
          localRight *= inverseScale.x;
        }
        var width, anchorX = anchor.x, scaleX = node.scaleX;
        if (scaleX < 0) {
          anchorX = 1 - anchorX;
          scaleX = -scaleX;
        }
        if (widget.isStretchWidth) {
          width = localRight - localLeft;
          0 !== scaleX && (node.width = width / scaleX);
          x = localLeft + anchorX * width;
        } else {
          width = node.width * scaleX;
          if (widget.isAlignHorizontalCenter) {
            var localHorizontalCenter = widget._isAbsHorizontalCenter ? widget._horizontalCenter : widget._horizontalCenter * targetWidth;
            var targetCenter = (.5 - targetAnchor.x) * targetSize.width;
            if (hasTarget) {
              localHorizontalCenter *= inverseScale.x;
              targetCenter += inverseTranslate.x;
              targetCenter *= inverseScale.x;
            }
            x = targetCenter + (anchorX - .5) * width + localHorizontalCenter;
          } else x = widget.isAlignLeft ? localLeft + anchorX * width : localRight + (anchorX - 1) * width;
        }
      }
      if (widget._alignFlags & VERTICAL) {
        var localTop, localBottom, targetHeight = targetSize.height;
        if (isRoot) {
          localBottom = cc.visibleRect.bottom.y;
          localTop = cc.visibleRect.top.y;
        } else {
          localBottom = -targetAnchor.y * targetHeight;
          localTop = localBottom + targetHeight;
        }
        localBottom += widget._isAbsBottom ? widget._bottom : widget._bottom * targetHeight;
        localTop -= widget._isAbsTop ? widget._top : widget._top * targetHeight;
        if (hasTarget) {
          localBottom += inverseTranslate.y;
          localBottom *= inverseScale.y;
          localTop += inverseTranslate.y;
          localTop *= inverseScale.y;
        }
        var height, anchorY = anchor.y, scaleY = node.scaleY;
        if (scaleY < 0) {
          anchorY = 1 - anchorY;
          scaleY = -scaleY;
        }
        if (widget.isStretchHeight) {
          height = localTop - localBottom;
          0 !== scaleY && (node.height = height / scaleY);
          y = localBottom + anchorY * height;
        } else {
          height = node.height * scaleY;
          if (widget.isAlignVerticalCenter) {
            var localVerticalCenter = widget._isAbsVerticalCenter ? widget._verticalCenter : widget._verticalCenter * targetHeight;
            var targetMiddle = (.5 - targetAnchor.y) * targetSize.height;
            if (hasTarget) {
              localVerticalCenter *= inverseScale.y;
              targetMiddle += inverseTranslate.y;
              targetMiddle *= inverseScale.y;
            }
            y = targetMiddle + (anchorY - .5) * height + localVerticalCenter;
          } else y = widget.isAlignBottom ? localBottom + anchorY * height : localTop + (anchorY - 1) * height;
        }
      }
      node.setPosition(x, y);
    }
    function visitNode(node) {
      var widget = node._widget;
      if (widget) {
        false;
        align(node, widget);
        true, widget.alignMode !== AlignMode.ALWAYS ? widget.enabled = false : activeWidgets.push(widget);
      }
      var children = node._children;
      for (var i = 0; i < children.length; i++) {
        var child = children[i];
        child._active && visitNode(child);
      }
    }
    var animationState;
    false;
    function refreshScene() {
      var AnimUtils;
      var EditMode;
      var nowPreviewing;
      var component;
      var animation;
      var _component;
      var _animation;
      false;
      var scene = cc.director.getScene();
      if (scene) {
        widgetManager.isAligning = true;
        if (widgetManager._nodesOrderDirty) {
          activeWidgets.length = 0;
          visitNode(scene);
          widgetManager._nodesOrderDirty = false;
        } else {
          var i, widget, iterator = widgetManager._activeWidgetsIterator;
          var AnimUtils;
          var editingNode;
          var node;
          false;
          for (iterator.i = 0; iterator.i < activeWidgets.length; ++iterator.i) {
            widget = activeWidgets[iterator.i];
            align(widget.node, widget);
          }
        }
        widgetManager.isAligning = false;
      }
      false;
    }
    var adjustWidgetToAllowMovingInEditor = false;
    var adjustWidgetToAllowResizingInEditor = false;
    var activeWidgets = [];
    function updateAlignment(node) {
      var parent = node._parent;
      cc.Node.isNode(parent) && updateAlignment(parent);
      var widget = node._widget || node.getComponent(cc.Widget);
      widget && parent && align(node, widget);
    }
    var widgetManager = cc._widgetManager = module.exports = {
      _AlignFlags: {
        TOP: TOP,
        MID: MID,
        BOT: BOT,
        LEFT: LEFT,
        CENTER: CENTER,
        RIGHT: RIGHT
      },
      isAligning: false,
      _nodesOrderDirty: false,
      _activeWidgetsIterator: new cc.js.array.MutableForwardIterator(activeWidgets),
      init: function init(director) {
        director.on(cc.Director.EVENT_AFTER_UPDATE, refreshScene);
        false;
        var thisOnResized = this.onResized.bind(this);
        window.addEventListener("resize", thisOnResized);
        window.addEventListener("orientationchange", thisOnResized);
      },
      add: function add(widget) {
        widget.node._widget = widget;
        this._nodesOrderDirty = true;
        false;
      },
      remove: function remove(widget) {
        widget.node._widget = null;
        this._activeWidgetsIterator.remove(widget);
        false;
      },
      onResized: function onResized() {
        var scene = cc.director.getScene();
        scene && this.refreshWidgetOnResized(scene);
      },
      refreshWidgetOnResized: function refreshWidgetOnResized(node) {
        var widget = cc.Node.isNode(node) && node.getComponent(cc.Widget);
        widget && widget.alignMode === AlignMode.ON_WINDOW_RESIZE && (widget.enabled = true);
        var children = node._children;
        for (var i = 0; i < children.length; i++) {
          var child = children[i];
          this.refreshWidgetOnResized(child);
        }
      },
      updateAlignment: updateAlignment,
      AlignMode: AlignMode
    };
    false;
  }), {
    "../CCNode": 16
  } ],
  77: [ (function(require, module, exports) {
    "use strict";
    var _valueTypes = require("../value-types");
    var _geomUtils = require("../geom-utils");
    var AffineTrans = require("../utils/affine-transform");
    var renderer = require("../renderer/index");
    var RenderFlow = require("../renderer/render-flow");
    var game = require("../CCGame");
    var RendererCamera = null;
    false;
    RendererCamera = require("../../renderer/scene/camera");
    var _mat4_temp_1 = cc.mat4();
    var _mat4_temp_2 = cc.mat4();
    var _v3_temp_1 = cc.v3();
    var _v3_temp_2 = cc.v3();
    var _v3_temp_3 = cc.v3();
    var _cameras = [];
    function updateMainCamera() {
      for (var i = 0, minDepth = Number.MAX_VALUE; i < _cameras.length; i++) {
        var camera = _cameras[i];
        if (camera._depth < minDepth) {
          Camera.main = camera;
          minDepth = camera._depth;
        }
      }
    }
    var _debugCamera = null;
    function repositionDebugCamera() {
      if (!_debugCamera) return;
      var node = _debugCamera.getNode();
      var canvas = cc.game.canvas;
      node.z = canvas.height / 1.1566;
      node.x = canvas.width / 2;
      node.y = canvas.height / 2;
    }
    var ClearFlags = cc.Enum({
      COLOR: 1,
      DEPTH: 2,
      STENCIL: 4
    });
    var StageFlags = cc.Enum({
      OPAQUE: 1,
      TRANSPARENT: 2
    });
    var Camera = cc.Class({
      name: "cc.Camera",
      extends: cc.Component,
      ctor: function ctor() {
        if (game.renderType !== game.RENDER_TYPE_CANVAS) {
          var camera = new RendererCamera();
          camera.setStages([ "opaque" ]);
          camera.dirty = true;
          this._inited = false;
          this._camera = camera;
        } else this._inited = true;
      },
      editor: false,
      properties: {
        _cullingMask: 4294967295,
        _clearFlags: ClearFlags.DEPTH | ClearFlags.STENCIL,
        _backgroundColor: cc.color(0, 0, 0, 255),
        _depth: 0,
        _zoomRatio: 1,
        _targetTexture: null,
        _fov: 60,
        _orthoSize: 10,
        _nearClip: 1,
        _farClip: 4096,
        _ortho: true,
        _rect: cc.rect(0, 0, 1, 1),
        _renderStages: 1,
        _alignWithScreen: true,
        zoomRatio: {
          get: function get() {
            return this._zoomRatio;
          },
          set: function set(value) {
            this._zoomRatio = value;
          },
          tooltip: false
        },
        fov: {
          get: function get() {
            return this._fov;
          },
          set: function set(v) {
            this._fov = v;
          },
          tooltip: false
        },
        orthoSize: {
          get: function get() {
            return this._orthoSize;
          },
          set: function set(v) {
            this._orthoSize = v;
          },
          tooltip: false
        },
        nearClip: {
          get: function get() {
            return this._nearClip;
          },
          set: function set(v) {
            this._nearClip = v;
            this._updateClippingpPlanes();
          },
          tooltip: false
        },
        farClip: {
          get: function get() {
            return this._farClip;
          },
          set: function set(v) {
            this._farClip = v;
            this._updateClippingpPlanes();
          },
          tooltip: false
        },
        ortho: {
          get: function get() {
            return this._ortho;
          },
          set: function set(v) {
            this._ortho = v;
            this._updateProjection();
          },
          tooltip: false
        },
        rect: {
          get: function get() {
            return this._rect;
          },
          set: function set(v) {
            this._rect = v;
            this._updateRect();
          },
          tooltip: false
        },
        cullingMask: {
          get: function get() {
            return this._cullingMask;
          },
          set: function set(value) {
            this._cullingMask = value;
            this._updateCameraMask();
          },
          tooltip: false
        },
        clearFlags: {
          get: function get() {
            return this._clearFlags;
          },
          set: function set(value) {
            this._clearFlags = value;
            this._camera && this._camera.setClearFlags(value);
          },
          tooltip: false
        },
        backgroundColor: {
          get: function get() {
            return this._backgroundColor;
          },
          set: function set(value) {
            if (!this._backgroundColor.equals(value)) {
              this._backgroundColor.set(value);
              this._updateBackgroundColor();
            }
          },
          tooltip: false
        },
        depth: {
          get: function get() {
            return this._depth;
          },
          set: function set(value) {
            Camera.main === this ? this._depth < value && updateMainCamera() : Camera.main && value < Camera.main._depth && _cameras.includes(this) && (Camera.main = this);
            this._depth = value;
            this._camera && this._camera.setPriority(value);
          },
          tooltip: false
        },
        targetTexture: {
          get: function get() {
            return this._targetTexture;
          },
          set: function set(value) {
            this._targetTexture = value;
            this._updateTargetTexture();
          },
          tooltip: false
        },
        renderStages: {
          get: function get() {
            return this._renderStages;
          },
          set: function set(val) {
            this._renderStages = val;
            this._updateStages();
          },
          tooltip: false
        },
        alignWithScreen: {
          get: function get() {
            return this._alignWithScreen;
          },
          set: function set(v) {
            this._alignWithScreen = v;
          }
        },
        _is3D: {
          get: function get() {
            return this.node && this.node._is3DNode;
          }
        }
      },
      statics: {
        main: null,
        cameras: _cameras,
        ClearFlags: ClearFlags,
        findCamera: function findCamera(node) {
          for (var i = 0, l = _cameras.length; i < l; i++) {
            var camera = _cameras[i];
            if (camera.containsNode(node)) return camera;
          }
          return null;
        },
        _findRendererCamera: function _findRendererCamera(node) {
          var cameras = renderer.scene._cameras;
          for (var i = 0; i < cameras._count; i++) if (cameras._data[i]._cullingMask & node._cullingMask) return cameras._data[i];
          return null;
        },
        _setupDebugCamera: function _setupDebugCamera() {
          if (_debugCamera) return;
          if (game.renderType === game.RENDER_TYPE_CANVAS) return;
          var camera = new RendererCamera();
          _debugCamera = camera;
          camera.setStages([ "opaque" ]);
          camera.setFov(60 * Math.PI / 180);
          camera.setNear(.1);
          camera.setFar(4096);
          camera.dirty = true;
          camera.cullingMask = 1 << cc.Node.BuiltinGroupIndex.DEBUG;
          camera.setPriority(cc.macro.MAX_ZINDEX);
          camera.setClearFlags(0);
          camera.setColor(0, 0, 0, 0);
          var node = new cc.Node();
          camera.setNode(node);
          repositionDebugCamera();
          cc.view.on("design-resolution-changed", repositionDebugCamera);
          renderer.scene.addCamera(camera);
        }
      },
      _updateCameraMask: function _updateCameraMask() {
        if (this._camera) {
          var mask = this._cullingMask & ~(1 << cc.Node.BuiltinGroupIndex.DEBUG);
          this._camera.cullingMask = mask;
        }
      },
      _updateBackgroundColor: function _updateBackgroundColor() {
        if (!this._camera) return;
        var color = this._backgroundColor;
        this._camera.setColor(color.r / 255, color.g / 255, color.b / 255, color.a / 255);
      },
      _updateTargetTexture: function _updateTargetTexture() {
        if (!this._camera) return;
        var texture = this._targetTexture;
        this._camera.setFrameBuffer(texture ? texture._framebuffer : null);
      },
      _updateClippingpPlanes: function _updateClippingpPlanes() {
        if (!this._camera) return;
        this._camera.setNear(this._nearClip);
        this._camera.setFar(this._farClip);
      },
      _updateProjection: function _updateProjection() {
        if (!this._camera) return;
        var type = this._ortho ? 1 : 0;
        this._camera.setType(type);
      },
      _updateRect: function _updateRect() {
        if (!this._camera) return;
        var rect = this._rect;
        this._camera.setRect(rect.x, rect.y, rect.width, rect.height);
      },
      _updateStages: function _updateStages() {
        var flags = this._renderStages;
        var stages = [];
        flags & StageFlags.OPAQUE && stages.push("opaque");
        flags & StageFlags.TRANSPARENT && stages.push("transparent");
        this._camera.setStages(stages);
      },
      _init: function _init() {
        if (this._inited) return;
        this._inited = true;
        var camera = this._camera;
        if (!camera) return;
        camera.setNode(this.node);
        camera.setClearFlags(this._clearFlags);
        camera.setPriority(this._depth);
        this._updateBackgroundColor();
        this._updateCameraMask();
        this._updateTargetTexture();
        this._updateClippingpPlanes();
        this._updateProjection();
        this._updateStages();
        this._updateRect();
        this.beforeDraw();
      },
      onLoad: function onLoad() {
        this._init();
      },
      onEnable: function onEnable() {
        if (true, game.renderType !== game.RENDER_TYPE_CANVAS) {
          cc.director.on(cc.Director.EVENT_BEFORE_DRAW, this.beforeDraw, this);
          renderer.scene.addCamera(this._camera);
        }
        _cameras.push(this);
        (!Camera.main || this._depth < Camera.main._depth) && (Camera.main = this);
      },
      onDisable: function onDisable() {
        if (true, game.renderType !== game.RENDER_TYPE_CANVAS) {
          cc.director.off(cc.Director.EVENT_BEFORE_DRAW, this.beforeDraw, this);
          renderer.scene.removeCamera(this._camera);
        }
        cc.js.array.fastRemove(_cameras, this);
        if (Camera.main === this) {
          Camera.main = null;
          updateMainCamera();
        }
      },
      getScreenToWorldMatrix2D: function getScreenToWorldMatrix2D(out) {
        this.getWorldToScreenMatrix2D(out);
        _valueTypes.Mat4.invert(out, out);
        return out;
      },
      getWorldToScreenMatrix2D: function getWorldToScreenMatrix2D(out) {
        this.node.getWorldRT(_mat4_temp_1);
        var zoomRatio = this.zoomRatio;
        var _mat4_temp_1m = _mat4_temp_1.m;
        _mat4_temp_1m[0] *= zoomRatio;
        _mat4_temp_1m[1] *= zoomRatio;
        _mat4_temp_1m[4] *= zoomRatio;
        _mat4_temp_1m[5] *= zoomRatio;
        var m12 = _mat4_temp_1m[12];
        var m13 = _mat4_temp_1m[13];
        var center = cc.visibleRect.center;
        _mat4_temp_1m[12] = center.x - (_mat4_temp_1m[0] * m12 + _mat4_temp_1m[4] * m13);
        _mat4_temp_1m[13] = center.y - (_mat4_temp_1m[1] * m12 + _mat4_temp_1m[5] * m13);
        out !== _mat4_temp_1 && _valueTypes.Mat4.copy(out, _mat4_temp_1);
        return out;
      },
      getScreenToWorldPoint: function getScreenToWorldPoint(screenPosition, out) {
        if (this.node.is3DNode) {
          out = out || new cc.Vec3();
          this._camera.screenToWorld(out, screenPosition, cc.visibleRect.width, cc.visibleRect.height);
        } else {
          out = out || new cc.Vec2();
          this.getScreenToWorldMatrix2D(_mat4_temp_1);
          _valueTypes.Vec2.transformMat4(out, screenPosition, _mat4_temp_1);
        }
        return out;
      },
      getWorldToScreenPoint: function getWorldToScreenPoint(worldPosition, out) {
        if (this.node.is3DNode) {
          out = out || new cc.Vec3();
          this._camera.worldToScreen(out, worldPosition, cc.visibleRect.width, cc.visibleRect.height);
        } else {
          out = out || new cc.Vec2();
          this.getWorldToScreenMatrix2D(_mat4_temp_1);
          _valueTypes.Vec2.transformMat4(out, worldPosition, _mat4_temp_1);
        }
        return out;
      },
      getRay: function getRay(screenPos) {
        if (!cc.geomUtils) return screenPos;
        _valueTypes.Vec3.set(_v3_temp_3, screenPos.x, screenPos.y, 1);
        this._camera.screenToWorld(_v3_temp_2, _v3_temp_3, cc.visibleRect.width, cc.visibleRect.height);
        if (this.ortho) {
          _valueTypes.Vec3.set(_v3_temp_3, screenPos.x, screenPos.y, -1);
          this._camera.screenToWorld(_v3_temp_1, _v3_temp_3, cc.visibleRect.width, cc.visibleRect.height);
        } else this.node.getWorldPosition(_v3_temp_1);
        return _geomUtils.Ray.fromPoints(new _geomUtils.Ray(), _v3_temp_1, _v3_temp_2);
      },
      containsNode: function containsNode(node) {
        return (node._cullingMask & this.cullingMask) > 0;
      },
      render: function render(rootNode) {
        rootNode = rootNode || cc.director.getScene();
        if (!rootNode) return null;
        this.node.getWorldMatrix(_mat4_temp_1);
        this.beforeDraw();
        RenderFlow.renderCamera(this._camera, rootNode);
      },
      _onAlignWithScreen: function _onAlignWithScreen() {
        var height = cc.game.canvas.height / cc.view._scaleY;
        var targetTexture = this._targetTexture;
        if (targetTexture) {
          false;
          height = cc.visibleRect.height;
        }
        var fov = this._fov * cc.macro.RAD;
        this.node.z = height / (2 * Math.tan(fov / 2));
        fov = 2 * Math.atan(Math.tan(fov / 2) / this.zoomRatio);
        this._camera.setFov(fov);
        this._camera.setOrthoHeight(height / 2 / this.zoomRatio);
        this.node.setRotation(0, 0, 0, 1);
      },
      beforeDraw: function beforeDraw() {
        if (!this._camera) return;
        if (this._alignWithScreen) this._onAlignWithScreen(); else {
          var fov = this._fov * cc.macro.RAD;
          fov = 2 * Math.atan(Math.tan(fov / 2) / this.zoomRatio);
          this._camera.setFov(fov);
          this._camera.setOrthoHeight(this._orthoSize / this.zoomRatio);
        }
        this._camera.dirty = true;
      }
    });
    cc.js.mixin(Camera.prototype, {
      getNodeToCameraTransform: function getNodeToCameraTransform(node) {
        var out = AffineTrans.identity();
        node.getWorldMatrix(_mat4_temp_2);
        if (this.containsNode(node)) {
          this.getWorldToCameraMatrix(_mat4_temp_1);
          _valueTypes.Mat4.mul(_mat4_temp_2, _mat4_temp_2, _mat4_temp_1);
        }
        AffineTrans.fromMat4(out, _mat4_temp_2);
        return out;
      },
      getCameraToWorldPoint: function getCameraToWorldPoint(point, out) {
        return this.getScreenToWorldPoint(point, out);
      },
      getWorldToCameraPoint: function getWorldToCameraPoint(point, out) {
        return this.getWorldToScreenPoint(point, out);
      },
      getCameraToWorldMatrix: function getCameraToWorldMatrix(out) {
        return this.getScreenToWorldMatrix2D(out);
      },
      getWorldToCameraMatrix: function getWorldToCameraMatrix(out) {
        return this.getWorldToScreenMatrix2D(out);
      }
    });
    module.exports = cc.Camera = Camera;
  }), {
    "../../renderer/scene/camera": 272,
    "../CCGame": 15,
    "../geom-utils": void 0,
    "../renderer/index": 171,
    "../renderer/render-flow": 172,
    "../utils/affine-transform": 202,
    "../value-types": 225
  } ],
  78: [ (function(require, module, exports) {
    "use strict";
    cc.Collider.Box = cc.Class({
      properties: {
        _offset: cc.v2(0, 0),
        _size: cc.size(100, 100),
        offset: {
          tooltip: false,
          get: function get() {
            return this._offset;
          },
          set: function set(value) {
            this._offset = value;
          },
          type: cc.Vec2
        },
        size: {
          tooltip: false,
          get: function get() {
            return this._size;
          },
          set: function set(value) {
            this._size.width = value.width < 0 ? 0 : value.width;
            this._size.height = value.height < 0 ? 0 : value.height;
          },
          type: cc.Size
        }
      },
      resetInEditor: false
    });
    var BoxCollider = cc.Class({
      name: "cc.BoxCollider",
      extends: cc.Collider,
      mixins: [ cc.Collider.Box ],
      editor: false
    });
    cc.BoxCollider = module.exports = BoxCollider;
  }), {} ],
  79: [ (function(require, module, exports) {
    "use strict";
    cc.Collider.Circle = cc.Class({
      properties: {
        _offset: cc.v2(0, 0),
        _radius: 50,
        offset: {
          tooltip: false,
          get: function get() {
            return this._offset;
          },
          set: function set(value) {
            this._offset = value;
          },
          type: cc.Vec2
        },
        radius: {
          tooltip: false,
          get: function get() {
            return this._radius;
          },
          set: function set(value) {
            this._radius = value < 0 ? 0 : value;
          }
        }
      },
      resetInEditor: false
    });
    var CircleCollider = cc.Class({
      name: "cc.CircleCollider",
      extends: cc.Collider,
      mixins: [ cc.Collider.Circle ],
      editor: false
    });
    cc.CircleCollider = module.exports = CircleCollider;
  }), {} ],
  80: [ (function(require, module, exports) {
    "use strict";
    var Collider = cc.Class({
      name: "cc.Collider",
      extends: cc.Component,
      properties: {
        editing: {
          default: false,
          serializable: false,
          tooltip: false
        },
        tag: {
          tooltip: false,
          default: 0,
          range: [ 0, 1e7 ],
          type: cc.Integer
        }
      },
      onDisable: function onDisable() {
        cc.director.getCollisionManager().removeCollider(this);
      },
      onEnable: function onEnable() {
        cc.director.getCollisionManager().addCollider(this);
      }
    });
    cc.Collider = module.exports = Collider;
  }), {} ],
  81: [ (function(require, module, exports) {
    "use strict";
    var _vec = _interopRequireDefault(require("../value-types/vec2"));
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }
    var Contact = require("./CCContact");
    var CollisionType = Contact.CollisionType;
    var NodeEvent = require("../CCNode").EventType;
    var _vec2 = new _vec["default"]();
    function obbApplyMatrix(rect, mat4, out_bl, out_tl, out_tr, out_br) {
      var x = rect.x;
      var y = rect.y;
      var width = rect.width;
      var height = rect.height;
      var mat4m = mat4.m;
      var m00 = mat4m[0], m01 = mat4m[1], m04 = mat4m[4], m05 = mat4m[5];
      var m12 = mat4m[12], m13 = mat4m[13];
      var tx = m00 * x + m04 * y + m12;
      var ty = m01 * x + m05 * y + m13;
      var xa = m00 * width;
      var xb = m01 * width;
      var yc = m04 * height;
      var yd = m05 * height;
      out_tl.x = tx;
      out_tl.y = ty;
      out_tr.x = xa + tx;
      out_tr.y = xb + ty;
      out_bl.x = yc + tx;
      out_bl.y = yd + ty;
      out_br.x = xa + yc + tx;
      out_br.y = xb + yd + ty;
    }
    var CollisionManager = cc.Class({
      mixins: [ cc.EventTarget ],
      properties: {
        enabled: false,
        enabledDrawBoundingBox: false
      },
      ctor: function ctor() {
        this._contacts = [];
        this._colliders = [];
        this._debugDrawer = null;
        this._enabledDebugDraw = false;
        cc.director._scheduler && cc.director._scheduler.enableForTarget(this);
      },
      update: function update(dt) {
        if (!this.enabled) return;
        var i, l;
        var colliders = this._colliders;
        for (i = 0, l = colliders.length; i < l; i++) this.updateCollider(colliders[i]);
        var contacts = this._contacts;
        var results = [];
        for (i = 0, l = contacts.length; i < l; i++) {
          var collisionType = contacts[i].updateState();
          if (collisionType === CollisionType.None) continue;
          results.push([ collisionType, contacts[i] ]);
        }
        for (i = 0, l = results.length; i < l; i++) {
          var result = results[i];
          this._doCollide(result[0], result[1]);
        }
        this.drawColliders();
      },
      _doCollide: function _doCollide(collisionType, contact) {
        var contactFunc;
        switch (collisionType) {
         case CollisionType.CollisionEnter:
          contactFunc = "onCollisionEnter";
          break;

         case CollisionType.CollisionStay:
          contactFunc = "onCollisionStay";
          break;

         case CollisionType.CollisionExit:
          contactFunc = "onCollisionExit";
        }
        var collider1 = contact.collider1;
        var collider2 = contact.collider2;
        var comps1 = collider1.node._components;
        var comps2 = collider2.node._components;
        var i, l, comp;
        for (i = 0, l = comps1.length; i < l; i++) {
          comp = comps1[i];
          comp[contactFunc] && comp[contactFunc](collider2, collider1);
        }
        for (i = 0, l = comps2.length; i < l; i++) {
          comp = comps2[i];
          comp[contactFunc] && comp[contactFunc](collider1, collider2);
        }
      },
      shouldCollide: function shouldCollide(c1, c2) {
        var node1 = c1.node, node2 = c2.node;
        var collisionMatrix = cc.game.collisionMatrix;
        return node1 !== node2 && collisionMatrix[node1.groupIndex][node2.groupIndex];
      },
      initCollider: function initCollider(collider) {
        if (!collider.world) {
          var world = collider.world = {};
          world.aabb = cc.rect();
          world.preAabb = cc.rect();
          world.matrix = cc.mat4();
          world.radius = 0;
          if (collider instanceof cc.BoxCollider) {
            world.position = null;
            world.points = [ cc.v2(), cc.v2(), cc.v2(), cc.v2() ];
          } else if (collider instanceof cc.PolygonCollider) {
            world.position = null;
            world.points = collider.points.map((function(p) {
              return cc.v2(p.x, p.y);
            }));
          } else if (collider instanceof cc.CircleCollider) {
            world.position = cc.v2();
            world.points = null;
          }
        }
      },
      updateCollider: function updateCollider(collider) {
        var offset = collider.offset;
        var world = collider.world;
        var aabb = world.aabb;
        var m = world.matrix;
        collider.node.getWorldMatrix(m);
        var preAabb = world.preAabb;
        preAabb.x = aabb.x;
        preAabb.y = aabb.y;
        preAabb.width = aabb.width;
        preAabb.height = aabb.height;
        if (collider instanceof cc.BoxCollider) {
          var size = collider.size;
          aabb.x = offset.x - size.width / 2;
          aabb.y = offset.y - size.height / 2;
          aabb.width = size.width;
          aabb.height = size.height;
          var wps = world.points;
          var wp0 = wps[0], wp1 = wps[1], wp2 = wps[2], wp3 = wps[3];
          obbApplyMatrix(aabb, m, wp0, wp1, wp2, wp3);
          var minx = Math.min(wp0.x, wp1.x, wp2.x, wp3.x);
          var miny = Math.min(wp0.y, wp1.y, wp2.y, wp3.y);
          var maxx = Math.max(wp0.x, wp1.x, wp2.x, wp3.x);
          var maxy = Math.max(wp0.y, wp1.y, wp2.y, wp3.y);
          aabb.x = minx;
          aabb.y = miny;
          aabb.width = maxx - minx;
          aabb.height = maxy - miny;
        } else if (collider instanceof cc.CircleCollider) {
          _vec["default"].transformMat4(_vec2, collider.offset, m);
          world.position.x = _vec2.x;
          world.position.y = _vec2.y;
          var mm = m.m;
          var tempx = mm[12], tempy = mm[13];
          mm[12] = mm[13] = 0;
          _vec2.x = collider.radius;
          _vec2.y = 0;
          _vec["default"].transformMat4(_vec2, _vec2, m);
          var d = Math.sqrt(_vec2.x * _vec2.x + _vec2.y * _vec2.y);
          world.radius = d;
          aabb.x = world.position.x - d;
          aabb.y = world.position.y - d;
          aabb.width = 2 * d;
          aabb.height = 2 * d;
          mm[12] = tempx;
          mm[13] = tempy;
        } else if (collider instanceof cc.PolygonCollider) {
          var points = collider.points;
          var worldPoints = world.points;
          worldPoints.length = points.length;
          var _minx = 1e6, _miny = 1e6, _maxx = -1e6, _maxy = -1e6;
          for (var i = 0, l = points.length; i < l; i++) {
            worldPoints[i] || (worldPoints[i] = cc.v2());
            _vec2.x = points[i].x + offset.x;
            _vec2.y = points[i].y + offset.y;
            _vec["default"].transformMat4(_vec2, _vec2, m);
            var x = _vec2.x;
            var y = _vec2.y;
            worldPoints[i].x = x;
            worldPoints[i].y = y;
            x > _maxx && (_maxx = x);
            x < _minx && (_minx = x);
            y > _maxy && (_maxy = y);
            y < _miny && (_miny = y);
          }
          aabb.x = _minx;
          aabb.y = _miny;
          aabb.width = _maxx - _minx;
          aabb.height = _maxy - _miny;
        }
      },
      addCollider: function addCollider(collider) {
        var colliders = this._colliders;
        var index = colliders.indexOf(collider);
        if (-1 === index) {
          for (var i = 0, l = colliders.length; i < l; i++) {
            var other = colliders[i];
            if (this.shouldCollide(collider, other)) {
              var contact = new Contact(collider, other);
              this._contacts.push(contact);
            }
          }
          colliders.push(collider);
          this.initCollider(collider);
        }
        collider.node.on(NodeEvent.GROUP_CHANGED, this.onNodeGroupChanged, this);
      },
      removeCollider: function removeCollider(collider) {
        var colliders = this._colliders;
        var index = colliders.indexOf(collider);
        if (index >= 0) {
          colliders.splice(index, 1);
          var contacts = this._contacts;
          for (var i = contacts.length - 1; i >= 0; i--) {
            var contact = contacts[i];
            if (contact.collider1 === collider || contact.collider2 === collider) {
              contact.touching && this._doCollide(CollisionType.CollisionExit, contact);
              contacts.splice(i, 1);
            }
          }
          collider.node.off(NodeEvent.GROUP_CHANGED, this.onNodeGroupChanged, this);
        } else cc.errorID(6600);
      },
      onNodeGroupChanged: function onNodeGroupChanged(node) {
        var colliders = node.getComponents(cc.Collider);
        for (var i = 0, l = colliders.length; i < l; i++) {
          var collider = colliders[i];
          if (cc.PhysicsCollider && collider instanceof cc.PhysicsCollider) continue;
          this.removeCollider(collider);
          this.addCollider(collider);
        }
      },
      drawColliders: function drawColliders() {
        if (!this._enabledDebugDraw) return;
        this._checkDebugDrawValid();
        var debugDrawer = this._debugDrawer;
        debugDrawer.clear();
        var colliders = this._colliders;
        for (var i = 0, l = colliders.length; i < l; i++) {
          var collider = colliders[i];
          debugDrawer.strokeColor = cc.Color.WHITE;
          if (collider instanceof cc.BoxCollider || collider instanceof cc.PolygonCollider) {
            var ps = collider.world.points;
            if (ps.length > 0) {
              debugDrawer.moveTo(ps[0].x, ps[0].y);
              for (var j = 1; j < ps.length; j++) debugDrawer.lineTo(ps[j].x, ps[j].y);
              debugDrawer.close();
              debugDrawer.stroke();
            }
          } else if (collider instanceof cc.CircleCollider) {
            debugDrawer.circle(collider.world.position.x, collider.world.position.y, collider.world.radius);
            debugDrawer.stroke();
          }
          if (this.enabledDrawBoundingBox) {
            var aabb = collider.world.aabb;
            debugDrawer.strokeColor = cc.Color.BLUE;
            debugDrawer.moveTo(aabb.xMin, aabb.yMin);
            debugDrawer.lineTo(aabb.xMin, aabb.yMax);
            debugDrawer.lineTo(aabb.xMax, aabb.yMax);
            debugDrawer.lineTo(aabb.xMax, aabb.yMin);
            debugDrawer.close();
            debugDrawer.stroke();
          }
        }
      },
      _checkDebugDrawValid: function _checkDebugDrawValid() {
        if (!this._debugDrawer || !this._debugDrawer.isValid) {
          var node = new cc.Node("COLLISION_MANAGER_DEBUG_DRAW");
          node.zIndex = cc.macro.MAX_ZINDEX;
          cc.game.addPersistRootNode(node);
          this._debugDrawer = node.addComponent(cc.Graphics);
        }
      }
    });
    cc.js.getset(CollisionManager.prototype, "enabledDebugDraw", (function() {
      return this._enabledDebugDraw;
    }), (function(value) {
      if (value && !this._enabledDebugDraw) {
        this._checkDebugDrawValid();
        this._debugDrawer.node.active = true;
      } else if (!value && this._enabledDebugDraw) {
        this._debugDrawer.clear(true);
        this._debugDrawer.node.active = false;
      }
      this._enabledDebugDraw = value;
    }));
    cc.CollisionManager = module.exports = CollisionManager;
  }), {
    "../CCNode": 16,
    "../value-types/vec2": 234,
    "./CCContact": 82
  } ],
  82: [ (function(require, module, exports) {
    "use strict";
    var Intersection = require("./CCIntersection");
    var CollisionType = cc.Enum({
      None: 0,
      CollisionEnter: 1,
      CollisionStay: 2,
      CollisionExit: 3
    });
    function Contact(collider1, collider2) {
      this.collider1 = collider1;
      this.collider2 = collider2;
      this.touching = false;
      var isCollider1Polygon = collider1 instanceof cc.BoxCollider || collider1 instanceof cc.PolygonCollider;
      var isCollider2Polygon = collider2 instanceof cc.BoxCollider || collider2 instanceof cc.PolygonCollider;
      var isCollider1Circle = collider1 instanceof cc.CircleCollider;
      var isCollider2Circle = collider2 instanceof cc.CircleCollider;
      if (isCollider1Polygon && isCollider2Polygon) this.testFunc = Intersection.polygonPolygon; else if (isCollider1Circle && isCollider2Circle) this.testFunc = Intersection.circleCircle; else if (isCollider1Polygon && isCollider2Circle) this.testFunc = Intersection.polygonCircle; else if (isCollider1Circle && isCollider2Polygon) {
        this.testFunc = Intersection.polygonCircle;
        this.collider1 = collider2;
        this.collider2 = collider1;
      } else cc.errorID(6601, cc.js.getClassName(collider1), cc.js.getClassName(collider2));
    }
    Contact.prototype.test = function() {
      var world1 = this.collider1.world;
      var world2 = this.collider2.world;
      if (!world1.aabb.intersects(world2.aabb)) return false;
      if (this.testFunc === Intersection.polygonPolygon) return this.testFunc(world1.points, world2.points);
      if (this.testFunc === Intersection.circleCircle) return this.testFunc(world1, world2);
      if (this.testFunc === Intersection.polygonCircle) return this.testFunc(world1.points, world2);
      return false;
    };
    Contact.prototype.updateState = function() {
      var result = this.test();
      var type = CollisionType.None;
      if (result && !this.touching) {
        this.touching = true;
        type = CollisionType.CollisionEnter;
      } else if (result && this.touching) type = CollisionType.CollisionStay; else if (!result && this.touching) {
        this.touching = false;
        type = CollisionType.CollisionExit;
      }
      return type;
    };
    Contact.CollisionType = CollisionType;
    module.exports = Contact;
  }), {
    "./CCIntersection": void 0
  } ],
  83: [ (function(require, module, exports) {
    "use strict";
    cc.Collider.Polygon = cc.Class({
      properties: {
        threshold: {
          default: 1,
          serializable: false,
          visible: false
        },
        _offset: cc.v2(0, 0),
        offset: {
          get: function get() {
            return this._offset;
          },
          set: function set(value) {
            this._offset = value;
          },
          type: cc.Vec2
        },
        points: {
          tooltip: false,
          default: function _default() {
            return [ cc.v2(-50, -50), cc.v2(50, -50), cc.v2(50, 50), cc.v2(-50, 50) ];
          },
          type: [ cc.Vec2 ]
        }
      },
      resetPointsByContour: false
    });
    var PolygonCollider = cc.Class({
      name: "cc.PolygonCollider",
      extends: cc.Collider,
      mixins: [ cc.Collider.Polygon ],
      editor: false
    });
    cc.PolygonCollider = module.exports = PolygonCollider;
  }), {} ],
  84: [ (function(require, module, exports) {
    "use strict";
    require("./CCCollisionManager");
    require("./CCCollider");
    require("./CCBoxCollider");
    require("./CCCircleCollider");
    require("./CCPolygonCollider");
  }), {
    "./CCBoxCollider": 78,
    "./CCCircleCollider": 79,
    "./CCCollider": 80,
    "./CCCollisionManager": 81,
    "./CCPolygonCollider": 83
  } ],
  85: [ (function(require, module, exports) {
    "use strict";
    require("./platform/CCClass");
    var Flags = require("./platform/CCObject").Flags;
    var jsArray = require("./platform/js").array;
    var IsStartCalled = Flags.IsStartCalled;
    var IsOnEnableCalled = Flags.IsOnEnableCalled;
    var IsEditorOnEnableCalled = Flags.IsEditorOnEnableCalled;
    var callerFunctor = false;
    var callOnEnableInTryCatch = false;
    var callOnDisableInTryCatch = false;
    function sortedIndex(array, comp) {
      var order = comp.constructor._executionOrder;
      var id = comp._id;
      for (var l = 0, h = array.length - 1, m = h >>> 1; l <= h; m = l + h >>> 1) {
        var test = array[m];
        var testOrder = test.constructor._executionOrder;
        if (testOrder > order) h = m - 1; else if (testOrder < order) l = m + 1; else {
          var testId = test._id;
          if (testId > id) h = m - 1; else {
            if (!(testId < id)) return m;
            l = m + 1;
          }
        }
      }
      return ~l;
    }
    function stableRemoveInactive(iterator, flagToClear) {
      var array = iterator.array;
      var next = iterator.i + 1;
      while (next < array.length) {
        var comp = array[next];
        if (comp._enabled && comp.node._activeInHierarchy) ++next; else {
          iterator.removeAt(next);
          flagToClear && (comp._objFlags &= ~flagToClear);
        }
      }
    }
    var LifeCycleInvoker = cc.Class({
      __ctor__: function __ctor__(invokeFunc) {
        var Iterator = jsArray.MutableForwardIterator;
        this._zero = new Iterator([]);
        this._neg = new Iterator([]);
        this._pos = new Iterator([]);
        false;
        this._invoke = invokeFunc;
      },
      statics: {
        stableRemoveInactive: stableRemoveInactive
      },
      add: null,
      remove: null,
      invoke: null
    });
    function compareOrder(a, b) {
      return a.constructor._executionOrder - b.constructor._executionOrder;
    }
    var OneOffInvoker = cc.Class({
      extends: LifeCycleInvoker,
      add: function add(comp) {
        var order = comp.constructor._executionOrder;
        (0 === order ? this._zero : order < 0 ? this._neg : this._pos).array.push(comp);
      },
      remove: function remove(comp) {
        var order = comp.constructor._executionOrder;
        (0 === order ? this._zero : order < 0 ? this._neg : this._pos).fastRemove(comp);
      },
      cancelInactive: function cancelInactive(flagToClear) {
        stableRemoveInactive(this._zero, flagToClear);
        stableRemoveInactive(this._neg, flagToClear);
        stableRemoveInactive(this._pos, flagToClear);
      },
      invoke: function invoke() {
        var compsNeg = this._neg;
        if (compsNeg.array.length > 0) {
          compsNeg.array.sort(compareOrder);
          this._invoke(compsNeg);
          compsNeg.array.length = 0;
        }
        this._invoke(this._zero);
        this._zero.array.length = 0;
        var compsPos = this._pos;
        if (compsPos.array.length > 0) {
          compsPos.array.sort(compareOrder);
          this._invoke(compsPos);
          compsPos.array.length = 0;
        }
      }
    });
    var ReusableInvoker = cc.Class({
      extends: LifeCycleInvoker,
      add: function add(comp) {
        var order = comp.constructor._executionOrder;
        if (0 === order) this._zero.array.push(comp); else {
          var array = order < 0 ? this._neg.array : this._pos.array;
          var i = sortedIndex(array, comp);
          i < 0 && array.splice(~i, 0, comp);
        }
      },
      remove: function remove(comp) {
        var order = comp.constructor._executionOrder;
        if (0 === order) this._zero.fastRemove(comp); else {
          var iterator = order < 0 ? this._neg : this._pos;
          var i = sortedIndex(iterator.array, comp);
          i >= 0 && iterator.removeAt(i);
        }
      },
      invoke: function invoke(dt) {
        this._neg.array.length > 0 && this._invoke(this._neg, dt);
        this._invoke(this._zero, dt);
        this._pos.array.length > 0 && this._invoke(this._pos, dt);
      }
    });
    function enableInEditor(comp) {
      if (!(comp._objFlags & IsEditorOnEnableCalled)) {
        cc.engine.emit("component-enabled", comp.uuid);
        comp._objFlags |= IsEditorOnEnableCalled;
      }
    }
    function createInvokeImpl(indiePath, useDt, ensureFlag, fastPath) {
      true;
      var body = "var a=it.array;for(it.i=0;it.i<a.length;++it.i){var c=a[it.i];" + indiePath + "}";
      fastPath = useDt ? Function("it", "dt", body) : Function("it", body);
      indiePath = Function("c", "dt", indiePath);
      return function(iterator, dt) {
        try {
          fastPath(iterator, dt);
        } catch (e) {
          cc._throw(e);
          var array = iterator.array;
          ensureFlag && (array[iterator.i]._objFlags |= ensureFlag);
          ++iterator.i;
          for (;iterator.i < array.length; ++iterator.i) try {
            indiePath(array[iterator.i], dt);
          } catch (e) {
            cc._throw(e);
            ensureFlag && (array[iterator.i]._objFlags |= ensureFlag);
          }
        }
      };
    }
    var invokeStart = createInvokeImpl("c.start();c._objFlags|=" + IsStartCalled, false, IsStartCalled);
    var invokeUpdate = createInvokeImpl("c.update(dt)", true);
    var invokeLateUpdate = createInvokeImpl("c.lateUpdate(dt)", true);
    function ctor() {
      this.startInvoker = new OneOffInvoker(invokeStart);
      this.updateInvoker = new ReusableInvoker(invokeUpdate);
      this.lateUpdateInvoker = new ReusableInvoker(invokeLateUpdate);
      this._deferredComps = [];
      this._updating = false;
    }
    var ComponentScheduler = cc.Class({
      ctor: ctor,
      unscheduleAll: ctor,
      statics: {
        LifeCycleInvoker: LifeCycleInvoker,
        OneOffInvoker: OneOffInvoker,
        createInvokeImpl: createInvokeImpl,
        invokeOnEnable: function(iterator) {
          var compScheduler = cc.director._compScheduler;
          var array = iterator.array;
          for (iterator.i = 0; iterator.i < array.length; ++iterator.i) {
            var comp = array[iterator.i];
            if (comp._enabled) {
              comp.onEnable();
              var deactivatedDuringOnEnable = !comp.node._activeInHierarchy;
              deactivatedDuringOnEnable || compScheduler._onEnabled(comp);
            }
          }
        }
      },
      _onEnabled: function _onEnabled(comp) {
        cc.director.getScheduler().resumeTarget(comp);
        comp._objFlags |= IsOnEnableCalled;
        this._updating ? this._deferredComps.push(comp) : this._scheduleImmediate(comp);
      },
      _onDisabled: function _onDisabled(comp) {
        cc.director.getScheduler().pauseTarget(comp);
        comp._objFlags &= ~IsOnEnableCalled;
        var index = this._deferredComps.indexOf(comp);
        if (index >= 0) {
          jsArray.fastRemoveAt(this._deferredComps, index);
          return;
        }
        !comp.start || comp._objFlags & IsStartCalled || this.startInvoker.remove(comp);
        comp.update && this.updateInvoker.remove(comp);
        comp.lateUpdate && this.lateUpdateInvoker.remove(comp);
      },
      enableComp: function(comp, invoker) {
        if (!(comp._objFlags & IsOnEnableCalled)) {
          if (comp.onEnable) {
            if (invoker) {
              invoker.add(comp);
              return;
            }
            comp.onEnable();
            var deactivatedDuringOnEnable = !comp.node._activeInHierarchy;
            if (deactivatedDuringOnEnable) return;
          }
          this._onEnabled(comp);
        }
      },
      disableComp: function(comp) {
        if (comp._objFlags & IsOnEnableCalled) {
          comp.onDisable && comp.onDisable();
          this._onDisabled(comp);
        }
      },
      _scheduleImmediate: function _scheduleImmediate(comp) {
        "function" !== typeof comp.start || comp._objFlags & IsStartCalled || this.startInvoker.add(comp);
        "function" === typeof comp.update && this.updateInvoker.add(comp);
        "function" === typeof comp.lateUpdate && this.lateUpdateInvoker.add(comp);
      },
      _deferredSchedule: function _deferredSchedule() {
        var comps = this._deferredComps;
        for (var i = 0, len = comps.length; i < len; i++) this._scheduleImmediate(comps[i]);
        comps.length = 0;
      },
      _startForNewComps: function _startForNewComps() {
        if (this._deferredComps.length > 0) {
          this._deferredSchedule();
          this.startInvoker.invoke();
        }
      },
      startPhase: function startPhase() {
        this._updating = true;
        this.startInvoker.invoke();
        this._startForNewComps();
      },
      updatePhase: function updatePhase(dt) {
        this.updateInvoker.invoke(dt);
      },
      lateUpdatePhase: function lateUpdatePhase(dt) {
        this.lateUpdateInvoker.invoke(dt);
        this._updating = false;
        this._startForNewComps();
      }
    });
    module.exports = ComponentScheduler;
  }), {
    "./platform/CCClass": 141,
    "./platform/CCObject": 147,
    "./platform/js": 161,
    "./utils/misc": 210
  } ],
  86: [ (function(require, module, exports) {
    "use strict";
    var AnimationAnimator = require("../../animation/animation-animator");
    var AnimationClip = require("../../animation/animation-clip");
    var EventTarget = require("../event/event-target");
    var js = require("../platform/js");
    var equalClips = function(clip1, clip2) {
      return clip1 === clip2;
    };
    var EventType = cc.Enum({
      PLAY: "play",
      STOP: "stop",
      PAUSE: "pause",
      RESUME: "resume",
      LASTFRAME: "lastframe",
      FINISHED: "finished"
    });
    var Animation = cc.Class({
      name: "cc.Animation",
      extends: require("./CCComponent"),
      mixins: [ EventTarget ],
      editor: false,
      statics: {
        EventType: EventType
      },
      ctor: function ctor() {
        cc.EventTarget.call(this);
        this._animator = null;
        this._nameToState = js.createMap(true);
        this._didInit = false;
        this._currentClip = null;
      },
      properties: {
        _defaultClip: {
          default: null,
          type: AnimationClip
        },
        defaultClip: {
          type: AnimationClip,
          get: function get() {
            return this._defaultClip;
          },
          set: function set(value) {
            true;
            return;
          },
          tooltip: false
        },
        currentClip: {
          get: function get() {
            return this._currentClip;
          },
          set: function set(value) {
            this._currentClip = value;
          },
          type: AnimationClip,
          visible: false
        },
        _writableClips: {
          get: function get() {
            return this._clips;
          },
          set: function set(val) {
            this._didInit = false;
            this._clips = val;
            this._init();
          },
          type: [ AnimationClip ]
        },
        _clips: {
          default: [],
          type: [ AnimationClip ],
          tooltip: false,
          visible: true
        },
        playOnLoad: {
          default: false,
          tooltip: false
        }
      },
      start: function start() {
        if ((true, this.playOnLoad) && this._defaultClip) {
          var isPlaying = this._animator && this._animator.isPlaying;
          if (!isPlaying) {
            var state = this.getAnimationState(this._defaultClip.name);
            this._animator.playState(state);
          }
        }
      },
      onEnable: function onEnable() {
        this._animator && this._animator.resume();
      },
      onDisable: function onDisable() {
        this._animator && this._animator.pause();
      },
      onDestroy: function onDestroy() {
        this.stop();
      },
      getClips: function getClips() {
        return this._clips;
      },
      play: function play(name, startTime) {
        var state = this.playAdditive(name, startTime);
        this._animator.stopStatesExcept(state);
        return state;
      },
      playAdditive: function playAdditive(name, startTime) {
        this._init();
        var state = this.getAnimationState(name || this._defaultClip && this._defaultClip.name);
        if (state) {
          this.enabled = true;
          var animator = this._animator;
          if (animator.isPlaying && state.isPlaying) if (state.isPaused) animator.resumeState(state); else {
            animator.stopState(state);
            animator.playState(state, startTime);
          } else animator.playState(state, startTime);
          this.enabledInHierarchy || animator.pause();
          this.currentClip = state.clip;
        }
        return state;
      },
      stop: function stop(name) {
        if (!this._didInit) return;
        if (name) {
          var state = this._nameToState[name];
          state && this._animator.stopState(state);
        } else this._animator.stop();
      },
      pause: function pause(name) {
        if (!this._didInit) return;
        if (name) {
          var state = this._nameToState[name];
          state && this._animator.pauseState(state);
        } else this.enabled = false;
      },
      resume: function resume(name) {
        if (!this._didInit) return;
        if (name) {
          var state = this._nameToState[name];
          state && this._animator.resumeState(state);
        } else this.enabled = true;
      },
      setCurrentTime: function setCurrentTime(time, name) {
        this._init();
        if (name) {
          var state = this._nameToState[name];
          state && this._animator.setStateTime(state, time);
        } else this._animator.setStateTime(time);
      },
      getAnimationState: function getAnimationState(name) {
        this._init();
        var state = this._nameToState[name];
        false;
        state && !state.curveLoaded && this._animator._reloadClip(state);
        return state || null;
      },
      addClip: function addClip(clip, newName) {
        if (!clip) {
          cc.warnID(3900);
          return;
        }
        this._init();
        cc.js.array.contains(this._clips, clip) || this._clips.push(clip);
        newName = newName || clip.name;
        var oldState = this._nameToState[newName];
        if (oldState) {
          if (oldState.clip === clip) return oldState;
          var index = this._clips.indexOf(oldState.clip);
          -1 !== index && this._clips.splice(index, 1);
        }
        var newState = new cc.AnimationState(clip, newName);
        this._nameToState[newName] = newState;
        return newState;
      },
      removeClip: function removeClip(clip, force) {
        if (!clip) {
          cc.warnID(3901);
          return;
        }
        this._init();
        var state;
        for (var name in this._nameToState) {
          state = this._nameToState[name];
          if (equalClips(state.clip, clip)) break;
        }
        if (clip === this._defaultClip) {
          if (!force) {
            true;
            cc.warnID(3902);
            return;
          }
          this._defaultClip = null;
        }
        if (state && state.isPlaying) {
          if (!force) {
            true;
            cc.warnID(3903);
            return;
          }
          this.stop(state.name);
        }
        this._clips = this._clips.filter((function(item) {
          return !equalClips(item, clip);
        }));
        state && delete this._nameToState[state.name];
      },
      sample: function sample(name) {
        this._init();
        if (name) {
          var state = this._nameToState[name];
          state && state.sample();
        } else this._animator.sample();
      },
      on: function on(type, callback, target, useCapture) {
        this._init();
        var ret = this._EventTargetOn(type, callback, target, useCapture);
        if ("lastframe" === type) {
          var states = this._nameToState;
          for (var name in states) states[name]._lastframeEventOn = true;
        }
        return ret;
      },
      off: function off(type, callback, target, useCapture) {
        this._init();
        if ("lastframe" === type) {
          var states = this._nameToState;
          for (var name in states) states[name]._lastframeEventOn = false;
        }
        this._EventTargetOff(type, callback, target, useCapture);
      },
      _init: function _init() {
        if (this._didInit) return;
        this._didInit = true;
        this._animator = new AnimationAnimator(this.node, this);
        this._createStates();
      },
      _createStates: function _createStates() {
        this._nameToState = js.createMap(true);
        var state = null;
        var defaultClipState = false;
        for (var i = 0; i < this._clips.length; ++i) {
          var clip = this._clips[i];
          if (clip) {
            state = new cc.AnimationState(clip);
            false;
            this._nameToState[state.name] = state;
            equalClips(this._defaultClip, clip) && (defaultClipState = state);
          }
        }
        if (this._defaultClip && !defaultClipState) {
          state = new cc.AnimationState(this._defaultClip);
          false;
          this._nameToState[state.name] = state;
        }
      }
    });
    Animation.prototype._EventTargetOn = EventTarget.prototype.on;
    Animation.prototype._EventTargetOff = EventTarget.prototype.off;
    cc.Animation = module.exports = Animation;
  }), {
    "../../animation/animation-animator": 2,
    "../../animation/animation-clip": 3,
    "../event/event-target": 105,
    "../platform/js": 161,
    "./CCComponent": 90
  } ],
  87: [ (function(require, module, exports) {
    "use strict";
    var BlockEvents = [ "touchstart", "touchmove", "touchend", "mousedown", "mousemove", "mouseup", "mouseenter", "mouseleave", "mousewheel" ];
    function stopPropagation(event) {
      event.stopPropagation();
    }
    var BlockInputEvents = cc.Class({
      name: "cc.BlockInputEvents",
      extends: require("./CCComponent"),
      editor: {
        menu: "i18n:MAIN_MENU.component.ui/Block Input Events",
        inspector: "packages://inspector/inspectors/comps/block-input-events.js",
        help: "i18n:COMPONENT.help_url.block_input_events"
      },
      onEnable: function onEnable() {
        for (var i = 0; i < BlockEvents.length; i++) this.node.on(BlockEvents[i], stopPropagation, this);
      },
      onDisable: function onDisable() {
        for (var i = 0; i < BlockEvents.length; i++) this.node.off(BlockEvents[i], stopPropagation, this);
      }
    });
    cc.BlockInputEvents = module.exports = BlockInputEvents;
  }), {
    "./CCComponent": 90
  } ],
  88: [ (function(require, module, exports) {
    "use strict";
    var Component = require("./CCComponent");
    var GraySpriteState = require("../utils/gray-sprite-state");
    var Transition = cc.Enum({
      NONE: 0,
      COLOR: 1,
      SPRITE: 2,
      SCALE: 3
    });
    var State = cc.Enum({
      NORMAL: 0,
      HOVER: 1,
      PRESSED: 2,
      DISABLED: 3
    });
    var Button = cc.Class({
      name: "cc.Button",
      extends: Component,
      mixins: [ GraySpriteState ],
      ctor: function ctor() {
        this._pressed = false;
        this._hovered = false;
        this._fromColor = null;
        this._toColor = null;
        this._time = 0;
        this._transitionFinished = true;
        this._fromScale = cc.Vec2.ZERO;
        this._toScale = cc.Vec2.ZERO;
        this._originalScale = null;
        this._graySpriteMaterial = null;
        this._spriteMaterial = null;
        this._sprite = null;
      },
      editor: false,
      properties: {
        interactable: {
          default: true,
          tooltip: false,
          notify: function notify() {
            this._updateState();
            this.interactable || this._resetState();
          },
          animatable: false
        },
        _resizeToTarget: {
          animatable: false,
          set: function set(value) {
            value && this._resizeNodeToTargetNode();
          }
        },
        enableAutoGrayEffect: {
          default: false,
          tooltip: false,
          notify: function notify() {
            this._updateDisabledState(true);
          }
        },
        transition: {
          default: Transition.NONE,
          tooltip: false,
          type: Transition,
          animatable: false,
          notify: function notify(oldValue) {
            this._updateTransition(oldValue);
          },
          formerlySerializedAs: "transition"
        },
        normalColor: {
          default: cc.Color.WHITE,
          displayName: "Normal",
          tooltip: false,
          notify: function notify() {
            this.transition === Transition.Color && this._getButtonState() === State.NORMAL && (this._getTarget().opacity = this.normalColor.a);
            this._updateState();
          }
        },
        pressedColor: {
          default: cc.color(211, 211, 211),
          displayName: "Pressed",
          tooltip: false,
          notify: function notify() {
            this.transition === Transition.Color && this._getButtonState() === State.PRESSED && (this._getTarget().opacity = this.pressedColor.a);
            this._updateState();
          },
          formerlySerializedAs: "pressedColor"
        },
        hoverColor: {
          default: cc.Color.WHITE,
          displayName: "Hover",
          tooltip: false,
          notify: function notify() {
            this.transition === Transition.Color && this._getButtonState() === State.HOVER && (this._getTarget().opacity = this.hoverColor.a);
            this._updateState();
          },
          formerlySerializedAs: "hoverColor"
        },
        disabledColor: {
          default: cc.color(124, 124, 124),
          displayName: "Disabled",
          tooltip: false,
          notify: function notify() {
            this.transition === Transition.Color && this._getButtonState() === State.DISABLED && (this._getTarget().opacity = this.disabledColor.a);
            this._updateState();
          }
        },
        duration: {
          default: .1,
          range: [ 0, 10 ],
          tooltip: false
        },
        zoomScale: {
          default: 1.2,
          tooltip: false
        },
        normalSprite: {
          default: null,
          type: cc.SpriteFrame,
          displayName: "Normal",
          tooltip: false,
          notify: function notify() {
            this._updateState();
          }
        },
        pressedSprite: {
          default: null,
          type: cc.SpriteFrame,
          displayName: "Pressed",
          tooltip: false,
          formerlySerializedAs: "pressedSprite",
          notify: function notify() {
            this._updateState();
          }
        },
        hoverSprite: {
          default: null,
          type: cc.SpriteFrame,
          displayName: "Hover",
          tooltip: false,
          formerlySerializedAs: "hoverSprite",
          notify: function notify() {
            this._updateState();
          }
        },
        disabledSprite: {
          default: null,
          type: cc.SpriteFrame,
          displayName: "Disabled",
          tooltip: false,
          notify: function notify() {
            this._updateState();
          }
        },
        target: {
          default: null,
          type: cc.Node,
          tooltip: false,
          notify: function notify(oldValue) {
            this._applyTarget();
            oldValue && this.target !== oldValue && this._unregisterTargetEvent(oldValue);
          }
        },
        clickEvents: {
          default: [],
          type: cc.Component.EventHandler,
          tooltip: false
        }
      },
      statics: {
        Transition: Transition
      },
      __preload: function __preload() {
        this._applyTarget();
        this._resetState();
      },
      _resetState: function _resetState() {
        this._pressed = false;
        this._hovered = false;
        var target = this._getTarget();
        var transition = this.transition;
        var originalScale = this._originalScale;
        transition === Transition.COLOR && this.interactable ? this._setTargetColor(this.normalColor) : transition === Transition.SCALE && originalScale && target.setScale(originalScale.x, originalScale.y);
        this._transitionFinished = true;
      },
      onEnable: function onEnable() {
        this.normalSprite && this.normalSprite.ensureLoadTexture();
        this.hoverSprite && this.hoverSprite.ensureLoadTexture();
        this.pressedSprite && this.pressedSprite.ensureLoadTexture();
        this.disabledSprite && this.disabledSprite.ensureLoadTexture();
        true;
        this._registerNodeEvent();
        this._updateState();
      },
      onDisable: function onDisable() {
        this._resetState();
        true;
        this._unregisterNodeEvent();
      },
      _getTarget: function _getTarget() {
        return this.target ? this.target : this.node;
      },
      _onTargetSpriteFrameChanged: function _onTargetSpriteFrameChanged(comp) {
        this.transition === Transition.SPRITE && this._setCurrentStateSprite(comp.spriteFrame);
      },
      _onTargetColorChanged: function _onTargetColorChanged(color) {
        this.transition === Transition.COLOR && this._setCurrentStateColor(color);
      },
      _onTargetScaleChanged: function _onTargetScaleChanged() {
        var target = this._getTarget();
        if (this._originalScale && (this.transition !== Transition.SCALE || this._transitionFinished)) {
          this._originalScale.x = target.scaleX;
          this._originalScale.y = target.scaleY;
        }
      },
      _setTargetColor: function _setTargetColor(color) {
        var target = this._getTarget();
        var cloneColor = color.clone();
        target.opacity = cloneColor.a;
        cloneColor.a = 255;
        target.color = cloneColor;
      },
      _getStateColor: function _getStateColor(state) {
        switch (state) {
         case State.NORMAL:
          return this.normalColor;

         case State.HOVER:
          return this.hoverColor;

         case State.PRESSED:
          return this.pressedColor;

         case State.DISABLED:
          return this.disabledColor;
        }
      },
      _getStateSprite: function _getStateSprite(state) {
        switch (state) {
         case State.NORMAL:
          return this.normalSprite;

         case State.HOVER:
          return this.hoverSprite;

         case State.PRESSED:
          return this.pressedSprite;

         case State.DISABLED:
          return this.disabledSprite;
        }
      },
      _setCurrentStateColor: function _setCurrentStateColor(color) {
        switch (this._getButtonState()) {
         case State.NORMAL:
          this.normalColor = color;
          break;

         case State.HOVER:
          this.hoverColor = color;
          break;

         case State.PRESSED:
          this.pressedColor = color;
          break;

         case State.DISABLED:
          this.disabledColor = color;
        }
      },
      _setCurrentStateSprite: function _setCurrentStateSprite(spriteFrame) {
        switch (this._getButtonState()) {
         case State.NORMAL:
          this.normalSprite = spriteFrame;
          break;

         case State.HOVER:
          this.hoverSprite = spriteFrame;
          break;

         case State.PRESSED:
          this.pressedSprite = spriteFrame;
          break;

         case State.DISABLED:
          this.disabledSprite = spriteFrame;
        }
      },
      update: function update(dt) {
        var target = this._getTarget();
        if (this._transitionFinished) return;
        if (this.transition !== Transition.COLOR && this.transition !== Transition.SCALE) return;
        this.time += dt;
        var ratio = 1;
        this.duration > 0 && (ratio = this.time / this.duration);
        ratio >= 1 && (ratio = 1);
        if (this.transition === Transition.COLOR) {
          var color = this._fromColor.lerp(this._toColor, ratio);
          this._setTargetColor(color);
        } else this.transition === Transition.SCALE && this._originalScale && (target.scale = this._fromScale.lerp(this._toScale, ratio));
        1 === ratio && (this._transitionFinished = true);
      },
      _registerNodeEvent: function _registerNodeEvent() {
        this.node.on(cc.Node.EventType.TOUCH_START, this._onTouchBegan, this);
        this.node.on(cc.Node.EventType.TOUCH_MOVE, this._onTouchMove, this);
        this.node.on(cc.Node.EventType.TOUCH_END, this._onTouchEnded, this);
        this.node.on(cc.Node.EventType.TOUCH_CANCEL, this._onTouchCancel, this);
        this.node.on(cc.Node.EventType.MOUSE_ENTER, this._onMouseMoveIn, this);
        this.node.on(cc.Node.EventType.MOUSE_LEAVE, this._onMouseMoveOut, this);
      },
      _unregisterNodeEvent: function _unregisterNodeEvent() {
        this.node.off(cc.Node.EventType.TOUCH_START, this._onTouchBegan, this);
        this.node.off(cc.Node.EventType.TOUCH_MOVE, this._onTouchMove, this);
        this.node.off(cc.Node.EventType.TOUCH_END, this._onTouchEnded, this);
        this.node.off(cc.Node.EventType.TOUCH_CANCEL, this._onTouchCancel, this);
        this.node.off(cc.Node.EventType.MOUSE_ENTER, this._onMouseMoveIn, this);
        this.node.off(cc.Node.EventType.MOUSE_LEAVE, this._onMouseMoveOut, this);
      },
      _registerTargetEvent: function _registerTargetEvent(target) {
        false;
        target.on(cc.Node.EventType.SCALE_CHANGED, this._onTargetScaleChanged, this);
      },
      _unregisterTargetEvent: function _unregisterTargetEvent(target) {
        false;
        target.off(cc.Node.EventType.SCALE_CHANGED, this._onTargetScaleChanged, this);
      },
      _getTargetSprite: function _getTargetSprite(target) {
        var sprite = null;
        target && (sprite = target.getComponent(cc.Sprite));
        return sprite;
      },
      _applyTarget: function _applyTarget() {
        var target = this._getTarget();
        this._sprite = this._getTargetSprite(target);
        this._originalScale || (this._originalScale = cc.Vec2.ZERO);
        this._originalScale.x = target.scaleX;
        this._originalScale.y = target.scaleY;
        this._registerTargetEvent(target);
      },
      _onTouchBegan: function _onTouchBegan(event) {
        if (!this.interactable || !this.enabledInHierarchy) return;
        this._pressed = true;
        this._updateState();
        event.stopPropagation();
      },
      _onTouchMove: function _onTouchMove(event) {
        if (!this.interactable || !this.enabledInHierarchy || !this._pressed) return;
        var touch = event.touch;
        var hit = this.node._hitTest(touch.getLocation());
        var target = this._getTarget();
        var originalScale = this._originalScale;
        if (this.transition === Transition.SCALE && originalScale) if (hit) {
          this._fromScale.x = originalScale.x;
          this._fromScale.y = originalScale.y;
          this._toScale.x = originalScale.x * this.zoomScale;
          this._toScale.y = originalScale.y * this.zoomScale;
          this._transitionFinished = false;
        } else {
          this.time = 0;
          this._transitionFinished = true;
          target.setScale(originalScale.x, originalScale.y);
        } else {
          var state;
          state = hit ? State.PRESSED : State.NORMAL;
          this._applyTransition(state);
        }
        event.stopPropagation();
      },
      _onTouchEnded: function _onTouchEnded(event) {
        if (!this.interactable || !this.enabledInHierarchy) return;
        if (this._pressed) {
          cc.Component.EventHandler.emitEvents(this.clickEvents, event);
          this.node.emit("click", this);
        }
        this._pressed = false;
        this._updateState();
        event.stopPropagation();
      },
      _onTouchCancel: function _onTouchCancel() {
        if (!this.interactable || !this.enabledInHierarchy) return;
        this._pressed = false;
        this._updateState();
      },
      _onMouseMoveIn: function _onMouseMoveIn() {
        if (this._pressed || !this.interactable || !this.enabledInHierarchy) return;
        if (this.transition === Transition.SPRITE && !this.hoverSprite) return;
        if (!this._hovered) {
          this._hovered = true;
          this._updateState();
        }
      },
      _onMouseMoveOut: function _onMouseMoveOut() {
        if (this._hovered) {
          this._hovered = false;
          this._updateState();
        }
      },
      _updateState: function _updateState() {
        var state = this._getButtonState();
        this._applyTransition(state);
        this._updateDisabledState();
      },
      _getButtonState: function _getButtonState() {
        var state;
        state = this.interactable ? this._pressed ? State.PRESSED : this._hovered ? State.HOVER : State.NORMAL : State.DISABLED;
        return state;
      },
      _updateColorTransitionImmediately: function _updateColorTransitionImmediately(state) {
        var color = this._getStateColor(state);
        this._setTargetColor(color);
        this._fromColor = color.clone();
        this._toColor = color;
      },
      _updateColorTransition: function _updateColorTransition(state) {
        if (false, state === State.DISABLED) this._updateColorTransitionImmediately(state); else {
          var target = this._getTarget();
          var color = this._getStateColor(state);
          this._fromColor = target.color.clone();
          this._toColor = color;
          this.time = 0;
          this._transitionFinished = false;
        }
      },
      _updateSpriteTransition: function _updateSpriteTransition(state) {
        var sprite = this._getStateSprite(state);
        this._sprite && sprite && (this._sprite.spriteFrame = sprite);
      },
      _updateScaleTransition: function _updateScaleTransition(state) {
        state === State.PRESSED ? this._zoomUp() : this._zoomBack();
      },
      _zoomUp: function _zoomUp() {
        if (!this._originalScale) return;
        this._fromScale.x = this._originalScale.x;
        this._fromScale.y = this._originalScale.y;
        this._toScale.x = this._originalScale.x * this.zoomScale;
        this._toScale.y = this._originalScale.y * this.zoomScale;
        this.time = 0;
        this._transitionFinished = false;
      },
      _zoomBack: function _zoomBack() {
        if (!this._originalScale) return;
        var target = this._getTarget();
        this._fromScale.x = target.scaleX;
        this._fromScale.y = target.scaleY;
        this._toScale.x = this._originalScale.x;
        this._toScale.y = this._originalScale.y;
        this.time = 0;
        this._transitionFinished = false;
      },
      _updateTransition: function _updateTransition(oldTransition) {
        oldTransition === Transition.COLOR ? this._updateColorTransitionImmediately(State.NORMAL) : oldTransition === Transition.SPRITE && this._updateSpriteTransition(State.NORMAL);
        this._updateState();
      },
      _applyTransition: function _applyTransition(state) {
        var transition = this.transition;
        transition === Transition.COLOR ? this._updateColorTransition(state) : transition === Transition.SPRITE ? this._updateSpriteTransition(state) : transition === Transition.SCALE && this._updateScaleTransition(state);
      },
      _resizeNodeToTargetNode: false,
      _updateDisabledState: function _updateDisabledState(force) {
        if (!this._sprite) return;
        if (this.enableAutoGrayEffect || force) {
          var useGrayMaterial = false;
          this.transition === Transition.SPRITE && this.disabledSprite || (useGrayMaterial = this.enableAutoGrayEffect && !this.interactable);
          this._switchGrayMaterial(useGrayMaterial, this._sprite);
        }
      }
    });
    cc.Button = module.exports = Button;
  }), {
    "../utils/gray-sprite-state": 208,
    "./CCComponent": 90
  } ],
  89: [ (function(require, module, exports) {
    "use strict";
    var Camera = require("../camera/CCCamera");
    var Component = require("./CCComponent");
    function resetWidgetComponent(canvas) {
      var widget = canvas.node.getComponent(cc.Widget);
      widget || (widget = canvas.node.addComponent(cc.Widget));
      widget.isAlignTop = true;
      widget.isAlignBottom = true;
      widget.isAlignLeft = true;
      widget.isAlignRight = true;
      widget.top = 0;
      widget.bottom = 0;
      widget.left = 0;
      widget.right = 0;
    }
    var Canvas = cc.Class({
      name: "cc.Canvas",
      extends: Component,
      editor: false,
      resetInEditor: false,
      statics: {
        instance: null
      },
      properties: {
        _designResolution: cc.size(960, 640),
        designResolution: {
          get: function get() {
            return cc.size(this._designResolution);
          },
          set: function set(value) {
            this._designResolution.width = value.width;
            this._designResolution.height = value.height;
            this.applySettings();
          },
          tooltip: false
        },
        _fitWidth: false,
        _fitHeight: true,
        fitHeight: {
          get: function get() {
            return this._fitHeight;
          },
          set: function set(value) {
            if (this._fitHeight !== value) {
              this._fitHeight = value;
              this.applySettings();
            }
          },
          tooltip: false
        },
        fitWidth: {
          get: function get() {
            return this._fitWidth;
          },
          set: function set(value) {
            if (this._fitWidth !== value) {
              this._fitWidth = value;
              this.applySettings();
            }
          },
          tooltip: false
        }
      },
      _fitDesignResolution: false,
      __preload: function __preload() {
        var Flags;
        false;
        if (Canvas.instance) return cc.warnID(6700, this.node.name, Canvas.instance.node.name);
        Canvas.instance = this;
        this.applySettings();
        var widget = this.getComponent(cc.Widget);
        !!widget && widget.updateAlignment();
        false;
      },
      start: function start() {
        if (!Camera.main && cc.game.renderType !== cc.game.RENDER_TYPE_CANVAS) {
          var cameraNode = new cc.Node("Main Camera");
          cameraNode.parent = this.node;
          cameraNode.setSiblingIndex(0);
          var camera = cameraNode.addComponent(Camera);
          var ClearFlags = Camera.ClearFlags;
          camera.clearFlags = ClearFlags.COLOR | ClearFlags.DEPTH | ClearFlags.STENCIL;
          camera.depth = -1;
        }
      },
      onDestroy: function onDestroy() {
        false;
        Canvas.instance === this && (Canvas.instance = null);
      },
      applySettings: function applySettings() {
        var ResolutionPolicy = cc.ResolutionPolicy;
        var policy;
        policy = this.fitHeight && this.fitWidth ? ResolutionPolicy.SHOW_ALL : this.fitHeight || this.fitWidth ? this.fitWidth ? ResolutionPolicy.FIXED_WIDTH : ResolutionPolicy.FIXED_HEIGHT : ResolutionPolicy.NO_BORDER;
        var designRes = this._designResolution;
        false;
        cc.view.setDesignResolutionSize(designRes.width, designRes.height, policy);
      }
    });
    cc.Canvas = module.exports = Canvas;
  }), {
    "../camera/CCCamera": 77,
    "./CCComponent": 90
  } ],
  90: [ (function(require, module, exports) {
    "use strict";
    var CCObject = require("../platform/CCObject");
    var js = require("../platform/js");
    var idGenerater = new (require("../platform/id-generater"))("Comp");
    var IsOnEnableCalled = CCObject.Flags.IsOnEnableCalled;
    var IsOnLoadCalled = CCObject.Flags.IsOnLoadCalled;
    var ActionManagerExist = !!cc.ActionManager;
    var Component = cc.Class({
      name: "cc.Component",
      extends: CCObject,
      ctor: function() {
        this._id = idGenerater.getNewId();
        this.__eventTargets = [];
      },
      properties: {
        node: {
          default: null,
          visible: false
        },
        name: {
          get: function get() {
            if (this._name) return this._name;
            var className = cc.js.getClassName(this);
            var trimLeft = className.lastIndexOf(".");
            trimLeft >= 0 && (className = className.slice(trimLeft + 1));
            return this.node.name + "<" + className + ">";
          },
          set: function set(value) {
            this._name = value;
          },
          visible: false
        },
        uuid: {
          get: function get() {
            return this._id;
          },
          visible: false
        },
        __scriptAsset: false,
        _enabled: true,
        enabled: {
          get: function get() {
            return this._enabled;
          },
          set: function set(value) {
            if (this._enabled !== value) {
              this._enabled = value;
              if (this.node._activeInHierarchy) {
                var compScheduler = cc.director._compScheduler;
                value ? compScheduler.enableComp(this) : compScheduler.disableComp(this);
              }
            }
          },
          visible: false,
          animatable: true
        },
        enabledInHierarchy: {
          get: function get() {
            return this._enabled && this.node._activeInHierarchy;
          },
          visible: false
        },
        _isOnLoadCalled: {
          get: function get() {
            return this._objFlags & IsOnLoadCalled;
          }
        }
      },
      update: null,
      lateUpdate: null,
      __preload: null,
      onLoad: null,
      start: null,
      onEnable: null,
      onDisable: null,
      onDestroy: null,
      onFocusInEditor: null,
      onLostFocusInEditor: null,
      resetInEditor: null,
      addComponent: function addComponent(typeOrClassName) {
        return this.node.addComponent(typeOrClassName);
      },
      getComponent: function getComponent(typeOrClassName) {
        return this.node.getComponent(typeOrClassName);
      },
      getComponents: function getComponents(typeOrClassName) {
        return this.node.getComponents(typeOrClassName);
      },
      getComponentInChildren: function getComponentInChildren(typeOrClassName) {
        return this.node.getComponentInChildren(typeOrClassName);
      },
      getComponentsInChildren: function getComponentsInChildren(typeOrClassName) {
        return this.node.getComponentsInChildren(typeOrClassName);
      },
      _getLocalBounds: null,
      onRestore: null,
      destroy: function destroy() {
        var depend;
        false;
        this._super() && this._enabled && this.node._activeInHierarchy && cc.director._compScheduler.disableComp(this);
      },
      _onPreDestroy: function _onPreDestroy() {
        ActionManagerExist && cc.director.getActionManager().removeAllActionsFromTarget(this);
        this.unscheduleAllCallbacks();
        var eventTargets = this.__eventTargets;
        for (var i = eventTargets.length - 1; i >= 0; --i) {
          var target = eventTargets[i];
          target && target.targetOff(this);
        }
        eventTargets.length = 0;
        false;
        cc.director._nodeActivator.destroyComp(this);
        this.node._removeComponent(this);
      },
      _instantiate: function _instantiate(cloned) {
        cloned || (cloned = cc.instantiate._clone(this, this));
        cloned.node = null;
        return cloned;
      },
      schedule: function schedule(callback, interval, repeat, delay) {
        cc.assertID(callback, 1619);
        interval = interval || 0;
        cc.assertID(interval >= 0, 1620);
        repeat = isNaN(repeat) ? cc.macro.REPEAT_FOREVER : repeat;
        delay = delay || 0;
        var scheduler = cc.director.getScheduler();
        var paused = scheduler.isTargetPaused(this);
        scheduler.schedule(callback, this, interval, repeat, delay, paused);
      },
      scheduleOnce: function scheduleOnce(callback, delay) {
        this.schedule(callback, 0, 0, delay);
      },
      unschedule: function unschedule(callback_fn) {
        if (!callback_fn) return;
        cc.director.getScheduler().unschedule(callback_fn, this);
      },
      unscheduleAllCallbacks: function unscheduleAllCallbacks() {
        cc.director.getScheduler().unscheduleAllForTarget(this);
      }
    });
    Component._requireComponent = null;
    Component._executionOrder = 0;
    false;
    false, false;
    js.value(Component, "_registerEditorProps", (function(cls, props) {
      var reqComp = props.requireComponent;
      reqComp && (cls._requireComponent = reqComp);
      var order = props.executionOrder;
      order && "number" === typeof order && (cls._executionOrder = order);
      (false, false) && "disallowMultiple" in props && (cls._disallowMultiple = cls);
      var name;
      var key;
      var val;
      var willExecuteInEditMode;
      false, false;
    }));
    Component.prototype.__scriptUuid = "";
    cc.Component = module.exports = Component;
  }), {
    "../platform/CCObject": 147,
    "../platform/id-generater": 157,
    "../platform/js": 161
  } ],
  91: [ (function(require, module, exports) {
    "use strict";
    cc.Component.EventHandler = cc.Class({
      name: "cc.ClickEvent",
      properties: {
        target: {
          default: null,
          type: cc.Node
        },
        component: "",
        _componentId: "",
        _componentName: {
          get: function get() {
            this._genCompIdIfNeeded();
            return this._compId2Name(this._componentId);
          },
          set: function set(value) {
            this._componentId = this._compName2Id(value);
          }
        },
        handler: {
          default: ""
        },
        customEventData: {
          default: ""
        }
      },
      statics: {
        emitEvents: function emitEvents(events) {
          var args;
          if (arguments.length > 0) {
            args = new Array(arguments.length - 1);
            for (var i = 0, l = args.length; i < l; i++) args[i] = arguments[i + 1];
          }
          for (var _i = 0, _l = events.length; _i < _l; _i++) {
            var event = events[_i];
            if (!(event instanceof cc.Component.EventHandler)) continue;
            event.emit(args);
          }
        }
      },
      emit: function emit(params) {
        var target = this.target;
        if (!cc.isValid(target)) return;
        this._genCompIdIfNeeded();
        var compType = cc.js._getClassById(this._componentId);
        var comp = target.getComponent(compType);
        if (!cc.isValid(comp)) return;
        var handler = comp[this.handler];
        if ("function" !== typeof handler) return;
        if (null != this.customEventData && "" !== this.customEventData) {
          params = params.slice();
          params.push(this.customEventData);
        }
        handler.apply(comp, params);
      },
      _compName2Id: function _compName2Id(compName) {
        var comp = cc.js.getClassByName(compName);
        return cc.js._getClassId(comp);
      },
      _compId2Name: function _compId2Name(compId) {
        var comp = cc.js._getClassById(compId);
        return cc.js.getClassName(comp);
      },
      _genCompIdIfNeeded: function _genCompIdIfNeeded() {
        if (!this._componentId) {
          this._componentName = this.component;
          this.component = "";
        }
      }
    });
  }), {} ],
  92: [ (function(require, module, exports) {
    "use strict";
    var macro = require("../platform/CCMacro");
    var RenderComponent = require("./CCRenderComponent");
    var Material = require("../assets/material/CCMaterial");
    var LabelFrame = require("../renderer/utils/label/label-frame");
    var BlendFunc = require("../utils/blend-func");
    var HorizontalAlign = macro.TextAlignment;
    var VerticalAlign = macro.VerticalTextAlignment;
    var Overflow = cc.Enum({
      NONE: 0,
      CLAMP: 1,
      SHRINK: 2,
      RESIZE_HEIGHT: 3
    });
    var CacheMode = cc.Enum({
      NONE: 0,
      BITMAP: 1,
      CHAR: 2
    });
    var BOLD_FLAG = 1;
    var ITALIC_FLAG = 2;
    var UNDERLINE_FLAG = 4;
    var Label = cc.Class({
      name: "cc.Label",
      extends: RenderComponent,
      mixins: [ BlendFunc ],
      ctor: function ctor() {
        false;
        this._actualFontSize = 0;
        this._assemblerData = null;
        this._frame = null;
        this._ttfTexture = null;
        this._letterTexture = null;
        cc.game.renderType === cc.game.RENDER_TYPE_CANVAS ? this._updateMaterial = this._updateMaterialCanvas : this._updateMaterial = this._updateMaterialWebgl;
      },
      editor: false,
      properties: {
        _useOriginalSize: true,
        _string: {
          default: "",
          formerlySerializedAs: "_N$string"
        },
        string: {
          get: function get() {
            return this._string;
          },
          set: function set(value) {
            var oldValue = this._string;
            this._string = "" + value;
            this.string !== oldValue && this.setVertsDirty();
            this._checkStringEmpty();
          },
          multiline: true,
          tooltip: false
        },
        horizontalAlign: {
          default: HorizontalAlign.LEFT,
          type: HorizontalAlign,
          tooltip: false,
          notify: function notify(oldValue) {
            if (this.horizontalAlign === oldValue) return;
            this.setVertsDirty();
          },
          animatable: false
        },
        verticalAlign: {
          default: VerticalAlign.TOP,
          type: VerticalAlign,
          tooltip: false,
          notify: function notify(oldValue) {
            if (this.verticalAlign === oldValue) return;
            this.setVertsDirty();
          },
          animatable: false
        },
        actualFontSize: {
          displayName: "Actual Font Size",
          animatable: false,
          readonly: true,
          get: function get() {
            return this._actualFontSize;
          },
          tooltip: false
        },
        _fontSize: 40,
        fontSize: {
          get: function get() {
            return this._fontSize;
          },
          set: function set(value) {
            if (this._fontSize === value) return;
            this._fontSize = value;
            this.setVertsDirty();
          },
          range: [ 0, 512 ],
          tooltip: false
        },
        fontFamily: {
          default: "Arial",
          tooltip: false,
          notify: function notify(oldValue) {
            if (this.fontFamily === oldValue) return;
            this.setVertsDirty();
          },
          animatable: false
        },
        _lineHeight: 40,
        lineHeight: {
          get: function get() {
            return this._lineHeight;
          },
          set: function set(value) {
            if (this._lineHeight === value) return;
            this._lineHeight = value;
            this.setVertsDirty();
          },
          tooltip: false
        },
        overflow: {
          default: Overflow.NONE,
          type: Overflow,
          tooltip: false,
          notify: function notify(oldValue) {
            if (this.overflow === oldValue) return;
            this.setVertsDirty();
          },
          animatable: false
        },
        _enableWrapText: true,
        enableWrapText: {
          get: function get() {
            return this._enableWrapText;
          },
          set: function set(value) {
            if (this._enableWrapText === value) return;
            this._enableWrapText = value;
            this.setVertsDirty();
          },
          animatable: false,
          tooltip: false
        },
        _N$file: null,
        font: {
          get: function get() {
            return this._N$file;
          },
          set: function set(value) {
            if (this.font === value) return;
            value || (this._isSystemFontUsed = true);
            false;
            this._N$file = value;
            value && this._isSystemFontUsed && (this._isSystemFontUsed = false);
            if (!this.enabledInHierarchy) return;
            this._forceUpdateRenderData();
          },
          type: cc.Font,
          tooltip: false,
          animatable: false
        },
        _isSystemFontUsed: true,
        useSystemFont: {
          get: function get() {
            return this._isSystemFontUsed;
          },
          set: function set(value) {
            if (this._isSystemFontUsed === value) return;
            this._isSystemFontUsed = !!value;
            false;
            if (value) {
              this.font = null;
              if (!this.enabledInHierarchy) return;
              this._forceUpdateRenderData();
            }
            this.markForValidate();
          },
          animatable: false,
          tooltip: false
        },
        _bmFontOriginalSize: {
          displayName: "BMFont Original Size",
          get: function get() {
            return this._N$file instanceof cc.BitmapFont ? this._N$file.fontSize : -1;
          },
          visible: true,
          animatable: false
        },
        _spacingX: 0,
        spacingX: {
          get: function get() {
            return this._spacingX;
          },
          set: function set(value) {
            this._spacingX = value;
            this.setVertsDirty();
          },
          tooltip: false
        },
        _batchAsBitmap: false,
        cacheMode: {
          default: CacheMode.NONE,
          type: CacheMode,
          tooltip: false,
          notify: function notify(oldValue) {
            if (this.cacheMode === oldValue) return;
            oldValue !== CacheMode.BITMAP || this.font instanceof cc.BitmapFont || this._frame && this._frame._resetDynamicAtlasFrame();
            oldValue === CacheMode.CHAR && (this._ttfTexture = null);
            if (!this.enabledInHierarchy) return;
            this._forceUpdateRenderData();
          },
          animatable: false
        },
        _styleFlags: 0,
        enableBold: {
          get: function get() {
            return !!(this._styleFlags & BOLD_FLAG);
          },
          set: function set(value) {
            value ? this._styleFlags |= BOLD_FLAG : this._styleFlags &= ~BOLD_FLAG;
            this.setVertsDirty();
          },
          animatable: false,
          tooltip: false
        },
        enableItalic: {
          get: function get() {
            return !!(this._styleFlags & ITALIC_FLAG);
          },
          set: function set(value) {
            value ? this._styleFlags |= ITALIC_FLAG : this._styleFlags &= ~ITALIC_FLAG;
            this.setVertsDirty();
          },
          animatable: false,
          tooltip: false
        },
        enableUnderline: {
          get: function get() {
            return !!(this._styleFlags & UNDERLINE_FLAG);
          },
          set: function set(value) {
            value ? this._styleFlags |= UNDERLINE_FLAG : this._styleFlags &= ~UNDERLINE_FLAG;
            this.setVertsDirty();
          },
          animatable: false,
          tooltip: false
        },
        _underlineHeight: 0,
        underlineHeight: {
          get: function get() {
            return this._underlineHeight;
          },
          set: function set(value) {
            if (this._underlineHeight === value) return;
            this._underlineHeight = value;
            this.setVertsDirty();
          },
          tooltip: false
        }
      },
      statics: {
        HorizontalAlign: HorizontalAlign,
        VerticalAlign: VerticalAlign,
        Overflow: Overflow,
        CacheMode: CacheMode,
        _shareAtlas: null,
        clearCharCache: function clearCharCache() {
          Label._shareAtlas && Label._shareAtlas.clearAllCache();
        }
      },
      onLoad: function onLoad() {
        if (this._batchAsBitmap && this.cacheMode === CacheMode.NONE) {
          this.cacheMode = CacheMode.BITMAP;
          this._batchAsBitmap = false;
        }
        cc.game.renderType === cc.game.RENDER_TYPE_CANVAS && (this.cacheMode = CacheMode.NONE);
      },
      onEnable: function onEnable() {
        this._super();
        this.node.on(cc.Node.EventType.SIZE_CHANGED, this._nodeSizeChanged, this);
        this.node.on(cc.Node.EventType.ANCHOR_CHANGED, this.setVertsDirty, this);
        this._forceUpdateRenderData();
      },
      onDisable: function onDisable() {
        this._super();
        this.node.off(cc.Node.EventType.SIZE_CHANGED, this._nodeSizeChanged, this);
        this.node.off(cc.Node.EventType.ANCHOR_CHANGED, this.setVertsDirty, this);
      },
      onDestroy: function onDestroy() {
        this._assembler && this._assembler._resetAssemblerData && this._assembler._resetAssemblerData(this._assemblerData);
        this._assemblerData = null;
        this._letterTexture = null;
        if (this._ttfTexture) {
          this._ttfTexture.destroy();
          this._ttfTexture = null;
        }
        this._super();
      },
      _nodeSizeChanged: function _nodeSizeChanged() {
        (false, this.overflow !== Overflow.NONE) && this.setVertsDirty();
      },
      setVertsDirty: function setVertsDirty() {
        false;
        this._super();
      },
      _updateColor: function _updateColor() {
        this.font instanceof cc.BitmapFont || this._srcBlendFactor === cc.macro.BlendFactor.SRC_ALPHA && this.node._renderFlag & cc.RenderFlow.FLAG_OPACITY || this.setVertsDirty();
        RenderComponent.prototype._updateColor.call(this);
      },
      _validateRender: function _validateRender() {
        if (!this.string) {
          this.disableRender();
          return;
        }
        if (this._materials[0]) {
          var font = this.font;
          if (!(font instanceof cc.BitmapFont)) return;
          var spriteFrame = font.spriteFrame;
          if (spriteFrame && spriteFrame.textureLoaded() && font._fntConfig) return;
        }
        this.disableRender();
      },
      _resetAssembler: function _resetAssembler() {
        this._frame = null;
        RenderComponent.prototype._resetAssembler.call(this);
      },
      _checkStringEmpty: function _checkStringEmpty() {
        this.markForRender(!!this.string);
      },
      _on3DNodeChanged: function _on3DNodeChanged() {
        this._resetAssembler();
        this._applyFontTexture();
      },
      _onBMFontTextureLoaded: function _onBMFontTextureLoaded() {
        this._frame._texture = this.font.spriteFrame._texture;
        this.markForRender(true);
        this._updateMaterial();
        this._assembler && this._assembler.updateRenderData(this);
      },
      _onBlendChanged: function _onBlendChanged() {
        if (!this.useSystemFont || !this.enabledInHierarchy) return;
        this._forceUpdateRenderData();
      },
      _applyFontTexture: function _applyFontTexture() {
        var font = this.font;
        if (font instanceof cc.BitmapFont) {
          var spriteFrame = font.spriteFrame;
          this._frame = spriteFrame;
          spriteFrame && spriteFrame.onTextureLoaded(this._onBMFontTextureLoaded, this);
        } else {
          if (!this._nativeTTF()) {
            this._frame || (this._frame = new LabelFrame());
            if (this.cacheMode === CacheMode.CHAR) {
              this._letterTexture = this._assembler._getAssemblerData();
              this._frame._refreshTexture(this._letterTexture);
            } else if (!this._ttfTexture) {
              this._ttfTexture = new cc.Texture2D();
              this._assemblerData = this._assembler._getAssemblerData();
              this._ttfTexture.initWithElement(this._assemblerData.canvas);
            }
            if (this.cacheMode !== CacheMode.CHAR) {
              this._frame._resetDynamicAtlasFrame();
              this._frame._refreshTexture(this._ttfTexture);
              this._srcBlendFactor === cc.macro.BlendFactor.ONE && true && this._ttfTexture.setPremultiplyAlpha(true);
            }
            this._updateMaterial();
          }
          this._assembler && this._assembler.updateRenderData(this);
        }
        this.markForValidate();
      },
      _updateMaterialCanvas: function _updateMaterialCanvas() {
        if (!this._frame) return;
        this._frame._texture._nativeUrl = this.uuid + "_texture";
      },
      _updateMaterialWebgl: function _updateMaterialWebgl() {
        var material = this.getMaterial(0);
        if (this._nativeTTF()) {
          material && this._assembler._updateTTFMaterial(this);
          return;
        }
        if (!this._frame) return;
        material && material.setProperty("texture", this._frame._texture);
        BlendFunc.prototype._updateMaterial.call(this);
      },
      _forceUseCanvas: false,
      _nativeTTF: function _nativeTTF() {
        return !this._forceUseCanvas && !!this._assembler && !!this._assembler._updateTTFMaterial;
      },
      _forceUpdateRenderData: function _forceUpdateRenderData() {
        this.setVertsDirty();
        this._resetAssembler();
        this._applyFontTexture();
      },
      _enableBold: function _enableBold(enabled) {
        true;
        cc.warn("`label._enableBold` is deprecated, use `label.enableBold = true` instead please");
        this.enableBold = !!enabled;
      },
      _enableItalics: function _enableItalics(enabled) {
        true;
        cc.warn("`label._enableItalics` is deprecated, use `label.enableItalics = true` instead please");
        this.enableItalic = !!enabled;
      },
      _enableUnderline: function _enableUnderline(enabled) {
        true;
        cc.warn("`label._enableUnderline` is deprecated, use `label.enableUnderline = true` instead please");
        this.enableUnderline = !!enabled;
      }
    });
    cc.Label = module.exports = Label;
  }), {
    "../assets/material/CCMaterial": 67,
    "../platform/CCMacro": 146,
    "../renderer/utils/label/label-frame": 174,
    "../utils/blend-func": 205,
    "./CCRenderComponent": 94
  } ],
  93: [ (function(require, module, exports) {
    "use strict";
    var NodeEvent = require("../CCNode").EventType;
    var Type = cc.Enum({
      NONE: 0,
      HORIZONTAL: 1,
      VERTICAL: 2,
      GRID: 3
    });
    var ResizeMode = cc.Enum({
      NONE: 0,
      CONTAINER: 1,
      CHILDREN: 2
    });
    var AxisDirection = cc.Enum({
      HORIZONTAL: 0,
      VERTICAL: 1
    });
    var VerticalDirection = cc.Enum({
      BOTTOM_TO_TOP: 0,
      TOP_TO_BOTTOM: 1
    });
    var HorizontalDirection = cc.Enum({
      LEFT_TO_RIGHT: 0,
      RIGHT_TO_LEFT: 1
    });
    var Layout = cc.Class({
      name: "cc.Layout",
      extends: require("./CCComponent"),
      editor: false,
      properties: {
        _layoutSize: cc.size(300, 200),
        _layoutDirty: {
          default: true,
          serializable: false
        },
        _resize: ResizeMode.NONE,
        _N$layoutType: Type.NONE,
        type: {
          type: Type,
          get: function get() {
            return this._N$layoutType;
          },
          set: function set(value) {
            this._N$layoutType = value;
            var reLayouted;
            false;
            this._doLayoutDirty();
          },
          tooltip: false,
          animatable: false
        },
        resizeMode: {
          type: ResizeMode,
          tooltip: false,
          animatable: false,
          get: function get() {
            return this._resize;
          },
          set: function set(value) {
            if (this.type === Type.NONE && value === ResizeMode.CHILDREN) return;
            this._resize = value;
            var reLayouted;
            false;
            this._doLayoutDirty();
          }
        },
        cellSize: {
          default: cc.size(40, 40),
          tooltip: false,
          type: cc.Size,
          notify: function notify() {
            this._doLayoutDirty();
          }
        },
        startAxis: {
          default: AxisDirection.HORIZONTAL,
          tooltip: false,
          type: AxisDirection,
          notify: function notify() {
            var reLayouted;
            false;
            this._doLayoutDirty();
          },
          animatable: false
        },
        paddingLeft: {
          default: 0,
          tooltip: false,
          notify: function notify() {
            this._doLayoutDirty();
          }
        },
        paddingRight: {
          default: 0,
          tooltip: false,
          notify: function notify() {
            this._doLayoutDirty();
          }
        },
        paddingTop: {
          default: 0,
          tooltip: false,
          notify: function notify() {
            this._doLayoutDirty();
          }
        },
        paddingBottom: {
          default: 0,
          tooltip: false,
          notify: function notify() {
            this._doLayoutDirty();
          }
        },
        spacingX: {
          default: 0,
          notify: function notify() {
            this._doLayoutDirty();
          },
          tooltip: false
        },
        spacingY: {
          default: 0,
          notify: function notify() {
            this._doLayoutDirty();
          },
          tooltip: false
        },
        verticalDirection: {
          default: VerticalDirection.TOP_TO_BOTTOM,
          type: VerticalDirection,
          notify: function notify() {
            this._doLayoutDirty();
          },
          tooltip: false,
          animatable: false
        },
        horizontalDirection: {
          default: HorizontalDirection.LEFT_TO_RIGHT,
          type: HorizontalDirection,
          notify: function notify() {
            this._doLayoutDirty();
          },
          tooltip: false,
          animatable: false
        },
        affectedByScale: {
          default: false,
          notify: function notify() {
            this._doLayoutDirty();
          },
          animatable: false,
          tooltip: false
        }
      },
      statics: {
        Type: Type,
        VerticalDirection: VerticalDirection,
        HorizontalDirection: HorizontalDirection,
        ResizeMode: ResizeMode,
        AxisDirection: AxisDirection
      },
      onEnable: function onEnable() {
        this._addEventListeners();
        this.node.getContentSize().equals(cc.size(0, 0)) && this.node.setContentSize(this._layoutSize);
        this._doLayoutDirty();
      },
      onDisable: function onDisable() {
        this._removeEventListeners();
      },
      _doLayoutDirty: function _doLayoutDirty() {
        this._layoutDirty = true;
      },
      _doScaleDirty: function _doScaleDirty() {
        this._layoutDirty = this._layoutDirty || this.affectedByScale;
      },
      _addEventListeners: function _addEventListeners() {
        cc.director.on(cc.Director.EVENT_AFTER_UPDATE, this.updateLayout, this);
        this.node.on(NodeEvent.SIZE_CHANGED, this._resized, this);
        this.node.on(NodeEvent.ANCHOR_CHANGED, this._doLayoutDirty, this);
        this.node.on(NodeEvent.CHILD_ADDED, this._childAdded, this);
        this.node.on(NodeEvent.CHILD_REMOVED, this._childRemoved, this);
        this.node.on(NodeEvent.CHILD_REORDER, this._doLayoutDirty, this);
        this._addChildrenEventListeners();
      },
      _removeEventListeners: function _removeEventListeners() {
        cc.director.off(cc.Director.EVENT_AFTER_UPDATE, this.updateLayout, this);
        this.node.off(NodeEvent.SIZE_CHANGED, this._resized, this);
        this.node.off(NodeEvent.ANCHOR_CHANGED, this._doLayoutDirty, this);
        this.node.off(NodeEvent.CHILD_ADDED, this._childAdded, this);
        this.node.off(NodeEvent.CHILD_REMOVED, this._childRemoved, this);
        this.node.off(NodeEvent.CHILD_REORDER, this._doLayoutDirty, this);
        this._removeChildrenEventListeners();
      },
      _addChildrenEventListeners: function _addChildrenEventListeners() {
        var children = this.node.children;
        for (var i = 0; i < children.length; ++i) {
          var child = children[i];
          child.on(NodeEvent.SCALE_CHANGED, this._doScaleDirty, this);
          child.on(NodeEvent.SIZE_CHANGED, this._doLayoutDirty, this);
          child.on(NodeEvent.POSITION_CHANGED, this._doLayoutDirty, this);
          child.on(NodeEvent.ANCHOR_CHANGED, this._doLayoutDirty, this);
          child.on("active-in-hierarchy-changed", this._doLayoutDirty, this);
        }
      },
      _removeChildrenEventListeners: function _removeChildrenEventListeners() {
        var children = this.node.children;
        for (var i = 0; i < children.length; ++i) {
          var child = children[i];
          child.off(NodeEvent.SCALE_CHANGED, this._doScaleDirty, this);
          child.off(NodeEvent.SIZE_CHANGED, this._doLayoutDirty, this);
          child.off(NodeEvent.POSITION_CHANGED, this._doLayoutDirty, this);
          child.off(NodeEvent.ANCHOR_CHANGED, this._doLayoutDirty, this);
          child.off("active-in-hierarchy-changed", this._doLayoutDirty, this);
        }
      },
      _childAdded: function _childAdded(child) {
        child.on(NodeEvent.SCALE_CHANGED, this._doScaleDirty, this);
        child.on(NodeEvent.SIZE_CHANGED, this._doLayoutDirty, this);
        child.on(NodeEvent.POSITION_CHANGED, this._doLayoutDirty, this);
        child.on(NodeEvent.ANCHOR_CHANGED, this._doLayoutDirty, this);
        child.on("active-in-hierarchy-changed", this._doLayoutDirty, this);
        this._doLayoutDirty();
      },
      _childRemoved: function _childRemoved(child) {
        child.off(NodeEvent.SCALE_CHANGED, this._doScaleDirty, this);
        child.off(NodeEvent.SIZE_CHANGED, this._doLayoutDirty, this);
        child.off(NodeEvent.POSITION_CHANGED, this._doLayoutDirty, this);
        child.off(NodeEvent.ANCHOR_CHANGED, this._doLayoutDirty, this);
        child.off("active-in-hierarchy-changed", this._doLayoutDirty, this);
        this._doLayoutDirty();
      },
      _resized: function _resized() {
        this._layoutSize = this.node.getContentSize();
        this._doLayoutDirty();
      },
      _doLayoutHorizontally: function _doLayoutHorizontally(baseWidth, rowBreak, fnPositionY, applyChildren) {
        var layoutAnchor = this.node.getAnchorPoint();
        var children = this.node.children;
        var sign = 1;
        var paddingX = this.paddingLeft;
        var leftBoundaryOfLayout = -layoutAnchor.x * baseWidth;
        if (this.horizontalDirection === HorizontalDirection.RIGHT_TO_LEFT) {
          sign = -1;
          leftBoundaryOfLayout = (1 - layoutAnchor.x) * baseWidth;
          paddingX = this.paddingRight;
        }
        var nextX = leftBoundaryOfLayout + sign * paddingX - sign * this.spacingX;
        var rowMaxHeight = 0;
        var tempMaxHeight = 0;
        var secondMaxHeight = 0;
        var row = 0;
        var containerResizeBoundary = 0;
        var maxHeightChildAnchorY = 0;
        var activeChildCount = 0;
        for (var i = 0; i < children.length; ++i) {
          var child = children[i];
          child.activeInHierarchy && activeChildCount++;
        }
        var newChildWidth = this.cellSize.width;
        this.type !== Type.GRID && this.resizeMode === ResizeMode.CHILDREN && (newChildWidth = (baseWidth - (this.paddingLeft + this.paddingRight) - (activeChildCount - 1) * this.spacingX) / activeChildCount);
        for (var i = 0; i < children.length; ++i) {
          var child = children[i];
          var childScaleX = this._getUsedScaleValue(child.scaleX);
          var childScaleY = this._getUsedScaleValue(child.scaleY);
          if (!child.activeInHierarchy) continue;
          if (this._resize === ResizeMode.CHILDREN) {
            child.width = newChildWidth / childScaleX;
            this.type === Type.GRID && (child.height = this.cellSize.height / childScaleY);
          }
          var anchorX = child.anchorX;
          var childBoundingBoxWidth = child.width * childScaleX;
          var childBoundingBoxHeight = child.height * childScaleY;
          secondMaxHeight > tempMaxHeight && (tempMaxHeight = secondMaxHeight);
          if (childBoundingBoxHeight >= tempMaxHeight) {
            secondMaxHeight = tempMaxHeight;
            tempMaxHeight = childBoundingBoxHeight;
            maxHeightChildAnchorY = child.getAnchorPoint().y;
          }
          this.horizontalDirection === HorizontalDirection.RIGHT_TO_LEFT && (anchorX = 1 - child.anchorX);
          nextX = nextX + sign * anchorX * childBoundingBoxWidth + sign * this.spacingX;
          var rightBoundaryOfChild = sign * (1 - anchorX) * childBoundingBoxWidth;
          if (rowBreak) {
            var rowBreakBoundary = nextX + rightBoundaryOfChild + sign * (sign > 0 ? this.paddingRight : this.paddingLeft);
            var leftToRightRowBreak = this.horizontalDirection === HorizontalDirection.LEFT_TO_RIGHT && rowBreakBoundary > (1 - layoutAnchor.x) * baseWidth;
            var rightToLeftRowBreak = this.horizontalDirection === HorizontalDirection.RIGHT_TO_LEFT && rowBreakBoundary < -layoutAnchor.x * baseWidth;
            if (leftToRightRowBreak || rightToLeftRowBreak) {
              if (childBoundingBoxHeight >= tempMaxHeight) {
                0 === secondMaxHeight && (secondMaxHeight = tempMaxHeight);
                rowMaxHeight += secondMaxHeight;
                secondMaxHeight = tempMaxHeight;
              } else {
                rowMaxHeight += tempMaxHeight;
                secondMaxHeight = childBoundingBoxHeight;
                tempMaxHeight = 0;
              }
              nextX = leftBoundaryOfLayout + sign * (paddingX + anchorX * childBoundingBoxWidth);
              row++;
            }
          }
          var finalPositionY = fnPositionY(child, rowMaxHeight, row);
          baseWidth >= childBoundingBoxWidth + this.paddingLeft + this.paddingRight && applyChildren && child.setPosition(cc.v2(nextX, finalPositionY));
          var signX = 1;
          var tempFinalPositionY;
          var topMarign = 0 === tempMaxHeight ? childBoundingBoxHeight : tempMaxHeight;
          if (this.verticalDirection === VerticalDirection.TOP_TO_BOTTOM) {
            containerResizeBoundary = containerResizeBoundary || this.node._contentSize.height;
            signX = -1;
            tempFinalPositionY = finalPositionY + signX * (topMarign * maxHeightChildAnchorY + this.paddingBottom);
            tempFinalPositionY < containerResizeBoundary && (containerResizeBoundary = tempFinalPositionY);
          } else {
            containerResizeBoundary = containerResizeBoundary || -this.node._contentSize.height;
            tempFinalPositionY = finalPositionY + signX * (topMarign * maxHeightChildAnchorY + this.paddingTop);
            tempFinalPositionY > containerResizeBoundary && (containerResizeBoundary = tempFinalPositionY);
          }
          nextX += rightBoundaryOfChild;
        }
        return containerResizeBoundary;
      },
      _getVerticalBaseHeight: function _getVerticalBaseHeight(children) {
        var newHeight = 0;
        var activeChildCount = 0;
        if (this.resizeMode === ResizeMode.CONTAINER) {
          for (var i = 0; i < children.length; ++i) {
            var child = children[i];
            if (child.activeInHierarchy) {
              activeChildCount++;
              newHeight += child.height * this._getUsedScaleValue(child.scaleY);
            }
          }
          newHeight += (activeChildCount - 1) * this.spacingY + this.paddingBottom + this.paddingTop;
        } else newHeight = this.node.getContentSize().height;
        return newHeight;
      },
      _doLayoutVertically: function _doLayoutVertically(baseHeight, columnBreak, fnPositionX, applyChildren) {
        var layoutAnchor = this.node.getAnchorPoint();
        var children = this.node.children;
        var sign = 1;
        var paddingY = this.paddingBottom;
        var bottomBoundaryOfLayout = -layoutAnchor.y * baseHeight;
        if (this.verticalDirection === VerticalDirection.TOP_TO_BOTTOM) {
          sign = -1;
          bottomBoundaryOfLayout = (1 - layoutAnchor.y) * baseHeight;
          paddingY = this.paddingTop;
        }
        var nextY = bottomBoundaryOfLayout + sign * paddingY - sign * this.spacingY;
        var columnMaxWidth = 0;
        var tempMaxWidth = 0;
        var secondMaxWidth = 0;
        var column = 0;
        var containerResizeBoundary = 0;
        var maxWidthChildAnchorX = 0;
        var activeChildCount = 0;
        for (var i = 0; i < children.length; ++i) {
          var child = children[i];
          child.activeInHierarchy && activeChildCount++;
        }
        var newChildHeight = this.cellSize.height;
        this.type !== Type.GRID && this.resizeMode === ResizeMode.CHILDREN && (newChildHeight = (baseHeight - (this.paddingTop + this.paddingBottom) - (activeChildCount - 1) * this.spacingY) / activeChildCount);
        for (var i = 0; i < children.length; ++i) {
          var child = children[i];
          var childScaleX = this._getUsedScaleValue(child.scaleX);
          var childScaleY = this._getUsedScaleValue(child.scaleY);
          if (!child.activeInHierarchy) continue;
          if (this.resizeMode === ResizeMode.CHILDREN) {
            child.height = newChildHeight / childScaleY;
            this.type === Type.GRID && (child.width = this.cellSize.width / childScaleX);
          }
          var anchorY = child.anchorY;
          var childBoundingBoxWidth = child.width * childScaleX;
          var childBoundingBoxHeight = child.height * childScaleY;
          secondMaxWidth > tempMaxWidth && (tempMaxWidth = secondMaxWidth);
          if (childBoundingBoxWidth >= tempMaxWidth) {
            secondMaxWidth = tempMaxWidth;
            tempMaxWidth = childBoundingBoxWidth;
            maxWidthChildAnchorX = child.getAnchorPoint().x;
          }
          this.verticalDirection === VerticalDirection.TOP_TO_BOTTOM && (anchorY = 1 - child.anchorY);
          nextY = nextY + sign * anchorY * childBoundingBoxHeight + sign * this.spacingY;
          var topBoundaryOfChild = sign * (1 - anchorY) * childBoundingBoxHeight;
          if (columnBreak) {
            var columnBreakBoundary = nextY + topBoundaryOfChild + sign * (sign > 0 ? this.paddingTop : this.paddingBottom);
            var bottomToTopColumnBreak = this.verticalDirection === VerticalDirection.BOTTOM_TO_TOP && columnBreakBoundary > (1 - layoutAnchor.y) * baseHeight;
            var topToBottomColumnBreak = this.verticalDirection === VerticalDirection.TOP_TO_BOTTOM && columnBreakBoundary < -layoutAnchor.y * baseHeight;
            if (bottomToTopColumnBreak || topToBottomColumnBreak) {
              if (childBoundingBoxWidth >= tempMaxWidth) {
                0 === secondMaxWidth && (secondMaxWidth = tempMaxWidth);
                columnMaxWidth += secondMaxWidth;
                secondMaxWidth = tempMaxWidth;
              } else {
                columnMaxWidth += tempMaxWidth;
                secondMaxWidth = childBoundingBoxWidth;
                tempMaxWidth = 0;
              }
              nextY = bottomBoundaryOfLayout + sign * (paddingY + anchorY * childBoundingBoxHeight);
              column++;
            }
          }
          var finalPositionX = fnPositionX(child, columnMaxWidth, column);
          baseHeight >= childBoundingBoxHeight + (this.paddingTop + this.paddingBottom) && applyChildren && child.setPosition(cc.v2(finalPositionX, nextY));
          var signX = 1;
          var tempFinalPositionX;
          var rightMarign = 0 === tempMaxWidth ? childBoundingBoxWidth : tempMaxWidth;
          if (this.horizontalDirection === HorizontalDirection.RIGHT_TO_LEFT) {
            signX = -1;
            containerResizeBoundary = containerResizeBoundary || this.node._contentSize.width;
            tempFinalPositionX = finalPositionX + signX * (rightMarign * maxWidthChildAnchorX + this.paddingLeft);
            tempFinalPositionX < containerResizeBoundary && (containerResizeBoundary = tempFinalPositionX);
          } else {
            containerResizeBoundary = containerResizeBoundary || -this.node._contentSize.width;
            tempFinalPositionX = finalPositionX + signX * (rightMarign * maxWidthChildAnchorX + this.paddingRight);
            tempFinalPositionX > containerResizeBoundary && (containerResizeBoundary = tempFinalPositionX);
          }
          nextY += topBoundaryOfChild;
        }
        return containerResizeBoundary;
      },
      _doLayoutBasic: function _doLayoutBasic() {
        var children = this.node.children;
        var allChildrenBoundingBox = null;
        for (var i = 0; i < children.length; ++i) {
          var child = children[i];
          child.activeInHierarchy && (allChildrenBoundingBox ? allChildrenBoundingBox.union(allChildrenBoundingBox, child.getBoundingBoxToWorld()) : allChildrenBoundingBox = child.getBoundingBoxToWorld());
        }
        if (allChildrenBoundingBox) {
          var leftBottomSpace = this.node.convertToNodeSpaceAR(cc.v2(allChildrenBoundingBox.x, allChildrenBoundingBox.y));
          leftBottomSpace = cc.v2(leftBottomSpace.x - this.paddingLeft, leftBottomSpace.y - this.paddingBottom);
          var rightTopSpace = this.node.convertToNodeSpaceAR(cc.v2(allChildrenBoundingBox.xMax, allChildrenBoundingBox.yMax));
          rightTopSpace = cc.v2(rightTopSpace.x + this.paddingRight, rightTopSpace.y + this.paddingTop);
          var newSize = rightTopSpace.sub(leftBottomSpace);
          newSize = cc.size(parseFloat(newSize.x.toFixed(2)), parseFloat(newSize.y.toFixed(2)));
          if (0 !== newSize.width) {
            var newAnchorX = -leftBottomSpace.x / newSize.width;
            this.node.anchorX = parseFloat(newAnchorX.toFixed(2));
          }
          if (0 !== newSize.height) {
            var newAnchorY = -leftBottomSpace.y / newSize.height;
            this.node.anchorY = parseFloat(newAnchorY.toFixed(2));
          }
          this.node.setContentSize(newSize);
        }
      },
      _doLayoutGridAxisHorizontal: function _doLayoutGridAxisHorizontal(layoutAnchor, layoutSize) {
        var baseWidth = layoutSize.width;
        var sign = 1;
        var bottomBoundaryOfLayout = -layoutAnchor.y * layoutSize.height;
        var paddingY = this.paddingBottom;
        if (this.verticalDirection === VerticalDirection.TOP_TO_BOTTOM) {
          sign = -1;
          bottomBoundaryOfLayout = (1 - layoutAnchor.y) * layoutSize.height;
          paddingY = this.paddingTop;
        }
        var fnPositionY = function(child, topOffset, row) {
          return bottomBoundaryOfLayout + sign * (topOffset + child.anchorY * child.height * this._getUsedScaleValue(child.scaleY) + paddingY + row * this.spacingY);
        }.bind(this);
        var newHeight = 0;
        if (this.resizeMode === ResizeMode.CONTAINER) {
          var boundary = this._doLayoutHorizontally(baseWidth, true, fnPositionY, false);
          newHeight = bottomBoundaryOfLayout - boundary;
          newHeight < 0 && (newHeight *= -1);
          bottomBoundaryOfLayout = -layoutAnchor.y * newHeight;
          if (this.verticalDirection === VerticalDirection.TOP_TO_BOTTOM) {
            sign = -1;
            bottomBoundaryOfLayout = (1 - layoutAnchor.y) * newHeight;
          }
        }
        this._doLayoutHorizontally(baseWidth, true, fnPositionY, true);
        this.resizeMode === ResizeMode.CONTAINER && this.node.setContentSize(baseWidth, newHeight);
      },
      _doLayoutGridAxisVertical: function _doLayoutGridAxisVertical(layoutAnchor, layoutSize) {
        var baseHeight = layoutSize.height;
        var sign = 1;
        var leftBoundaryOfLayout = -layoutAnchor.x * layoutSize.width;
        var paddingX = this.paddingLeft;
        if (this.horizontalDirection === HorizontalDirection.RIGHT_TO_LEFT) {
          sign = -1;
          leftBoundaryOfLayout = (1 - layoutAnchor.x) * layoutSize.width;
          paddingX = this.paddingRight;
        }
        var fnPositionX = function(child, leftOffset, column) {
          return leftBoundaryOfLayout + sign * (leftOffset + child.anchorX * child.width * this._getUsedScaleValue(child.scaleX) + paddingX + column * this.spacingX);
        }.bind(this);
        var newWidth = 0;
        if (this.resizeMode === ResizeMode.CONTAINER) {
          var boundary = this._doLayoutVertically(baseHeight, true, fnPositionX, false);
          newWidth = leftBoundaryOfLayout - boundary;
          newWidth < 0 && (newWidth *= -1);
          leftBoundaryOfLayout = -layoutAnchor.x * newWidth;
          if (this.horizontalDirection === HorizontalDirection.RIGHT_TO_LEFT) {
            sign = -1;
            leftBoundaryOfLayout = (1 - layoutAnchor.x) * newWidth;
          }
        }
        this._doLayoutVertically(baseHeight, true, fnPositionX, true);
        this.resizeMode === ResizeMode.CONTAINER && this.node.setContentSize(newWidth, baseHeight);
      },
      _doLayoutGrid: function _doLayoutGrid() {
        var layoutAnchor = this.node.getAnchorPoint();
        var layoutSize = this.node.getContentSize();
        this.startAxis === AxisDirection.HORIZONTAL ? this._doLayoutGridAxisHorizontal(layoutAnchor, layoutSize) : this.startAxis === AxisDirection.VERTICAL && this._doLayoutGridAxisVertical(layoutAnchor, layoutSize);
      },
      _getHorizontalBaseWidth: function _getHorizontalBaseWidth(children) {
        var newWidth = 0;
        var activeChildCount = 0;
        if (this.resizeMode === ResizeMode.CONTAINER) {
          for (var i = 0; i < children.length; ++i) {
            var child = children[i];
            if (child.activeInHierarchy) {
              activeChildCount++;
              newWidth += child.width * this._getUsedScaleValue(child.scaleX);
            }
          }
          newWidth += (activeChildCount - 1) * this.spacingX + this.paddingLeft + this.paddingRight;
        } else newWidth = this.node.getContentSize().width;
        return newWidth;
      },
      _doLayout: function _doLayout() {
        if (this.type === Type.HORIZONTAL) {
          var newWidth = this._getHorizontalBaseWidth(this.node.children);
          var fnPositionY = function fnPositionY(child) {
            return child.y;
          };
          this._doLayoutHorizontally(newWidth, false, fnPositionY, true);
          this.node.width = newWidth;
        } else if (this.type === Type.VERTICAL) {
          var newHeight = this._getVerticalBaseHeight(this.node.children);
          var fnPositionX = function fnPositionX(child) {
            return child.x;
          };
          this._doLayoutVertically(newHeight, false, fnPositionX, true);
          this.node.height = newHeight;
        } else this.type === Type.NONE ? this.resizeMode === ResizeMode.CONTAINER && this._doLayoutBasic() : this.type === Type.GRID && this._doLayoutGrid();
      },
      _getUsedScaleValue: function _getUsedScaleValue(value) {
        return this.affectedByScale ? Math.abs(value) : 1;
      },
      updateLayout: function updateLayout() {
        if (this._layoutDirty && this.node.children.length > 0) {
          this._doLayout();
          this._layoutDirty = false;
        }
      }
    });
    cc.Layout = module.exports = Layout;
  }), {
    "../CCNode": 16,
    "./CCComponent": 90
  } ],
  94: [ (function(require, module, exports) {
    "use strict";
    var _assembler = _interopRequireDefault(require("../renderer/assembler"));
    var _materialVariant = _interopRequireDefault(require("../assets/material/material-variant"));
    var _valueTypes = require("../value-types");
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }
    var Component = require("./CCComponent");
    var RenderFlow = require("../renderer/render-flow");
    var Material = require("../assets/material/CCMaterial");
    var _temp_color = new _valueTypes.Color();
    var RenderComponent = cc.Class({
      name: "RenderComponent",
      extends: Component,
      editor: false,
      properties: {
        _materials: {
          default: [],
          type: Material
        },
        materials: {
          get: function get() {
            return this._materials;
          },
          set: function set(val) {
            this._materials = val;
            this._activateMaterial();
          },
          type: [ Material ],
          displayName: "Materials",
          animatable: false
        }
      },
      ctor: function ctor() {
        this._vertsDirty = true;
        this._assembler = null;
      },
      _resetAssembler: function _resetAssembler() {
        _assembler["default"].init(this);
        this._updateColor();
        this.setVertsDirty();
      },
      __preload: function __preload() {
        this._resetAssembler();
        this._activateMaterial();
      },
      onEnable: function onEnable() {
        this.node._renderComponent && (this.node._renderComponent.enabled = false);
        this.node._renderComponent = this;
        this.node._renderFlag |= RenderFlow.FLAG_OPACITY_COLOR;
        this.setVertsDirty();
      },
      onDisable: function onDisable() {
        this.node._renderComponent = null;
        this.disableRender();
      },
      onDestroy: function onDestroy() {
        var materials = this._materials;
        for (var i = 0; i < materials.length; i++) cc.pool.material.put(materials[i]);
        materials.length = 0;
        cc.pool.assembler.put(this._assembler);
      },
      setVertsDirty: function setVertsDirty() {
        this._vertsDirty = true;
        this.markForRender(true);
      },
      _on3DNodeChanged: function _on3DNodeChanged() {
        this._resetAssembler();
      },
      _validateRender: function _validateRender() {},
      markForValidate: function markForValidate() {
        cc.RenderFlow.registerValidate(this);
      },
      markForRender: function markForRender(enable) {
        var flag = RenderFlow.FLAG_RENDER | RenderFlow.FLAG_UPDATE_RENDER_DATA;
        if (enable) {
          this.node._renderFlag |= flag;
          this.markForValidate();
        } else this.node._renderFlag &= ~flag;
      },
      disableRender: function disableRender() {
        this.node._renderFlag &= ~(RenderFlow.FLAG_RENDER | RenderFlow.FLAG_UPDATE_RENDER_DATA);
      },
      getMaterial: function getMaterial(index) {
        if (index < 0 || index >= this._materials.length) return null;
        var material = this._materials[index];
        if (!material) return null;
        var instantiated = _materialVariant["default"].create(material, this);
        instantiated !== material && this.setMaterial(index, instantiated);
        return instantiated;
      },
      getMaterials: function getMaterials() {
        var materials = this._materials;
        for (var i = 0; i < materials.length; i++) materials[i] = _materialVariant["default"].create(materials[i], this);
        return materials;
      },
      setMaterial: function setMaterial(index, material) {
        if (material !== this._materials[index]) {
          material = _materialVariant["default"].create(material, this);
          this._materials[index] = material;
        }
        this._updateMaterial();
        this.markForRender(true);
        return material;
      },
      _getDefaultMaterial: function _getDefaultMaterial() {
        return Material.getBuiltinMaterial("2d-sprite");
      },
      _activateMaterial: function _activateMaterial() {
        var materials = this._materials;
        if (!materials[0]) {
          var material = this._getDefaultMaterial();
          materials[0] = material;
        }
        for (var i = 0; i < materials.length; i++) materials[i] = _materialVariant["default"].create(materials[i], this);
        this._updateMaterial();
      },
      _updateMaterial: function _updateMaterial() {},
      _updateColor: function _updateColor() {
        if (this._assembler.updateColor) {
          var premultiply = this.srcBlendFactor === cc.macro.BlendFactor.ONE;
          premultiply && _valueTypes.Color.premultiplyAlpha(_temp_color, this.node._color);
          var color = premultiply ? _temp_color._val : null;
          this._assembler.updateColor(this, color);
        }
      },
      _checkBacth: function _checkBacth(renderer, cullingMask) {
        var material = this._materials[0];
        if (material && material.getHash() !== renderer.material.getHash() || renderer.cullingMask !== cullingMask) {
          renderer._flush();
          renderer.node = material.getDefine("CC_USE_MODEL") ? this.node : renderer._dummyNode;
          renderer.material = material;
          renderer.cullingMask = cullingMask;
        }
      }
    });
    cc.RenderComponent = module.exports = RenderComponent;
  }), {
    "../assets/material/CCMaterial": 67,
    "../assets/material/material-variant": 74,
    "../renderer/assembler": 168,
    "../renderer/render-flow": 172,
    "../value-types": 225,
    "./CCComponent": 90
  } ],
  95: [ (function(require, module, exports) {
    "use strict";
    var misc = require("../utils/misc");
    var NodeEvent = require("../CCNode").EventType;
    var RenderComponent = require("./CCRenderComponent");
    var BlendFunc = require("../utils/blend-func");
    var SpriteType = cc.Enum({
      SIMPLE: 0,
      SLICED: 1,
      TILED: 2,
      FILLED: 3,
      MESH: 4
    });
    var FillType = cc.Enum({
      HORIZONTAL: 0,
      VERTICAL: 1,
      RADIAL: 2
    });
    var SizeMode = cc.Enum({
      CUSTOM: 0,
      TRIMMED: 1,
      RAW: 2
    });
    var State = cc.Enum({
      NORMAL: 0,
      GRAY: 1
    });
    var Sprite = cc.Class({
      name: "cc.Sprite",
      extends: RenderComponent,
      mixins: [ BlendFunc ],
      editor: false,
      properties: {
        _spriteFrame: {
          default: null,
          type: cc.SpriteFrame
        },
        _type: SpriteType.SIMPLE,
        _sizeMode: SizeMode.TRIMMED,
        _fillType: 0,
        _fillCenter: cc.v2(0, 0),
        _fillStart: 0,
        _fillRange: 0,
        _isTrimmedMode: true,
        _atlas: {
          default: null,
          type: cc.SpriteAtlas,
          tooltip: false,
          editorOnly: true,
          visible: true,
          animatable: false
        },
        spriteFrame: {
          get: function get() {
            return this._spriteFrame;
          },
          set: function set(value, force) {
            var lastSprite = this._spriteFrame;
            false;
            if (lastSprite === value) return;
            this._spriteFrame = value;
            this._applySpriteFrame(lastSprite);
            false;
          },
          type: cc.SpriteFrame
        },
        type: {
          get: function get() {
            return this._type;
          },
          set: function set(value) {
            if (this._type !== value) {
              this._type = value;
              this.setVertsDirty();
              this._resetAssembler();
            }
          },
          type: SpriteType,
          animatable: false,
          tooltip: false
        },
        fillType: {
          get: function get() {
            return this._fillType;
          },
          set: function set(value) {
            if (value !== this._fillType) {
              this._fillType = value;
              this.setVertsDirty();
              this._resetAssembler();
            }
          },
          type: FillType,
          tooltip: false
        },
        fillCenter: {
          get: function get() {
            return this._fillCenter;
          },
          set: function set(value) {
            this._fillCenter.x = value.x;
            this._fillCenter.y = value.y;
            this._type === SpriteType.FILLED && this.setVertsDirty();
          },
          tooltip: false
        },
        fillStart: {
          get: function get() {
            return this._fillStart;
          },
          set: function set(value) {
            this._fillStart = misc.clampf(value, -1, 1);
            this._type === SpriteType.FILLED && this.setVertsDirty();
          },
          tooltip: false
        },
        fillRange: {
          get: function get() {
            return this._fillRange;
          },
          set: function set(value) {
            this._fillRange = misc.clampf(value, -1, 1);
            this._type === SpriteType.FILLED && this.setVertsDirty();
          },
          tooltip: false
        },
        trim: {
          get: function get() {
            return this._isTrimmedMode;
          },
          set: function set(value) {
            if (this._isTrimmedMode !== value) {
              this._isTrimmedMode = value;
              this._type !== SpriteType.SIMPLE && this._type !== SpriteType.MESH || this.setVertsDirty();
            }
          },
          animatable: false,
          tooltip: false
        },
        sizeMode: {
          get: function get() {
            return this._sizeMode;
          },
          set: function set(value) {
            this._sizeMode = value;
            value !== SizeMode.CUSTOM && this._applySpriteSize();
          },
          animatable: false,
          type: SizeMode,
          tooltip: false
        }
      },
      statics: {
        FillType: FillType,
        Type: SpriteType,
        SizeMode: SizeMode,
        State: State
      },
      setVisible: function setVisible(visible) {
        this.enabled = visible;
      },
      setState: function setState() {},
      getState: function getState() {},
      __preload: function __preload() {
        this._super();
        false;
        this._applySpriteFrame();
      },
      onEnable: function onEnable() {
        this._super();
        this._spriteFrame && this._spriteFrame.ensureLoadTexture();
        this.node.on(cc.Node.EventType.SIZE_CHANGED, this.setVertsDirty, this);
        this.node.on(cc.Node.EventType.ANCHOR_CHANGED, this.setVertsDirty, this);
      },
      onDisable: function onDisable() {
        this._super();
        this.node.off(cc.Node.EventType.SIZE_CHANGED, this.setVertsDirty, this);
        this.node.off(cc.Node.EventType.ANCHOR_CHANGED, this.setVertsDirty, this);
      },
      _updateMaterial: function _updateMaterial() {
        var texture = this._spriteFrame && this._spriteFrame.getTexture();
        var material = this.getMaterial(0);
        if (material) {
          void 0 !== material.getDefine("USE_TEXTURE") && material.define("USE_TEXTURE", true);
          material.setProperty("texture", texture);
        }
        BlendFunc.prototype._updateMaterial.call(this);
      },
      _applyAtlas: false,
      _validateRender: function _validateRender() {
        var spriteFrame = this._spriteFrame;
        if (this._materials[0] && spriteFrame && spriteFrame.textureLoaded()) return;
        this.disableRender();
      },
      _applySpriteSize: function _applySpriteSize() {
        if (!this._spriteFrame || !this.isValid) return;
        if (SizeMode.RAW === this._sizeMode) {
          var size = this._spriteFrame._originalSize;
          this.node.setContentSize(size);
        } else if (SizeMode.TRIMMED === this._sizeMode) {
          var rect = this._spriteFrame._rect;
          this.node.setContentSize(rect.width, rect.height);
        }
        this.setVertsDirty();
      },
      _applySpriteFrame: function _applySpriteFrame(oldFrame) {
        var oldTexture = oldFrame && oldFrame.getTexture();
        oldTexture && !oldTexture.loaded && oldFrame.off("load", this._applySpriteSize, this);
        var spriteFrame = this._spriteFrame;
        if (spriteFrame) {
          this._updateMaterial();
          var newTexture = spriteFrame.getTexture();
          if (newTexture && newTexture.loaded) this._applySpriteSize(); else {
            this.disableRender();
            spriteFrame.once("load", this._applySpriteSize, this);
          }
        } else this.disableRender();
        false;
      }
    });
    false;
    cc.Sprite = module.exports = Sprite;
  }), {
    "../CCNode": 16,
    "../utils/blend-func": 205,
    "../utils/misc": 210,
    "./CCRenderComponent": 94
  } ],
  96: [ (function(require, module, exports) {
    "use strict";
    var WidgetManager = require("../base-ui/CCWidgetManager");
    var AlignMode = WidgetManager.AlignMode;
    var AlignFlags = WidgetManager._AlignFlags;
    var TOP = AlignFlags.TOP;
    var MID = AlignFlags.MID;
    var BOT = AlignFlags.BOT;
    var LEFT = AlignFlags.LEFT;
    var CENTER = AlignFlags.CENTER;
    var RIGHT = AlignFlags.RIGHT;
    var TOP_BOT = TOP | BOT;
    var LEFT_RIGHT = LEFT | RIGHT;
    var Widget = cc.Class({
      name: "cc.Widget",
      extends: require("./CCComponent"),
      editor: false,
      properties: {
        target: {
          get: function get() {
            return this._target;
          },
          set: function set(value) {
            this._target = value;
            false;
          },
          type: cc.Node,
          tooltip: false
        },
        isAlignTop: {
          get: function get() {
            return (this._alignFlags & TOP) > 0;
          },
          set: function set(value) {
            this._setAlign(TOP, value);
          },
          animatable: false,
          tooltip: false
        },
        isAlignVerticalCenter: {
          get: function get() {
            return (this._alignFlags & MID) > 0;
          },
          set: function set(value) {
            if (value) {
              this.isAlignTop = false;
              this.isAlignBottom = false;
              this._alignFlags |= MID;
            } else this._alignFlags &= ~MID;
          },
          animatable: false,
          tooltip: false
        },
        isAlignBottom: {
          get: function get() {
            return (this._alignFlags & BOT) > 0;
          },
          set: function set(value) {
            this._setAlign(BOT, value);
          },
          animatable: false,
          tooltip: false
        },
        isAlignLeft: {
          get: function get() {
            return (this._alignFlags & LEFT) > 0;
          },
          set: function set(value) {
            this._setAlign(LEFT, value);
          },
          animatable: false,
          tooltip: false
        },
        isAlignHorizontalCenter: {
          get: function get() {
            return (this._alignFlags & CENTER) > 0;
          },
          set: function set(value) {
            if (value) {
              this.isAlignLeft = false;
              this.isAlignRight = false;
              this._alignFlags |= CENTER;
            } else this._alignFlags &= ~CENTER;
          },
          animatable: false,
          tooltip: false
        },
        isAlignRight: {
          get: function get() {
            return (this._alignFlags & RIGHT) > 0;
          },
          set: function set(value) {
            this._setAlign(RIGHT, value);
          },
          animatable: false,
          tooltip: false
        },
        isStretchWidth: {
          get: function get() {
            return (this._alignFlags & LEFT_RIGHT) === LEFT_RIGHT;
          },
          visible: false
        },
        isStretchHeight: {
          get: function get() {
            return (this._alignFlags & TOP_BOT) === TOP_BOT;
          },
          visible: false
        },
        top: {
          get: function get() {
            return this._top;
          },
          set: function set(value) {
            this._top = value;
          },
          tooltip: false
        },
        bottom: {
          get: function get() {
            return this._bottom;
          },
          set: function set(value) {
            this._bottom = value;
          },
          tooltip: false
        },
        left: {
          get: function get() {
            return this._left;
          },
          set: function set(value) {
            this._left = value;
          },
          tooltip: false
        },
        right: {
          get: function get() {
            return this._right;
          },
          set: function set(value) {
            this._right = value;
          },
          tooltip: false
        },
        horizontalCenter: {
          get: function get() {
            return this._horizontalCenter;
          },
          set: function set(value) {
            this._horizontalCenter = value;
          },
          tooltip: false
        },
        verticalCenter: {
          get: function get() {
            return this._verticalCenter;
          },
          set: function set(value) {
            this._verticalCenter = value;
          },
          tooltip: false
        },
        isAbsoluteHorizontalCenter: {
          get: function get() {
            return this._isAbsHorizontalCenter;
          },
          set: function set(value) {
            this._isAbsHorizontalCenter = value;
          },
          animatable: false
        },
        isAbsoluteVerticalCenter: {
          get: function get() {
            return this._isAbsVerticalCenter;
          },
          set: function set(value) {
            this._isAbsVerticalCenter = value;
          },
          animatable: false
        },
        isAbsoluteTop: {
          get: function get() {
            return this._isAbsTop;
          },
          set: function set(value) {
            this._isAbsTop = value;
          },
          animatable: false
        },
        isAbsoluteBottom: {
          get: function get() {
            return this._isAbsBottom;
          },
          set: function set(value) {
            this._isAbsBottom = value;
          },
          animatable: false
        },
        isAbsoluteLeft: {
          get: function get() {
            return this._isAbsLeft;
          },
          set: function set(value) {
            this._isAbsLeft = value;
          },
          animatable: false
        },
        isAbsoluteRight: {
          get: function get() {
            return this._isAbsRight;
          },
          set: function set(value) {
            this._isAbsRight = value;
          },
          animatable: false
        },
        alignMode: {
          default: AlignMode.ON_WINDOW_RESIZE,
          type: AlignMode,
          tooltip: false
        },
        _wasAlignOnce: {
          default: void 0,
          formerlySerializedAs: "isAlignOnce"
        },
        _target: null,
        _alignFlags: 0,
        _left: 0,
        _right: 0,
        _top: 0,
        _bottom: 0,
        _verticalCenter: 0,
        _horizontalCenter: 0,
        _isAbsLeft: true,
        _isAbsRight: true,
        _isAbsTop: true,
        _isAbsBottom: true,
        _isAbsHorizontalCenter: true,
        _isAbsVerticalCenter: true,
        _originalWidth: 0,
        _originalHeight: 0
      },
      statics: {
        AlignMode: AlignMode
      },
      onLoad: function onLoad() {
        if (void 0 !== this._wasAlignOnce) {
          this.alignMode = this._wasAlignOnce ? AlignMode.ONCE : AlignMode.ALWAYS;
          this._wasAlignOnce = void 0;
        }
      },
      onEnable: function onEnable() {
        WidgetManager.add(this);
      },
      onDisable: function onDisable() {
        WidgetManager.remove(this);
      },
      _validateTargetInDEV: false,
      _setAlign: function _setAlign(flag, isAlign) {
        var current = (this._alignFlags & flag) > 0;
        if (isAlign === current) return;
        var isHorizontal = (flag & LEFT_RIGHT) > 0;
        if (isAlign) {
          this._alignFlags |= flag;
          if (isHorizontal) {
            this.isAlignHorizontalCenter = false;
            if (this.isStretchWidth) {
              this._originalWidth = this.node.width;
              false;
            }
          } else {
            this.isAlignVerticalCenter = false;
            if (this.isStretchHeight) {
              this._originalHeight = this.node.height;
              false;
            }
          }
          false;
        } else {
          isHorizontal ? this.isStretchWidth && (this.node.width = this._originalWidth) : this.isStretchHeight && (this.node.height = this._originalHeight);
          this._alignFlags &= ~flag;
        }
      },
      updateAlignment: function updateAlignment() {
        WidgetManager.updateAlignment(this.node);
      }
    });
    Object.defineProperty(Widget.prototype, "isAlignOnce", {
      get: function get() {
        true;
        cc.warn("`widget.isAlignOnce` is deprecated, use `widget.alignMode === cc.Widget.AlignMode.ONCE` instead please.");
        return this.alignMode === AlignMode.ONCE;
      },
      set: function set(value) {
        true;
        cc.warn("`widget.isAlignOnce` is deprecated, use `widget.alignMode = cc.Widget.AlignMode.*` instead please.");
        this.alignMode = value ? AlignMode.ONCE : AlignMode.ALWAYS;
      }
    });
    cc.Widget = module.exports = Widget;
  }), {
    "../base-ui/CCWidgetManager": 76,
    "./CCComponent": 90
  } ],
  97: [ (function(require, module, exports) {
    "use strict";
    require("./CCComponent");
    require("./CCComponentEventHandler");
    require("./missing-script");
    var SubContextView = require("./SubContextView");
    if (!SubContextView) {
      SubContextView = cc.Class({
        name: "cc.SubContextView",
        extends: cc.Component
      });
      cc.SubContextView = cc.WXSubContextView = cc.SwanSubContextView = SubContextView;
    }
    var components = [ require("./CCSprite"), require("./CCWidget"), require("./CCCanvas"), require("./CCAudioSource"), require("./CCAnimation"), require("./CCButton"), require("./CCLabel"), require("./CCProgressBar"), require("./CCMask"), require("./CCScrollBar"), require("./CCScrollView"), require("./CCPageViewIndicator"), require("./CCPageView"), require("./CCSlider"), require("./CCLayout"), require("./editbox/CCEditBox"), require("./CCLabelOutline"), require("./CCLabelShadow"), require("./CCRichText"), require("./CCToggleContainer"), require("./CCToggleGroup"), require("./CCToggle"), require("./CCBlockInputEvents"), require("./CCMotionStreak"), require("./CCSafeArea"), SubContextView ];
    module.exports = components;
  }), {
    "./CCAnimation": 86,
    "./CCAudioSource": void 0,
    "./CCBlockInputEvents": 87,
    "./CCButton": 88,
    "./CCCanvas": 89,
    "./CCComponent": 90,
    "./CCComponentEventHandler": 91,
    "./CCLabel": 92,
    "./CCLabelOutline": void 0,
    "./CCLabelShadow": void 0,
    "./CCLayout": 93,
    "./CCMask": void 0,
    "./CCMotionStreak": void 0,
    "./CCPageView": void 0,
    "./CCPageViewIndicator": void 0,
    "./CCProgressBar": void 0,
    "./CCRichText": void 0,
    "./CCSafeArea": void 0,
    "./CCScrollBar": void 0,
    "./CCScrollView": void 0,
    "./CCSlider": void 0,
    "./CCSprite": 95,
    "./CCToggle": void 0,
    "./CCToggleContainer": void 0,
    "./CCToggleGroup": void 0,
    "./CCWidget": 96,
    "./SubContextView": void 0,
    "./editbox/CCEditBox": void 0,
    "./missing-script": 98
  } ],
  98: [ (function(require, module, exports) {
    "use strict";
    var js = cc.js;
    var BUILTIN_CLASSID_RE = require("../utils/misc").BUILTIN_CLASSID_RE;
    var MissingClass = cc.Class({
      name: "cc.MissingClass",
      properties: {
        _$erialized: {
          default: null,
          visible: false,
          editorOnly: true
        }
      }
    });
    var MissingScript = cc.Class({
      name: "cc.MissingScript",
      extends: cc.Component,
      editor: {
        inspector: "packages://inspector/inspectors/comps/missing-script.js"
      },
      properties: {
        compiled: {
          default: false,
          serializable: false
        },
        _$erialized: {
          default: null,
          visible: false,
          editorOnly: true
        }
      },
      ctor: false,
      statics: {
        safeFindClass: function safeFindClass(id, data) {
          var cls = js._getClassById(id);
          if (cls) return cls;
          if (id) {
            cc.deserialize.reportMissingClass(id);
            return MissingScript.getMissingWrapper(id, data);
          }
          return null;
        },
        getMissingWrapper: function getMissingWrapper(id, data) {
          return data.node && (/^[0-9a-zA-Z+/]{23}$/.test(id) || BUILTIN_CLASSID_RE.test(id)) ? MissingScript : MissingClass;
        }
      },
      onLoad: function onLoad() {
        cc.warnID(4600, this.node.name);
      }
    });
    cc._MissingScript = module.exports = MissingScript;
  }), {
    "../utils/misc": 210
  } ],
  99: [ (function(require, module, exports) {
    "use strict";
    var js = cc.js;
    require("../event/event");
    var EventMouse = function EventMouse(eventType, bubbles) {
      cc.Event.call(this, cc.Event.MOUSE, bubbles);
      this._eventType = eventType;
      this._button = 0;
      this._x = 0;
      this._y = 0;
      this._prevX = 0;
      this._prevY = 0;
      this._scrollX = 0;
      this._scrollY = 0;
    };
    js.extend(EventMouse, cc.Event);
    var proto = EventMouse.prototype;
    proto.setScrollData = function(scrollX, scrollY) {
      this._scrollX = scrollX;
      this._scrollY = scrollY;
    };
    proto.getScrollX = function() {
      return this._scrollX;
    };
    proto.getScrollY = function() {
      return this._scrollY;
    };
    proto.setLocation = function(x, y) {
      this._x = x;
      this._y = y;
    };
    proto.getLocation = function() {
      return cc.v2(this._x, this._y);
    };
    proto.getLocationInView = function() {
      return cc.v2(this._x, cc.view._designResolutionSize.height - this._y);
    };
    proto._setPrevCursor = function(x, y) {
      this._prevX = x;
      this._prevY = y;
    };
    proto.getPreviousLocation = function() {
      return cc.v2(this._prevX, this._prevY);
    };
    proto.getDelta = function() {
      return cc.v2(this._x - this._prevX, this._y - this._prevY);
    };
    proto.getDeltaX = function() {
      return this._x - this._prevX;
    };
    proto.getDeltaY = function() {
      return this._y - this._prevY;
    };
    proto.setButton = function(button) {
      this._button = button;
    };
    proto.getButton = function() {
      return this._button;
    };
    proto.getLocationX = function() {
      return this._x;
    };
    proto.getLocationY = function() {
      return this._y;
    };
    EventMouse.NONE = 0;
    EventMouse.DOWN = 1;
    EventMouse.UP = 2;
    EventMouse.MOVE = 3;
    EventMouse.SCROLL = 4;
    EventMouse.BUTTON_LEFT = 0;
    EventMouse.BUTTON_RIGHT = 2;
    EventMouse.BUTTON_MIDDLE = 1;
    EventMouse.BUTTON_4 = 3;
    EventMouse.BUTTON_5 = 4;
    EventMouse.BUTTON_6 = 5;
    EventMouse.BUTTON_7 = 6;
    EventMouse.BUTTON_8 = 7;
    var EventTouch = function EventTouch(touchArr, bubbles) {
      cc.Event.call(this, cc.Event.TOUCH, bubbles);
      this._eventCode = 0;
      this._touches = touchArr || [];
      this.touch = null;
      this.currentTouch = null;
    };
    js.extend(EventTouch, cc.Event);
    proto = EventTouch.prototype;
    proto.getEventCode = function() {
      return this._eventCode;
    };
    proto.getTouches = function() {
      return this._touches;
    };
    proto._setEventCode = function(eventCode) {
      this._eventCode = eventCode;
    };
    proto._setTouches = function(touches) {
      this._touches = touches;
    };
    proto.setLocation = function(x, y) {
      this.touch && this.touch.setTouchInfo(this.touch.getID(), x, y);
    };
    proto.getLocation = function() {
      return this.touch ? this.touch.getLocation() : cc.v2();
    };
    proto.getLocationInView = function() {
      return this.touch ? this.touch.getLocationInView() : cc.v2();
    };
    proto.getPreviousLocation = function() {
      return this.touch ? this.touch.getPreviousLocation() : cc.v2();
    };
    proto.getStartLocation = function() {
      return this.touch ? this.touch.getStartLocation() : cc.v2();
    };
    proto.getID = function() {
      return this.touch ? this.touch.getID() : null;
    };
    proto.getDelta = function() {
      return this.touch ? this.touch.getDelta() : cc.v2();
    };
    proto.getDeltaX = function() {
      return this.touch ? this.touch.getDelta().x : 0;
    };
    proto.getDeltaY = function() {
      return this.touch ? this.touch.getDelta().y : 0;
    };
    proto.getLocationX = function() {
      return this.touch ? this.touch.getLocationX() : 0;
    };
    proto.getLocationY = function() {
      return this.touch ? this.touch.getLocationY() : 0;
    };
    EventTouch.MAX_TOUCHES = 5;
    EventTouch.BEGAN = 0;
    EventTouch.MOVED = 1;
    EventTouch.ENDED = 2;
    EventTouch.CANCELED = 3;
    var EventAcceleration = function EventAcceleration(acc, bubbles) {
      cc.Event.call(this, cc.Event.ACCELERATION, bubbles);
      this.acc = acc;
    };
    js.extend(EventAcceleration, cc.Event);
    var EventKeyboard = function EventKeyboard(keyCode, isPressed, bubbles) {
      cc.Event.call(this, cc.Event.KEYBOARD, bubbles);
      this.keyCode = keyCode;
      this.isPressed = isPressed;
    };
    js.extend(EventKeyboard, cc.Event);
    cc.Event.EventMouse = EventMouse;
    cc.Event.EventTouch = EventTouch;
    cc.Event.EventAcceleration = EventAcceleration;
    cc.Event.EventKeyboard = EventKeyboard;
    module.exports = cc.Event;
  }), {
    "../event/event": 106
  } ],
  100: [ (function(require, module, exports) {
    "use strict";
    var js = require("../platform/js");
    cc.EventListener = function(type, listenerID, callback) {
      this._onEvent = callback;
      this._type = type || 0;
      this._listenerID = listenerID || "";
      this._registered = false;
      this._fixedPriority = 0;
      this._node = null;
      this._target = null;
      this._paused = true;
      this._isEnabled = true;
    };
    cc.EventListener.prototype = {
      constructor: cc.EventListener,
      _setPaused: function _setPaused(paused) {
        this._paused = paused;
      },
      _isPaused: function _isPaused() {
        return this._paused;
      },
      _setRegistered: function _setRegistered(registered) {
        this._registered = registered;
      },
      _isRegistered: function _isRegistered() {
        return this._registered;
      },
      _getType: function _getType() {
        return this._type;
      },
      _getListenerID: function _getListenerID() {
        return this._listenerID;
      },
      _setFixedPriority: function _setFixedPriority(fixedPriority) {
        this._fixedPriority = fixedPriority;
      },
      _getFixedPriority: function _getFixedPriority() {
        return this._fixedPriority;
      },
      _setSceneGraphPriority: function _setSceneGraphPriority(node) {
        this._target = node;
        this._node = node;
      },
      _getSceneGraphPriority: function _getSceneGraphPriority() {
        return this._node;
      },
      checkAvailable: function checkAvailable() {
        return null !== this._onEvent;
      },
      clone: function clone() {
        return null;
      },
      setEnabled: function setEnabled(enabled) {
        this._isEnabled = enabled;
      },
      isEnabled: function isEnabled() {
        return this._isEnabled;
      },
      retain: function retain() {},
      release: function release() {}
    };
    cc.EventListener.UNKNOWN = 0;
    cc.EventListener.TOUCH_ONE_BY_ONE = 1;
    cc.EventListener.TOUCH_ALL_AT_ONCE = 2;
    cc.EventListener.KEYBOARD = 3;
    cc.EventListener.MOUSE = 4;
    cc.EventListener.ACCELERATION = 6;
    cc.EventListener.CUSTOM = 8;
    var ListenerID = cc.EventListener.ListenerID = {
      MOUSE: "__cc_mouse",
      TOUCH_ONE_BY_ONE: "__cc_touch_one_by_one",
      TOUCH_ALL_AT_ONCE: "__cc_touch_all_at_once",
      KEYBOARD: "__cc_keyboard",
      ACCELERATION: "__cc_acceleration"
    };
    var Custom = function Custom(listenerId, callback) {
      this._onCustomEvent = callback;
      cc.EventListener.call(this, cc.EventListener.CUSTOM, listenerId, this._callback);
    };
    js.extend(Custom, cc.EventListener);
    js.mixin(Custom.prototype, {
      _onCustomEvent: null,
      _callback: function _callback(event) {
        null !== this._onCustomEvent && this._onCustomEvent(event);
      },
      checkAvailable: function checkAvailable() {
        return cc.EventListener.prototype.checkAvailable.call(this) && null !== this._onCustomEvent;
      },
      clone: function clone() {
        return new Custom(this._listenerID, this._onCustomEvent);
      }
    });
    var Mouse = function Mouse() {
      cc.EventListener.call(this, cc.EventListener.MOUSE, ListenerID.MOUSE, this._callback);
    };
    js.extend(Mouse, cc.EventListener);
    js.mixin(Mouse.prototype, {
      onMouseDown: null,
      onMouseUp: null,
      onMouseMove: null,
      onMouseScroll: null,
      _callback: function _callback(event) {
        var eventType = cc.Event.EventMouse;
        switch (event._eventType) {
         case eventType.DOWN:
          this.onMouseDown && this.onMouseDown(event);
          break;

         case eventType.UP:
          this.onMouseUp && this.onMouseUp(event);
          break;

         case eventType.MOVE:
          this.onMouseMove && this.onMouseMove(event);
          break;

         case eventType.SCROLL:
          this.onMouseScroll && this.onMouseScroll(event);
        }
      },
      clone: function clone() {
        var eventListener = new Mouse();
        eventListener.onMouseDown = this.onMouseDown;
        eventListener.onMouseUp = this.onMouseUp;
        eventListener.onMouseMove = this.onMouseMove;
        eventListener.onMouseScroll = this.onMouseScroll;
        return eventListener;
      },
      checkAvailable: function checkAvailable() {
        return true;
      }
    });
    var TouchOneByOne = function TouchOneByOne() {
      cc.EventListener.call(this, cc.EventListener.TOUCH_ONE_BY_ONE, ListenerID.TOUCH_ONE_BY_ONE, null);
      this._claimedTouches = [];
    };
    js.extend(TouchOneByOne, cc.EventListener);
    js.mixin(TouchOneByOne.prototype, {
      constructor: TouchOneByOne,
      _claimedTouches: null,
      swallowTouches: false,
      onTouchBegan: null,
      onTouchMoved: null,
      onTouchEnded: null,
      onTouchCancelled: null,
      setSwallowTouches: function setSwallowTouches(needSwallow) {
        this.swallowTouches = needSwallow;
      },
      isSwallowTouches: function isSwallowTouches() {
        return this.swallowTouches;
      },
      clone: function clone() {
        var eventListener = new TouchOneByOne();
        eventListener.onTouchBegan = this.onTouchBegan;
        eventListener.onTouchMoved = this.onTouchMoved;
        eventListener.onTouchEnded = this.onTouchEnded;
        eventListener.onTouchCancelled = this.onTouchCancelled;
        eventListener.swallowTouches = this.swallowTouches;
        return eventListener;
      },
      checkAvailable: function checkAvailable() {
        if (!this.onTouchBegan) {
          cc.logID(1801);
          return false;
        }
        return true;
      }
    });
    var TouchAllAtOnce = function TouchAllAtOnce() {
      cc.EventListener.call(this, cc.EventListener.TOUCH_ALL_AT_ONCE, ListenerID.TOUCH_ALL_AT_ONCE, null);
    };
    js.extend(TouchAllAtOnce, cc.EventListener);
    js.mixin(TouchAllAtOnce.prototype, {
      constructor: TouchAllAtOnce,
      onTouchesBegan: null,
      onTouchesMoved: null,
      onTouchesEnded: null,
      onTouchesCancelled: null,
      clone: function clone() {
        var eventListener = new TouchAllAtOnce();
        eventListener.onTouchesBegan = this.onTouchesBegan;
        eventListener.onTouchesMoved = this.onTouchesMoved;
        eventListener.onTouchesEnded = this.onTouchesEnded;
        eventListener.onTouchesCancelled = this.onTouchesCancelled;
        return eventListener;
      },
      checkAvailable: function checkAvailable() {
        if (null === this.onTouchesBegan && null === this.onTouchesMoved && null === this.onTouchesEnded && null === this.onTouchesCancelled) {
          cc.logID(1802);
          return false;
        }
        return true;
      }
    });
    var Acceleration = function Acceleration(callback) {
      this._onAccelerationEvent = callback;
      cc.EventListener.call(this, cc.EventListener.ACCELERATION, ListenerID.ACCELERATION, this._callback);
    };
    js.extend(Acceleration, cc.EventListener);
    js.mixin(Acceleration.prototype, {
      constructor: Acceleration,
      _onAccelerationEvent: null,
      _callback: function _callback(event) {
        this._onAccelerationEvent(event.acc, event);
      },
      checkAvailable: function checkAvailable() {
        cc.assertID(this._onAccelerationEvent, 1803);
        return true;
      },
      clone: function clone() {
        return new Acceleration(this._onAccelerationEvent);
      }
    });
    var Keyboard = function Keyboard() {
      cc.EventListener.call(this, cc.EventListener.KEYBOARD, ListenerID.KEYBOARD, this._callback);
    };
    js.extend(Keyboard, cc.EventListener);
    js.mixin(Keyboard.prototype, {
      constructor: Keyboard,
      onKeyPressed: null,
      onKeyReleased: null,
      _callback: function _callback(event) {
        event.isPressed ? this.onKeyPressed && this.onKeyPressed(event.keyCode, event) : this.onKeyReleased && this.onKeyReleased(event.keyCode, event);
      },
      clone: function clone() {
        var eventListener = new Keyboard();
        eventListener.onKeyPressed = this.onKeyPressed;
        eventListener.onKeyReleased = this.onKeyReleased;
        return eventListener;
      },
      checkAvailable: function checkAvailable() {
        if (null === this.onKeyPressed && null === this.onKeyReleased) {
          cc.logID(1800);
          return false;
        }
        return true;
      }
    });
    cc.EventListener.create = function(argObj) {
      cc.assertID(argObj && argObj.event, 1900);
      var listenerType = argObj.event;
      delete argObj.event;
      var listener = null;
      if (listenerType === cc.EventListener.TOUCH_ONE_BY_ONE) listener = new TouchOneByOne(); else if (listenerType === cc.EventListener.TOUCH_ALL_AT_ONCE) listener = new TouchAllAtOnce(); else if (listenerType === cc.EventListener.MOUSE) listener = new Mouse(); else if (listenerType === cc.EventListener.CUSTOM) {
        listener = new Custom(argObj.eventName, argObj.callback);
        delete argObj.eventName;
        delete argObj.callback;
      } else if (listenerType === cc.EventListener.KEYBOARD) listener = new Keyboard(); else if (listenerType === cc.EventListener.ACCELERATION) {
        listener = new Acceleration(argObj.callback);
        delete argObj.callback;
      }
      for (var key in argObj) listener[key] = argObj[key];
      return listener;
    };
    module.exports = cc.EventListener;
  }), {
    "../platform/js": 161
  } ],
  101: [ (function(require, module, exports) {
    "use strict";
    var js = require("../platform/js");
    require("./CCEventListener");
    var ListenerID = cc.EventListener.ListenerID;
    var _EventListenerVector = function _EventListenerVector() {
      this._fixedListeners = [];
      this._sceneGraphListeners = [];
      this.gt0Index = 0;
    };
    _EventListenerVector.prototype = {
      constructor: _EventListenerVector,
      size: function size() {
        return this._fixedListeners.length + this._sceneGraphListeners.length;
      },
      empty: function empty() {
        return 0 === this._fixedListeners.length && 0 === this._sceneGraphListeners.length;
      },
      push: function push(listener) {
        0 === listener._getFixedPriority() ? this._sceneGraphListeners.push(listener) : this._fixedListeners.push(listener);
      },
      clearSceneGraphListeners: function clearSceneGraphListeners() {
        this._sceneGraphListeners.length = 0;
      },
      clearFixedListeners: function clearFixedListeners() {
        this._fixedListeners.length = 0;
      },
      clear: function clear() {
        this._sceneGraphListeners.length = 0;
        this._fixedListeners.length = 0;
      },
      getFixedPriorityListeners: function getFixedPriorityListeners() {
        return this._fixedListeners;
      },
      getSceneGraphPriorityListeners: function getSceneGraphPriorityListeners() {
        return this._sceneGraphListeners;
      }
    };
    var __getListenerID = function __getListenerID(event) {
      var eventType = cc.Event, type = event.type;
      if (type === eventType.ACCELERATION) return ListenerID.ACCELERATION;
      if (type === eventType.KEYBOARD) return ListenerID.KEYBOARD;
      if (type.startsWith(eventType.MOUSE)) return ListenerID.MOUSE;
      type.startsWith(eventType.TOUCH) && cc.logID(2e3);
      return "";
    };
    var eventManager = {
      DIRTY_NONE: 0,
      DIRTY_FIXED_PRIORITY: 1,
      DIRTY_SCENE_GRAPH_PRIORITY: 2,
      DIRTY_ALL: 3,
      _listenersMap: {},
      _priorityDirtyFlagMap: {},
      _nodeListenersMap: {},
      _toAddedListeners: [],
      _toRemovedListeners: [],
      _dirtyListeners: {},
      _inDispatch: 0,
      _isEnabled: false,
      _currentTouch: null,
      _currentTouchListener: null,
      _internalCustomListenerIDs: [],
      _setDirtyForNode: function _setDirtyForNode(node) {
        var selListeners = this._nodeListenersMap[node._id];
        if (void 0 !== selListeners) for (var j = 0, len = selListeners.length; j < len; j++) {
          var selListener = selListeners[j];
          var listenerID = selListener._getListenerID();
          null == this._dirtyListeners[listenerID] && (this._dirtyListeners[listenerID] = true);
        }
        if (node.childrenCount > 0) {
          var children = node._children;
          for (var i = 0, _len = children.length; i < _len; i++) this._setDirtyForNode(children[i]);
        }
      },
      pauseTarget: function pauseTarget(node, recursive) {
        if (!(node instanceof cc._BaseNode)) {
          cc.warnID(3506);
          return;
        }
        var listeners = this._nodeListenersMap[node._id], i, len;
        if (listeners) for (i = 0, len = listeners.length; i < len; i++) listeners[i]._setPaused(true);
        if (true === recursive) {
          var locChildren = node._children;
          for (i = 0, len = locChildren ? locChildren.length : 0; i < len; i++) this.pauseTarget(locChildren[i], true);
        }
      },
      resumeTarget: function resumeTarget(node, recursive) {
        if (!(node instanceof cc._BaseNode)) {
          cc.warnID(3506);
          return;
        }
        var listeners = this._nodeListenersMap[node._id], i, len;
        if (listeners) for (i = 0, len = listeners.length; i < len; i++) listeners[i]._setPaused(false);
        this._setDirtyForNode(node);
        if (true === recursive) {
          var locChildren = node._children;
          for (i = 0, len = locChildren ? locChildren.length : 0; i < len; i++) this.resumeTarget(locChildren[i], true);
        }
      },
      _addListener: function _addListener(listener) {
        0 === this._inDispatch ? this._forceAddEventListener(listener) : this._toAddedListeners.push(listener);
      },
      _forceAddEventListener: function _forceAddEventListener(listener) {
        var listenerID = listener._getListenerID();
        var listeners = this._listenersMap[listenerID];
        if (!listeners) {
          listeners = new _EventListenerVector();
          this._listenersMap[listenerID] = listeners;
        }
        listeners.push(listener);
        if (0 === listener._getFixedPriority()) {
          this._setDirty(listenerID, this.DIRTY_SCENE_GRAPH_PRIORITY);
          var node = listener._getSceneGraphPriority();
          null === node && cc.logID(3507);
          this._associateNodeAndEventListener(node, listener);
          node.activeInHierarchy && this.resumeTarget(node);
        } else this._setDirty(listenerID, this.DIRTY_FIXED_PRIORITY);
      },
      _getListeners: function _getListeners(listenerID) {
        return this._listenersMap[listenerID];
      },
      _updateDirtyFlagForSceneGraph: function _updateDirtyFlagForSceneGraph() {
        var locDirtyListeners = this._dirtyListeners;
        for (var selKey in locDirtyListeners) this._setDirty(selKey, this.DIRTY_SCENE_GRAPH_PRIORITY);
        this._dirtyListeners = {};
      },
      _removeAllListenersInVector: function _removeAllListenersInVector(listenerVector) {
        if (!listenerVector) return;
        var selListener;
        for (var i = listenerVector.length - 1; i >= 0; i--) {
          selListener = listenerVector[i];
          selListener._setRegistered(false);
          if (null != selListener._getSceneGraphPriority()) {
            this._dissociateNodeAndEventListener(selListener._getSceneGraphPriority(), selListener);
            selListener._setSceneGraphPriority(null);
          }
          0 === this._inDispatch && cc.js.array.removeAt(listenerVector, i);
        }
      },
      _removeListenersForListenerID: function _removeListenersForListenerID(listenerID) {
        var listeners = this._listenersMap[listenerID], i;
        if (listeners) {
          var fixedPriorityListeners = listeners.getFixedPriorityListeners();
          var sceneGraphPriorityListeners = listeners.getSceneGraphPriorityListeners();
          this._removeAllListenersInVector(sceneGraphPriorityListeners);
          this._removeAllListenersInVector(fixedPriorityListeners);
          delete this._priorityDirtyFlagMap[listenerID];
          if (!this._inDispatch) {
            listeners.clear();
            delete this._listenersMap[listenerID];
          }
        }
        var locToAddedListeners = this._toAddedListeners, listener;
        for (i = locToAddedListeners.length - 1; i >= 0; i--) {
          listener = locToAddedListeners[i];
          listener && listener._getListenerID() === listenerID && cc.js.array.removeAt(locToAddedListeners, i);
        }
      },
      _sortEventListeners: function _sortEventListeners(listenerID) {
        var dirtyFlag = this.DIRTY_NONE, locFlagMap = this._priorityDirtyFlagMap;
        locFlagMap[listenerID] && (dirtyFlag = locFlagMap[listenerID]);
        if (dirtyFlag !== this.DIRTY_NONE) {
          locFlagMap[listenerID] = this.DIRTY_NONE;
          dirtyFlag & this.DIRTY_FIXED_PRIORITY && this._sortListenersOfFixedPriority(listenerID);
          if (dirtyFlag & this.DIRTY_SCENE_GRAPH_PRIORITY) {
            var rootEntity = cc.director.getScene();
            rootEntity && this._sortListenersOfSceneGraphPriority(listenerID);
          }
        }
      },
      _sortListenersOfSceneGraphPriority: function _sortListenersOfSceneGraphPriority(listenerID) {
        var listeners = this._getListeners(listenerID);
        if (!listeners) return;
        var sceneGraphListener = listeners.getSceneGraphPriorityListeners();
        if (!sceneGraphListener || 0 === sceneGraphListener.length) return;
        listeners.getSceneGraphPriorityListeners().sort(this._sortEventListenersOfSceneGraphPriorityDes);
      },
      _sortEventListenersOfSceneGraphPriorityDes: function _sortEventListenersOfSceneGraphPriorityDes(l1, l2) {
        var node1 = l1._getSceneGraphPriority(), node2 = l2._getSceneGraphPriority();
        if (!(l2 && node2 && node2._activeInHierarchy && null !== node2._parent)) return -1;
        if (!l1 || !node1 || !node1._activeInHierarchy || null === node1._parent) return 1;
        var p1 = node1, p2 = node2, ex = false;
        while (p1._parent._id !== p2._parent._id) {
          p1 = null === p1._parent._parent ? (ex = true) && node2 : p1._parent;
          p2 = null === p2._parent._parent ? (ex = true) && node1 : p2._parent;
        }
        if (p1._id === p2._id) {
          if (p1._id === node2._id) return -1;
          if (p1._id === node1._id) return 1;
        }
        return ex ? p1._localZOrder - p2._localZOrder : p2._localZOrder - p1._localZOrder;
      },
      _sortListenersOfFixedPriority: function _sortListenersOfFixedPriority(listenerID) {
        var listeners = this._listenersMap[listenerID];
        if (!listeners) return;
        var fixedListeners = listeners.getFixedPriorityListeners();
        if (!fixedListeners || 0 === fixedListeners.length) return;
        fixedListeners.sort(this._sortListenersOfFixedPriorityAsc);
        var index = 0;
        for (var len = fixedListeners.length; index < len; ) {
          if (fixedListeners[index]._getFixedPriority() >= 0) break;
          ++index;
        }
        listeners.gt0Index = index;
      },
      _sortListenersOfFixedPriorityAsc: function _sortListenersOfFixedPriorityAsc(l1, l2) {
        return l1._getFixedPriority() - l2._getFixedPriority();
      },
      _onUpdateListeners: function _onUpdateListeners(listeners) {
        var fixedPriorityListeners = listeners.getFixedPriorityListeners();
        var sceneGraphPriorityListeners = listeners.getSceneGraphPriorityListeners();
        var i, selListener, idx, toRemovedListeners = this._toRemovedListeners;
        if (sceneGraphPriorityListeners) for (i = sceneGraphPriorityListeners.length - 1; i >= 0; i--) {
          selListener = sceneGraphPriorityListeners[i];
          if (!selListener._isRegistered()) {
            cc.js.array.removeAt(sceneGraphPriorityListeners, i);
            idx = toRemovedListeners.indexOf(selListener);
            -1 !== idx && toRemovedListeners.splice(idx, 1);
          }
        }
        if (fixedPriorityListeners) for (i = fixedPriorityListeners.length - 1; i >= 0; i--) {
          selListener = fixedPriorityListeners[i];
          if (!selListener._isRegistered()) {
            cc.js.array.removeAt(fixedPriorityListeners, i);
            idx = toRemovedListeners.indexOf(selListener);
            -1 !== idx && toRemovedListeners.splice(idx, 1);
          }
        }
        sceneGraphPriorityListeners && 0 === sceneGraphPriorityListeners.length && listeners.clearSceneGraphListeners();
        fixedPriorityListeners && 0 === fixedPriorityListeners.length && listeners.clearFixedListeners();
      },
      frameUpdateListeners: function frameUpdateListeners() {
        var locListenersMap = this._listenersMap, locPriorityDirtyFlagMap = this._priorityDirtyFlagMap;
        for (var selKey in locListenersMap) if (locListenersMap[selKey].empty()) {
          delete locPriorityDirtyFlagMap[selKey];
          delete locListenersMap[selKey];
        }
        var locToAddedListeners = this._toAddedListeners;
        if (0 !== locToAddedListeners.length) {
          for (var i = 0, len = locToAddedListeners.length; i < len; i++) this._forceAddEventListener(locToAddedListeners[i]);
          locToAddedListeners.length = 0;
        }
        0 !== this._toRemovedListeners.length && this._cleanToRemovedListeners();
      },
      _updateTouchListeners: function _updateTouchListeners(event) {
        var locInDispatch = this._inDispatch;
        cc.assertID(locInDispatch > 0, 3508);
        if (locInDispatch > 1) return;
        var listeners;
        listeners = this._listenersMap[ListenerID.TOUCH_ONE_BY_ONE];
        listeners && this._onUpdateListeners(listeners);
        listeners = this._listenersMap[ListenerID.TOUCH_ALL_AT_ONCE];
        listeners && this._onUpdateListeners(listeners);
        cc.assertID(1 === locInDispatch, 3509);
        var locToAddedListeners = this._toAddedListeners;
        if (0 !== locToAddedListeners.length) {
          for (var i = 0, len = locToAddedListeners.length; i < len; i++) this._forceAddEventListener(locToAddedListeners[i]);
          this._toAddedListeners.length = 0;
        }
        0 !== this._toRemovedListeners.length && this._cleanToRemovedListeners();
      },
      _cleanToRemovedListeners: function _cleanToRemovedListeners() {
        var toRemovedListeners = this._toRemovedListeners;
        for (var i = 0; i < toRemovedListeners.length; i++) {
          var selListener = toRemovedListeners[i];
          var listeners = this._listenersMap[selListener._getListenerID()];
          if (!listeners) continue;
          var idx, fixedPriorityListeners = listeners.getFixedPriorityListeners(), sceneGraphPriorityListeners = listeners.getSceneGraphPriorityListeners();
          if (sceneGraphPriorityListeners) {
            idx = sceneGraphPriorityListeners.indexOf(selListener);
            -1 !== idx && sceneGraphPriorityListeners.splice(idx, 1);
          }
          if (fixedPriorityListeners) {
            idx = fixedPriorityListeners.indexOf(selListener);
            -1 !== idx && fixedPriorityListeners.splice(idx, 1);
          }
        }
        toRemovedListeners.length = 0;
      },
      _onTouchEventCallback: function _onTouchEventCallback(listener, argsObj) {
        if (!listener._isRegistered()) return false;
        var event = argsObj.event, selTouch = event.currentTouch;
        event.currentTarget = listener._node;
        var isClaimed = false, removedIdx;
        var getCode = event.getEventCode(), EventTouch = cc.Event.EventTouch;
        if (getCode === EventTouch.BEGAN) {
          if (!cc.macro.ENABLE_MULTI_TOUCH && eventManager._currentTouch) {
            var node = eventManager._currentTouchListener._node;
            if (node && node.activeInHierarchy) return false;
          }
          if (listener.onTouchBegan) {
            isClaimed = listener.onTouchBegan(selTouch, event);
            if (isClaimed && listener._registered) {
              listener._claimedTouches.push(selTouch);
              eventManager._currentTouchListener = listener;
              eventManager._currentTouch = selTouch;
            }
          }
        } else if (listener._claimedTouches.length > 0 && -1 !== (removedIdx = listener._claimedTouches.indexOf(selTouch))) {
          isClaimed = true;
          if (!cc.macro.ENABLE_MULTI_TOUCH && eventManager._currentTouch && eventManager._currentTouch !== selTouch) return false;
          if (getCode === EventTouch.MOVED && listener.onTouchMoved) listener.onTouchMoved(selTouch, event); else if (getCode === EventTouch.ENDED) {
            listener.onTouchEnded && listener.onTouchEnded(selTouch, event);
            listener._registered && listener._claimedTouches.splice(removedIdx, 1);
            eventManager._clearCurTouch();
          } else if (getCode === EventTouch.CANCELED) {
            listener.onTouchCancelled && listener.onTouchCancelled(selTouch, event);
            listener._registered && listener._claimedTouches.splice(removedIdx, 1);
            eventManager._clearCurTouch();
          }
        }
        if (event.isStopped()) {
          eventManager._updateTouchListeners(event);
          return true;
        }
        if (isClaimed && listener.swallowTouches) {
          argsObj.needsMutableSet && argsObj.touches.splice(selTouch, 1);
          return true;
        }
        return false;
      },
      _dispatchTouchEvent: function _dispatchTouchEvent(event) {
        this._sortEventListeners(ListenerID.TOUCH_ONE_BY_ONE);
        this._sortEventListeners(ListenerID.TOUCH_ALL_AT_ONCE);
        var oneByOneListeners = this._getListeners(ListenerID.TOUCH_ONE_BY_ONE);
        var allAtOnceListeners = this._getListeners(ListenerID.TOUCH_ALL_AT_ONCE);
        if (null === oneByOneListeners && null === allAtOnceListeners) return;
        var originalTouches = event.getTouches(), mutableTouches = cc.js.array.copy(originalTouches);
        var oneByOneArgsObj = {
          event: event,
          needsMutableSet: oneByOneListeners && allAtOnceListeners,
          touches: mutableTouches,
          selTouch: null
        };
        if (oneByOneListeners) for (var i = 0; i < originalTouches.length; i++) {
          event.currentTouch = originalTouches[i];
          event._propagationStopped = event._propagationImmediateStopped = false;
          this._dispatchEventToListeners(oneByOneListeners, this._onTouchEventCallback, oneByOneArgsObj);
        }
        if (allAtOnceListeners && mutableTouches.length > 0) {
          this._dispatchEventToListeners(allAtOnceListeners, this._onTouchesEventCallback, {
            event: event,
            touches: mutableTouches
          });
          if (event.isStopped()) return;
        }
        this._updateTouchListeners(event);
      },
      _onTouchesEventCallback: function _onTouchesEventCallback(listener, callbackParams) {
        if (!listener._registered) return false;
        var EventTouch = cc.Event.EventTouch, event = callbackParams.event, touches = callbackParams.touches, getCode = event.getEventCode();
        event.currentTarget = listener._node;
        getCode === EventTouch.BEGAN && listener.onTouchesBegan ? listener.onTouchesBegan(touches, event) : getCode === EventTouch.MOVED && listener.onTouchesMoved ? listener.onTouchesMoved(touches, event) : getCode === EventTouch.ENDED && listener.onTouchesEnded ? listener.onTouchesEnded(touches, event) : getCode === EventTouch.CANCELED && listener.onTouchesCancelled && listener.onTouchesCancelled(touches, event);
        if (event.isStopped()) {
          eventManager._updateTouchListeners(event);
          return true;
        }
        return false;
      },
      _associateNodeAndEventListener: function _associateNodeAndEventListener(node, listener) {
        var listeners = this._nodeListenersMap[node._id];
        if (!listeners) {
          listeners = [];
          this._nodeListenersMap[node._id] = listeners;
        }
        listeners.push(listener);
      },
      _dissociateNodeAndEventListener: function _dissociateNodeAndEventListener(node, listener) {
        var listeners = this._nodeListenersMap[node._id];
        if (listeners) {
          cc.js.array.remove(listeners, listener);
          0 === listeners.length && delete this._nodeListenersMap[node._id];
        }
      },
      _dispatchEventToListeners: function _dispatchEventToListeners(listeners, onEvent, eventOrArgs) {
        var shouldStopPropagation = false;
        var fixedPriorityListeners = listeners.getFixedPriorityListeners();
        var sceneGraphPriorityListeners = listeners.getSceneGraphPriorityListeners();
        var i = 0, j, selListener;
        if (fixedPriorityListeners && 0 !== fixedPriorityListeners.length) for (;i < listeners.gt0Index; ++i) {
          selListener = fixedPriorityListeners[i];
          if (selListener.isEnabled() && !selListener._isPaused() && selListener._isRegistered() && onEvent(selListener, eventOrArgs)) {
            shouldStopPropagation = true;
            break;
          }
        }
        if (sceneGraphPriorityListeners && !shouldStopPropagation) for (j = 0; j < sceneGraphPriorityListeners.length; j++) {
          selListener = sceneGraphPriorityListeners[j];
          if (selListener.isEnabled() && !selListener._isPaused() && selListener._isRegistered() && onEvent(selListener, eventOrArgs)) {
            shouldStopPropagation = true;
            break;
          }
        }
        if (fixedPriorityListeners && !shouldStopPropagation) for (;i < fixedPriorityListeners.length; ++i) {
          selListener = fixedPriorityListeners[i];
          if (selListener.isEnabled() && !selListener._isPaused() && selListener._isRegistered() && onEvent(selListener, eventOrArgs)) {
            shouldStopPropagation = true;
            break;
          }
        }
      },
      _setDirty: function _setDirty(listenerID, flag) {
        var locDirtyFlagMap = this._priorityDirtyFlagMap;
        null == locDirtyFlagMap[listenerID] ? locDirtyFlagMap[listenerID] = flag : locDirtyFlagMap[listenerID] = flag | locDirtyFlagMap[listenerID];
      },
      _sortNumberAsc: function _sortNumberAsc(a, b) {
        return a - b;
      },
      hasEventListener: function hasEventListener(listenerID) {
        return !!this._getListeners(listenerID);
      },
      addListener: function addListener(listener, nodeOrPriority) {
        cc.assertID(listener && nodeOrPriority, 3503);
        if (!(cc.js.isNumber(nodeOrPriority) || nodeOrPriority instanceof cc._BaseNode)) {
          cc.warnID(3506);
          return;
        }
        if (listener instanceof cc.EventListener) {
          if (listener._isRegistered()) {
            cc.logID(3505);
            return;
          }
        } else {
          cc.assertID(!cc.js.isNumber(nodeOrPriority), 3504);
          listener = cc.EventListener.create(listener);
        }
        if (!listener.checkAvailable()) return;
        if (cc.js.isNumber(nodeOrPriority)) {
          if (0 === nodeOrPriority) {
            cc.logID(3500);
            return;
          }
          listener._setSceneGraphPriority(null);
          listener._setFixedPriority(nodeOrPriority);
          listener._setRegistered(true);
          listener._setPaused(false);
          this._addListener(listener);
        } else {
          listener._setSceneGraphPriority(nodeOrPriority);
          listener._setFixedPriority(0);
          listener._setRegistered(true);
          this._addListener(listener);
        }
        return listener;
      },
      addCustomListener: function addCustomListener(eventName, callback) {
        var listener = new cc.EventListener.create({
          event: cc.EventListener.CUSTOM,
          eventName: eventName,
          callback: callback
        });
        this.addListener(listener, 1);
        return listener;
      },
      removeListener: function removeListener(listener) {
        if (null == listener) return;
        var isFound, locListener = this._listenersMap;
        for (var selKey in locListener) {
          var listeners = locListener[selKey];
          var fixedPriorityListeners = listeners.getFixedPriorityListeners(), sceneGraphPriorityListeners = listeners.getSceneGraphPriorityListeners();
          isFound = this._removeListenerInVector(sceneGraphPriorityListeners, listener);
          if (isFound) this._setDirty(listener._getListenerID(), this.DIRTY_SCENE_GRAPH_PRIORITY); else {
            isFound = this._removeListenerInVector(fixedPriorityListeners, listener);
            isFound && this._setDirty(listener._getListenerID(), this.DIRTY_FIXED_PRIORITY);
          }
          if (listeners.empty()) {
            delete this._priorityDirtyFlagMap[listener._getListenerID()];
            delete locListener[selKey];
          }
          if (isFound) break;
        }
        if (!isFound) {
          var locToAddedListeners = this._toAddedListeners;
          for (var i = locToAddedListeners.length - 1; i >= 0; i--) {
            var selListener = locToAddedListeners[i];
            if (selListener === listener) {
              cc.js.array.removeAt(locToAddedListeners, i);
              selListener._setRegistered(false);
              break;
            }
          }
        }
        this._currentTouchListener === listener && this._clearCurTouch();
      },
      _clearCurTouch: function _clearCurTouch() {
        this._currentTouchListener = null;
        this._currentTouch = null;
      },
      _removeListenerInCallback: function _removeListenerInCallback(listeners, callback) {
        if (null == listeners) return false;
        for (var i = listeners.length - 1; i >= 0; i--) {
          var selListener = listeners[i];
          if (selListener._onCustomEvent === callback || selListener._onEvent === callback) {
            selListener._setRegistered(false);
            if (null != selListener._getSceneGraphPriority()) {
              this._dissociateNodeAndEventListener(selListener._getSceneGraphPriority(), selListener);
              selListener._setSceneGraphPriority(null);
            }
            0 === this._inDispatch ? cc.js.array.removeAt(listeners, i) : this._toRemovedListeners.push(selListener);
            return true;
          }
        }
        return false;
      },
      _removeListenerInVector: function _removeListenerInVector(listeners, listener) {
        if (null == listeners) return false;
        for (var i = listeners.length - 1; i >= 0; i--) {
          var selListener = listeners[i];
          if (selListener === listener) {
            selListener._setRegistered(false);
            if (null != selListener._getSceneGraphPriority()) {
              this._dissociateNodeAndEventListener(selListener._getSceneGraphPriority(), selListener);
              selListener._setSceneGraphPriority(null);
            }
            0 === this._inDispatch ? cc.js.array.removeAt(listeners, i) : this._toRemovedListeners.push(selListener);
            return true;
          }
        }
        return false;
      },
      removeListeners: function removeListeners(listenerType, recursive) {
        var i, _t = this;
        if (!(cc.js.isNumber(listenerType) || listenerType instanceof cc._BaseNode)) {
          cc.warnID(3506);
          return;
        }
        if (void 0 !== listenerType._id) {
          var listeners = _t._nodeListenersMap[listenerType._id], i;
          if (listeners) {
            var listenersCopy = cc.js.array.copy(listeners);
            for (i = 0; i < listenersCopy.length; i++) _t.removeListener(listenersCopy[i]);
            delete _t._nodeListenersMap[listenerType._id];
          }
          var locToAddedListeners = _t._toAddedListeners;
          for (i = 0; i < locToAddedListeners.length; ) {
            var listener = locToAddedListeners[i];
            if (listener._getSceneGraphPriority() === listenerType) {
              listener._setSceneGraphPriority(null);
              listener._setRegistered(false);
              locToAddedListeners.splice(i, 1);
            } else ++i;
          }
          if (true === recursive) {
            var locChildren = listenerType.children, len;
            for (i = 0, len = locChildren.length; i < len; i++) _t.removeListeners(locChildren[i], true);
          }
        } else listenerType === cc.EventListener.TOUCH_ONE_BY_ONE ? _t._removeListenersForListenerID(ListenerID.TOUCH_ONE_BY_ONE) : listenerType === cc.EventListener.TOUCH_ALL_AT_ONCE ? _t._removeListenersForListenerID(ListenerID.TOUCH_ALL_AT_ONCE) : listenerType === cc.EventListener.MOUSE ? _t._removeListenersForListenerID(ListenerID.MOUSE) : listenerType === cc.EventListener.ACCELERATION ? _t._removeListenersForListenerID(ListenerID.ACCELERATION) : listenerType === cc.EventListener.KEYBOARD ? _t._removeListenersForListenerID(ListenerID.KEYBOARD) : cc.logID(3501);
      },
      removeCustomListeners: function removeCustomListeners(customEventName) {
        this._removeListenersForListenerID(customEventName);
      },
      removeAllListeners: function removeAllListeners() {
        var locListeners = this._listenersMap, locInternalCustomEventIDs = this._internalCustomListenerIDs;
        for (var selKey in locListeners) -1 === locInternalCustomEventIDs.indexOf(selKey) && this._removeListenersForListenerID(selKey);
      },
      setPriority: function setPriority(listener, fixedPriority) {
        if (null == listener) return;
        var locListeners = this._listenersMap;
        for (var selKey in locListeners) {
          var selListeners = locListeners[selKey];
          var fixedPriorityListeners = selListeners.getFixedPriorityListeners();
          if (fixedPriorityListeners) {
            var found = fixedPriorityListeners.indexOf(listener);
            if (-1 !== found) {
              null != listener._getSceneGraphPriority() && cc.logID(3502);
              if (listener._getFixedPriority() !== fixedPriority) {
                listener._setFixedPriority(fixedPriority);
                this._setDirty(listener._getListenerID(), this.DIRTY_FIXED_PRIORITY);
              }
              return;
            }
          }
        }
      },
      setEnabled: function setEnabled(enabled) {
        this._isEnabled = enabled;
      },
      isEnabled: function isEnabled() {
        return this._isEnabled;
      },
      dispatchEvent: function dispatchEvent(event) {
        if (!this._isEnabled) return;
        this._updateDirtyFlagForSceneGraph();
        this._inDispatch++;
        if (!event || !event.getType) {
          cc.errorID(3511);
          return;
        }
        if (event.getType().startsWith(cc.Event.TOUCH)) {
          this._dispatchTouchEvent(event);
          this._inDispatch--;
          return;
        }
        var listenerID = __getListenerID(event);
        this._sortEventListeners(listenerID);
        var selListeners = this._listenersMap[listenerID];
        if (null != selListeners) {
          this._dispatchEventToListeners(selListeners, this._onListenerCallback, event);
          this._onUpdateListeners(selListeners);
        }
        this._inDispatch--;
      },
      _onListenerCallback: function _onListenerCallback(listener, event) {
        event.currentTarget = listener._target;
        listener._onEvent(event);
        return event.isStopped();
      },
      dispatchCustomEvent: function dispatchCustomEvent(eventName, optionalUserData) {
        var ev = new cc.Event.EventCustom(eventName);
        ev.setUserData(optionalUserData);
        this.dispatchEvent(ev);
      }
    };
    js.get(cc, "eventManager", (function() {
      cc.errorID(1405, "cc.eventManager", "cc.EventTarget or cc.systemEvent");
      return eventManager;
    }));
    module.exports = cc.internal.eventManager = eventManager;
  }), {
    "../platform/js": 161,
    "./CCEventListener": 100
  } ],
  102: [ (function(require, module, exports) {
    "use strict";
    cc.Touch = function(x, y, id) {
      this._lastModified = 0;
      this.setTouchInfo(id, x, y);
    };
    cc.Touch.prototype = {
      constructor: cc.Touch,
      getLocation: function getLocation() {
        return cc.v2(this._point.x, this._point.y);
      },
      getLocationX: function getLocationX() {
        return this._point.x;
      },
      getLocationY: function getLocationY() {
        return this._point.y;
      },
      getPreviousLocation: function getPreviousLocation() {
        return cc.v2(this._prevPoint.x, this._prevPoint.y);
      },
      getStartLocation: function getStartLocation() {
        return cc.v2(this._startPoint.x, this._startPoint.y);
      },
      getDelta: function getDelta() {
        return this._point.sub(this._prevPoint);
      },
      getLocationInView: function getLocationInView() {
        return cc.v2(this._point.x, cc.view._designResolutionSize.height - this._point.y);
      },
      getPreviousLocationInView: function getPreviousLocationInView() {
        return cc.v2(this._prevPoint.x, cc.view._designResolutionSize.height - this._prevPoint.y);
      },
      getStartLocationInView: function getStartLocationInView() {
        return cc.v2(this._startPoint.x, cc.view._designResolutionSize.height - this._startPoint.y);
      },
      getID: function getID() {
        return this._id;
      },
      setTouchInfo: function setTouchInfo(id, x, y) {
        this._prevPoint = this._point;
        this._point = cc.v2(x || 0, y || 0);
        this._id = id;
        if (!this._startPointCaptured) {
          this._startPoint = cc.v2(this._point);
          cc.view._convertPointWithScale(this._startPoint);
          this._startPointCaptured = true;
        }
      },
      _setPoint: function _setPoint(x, y) {
        if (void 0 === y) {
          this._point.x = x.x;
          this._point.y = x.y;
        } else {
          this._point.x = x;
          this._point.y = y;
        }
      },
      _setPrevPoint: function _setPrevPoint(x, y) {
        this._prevPoint = void 0 === y ? cc.v2(x.x, x.y) : cc.v2(x || 0, y || 0);
      }
    };
  }), {} ],
  103: [ (function(require, module, exports) {
    "use strict";
    require("./CCEvent");
    require("./CCTouch");
    require("./CCEventListener");
    var eventManager = require("./CCEventManager");
    module.exports = eventManager;
    false;
  }), {
    "./CCEvent": 99,
    "./CCEventListener": 100,
    "./CCEventManager": 101,
    "./CCTouch": 102
  } ],
  104: [ (function(require, module, exports) {
    "use strict";
    var js = cc.js;
    var CallbacksInvoker = require("../platform/callbacks-invoker");
    function EventListeners() {
      CallbacksInvoker.call(this);
    }
    js.extend(EventListeners, CallbacksInvoker);
    EventListeners.prototype.emit = function(event, captureListeners) {
      var key = event.type;
      var list = this._callbackTable[key];
      if (list) {
        var rootInvoker = !list.isInvoking;
        list.isInvoking = true;
        var infos = list.callbackInfos;
        for (var i = 0, len = infos.length; i < len; ++i) {
          var info = infos[i];
          if (info && info.callback) {
            info.callback.call(info.target, event, captureListeners);
            if (event._propagationImmediateStopped) break;
          }
        }
        if (rootInvoker) {
          list.isInvoking = false;
          list.containCanceled && list.purgeCanceled();
        }
      }
    };
    module.exports = EventListeners;
    false;
  }), {
    "../platform/callbacks-invoker": 154
  } ],
  105: [ (function(require, module, exports) {
    "use strict";
    var js = require("../platform/js");
    var CallbacksInvoker = require("../platform/callbacks-invoker");
    var fastRemove = js.array.fastRemove;
    function EventTarget() {
      CallbacksInvoker.call(this);
    }
    js.extend(EventTarget, CallbacksInvoker);
    var proto = EventTarget.prototype;
    proto.__on = proto.on;
    proto.on = function(type, callback, target, once) {
      if (!callback) {
        cc.errorID(6800);
        return;
      }
      if (!this.hasEventListener(type, callback, target)) {
        this.__on(type, callback, target, once);
        target && target.__eventTargets && target.__eventTargets.push(this);
      }
      return callback;
    };
    proto.__off = proto.off;
    proto.off = function(type, callback, target) {
      if (callback) {
        this.__off(type, callback, target);
        target && target.__eventTargets && fastRemove(target.__eventTargets, this);
      } else {
        var list = this._callbackTable[type];
        if (!list) return;
        var infos = list.callbackInfos;
        for (var i = 0; i < infos.length; ++i) {
          var _target = infos[i] && infos[i].target;
          _target && _target.__eventTargets && fastRemove(_target.__eventTargets, this);
        }
        this.removeAll(type);
      }
    };
    proto.targetOff = function(target) {
      this.removeAll(target);
      target && target.__eventTargets && fastRemove(target.__eventTargets, this);
    };
    proto.once = function(type, callback, target) {
      this.on(type, callback, target, true);
    };
    proto.dispatchEvent = function(event) {
      this.emit(event.type, event);
    };
    cc.EventTarget = module.exports = EventTarget;
  }), {
    "../platform/callbacks-invoker": 154,
    "../platform/js": 161
  } ],
  106: [ (function(require, module, exports) {
    "use strict";
    var js = require("../platform/js");
    cc.Event = function(type, bubbles) {
      this.type = type;
      this.bubbles = !!bubbles;
      this.target = null;
      this.currentTarget = null;
      this.eventPhase = 0;
      this._propagationStopped = false;
      this._propagationImmediateStopped = false;
    };
    cc.Event.prototype = {
      constructor: cc.Event,
      unuse: function unuse() {
        this.type = cc.Event.NO_TYPE;
        this.target = null;
        this.currentTarget = null;
        this.eventPhase = cc.Event.NONE;
        this._propagationStopped = false;
        this._propagationImmediateStopped = false;
      },
      reuse: function reuse(type, bubbles) {
        this.type = type;
        this.bubbles = bubbles || false;
      },
      stopPropagation: function stopPropagation() {
        this._propagationStopped = true;
      },
      stopPropagationImmediate: function stopPropagationImmediate() {
        this._propagationImmediateStopped = true;
      },
      isStopped: function isStopped() {
        return this._propagationStopped || this._propagationImmediateStopped;
      },
      getCurrentTarget: function getCurrentTarget() {
        return this.currentTarget;
      },
      getType: function getType() {
        return this.type;
      }
    };
    cc.Event.NO_TYPE = "no_type";
    cc.Event.TOUCH = "touch";
    cc.Event.MOUSE = "mouse";
    cc.Event.KEYBOARD = "keyboard";
    cc.Event.ACCELERATION = "acceleration";
    cc.Event.NONE = 0;
    cc.Event.CAPTURING_PHASE = 1;
    cc.Event.AT_TARGET = 2;
    cc.Event.BUBBLING_PHASE = 3;
    var EventCustom = function EventCustom(type, bubbles) {
      cc.Event.call(this, type, bubbles);
      this.detail = null;
    };
    js.extend(EventCustom, cc.Event);
    EventCustom.prototype.reset = EventCustom;
    EventCustom.prototype.setUserData = function(data) {
      this.detail = data;
    };
    EventCustom.prototype.getUserData = function() {
      return this.detail;
    };
    EventCustom.prototype.getEventName = cc.Event.prototype.getType;
    var MAX_POOL_SIZE = 10;
    var _eventPool = new js.Pool(MAX_POOL_SIZE);
    EventCustom.put = function(event) {
      _eventPool.put(event);
    };
    EventCustom.get = function(type, bubbles) {
      var event = _eventPool._get();
      event ? event.reset(type, bubbles) : event = new EventCustom(type, bubbles);
      return event;
    };
    cc.Event.EventCustom = EventCustom;
    module.exports = cc.Event;
  }), {
    "../platform/js": 161
  } ],
  107: [ (function(require, module, exports) {
    "use strict";
    require("./event");
    require("./event-listeners");
    require("./event-target");
    require("./system-event");
  }), {
    "./event": 106,
    "./event-listeners": 104,
    "./event-target": 105,
    "./system-event": 108
  } ],
  108: [ (function(require, module, exports) {
    "use strict";
    var EventTarget = require("../event/event-target");
    var eventManager = require("../event-manager");
    var inputManger = require("../platform/CCInputManager");
    var EventType = cc.Enum({
      KEY_DOWN: "keydown",
      KEY_UP: "keyup",
      DEVICEMOTION: "devicemotion"
    });
    var keyboardListener = null;
    var accelerationListener = null;
    var SystemEvent = cc.Class({
      name: "SystemEvent",
      extends: EventTarget,
      statics: {
        EventType: EventType
      },
      setAccelerometerEnabled: function setAccelerometerEnabled(isEnable) {
        false;
        isEnable && window.DeviceMotionEvent && "function" === typeof DeviceMotionEvent.requestPermission ? DeviceMotionEvent.requestPermission().then((function(response) {
          console.log("Device Motion Event request permission: " + response);
          inputManger.setAccelerometerEnabled("granted" === response);
        })) : inputManger.setAccelerometerEnabled(isEnable);
      },
      setAccelerometerInterval: function setAccelerometerInterval(interval) {
        false;
        inputManger.setAccelerometerInterval(interval);
      },
      on: function on(type, callback, target, once) {
        false;
        this._super(type, callback, target, once);
        if (type === EventType.KEY_DOWN || type === EventType.KEY_UP) {
          keyboardListener || (keyboardListener = cc.EventListener.create({
            event: cc.EventListener.KEYBOARD,
            onKeyPressed: function onKeyPressed(keyCode, event) {
              event.type = EventType.KEY_DOWN;
              cc.systemEvent.dispatchEvent(event);
            },
            onKeyReleased: function onKeyReleased(keyCode, event) {
              event.type = EventType.KEY_UP;
              cc.systemEvent.dispatchEvent(event);
            }
          }));
          eventManager.hasEventListener(cc.EventListener.ListenerID.KEYBOARD) || eventManager.addListener(keyboardListener, 1);
        }
        if (type === EventType.DEVICEMOTION) {
          accelerationListener || (accelerationListener = cc.EventListener.create({
            event: cc.EventListener.ACCELERATION,
            callback: function callback(acc, event) {
              event.type = EventType.DEVICEMOTION;
              cc.systemEvent.dispatchEvent(event);
            }
          }));
          eventManager.hasEventListener(cc.EventListener.ListenerID.ACCELERATION) || eventManager.addListener(accelerationListener, 1);
        }
      },
      off: function off(type, callback, target) {
        false;
        this._super(type, callback, target);
        if (keyboardListener && (type === EventType.KEY_DOWN || type === EventType.KEY_UP)) {
          var hasKeyDownEventListener = this.hasEventListener(EventType.KEY_DOWN);
          var hasKeyUpEventListener = this.hasEventListener(EventType.KEY_UP);
          hasKeyDownEventListener || hasKeyUpEventListener || eventManager.removeListener(keyboardListener);
        }
        accelerationListener && type === EventType.DEVICEMOTION && eventManager.removeListener(accelerationListener);
      }
    });
    cc.SystemEvent = module.exports = SystemEvent;
    cc.systemEvent = new cc.SystemEvent();
  }), {
    "../event-manager": 103,
    "../event/event-target": 105,
    "../platform/CCInputManager": 145
  } ],
  109: [ (function(require, module, exports) {
    "use strict";
    var RenderComponent = require("../components/CCRenderComponent");
    var Material = require("../assets/material/CCMaterial");
    var Types = require("./types");
    var LineCap = Types.LineCap;
    var LineJoin = Types.LineJoin;
    var Graphics = cc.Class({
      name: "cc.Graphics",
      extends: RenderComponent,
      editor: false,
      ctor: function ctor() {
        this._impl = new Graphics._Impl(this);
      },
      properties: {
        _lineWidth: 2,
        _strokeColor: cc.Color.BLACK,
        _lineJoin: LineJoin.MITER,
        _lineCap: LineCap.BUTT,
        _fillColor: cc.Color.WHITE,
        _miterLimit: 10,
        lineWidth: {
          get: function get() {
            return this._lineWidth;
          },
          set: function set(value) {
            this._lineWidth = value;
            this._impl.lineWidth = value;
          }
        },
        lineJoin: {
          get: function get() {
            return this._lineJoin;
          },
          set: function set(value) {
            this._lineJoin = value;
            this._impl.lineJoin = value;
          },
          type: LineJoin
        },
        lineCap: {
          get: function get() {
            return this._lineCap;
          },
          set: function set(value) {
            this._lineCap = value;
            this._impl.lineCap = value;
          },
          type: LineCap
        },
        strokeColor: {
          get: function get() {
            return this._strokeColor;
          },
          set: function set(value) {
            this._impl.strokeColor = this._strokeColor = cc.color(value);
          }
        },
        fillColor: {
          get: function get() {
            return this._fillColor;
          },
          set: function set(value) {
            this._impl.fillColor = this._fillColor = cc.color(value);
          }
        },
        miterLimit: {
          get: function get() {
            return this._miterLimit;
          },
          set: function set(value) {
            this._miterLimit = value;
            this._impl.miterLimit = value;
          }
        }
      },
      statics: {
        LineJoin: LineJoin,
        LineCap: LineCap
      },
      onRestore: function onRestore() {
        this._impl || (this._impl = new Graphics._Impl(this));
      },
      onDestroy: function onDestroy() {
        this.clear(true);
        this._super();
        this._impl = null;
      },
      _getDefaultMaterial: function _getDefaultMaterial() {
        return Material.getBuiltinMaterial("2d-graphics");
      },
      _updateMaterial: function _updateMaterial() {
        var material = this._materials[0];
        if (!material) return;
        void 0 !== material.getDefine("CC_USE_MODEL") && material.define("CC_USE_MODEL", true);
        void 0 !== material.getDefine("CC_SUPPORT_standard_derivatives") && cc.sys.glExtension("OES_standard_derivatives") && material.define("CC_SUPPORT_standard_derivatives", true);
      },
      moveTo: function moveTo(x, y) {
        if (true, x instanceof cc.Vec2) {
          cc.warn("[moveTo] : Can not pass Vec2 as [x, y] value, please check it.");
          return;
        }
        this._impl.moveTo(x, y);
      },
      lineTo: function lineTo(x, y) {
        if (true, x instanceof cc.Vec2) {
          cc.warn("[moveTo] : Can not pass Vec2 as [x, y] value, please check it.");
          return;
        }
        this._impl.lineTo(x, y);
      },
      bezierCurveTo: function bezierCurveTo(c1x, c1y, c2x, c2y, x, y) {
        this._impl.bezierCurveTo(c1x, c1y, c2x, c2y, x, y);
      },
      quadraticCurveTo: function quadraticCurveTo(cx, cy, x, y) {
        this._impl.quadraticCurveTo(cx, cy, x, y);
      },
      arc: function arc(cx, cy, r, startAngle, endAngle, counterclockwise) {
        this._impl.arc(cx, cy, r, startAngle, endAngle, counterclockwise);
      },
      ellipse: function ellipse(cx, cy, rx, ry) {
        this._impl.ellipse(cx, cy, rx, ry);
      },
      circle: function circle(cx, cy, r) {
        this._impl.circle(cx, cy, r);
      },
      rect: function rect(x, y, w, h) {
        this._impl.rect(x, y, w, h);
      },
      roundRect: function roundRect(x, y, w, h, r) {
        this._impl.roundRect(x, y, w, h, r);
      },
      fillRect: function fillRect(x, y, w, h) {
        this.rect(x, y, w, h);
        this.fill();
      },
      clear: function clear(clean) {
        this._impl.clear(clean);
        this._assembler && this._assembler.clear(clean);
      },
      close: function close() {
        this._impl.close();
      },
      stroke: function stroke() {
        this._assembler || this._resetAssembler();
        this._assembler.stroke(this);
      },
      fill: function fill() {
        this._assembler || this._resetAssembler();
        this._assembler.fill(this);
      }
    });
    cc.Graphics = module.exports = Graphics;
    cc.Graphics.Types = Types;
    cc.Graphics.Helper = require("./helper");
  }), {
    "../assets/material/CCMaterial": 67,
    "../components/CCRenderComponent": 94,
    "./helper": 110,
    "./types": 112
  } ],
  110: [ (function(require, module, exports) {
    "use strict";
    var PointFlags = require("./types").PointFlags;
    var PI = Math.PI;
    var min = Math.min;
    var max = Math.max;
    var cos = Math.cos;
    var sin = Math.sin;
    var abs = Math.abs;
    var sign = Math.sign;
    var KAPPA90 = .5522847493;
    function arc(ctx, cx, cy, r, startAngle, endAngle, counterclockwise) {
      counterclockwise = counterclockwise || false;
      var a = 0, da = 0, hda = 0, kappa = 0;
      var dx = 0, dy = 0, x = 0, y = 0, tanx = 0, tany = 0;
      var px = 0, py = 0, ptanx = 0, ptany = 0;
      var i, ndivs;
      da = endAngle - startAngle;
      if (counterclockwise) if (abs(da) >= 2 * PI) da = 2 * PI; else while (da < 0) da += 2 * PI; else if (abs(da) >= 2 * PI) da = 2 * -PI; else while (da > 0) da -= 2 * PI;
      ndivs = 0 | max(1, min(abs(da) / (.5 * PI) + .5, 5));
      hda = da / ndivs / 2;
      kappa = abs(4 / 3 * (1 - cos(hda)) / sin(hda));
      counterclockwise || (kappa = -kappa);
      for (i = 0; i <= ndivs; i++) {
        a = startAngle + da * (i / ndivs);
        dx = cos(a);
        dy = sin(a);
        x = cx + dx * r;
        y = cy + dy * r;
        tanx = -dy * r * kappa;
        tany = dx * r * kappa;
        0 === i ? ctx.moveTo(x, y) : ctx.bezierCurveTo(px + ptanx, py + ptany, x - tanx, y - tany, x, y);
        px = x;
        py = y;
        ptanx = tanx;
        ptany = tany;
      }
    }
    function ellipse(ctx, cx, cy, rx, ry) {
      ctx.moveTo(cx - rx, cy);
      ctx.bezierCurveTo(cx - rx, cy + ry * KAPPA90, cx - rx * KAPPA90, cy + ry, cx, cy + ry);
      ctx.bezierCurveTo(cx + rx * KAPPA90, cy + ry, cx + rx, cy + ry * KAPPA90, cx + rx, cy);
      ctx.bezierCurveTo(cx + rx, cy - ry * KAPPA90, cx + rx * KAPPA90, cy - ry, cx, cy - ry);
      ctx.bezierCurveTo(cx - rx * KAPPA90, cy - ry, cx - rx, cy - ry * KAPPA90, cx - rx, cy);
      ctx.close();
    }
    function roundRect(ctx, x, y, w, h, r) {
      if (r < .1) {
        ctx.rect(x, y, w, h);
        return;
      }
      var rx = min(r, .5 * abs(w)) * sign(w), ry = min(r, .5 * abs(h)) * sign(h);
      ctx.moveTo(x, y + ry);
      ctx.lineTo(x, y + h - ry);
      ctx.bezierCurveTo(x, y + h - ry * (1 - KAPPA90), x + rx * (1 - KAPPA90), y + h, x + rx, y + h);
      ctx.lineTo(x + w - rx, y + h);
      ctx.bezierCurveTo(x + w - rx * (1 - KAPPA90), y + h, x + w, y + h - ry * (1 - KAPPA90), x + w, y + h - ry);
      ctx.lineTo(x + w, y + ry);
      ctx.bezierCurveTo(x + w, y + ry * (1 - KAPPA90), x + w - rx * (1 - KAPPA90), y, x + w - rx, y);
      ctx.lineTo(x + rx, y);
      ctx.bezierCurveTo(x + rx * (1 - KAPPA90), y, x, y + ry * (1 - KAPPA90), x, y + ry);
      ctx.close();
    }
    function tesselateBezier(ctx, x1, y1, x2, y2, x3, y3, x4, y4, level, type) {
      var x12, y12, x23, y23, x34, y34, x123, y123, x234, y234, x1234, y1234;
      var dx, dy, d2, d3;
      if (level > 10) return;
      x12 = .5 * (x1 + x2);
      y12 = .5 * (y1 + y2);
      x23 = .5 * (x2 + x3);
      y23 = .5 * (y2 + y3);
      x34 = .5 * (x3 + x4);
      y34 = .5 * (y3 + y4);
      x123 = .5 * (x12 + x23);
      y123 = .5 * (y12 + y23);
      dx = x4 - x1;
      dy = y4 - y1;
      d2 = abs((x2 - x4) * dy - (y2 - y4) * dx);
      d3 = abs((x3 - x4) * dy - (y3 - y4) * dx);
      if ((d2 + d3) * (d2 + d3) < ctx._tessTol * (dx * dx + dy * dy)) {
        ctx._addPoint(x4, y4, 0 === type ? type | PointFlags.PT_BEVEL : type);
        return;
      }
      x234 = .5 * (x23 + x34);
      y234 = .5 * (y23 + y34);
      x1234 = .5 * (x123 + x234);
      y1234 = .5 * (y123 + y234);
      tesselateBezier(ctx, x1, y1, x12, y12, x123, y123, x1234, y1234, level + 1, 0);
      tesselateBezier(ctx, x1234, y1234, x234, y234, x34, y34, x4, y4, level + 1, type);
    }
    module.exports = {
      arc: arc,
      ellipse: ellipse,
      roundRect: roundRect,
      tesselateBezier: tesselateBezier
    };
  }), {
    "./types": 112
  } ],
  111: [ (function(require, module, exports) {
    "use strict";
    require("./graphics");
  }), {
    "./graphics": 109
  } ],
  112: [ (function(require, module, exports) {
    "use strict";
    var LineCap = cc.Enum({
      BUTT: 0,
      ROUND: 1,
      SQUARE: 2
    });
    var LineJoin = cc.Enum({
      BEVEL: 0,
      ROUND: 1,
      MITER: 2
    });
    var PointFlags = cc.Enum({
      PT_CORNER: 1,
      PT_LEFT: 2,
      PT_BEVEL: 4,
      PT_INNERBEVEL: 8
    });
    module.exports = {
      LineCap: LineCap,
      LineJoin: LineJoin,
      PointFlags: PointFlags
    };
  }), {} ],
  113: [ (function(require, module, exports) {
    "use strict";
    require("./platform");
    require("./assets");
    true;
    require("./CCNode");
    require("./CCPrivateNode");
    require("./CCScene");
    require("./components");
    require("./graphics");
    require("./collider");
    require("./collider/CCIntersection");
    require("./physics");
    require("./camera/CCCamera");
    require("./geom-utils");
    require("./mesh");
    require("./3d");
    require("./base-ui/CCWidgetManager");
  }), {
    "./3d": void 0,
    "./CCNode": 16,
    "./CCPrivateNode": 17,
    "./CCScene": 18,
    "./assets": 65,
    "./base-ui/CCWidgetManager": 76,
    "./camera/CCCamera": 77,
    "./collider": 84,
    "./collider/CCIntersection": void 0,
    "./components": 97,
    "./geom-utils": void 0,
    "./graphics": 111,
    "./mesh": void 0,
    "./physics": 126,
    "./platform": 158
  } ],
  114: [ (function(require, module, exports) {
    "use strict";
    var CompScheduler = require("./component-scheduler");
    var Flags = require("./platform/CCObject").Flags;
    var js = require("./platform/js");
    var callerFunctor = false;
    var MAX_POOL_SIZE = 4;
    var IsPreloadStarted = Flags.IsPreloadStarted;
    var IsOnLoadStarted = Flags.IsOnLoadStarted;
    var IsOnLoadCalled = Flags.IsOnLoadCalled;
    var Deactivating = Flags.Deactivating;
    var callPreloadInTryCatch = false;
    var callOnLoadInTryCatch = false;
    var callOnDestroyInTryCatch = false;
    var callOnFocusInTryCatch = false;
    var callOnLostFocusInTryCatch = false;
    var UnsortedInvoker = cc.Class({
      extends: CompScheduler.LifeCycleInvoker,
      add: function add(comp) {
        this._zero.array.push(comp);
      },
      remove: function remove(comp) {
        this._zero.fastRemove(comp);
      },
      cancelInactive: function cancelInactive(flagToClear) {
        CompScheduler.LifeCycleInvoker.stableRemoveInactive(this._zero, flagToClear);
      },
      invoke: function invoke() {
        this._invoke(this._zero);
        this._zero.array.length = 0;
      }
    });
    var invokePreload = CompScheduler.createInvokeImpl("c.__preload();");
    var invokeOnLoad = CompScheduler.createInvokeImpl("c.onLoad();c._objFlags|=" + IsOnLoadCalled, false, IsOnLoadCalled);
    var activateTasksPool = new js.Pool(MAX_POOL_SIZE);
    activateTasksPool.get = function getActivateTask() {
      var task = this._get() || {
        preload: new UnsortedInvoker(invokePreload),
        onLoad: new CompScheduler.OneOffInvoker(invokeOnLoad),
        onEnable: new CompScheduler.OneOffInvoker(CompScheduler.invokeOnEnable)
      };
      task.preload._zero.i = -1;
      var invoker = task.onLoad;
      invoker._zero.i = -1;
      invoker._neg.i = -1;
      invoker._pos.i = -1;
      invoker = task.onEnable;
      invoker._zero.i = -1;
      invoker._neg.i = -1;
      invoker._pos.i = -1;
      return task;
    };
    function _componentCorrupted(node, comp, index) {
      false;
      comp ? node._removeComponent(comp) : js.array.removeAt(node._components, index);
    }
    function _onLoadInEditor(comp) {
      if (comp.onLoad && !cc.engine._isPlaying) {
        var focused = Editor.Selection.curActivate("node") === comp.node.uuid;
        focused ? comp.onFocusInEditor && callOnFocusInTryCatch(comp) : comp.onLostFocusInEditor && callOnLostFocusInTryCatch(comp);
      }
      true;
      _Scene.AssetsWatcher.start(comp);
    }
    function ctor() {
      this._activatingStack = [];
    }
    var NodeActivator = cc.Class({
      ctor: ctor,
      reset: ctor,
      _activateNodeRecursively: function _activateNodeRecursively(node, preloadInvoker, onLoadInvoker, onEnableInvoker) {
        if (node._objFlags & Deactivating) {
          cc.errorID(3816, node.name);
          return;
        }
        node._activeInHierarchy = true;
        var originCount = node._components.length;
        for (var i = 0; i < originCount; ++i) {
          var component = node._components[i];
          if (component instanceof cc.Component) this.activateComp(component, preloadInvoker, onLoadInvoker, onEnableInvoker); else {
            _componentCorrupted(node, component, i);
            --i;
            --originCount;
          }
        }
        node._childArrivalOrder = node._children.length;
        for (var _i = 0, len = node._children.length; _i < len; ++_i) {
          var child = node._children[_i];
          child._localZOrder = 4294901760 & child._localZOrder | _i + 1;
          child._active && this._activateNodeRecursively(child, preloadInvoker, onLoadInvoker, onEnableInvoker);
        }
        node._onPostActivated(true);
      },
      _deactivateNodeRecursively: function _deactivateNodeRecursively(node) {
        false;
        node._objFlags |= Deactivating;
        node._activeInHierarchy = false;
        var originCount = node._components.length;
        for (var c = 0; c < originCount; ++c) {
          var component = node._components[c];
          if (component._enabled) {
            cc.director._compScheduler.disableComp(component);
            if (node._activeInHierarchy) {
              node._objFlags &= ~Deactivating;
              return;
            }
          }
        }
        for (var i = 0, len = node._children.length; i < len; ++i) {
          var child = node._children[i];
          if (child._activeInHierarchy) {
            this._deactivateNodeRecursively(child);
            if (node._activeInHierarchy) {
              node._objFlags &= ~Deactivating;
              return;
            }
          }
        }
        node._onPostActivated(false);
        node._objFlags &= ~Deactivating;
      },
      activateNode: function activateNode(node, active) {
        if (active) {
          var task = activateTasksPool.get();
          this._activatingStack.push(task);
          this._activateNodeRecursively(node, task.preload, task.onLoad, task.onEnable);
          task.preload.invoke();
          task.onLoad.invoke();
          task.onEnable.invoke();
          this._activatingStack.pop();
          activateTasksPool.put(task);
        } else {
          this._deactivateNodeRecursively(node);
          var stack = this._activatingStack;
          for (var i = 0; i < stack.length; i++) {
            var lastTask = stack[i];
            lastTask.preload.cancelInactive(IsPreloadStarted);
            lastTask.onLoad.cancelInactive(IsOnLoadStarted);
            lastTask.onEnable.cancelInactive();
          }
        }
        node.emit("active-in-hierarchy-changed", node);
      },
      activateComp: function(comp, preloadInvoker, onLoadInvoker, onEnableInvoker) {
        if (!cc.isValid(comp, true)) return;
        if (!(comp._objFlags & IsPreloadStarted)) {
          comp._objFlags |= IsPreloadStarted;
          comp.__preload && (preloadInvoker ? preloadInvoker.add(comp) : comp.__preload());
        }
        if (!(comp._objFlags & IsOnLoadStarted)) {
          comp._objFlags |= IsOnLoadStarted;
          if (comp.onLoad) if (onLoadInvoker) onLoadInvoker.add(comp); else {
            comp.onLoad();
            comp._objFlags |= IsOnLoadCalled;
          } else comp._objFlags |= IsOnLoadCalled;
        }
        if (comp._enabled) {
          var deactivatedOnLoading = !comp.node._activeInHierarchy;
          if (deactivatedOnLoading) return;
          cc.director._compScheduler.enableComp(comp, onEnableInvoker);
        }
      },
      destroyComp: function(comp) {
        cc.director._compScheduler.disableComp(comp);
        comp.onDestroy && comp._objFlags & IsOnLoadCalled && comp.onDestroy();
      },
      resetComp: false
    });
    module.exports = NodeActivator;
  }), {
    "./component-scheduler": 85,
    "./platform/CCObject": 147,
    "./platform/js": 161,
    "./utils/misc": 210
  } ],
  115: [ (function(require, module, exports) {
    "use strict";
    var PTM_RATIO = require("./CCPhysicsTypes").PTM_RATIO;
    var ContactType = require("./CCPhysicsTypes").ContactType;
    var pools = [];
    var pointCache = [ cc.v2(), cc.v2() ];
    var b2worldmanifold = new b2.WorldManifold();
    var worldmanifold = {
      points: [],
      separations: [],
      normal: cc.v2()
    };
    function ManifoldPoint() {
      this.localPoint = cc.v2();
      this.normalImpulse = 0;
      this.tangentImpulse = 0;
    }
    var manifoldPointCache = [ new ManifoldPoint(), new ManifoldPoint() ];
    var b2manifold = new b2.Manifold();
    var manifold = {
      type: 0,
      localPoint: cc.v2(),
      localNormal: cc.v2(),
      points: []
    };
    var impulse = {
      normalImpulses: [],
      tangentImpulses: []
    };
    function PhysicsContact() {}
    PhysicsContact.prototype.init = function(b2contact) {
      this.colliderA = b2contact.GetFixtureA().collider;
      this.colliderB = b2contact.GetFixtureB().collider;
      this.disabled = false;
      this.disabledOnce = false;
      this._impulse = null;
      this._inverted = false;
      this._b2contact = b2contact;
      b2contact._contact = this;
    };
    PhysicsContact.prototype.reset = function() {
      this.setTangentSpeed(0);
      this.resetFriction();
      this.resetRestitution();
      this.colliderA = null;
      this.colliderB = null;
      this.disabled = false;
      this._impulse = null;
      this._b2contact._contact = null;
      this._b2contact = null;
    };
    PhysicsContact.prototype.getWorldManifold = function() {
      var points = worldmanifold.points;
      var separations = worldmanifold.separations;
      var normal = worldmanifold.normal;
      this._b2contact.GetWorldManifold(b2worldmanifold);
      var b2points = b2worldmanifold.points;
      var b2separations = b2worldmanifold.separations;
      var count = this._b2contact.GetManifold().pointCount;
      points.length = separations.length = count;
      for (var i = 0; i < count; i++) {
        var p = pointCache[i];
        p.x = b2points[i].x * PTM_RATIO;
        p.y = b2points[i].y * PTM_RATIO;
        points[i] = p;
        separations[i] = b2separations[i] * PTM_RATIO;
      }
      normal.x = b2worldmanifold.normal.x;
      normal.y = b2worldmanifold.normal.y;
      if (this._inverted) {
        normal.x *= -1;
        normal.y *= -1;
      }
      return worldmanifold;
    };
    PhysicsContact.prototype.getManifold = function() {
      var points = manifold.points;
      var localNormal = manifold.localNormal;
      var localPoint = manifold.localPoint;
      var b2manifold = this._b2contact.GetManifold();
      var b2points = b2manifold.points;
      var count = points.length = b2manifold.pointCount;
      for (var i = 0; i < count; i++) {
        var p = manifoldPointCache[i];
        var b2p = b2points[i];
        p.localPoint.x = b2p.localPoint.x * PTM_RATIO;
        p.localPoint.Y = b2p.localPoint.Y * PTM_RATIO;
        p.normalImpulse = b2p.normalImpulse * PTM_RATIO;
        p.tangentImpulse = b2p.tangentImpulse;
        points[i] = p;
      }
      localPoint.x = b2manifold.localPoint.x * PTM_RATIO;
      localPoint.y = b2manifold.localPoint.y * PTM_RATIO;
      localNormal.x = b2manifold.localNormal.x;
      localNormal.y = b2manifold.localNormal.y;
      manifold.type = b2manifold.type;
      if (this._inverted) {
        localNormal.x *= -1;
        localNormal.y *= -1;
      }
      return manifold;
    };
    PhysicsContact.prototype.getImpulse = function() {
      var b2impulse = this._impulse;
      if (!b2impulse) return null;
      var normalImpulses = impulse.normalImpulses;
      var tangentImpulses = impulse.tangentImpulses;
      var count = b2impulse.count;
      for (var i = 0; i < count; i++) {
        normalImpulses[i] = b2impulse.normalImpulses[i] * PTM_RATIO;
        tangentImpulses[i] = b2impulse.tangentImpulses[i];
      }
      tangentImpulses.length = normalImpulses.length = count;
      return impulse;
    };
    PhysicsContact.prototype.emit = function(contactType) {
      var func;
      switch (contactType) {
       case ContactType.BEGIN_CONTACT:
        func = "onBeginContact";
        break;

       case ContactType.END_CONTACT:
        func = "onEndContact";
        break;

       case ContactType.PRE_SOLVE:
        func = "onPreSolve";
        break;

       case ContactType.POST_SOLVE:
        func = "onPostSolve";
      }
      var colliderA = this.colliderA;
      var colliderB = this.colliderB;
      var bodyA = colliderA.body;
      var bodyB = colliderB.body;
      var comps;
      var i, l, comp;
      if (bodyA.enabledContactListener) {
        comps = bodyA.node._components;
        this._inverted = false;
        for (i = 0, l = comps.length; i < l; i++) {
          comp = comps[i];
          comp[func] && comp[func](this, colliderA, colliderB);
        }
      }
      if (bodyB.enabledContactListener) {
        comps = bodyB.node._components;
        this._inverted = true;
        for (i = 0, l = comps.length; i < l; i++) {
          comp = comps[i];
          comp[func] && comp[func](this, colliderB, colliderA);
        }
      }
      if (this.disabled || this.disabledOnce) {
        this.setEnabled(false);
        this.disabledOnce = false;
      }
    };
    PhysicsContact.get = function(b2contact) {
      var c;
      c = 0 === pools.length ? new cc.PhysicsContact() : pools.pop();
      c.init(b2contact);
      return c;
    };
    PhysicsContact.put = function(b2contact) {
      var c = b2contact._contact;
      if (!c) return;
      pools.push(c);
      c.reset();
    };
    var _p = PhysicsContact.prototype;
    _p.setEnabled = function(value) {
      this._b2contact.SetEnabled(value);
    };
    _p.isTouching = function() {
      return this._b2contact.IsTouching();
    };
    _p.setTangentSpeed = function(value) {
      this._b2contact.SetTangentSpeed(value / PTM_RATIO);
    };
    _p.getTangentSpeed = function() {
      return this._b2contact.GetTangentSpeed() * PTM_RATIO;
    };
    _p.setFriction = function(value) {
      this._b2contact.SetFriction(value);
    };
    _p.getFriction = function() {
      return this._b2contact.GetFriction();
    };
    _p.resetFriction = function() {
      return this._b2contact.ResetFriction();
    };
    _p.setRestitution = function(value) {
      this._b2contact.SetRestitution(value);
    };
    _p.getRestitution = function() {
      return this._b2contact.GetRestitution();
    };
    _p.resetRestitution = function() {
      return this._b2contact.ResetRestitution();
    };
    PhysicsContact.ContactType = ContactType;
    cc.PhysicsContact = module.exports = PhysicsContact;
  }), {
    "./CCPhysicsTypes": 117
  } ],
  116: [ (function(require, module, exports) {
    "use strict";
    var PhysicsTypes = require("./CCPhysicsTypes");
    var ContactType = PhysicsTypes.ContactType;
    var BodyType = PhysicsTypes.BodyType;
    var RayCastType = PhysicsTypes.RayCastType;
    var DrawBits = PhysicsTypes.DrawBits;
    var PTM_RATIO = PhysicsTypes.PTM_RATIO;
    var ANGLE_TO_PHYSICS_ANGLE = PhysicsTypes.ANGLE_TO_PHYSICS_ANGLE;
    var PHYSICS_ANGLE_TO_ANGLE = PhysicsTypes.PHYSICS_ANGLE_TO_ANGLE;
    var convertToNodeRotation = require("./utils").convertToNodeRotation;
    var DebugDraw = require("./platform/CCPhysicsDebugDraw");
    var b2_aabb_tmp = new b2.AABB();
    var b2_vec2_tmp1 = new b2.Vec2();
    var b2_vec2_tmp2 = new b2.Vec2();
    var vec2_tmp = cc.v2();
    var PhysicsManager = cc.Class({
      mixins: [ cc.EventTarget ],
      statics: {
        DrawBits: DrawBits,
        PTM_RATIO: PTM_RATIO,
        VELOCITY_ITERATIONS: 10,
        POSITION_ITERATIONS: 10,
        FIXED_TIME_STEP: 1 / 60,
        MAX_ACCUMULATOR: .2
      },
      ctor: function ctor() {
        this._debugDrawFlags = 0;
        this._debugDrawer = null;
        this._world = null;
        this._bodies = [];
        this._joints = [];
        this._contactMap = {};
        this._contactID = 0;
        this._delayEvents = [];
        this._accumulator = 0;
        cc.director._scheduler && cc.director._scheduler.enableForTarget(this);
        this.enabledAccumulator = false;
      },
      pushDelayEvent: function pushDelayEvent(target, func, args) {
        this._steping ? this._delayEvents.push({
          target: target,
          func: func,
          args: args
        }) : target[func].apply(target, args);
      },
      update: function update(dt) {
        var world = this._world;
        if (!world || !this.enabled) return;
        this.emit("before-step");
        this._steping = true;
        var velocityIterations = PhysicsManager.VELOCITY_ITERATIONS;
        var positionIterations = PhysicsManager.POSITION_ITERATIONS;
        if (this.enabledAccumulator) {
          this._accumulator += dt;
          var FIXED_TIME_STEP = PhysicsManager.FIXED_TIME_STEP;
          var MAX_ACCUMULATOR = PhysicsManager.MAX_ACCUMULATOR;
          this._accumulator > MAX_ACCUMULATOR && (this._accumulator = MAX_ACCUMULATOR);
          while (this._accumulator > FIXED_TIME_STEP) {
            world.Step(FIXED_TIME_STEP, velocityIterations, positionIterations);
            this._accumulator -= FIXED_TIME_STEP;
          }
        } else {
          var timeStep = 1 / cc.game.config["frameRate"];
          world.Step(timeStep, velocityIterations, positionIterations);
        }
        if (this.debugDrawFlags) {
          this._checkDebugDrawValid();
          this._debugDrawer.clear();
          world.DrawDebugData();
        }
        this._steping = false;
        var events = this._delayEvents;
        for (var i = 0, l = events.length; i < l; i++) {
          var event = events[i];
          event.target[event.func].apply(event.target, event.args);
        }
        events.length = 0;
        this._syncNode();
      },
      testPoint: function testPoint(point) {
        var x = b2_vec2_tmp1.x = point.x / PTM_RATIO;
        var y = b2_vec2_tmp1.y = point.y / PTM_RATIO;
        var d = .2 / PTM_RATIO;
        b2_aabb_tmp.lowerBound.x = x - d;
        b2_aabb_tmp.lowerBound.y = y - d;
        b2_aabb_tmp.upperBound.x = x + d;
        b2_aabb_tmp.upperBound.y = y + d;
        var callback = this._aabbQueryCallback;
        callback.init(b2_vec2_tmp1);
        this._world.QueryAABB(callback, b2_aabb_tmp);
        var fixture = callback.getFixture();
        if (fixture) return fixture.collider;
        return null;
      },
      testAABB: function testAABB(rect) {
        b2_aabb_tmp.lowerBound.x = rect.xMin / PTM_RATIO;
        b2_aabb_tmp.lowerBound.y = rect.yMin / PTM_RATIO;
        b2_aabb_tmp.upperBound.x = rect.xMax / PTM_RATIO;
        b2_aabb_tmp.upperBound.y = rect.yMax / PTM_RATIO;
        var callback = this._aabbQueryCallback;
        callback.init();
        this._world.QueryAABB(callback, b2_aabb_tmp);
        var fixtures = callback.getFixtures();
        var colliders = fixtures.map((function(fixture) {
          return fixture.collider;
        }));
        return colliders;
      },
      rayCast: function rayCast(p1, p2, type) {
        if (p1.equals(p2)) return [];
        type = type || RayCastType.Closest;
        b2_vec2_tmp1.x = p1.x / PTM_RATIO;
        b2_vec2_tmp1.y = p1.y / PTM_RATIO;
        b2_vec2_tmp2.x = p2.x / PTM_RATIO;
        b2_vec2_tmp2.y = p2.y / PTM_RATIO;
        var callback = this._raycastQueryCallback;
        callback.init(type);
        this._world.RayCast(callback, b2_vec2_tmp1, b2_vec2_tmp2);
        var fixtures = callback.getFixtures();
        if (fixtures.length > 0) {
          var points = callback.getPoints();
          var normals = callback.getNormals();
          var fractions = callback.getFractions();
          var results = [];
          for (var i = 0, l = fixtures.length; i < l; i++) {
            var fixture = fixtures[i];
            var collider = fixture.collider;
            if (type === RayCastType.AllClosest) {
              var result = results.find((function(result) {
                return result.collider === collider;
              }));
              if (result) {
                if (fractions[i] < result.fraction) {
                  result.fixtureIndex = collider._getFixtureIndex(fixture);
                  result.point.x = points[i].x * PTM_RATIO;
                  result.point.y = points[i].y * PTM_RATIO;
                  result.normal.x = normals[i].x;
                  result.normal.y = normals[i].y;
                  result.fraction = fractions[i];
                }
                continue;
              }
            }
            results.push({
              collider: collider,
              fixtureIndex: collider._getFixtureIndex(fixture),
              point: cc.v2(points[i].x * PTM_RATIO, points[i].y * PTM_RATIO),
              normal: cc.v2(normals[i]),
              fraction: fractions[i]
            });
          }
          return results;
        }
        return [];
      },
      syncPosition: function syncPosition() {
        var bodies = this._bodies;
        for (var i = 0; i < bodies.length; i++) bodies[i].syncPosition();
      },
      syncRotation: function syncRotation() {
        var bodies = this._bodies;
        for (var i = 0; i < bodies.length; i++) bodies[i].syncRotation();
      },
      _registerContactFixture: function _registerContactFixture(fixture) {
        this._contactListener.registerContactFixture(fixture);
      },
      _unregisterContactFixture: function _unregisterContactFixture(fixture) {
        this._contactListener.unregisterContactFixture(fixture);
      },
      _addBody: function _addBody(body, bodyDef) {
        var world = this._world;
        var node = body.node;
        if (!world || !node) return;
        body._b2Body = world.CreateBody(bodyDef);
        body._b2Body.body = body;
        this._bodies.push(body);
      },
      _removeBody: function _removeBody(body) {
        var world = this._world;
        if (!world) return;
        body._b2Body.body = null;
        world.DestroyBody(body._b2Body);
        body._b2Body = null;
        cc.js.array.remove(this._bodies, body);
      },
      _addJoint: function _addJoint(joint, jointDef) {
        var b2joint = this._world.CreateJoint(jointDef);
        if (!b2joint) return;
        b2joint._joint = joint;
        joint._joint = b2joint;
        this._joints.push(joint);
      },
      _removeJoint: function _removeJoint(joint) {
        joint._isValid() && this._world.DestroyJoint(joint._joint);
        joint._joint && (joint._joint._joint = null);
        cc.js.array.remove(this._joints, joint);
      },
      _initCallback: function _initCallback() {
        if (!this._world) {
          cc.warn("Please init PhysicsManager first");
          return;
        }
        if (this._contactListener) return;
        var listener = new cc.PhysicsContactListener();
        listener.setBeginContact(this._onBeginContact);
        listener.setEndContact(this._onEndContact);
        listener.setPreSolve(this._onPreSolve);
        listener.setPostSolve(this._onPostSolve);
        this._world.SetContactListener(listener);
        this._contactListener = listener;
        this._aabbQueryCallback = new cc.PhysicsAABBQueryCallback();
        this._raycastQueryCallback = new cc.PhysicsRayCastCallback();
      },
      _init: function _init() {
        this.enabled = true;
        this.debugDrawFlags = DrawBits.e_shapeBit;
      },
      _getWorld: function _getWorld() {
        return this._world;
      },
      _syncNode: function _syncNode() {
        var bodies = this._bodies;
        for (var i = 0, l = bodies.length; i < l; i++) {
          var body = bodies[i];
          var node = body.node;
          var b2body = body._b2Body;
          var pos = b2body.GetPosition();
          vec2_tmp.x = pos.x * PTM_RATIO;
          vec2_tmp.y = pos.y * PTM_RATIO;
          var angle = b2body.GetAngle() * PHYSICS_ANGLE_TO_ANGLE;
          if (null !== node.parent.parent) {
            vec2_tmp = node.parent.convertToNodeSpaceAR(vec2_tmp);
            angle = convertToNodeRotation(node.parent, angle);
          }
          var tempMask = node._eventMask;
          node._eventMask = 0;
          node.position = vec2_tmp;
          node.angle = -angle;
          node._eventMask = tempMask;
          body.type === BodyType.Animated && body.resetVelocity();
        }
      },
      _onBeginContact: function _onBeginContact(b2contact) {
        var c = cc.PhysicsContact.get(b2contact);
        c.emit(ContactType.BEGIN_CONTACT);
      },
      _onEndContact: function _onEndContact(b2contact) {
        var c = b2contact._contact;
        if (!c) return;
        c.emit(ContactType.END_CONTACT);
        cc.PhysicsContact.put(b2contact);
      },
      _onPreSolve: function _onPreSolve(b2contact) {
        var c = b2contact._contact;
        if (!c) return;
        c.emit(ContactType.PRE_SOLVE);
      },
      _onPostSolve: function _onPostSolve(b2contact, impulse) {
        var c = b2contact._contact;
        if (!c) return;
        c._impulse = impulse;
        c.emit(ContactType.POST_SOLVE);
        c._impulse = null;
      },
      _checkDebugDrawValid: function _checkDebugDrawValid() {
        if (!this._debugDrawer || !this._debugDrawer.isValid) {
          var node = new cc.Node("PHYSICS_MANAGER_DEBUG_DRAW");
          node.zIndex = cc.macro.MAX_ZINDEX;
          cc.game.addPersistRootNode(node);
          this._debugDrawer = node.addComponent(cc.Graphics);
          var debugDraw = new DebugDraw(this._debugDrawer);
          debugDraw.SetFlags(this.debugDrawFlags);
          this._world.SetDebugDraw(debugDraw);
        }
      }
    });
    cc.js.getset(PhysicsManager.prototype, "enabled", (function() {
      return this._enabled;
    }), (function(value) {
      false;
      if (value && !this._world) {
        var world = new b2.World(new b2.Vec2(0, -10));
        world.SetAllowSleeping(true);
        this._world = world;
        this._initCallback();
      }
      this._enabled = value;
    }));
    cc.js.getset(PhysicsManager.prototype, "debugDrawFlags", (function() {
      return this._debugDrawFlags;
    }), (function(value) {
      false;
      value && !this._debugDrawFlags ? this._debugDrawer && this._debugDrawer.node && (this._debugDrawer.node.active = true) : !value && this._debugDrawFlags && this._debugDrawer && this._debugDrawer.node && (this._debugDrawer.node.active = false);
      if (value) {
        this._checkDebugDrawValid();
        this._world.m_debugDraw.SetFlags(value);
      }
      this._debugDrawFlags = value;
      if (value) {
        this._checkDebugDrawValid();
        this._world.m_debugDraw.SetFlags(value);
      }
    }));
    cc.js.getset(PhysicsManager.prototype, "gravity", (function() {
      if (this._world) {
        var g = this._world.GetGravity();
        return cc.v2(g.x * PTM_RATIO, g.y * PTM_RATIO);
      }
      return cc.v2();
    }), (function(value) {
      this._world && this._world.SetGravity(new b2.Vec2(value.x / PTM_RATIO, value.y / PTM_RATIO));
    }));
    cc.PhysicsManager = module.exports = PhysicsManager;
  }), {
    "./CCPhysicsTypes": 117,
    "./platform/CCPhysicsDebugDraw": 138,
    "./utils": 140
  } ],
  117: [ (function(require, module, exports) {
    "use strict";
    var ContactType = {
      BEGIN_CONTACT: "begin-contact",
      END_CONTACT: "end-contact",
      PRE_SOLVE: "pre-solve",
      POST_SOLVE: "post-solve"
    };
    var BodyType = cc.Enum({
      Static: 0,
      Kinematic: 1,
      Dynamic: 2,
      Animated: 3
    });
    cc.RigidBodyType = BodyType;
    var RayCastType = cc.Enum({
      Closest: 0,
      Any: 1,
      AllClosest: 2,
      All: 3
    });
    cc.RayCastType = RayCastType;
    module.exports = {
      BodyType: BodyType,
      ContactType: ContactType,
      RayCastType: RayCastType,
      DrawBits: b2.DrawFlags,
      PTM_RATIO: 32,
      ANGLE_TO_PHYSICS_ANGLE: -Math.PI / 180,
      PHYSICS_ANGLE_TO_ANGLE: -180 / Math.PI
    };
  }), {} ],
  118: [ (function(require, module, exports) {
    "use strict";
    function At(i, vertices) {
      var s = vertices.length;
      return vertices[i < 0 ? s - -i % s : i % s];
    }
    function Copy(i, j, vertices) {
      var p = [];
      while (j < i) j += vertices.length;
      for (;i <= j; ++i) p.push(At(i, vertices));
      return p;
    }
    function ConvexPartition(vertices) {
      ForceCounterClockWise(vertices);
      var list = [];
      var d, lowerDist, upperDist;
      var p;
      var lowerInt = cc.v2();
      var upperInt = cc.v2();
      var lowerIndex = 0, upperIndex = 0;
      var lowerPoly, upperPoly;
      for (var i = 0; i < vertices.length; ++i) if (Reflex(i, vertices)) {
        lowerDist = upperDist = 1e8;
        for (var j = 0; j < vertices.length; ++j) {
          if (Left(At(i - 1, vertices), At(i, vertices), At(j, vertices)) && RightOn(At(i - 1, vertices), At(i, vertices), At(j - 1, vertices))) {
            p = LineIntersect(At(i - 1, vertices), At(i, vertices), At(j, vertices), At(j - 1, vertices));
            if (Right(At(i + 1, vertices), At(i, vertices), p)) {
              d = SquareDist(At(i, vertices), p);
              if (d < lowerDist) {
                lowerDist = d;
                lowerInt = p;
                lowerIndex = j;
              }
            }
          }
          if (Left(At(i + 1, vertices), At(i, vertices), At(j + 1, vertices)) && RightOn(At(i + 1, vertices), At(i, vertices), At(j, vertices))) {
            p = LineIntersect(At(i + 1, vertices), At(i, vertices), At(j, vertices), At(j + 1, vertices));
            if (Left(At(i - 1, vertices), At(i, vertices), p)) {
              d = SquareDist(At(i, vertices), p);
              if (d < upperDist) {
                upperDist = d;
                upperIndex = j;
                upperInt = p;
              }
            }
          }
        }
        if (lowerIndex == (upperIndex + 1) % vertices.length) {
          var sp = lowerInt.add(upperInt).div(2);
          lowerPoly = Copy(i, upperIndex, vertices);
          lowerPoly.push(sp);
          upperPoly = Copy(lowerIndex, i, vertices);
          upperPoly.push(sp);
        } else {
          var highestScore = 0, bestIndex = lowerIndex;
          while (upperIndex < lowerIndex) upperIndex += vertices.length;
          for (var j = lowerIndex; j <= upperIndex; ++j) if (CanSee(i, j, vertices)) {
            var score = 1 / (SquareDist(At(i, vertices), At(j, vertices)) + 1);
            Reflex(j, vertices) ? RightOn(At(j - 1, vertices), At(j, vertices), At(i, vertices)) && LeftOn(At(j + 1, vertices), At(j, vertices), At(i, vertices)) ? score += 3 : score += 2 : score += 1;
            if (score > highestScore) {
              bestIndex = j;
              highestScore = score;
            }
          }
          lowerPoly = Copy(i, bestIndex, vertices);
          upperPoly = Copy(bestIndex, i, vertices);
        }
        list = list.concat(ConvexPartition(lowerPoly));
        list = list.concat(ConvexPartition(upperPoly));
        return list;
      }
      list.push(vertices);
      for (var i = list.length - 1; i >= 0; i--) 0 == list[i].length && list.splice(i, 0);
      return list;
    }
    function CanSee(i, j, vertices) {
      if (Reflex(i, vertices)) {
        if (LeftOn(At(i, vertices), At(i - 1, vertices), At(j, vertices)) && RightOn(At(i, vertices), At(i + 1, vertices), At(j, vertices))) return false;
      } else if (RightOn(At(i, vertices), At(i + 1, vertices), At(j, vertices)) || LeftOn(At(i, vertices), At(i - 1, vertices), At(j, vertices))) return false;
      if (Reflex(j, vertices)) {
        if (LeftOn(At(j, vertices), At(j - 1, vertices), At(i, vertices)) && RightOn(At(j, vertices), At(j + 1, vertices), At(i, vertices))) return false;
      } else if (RightOn(At(j, vertices), At(j + 1, vertices), At(i, vertices)) || LeftOn(At(j, vertices), At(j - 1, vertices), At(i, vertices))) return false;
      for (var k = 0; k < vertices.length; ++k) {
        if ((k + 1) % vertices.length == i || k == i || (k + 1) % vertices.length == j || k == j) continue;
        var intersectionPoint = cc.v2();
        if (LineIntersect2(At(i, vertices), At(j, vertices), At(k, vertices), At(k + 1, vertices), intersectionPoint)) return false;
      }
      return true;
    }
    function Reflex(i, vertices) {
      return Right(i, vertices);
    }
    function Right(a, b, c) {
      if ("undefined" === typeof c) {
        var i = a, vertices = b;
        a = At(i - 1, vertices);
        b = At(i, vertices);
        c = At(i + 1, vertices);
      }
      return Area(a, b, c) < 0;
    }
    function Left(a, b, c) {
      return Area(a, b, c) > 0;
    }
    function LeftOn(a, b, c) {
      return Area(a, b, c) >= 0;
    }
    function RightOn(a, b, c) {
      return Area(a, b, c) <= 0;
    }
    function SquareDist(a, b) {
      var dx = b.x - a.x;
      var dy = b.y - a.y;
      return dx * dx + dy * dy;
    }
    function ForceCounterClockWise(vertices) {
      IsCounterClockWise(vertices) || vertices.reverse();
    }
    function IsCounterClockWise(vertices) {
      if (vertices.length < 3) return true;
      return GetSignedArea(vertices) > 0;
    }
    function GetSignedArea(vertices) {
      var i;
      var area = 0;
      for (i = 0; i < vertices.length; i++) {
        var j = (i + 1) % vertices.length;
        area += vertices[i].x * vertices[j].y;
        area -= vertices[i].y * vertices[j].x;
      }
      area /= 2;
      return area;
    }
    function LineIntersect(p1, p2, q1, q2) {
      var i = cc.v2();
      var a1 = p2.y - p1.y;
      var b1 = p1.x - p2.x;
      var c1 = a1 * p1.x + b1 * p1.y;
      var a2 = q2.y - q1.y;
      var b2 = q1.x - q2.x;
      var c2 = a2 * q1.x + b2 * q1.y;
      var det = a1 * b2 - a2 * b1;
      if (!FloatEquals(det, 0)) {
        i.x = (b2 * c1 - b1 * c2) / det;
        i.y = (a1 * c2 - a2 * c1) / det;
      }
      return i;
    }
    function LineIntersect2(a0, a1, b0, b1, intersectionPoint) {
      if (a0 == b0 || a0 == b1 || a1 == b0 || a1 == b1) return false;
      var x1 = a0.x;
      var y1 = a0.y;
      var x2 = a1.x;
      var y2 = a1.y;
      var x3 = b0.x;
      var y3 = b0.y;
      var x4 = b1.x;
      var y4 = b1.y;
      if (Math.max(x1, x2) < Math.min(x3, x4) || Math.max(x3, x4) < Math.min(x1, x2)) return false;
      if (Math.max(y1, y2) < Math.min(y3, y4) || Math.max(y3, y4) < Math.min(y1, y2)) return false;
      var ua = (x4 - x3) * (y1 - y3) - (y4 - y3) * (x1 - x3);
      var ub = (x2 - x1) * (y1 - y3) - (y2 - y1) * (x1 - x3);
      var denom = (y4 - y3) * (x2 - x1) - (x4 - x3) * (y2 - y1);
      if (Math.abs(denom) < 1e-6) return false;
      ua /= denom;
      ub /= denom;
      if (0 < ua && ua < 1 && 0 < ub && ub < 1) {
        intersectionPoint.x = x1 + ua * (x2 - x1);
        intersectionPoint.y = y1 + ua * (y2 - y1);
        return true;
      }
      return false;
    }
    function FloatEquals(value1, value2) {
      return Math.abs(value1 - value2) <= 1e-6;
    }
    function Area(a, b, c) {
      return a.x * (b.y - c.y) + b.x * (c.y - a.y) + c.x * (a.y - b.y);
    }
    module.exports = {
      ConvexPartition: ConvexPartition,
      ForceCounterClockWise: ForceCounterClockWise,
      IsCounterClockWise: IsCounterClockWise
    };
  }), {} ],
  119: [ (function(require, module, exports) {
    "use strict";
    var NodeEvent = require("../CCNode").EventType;
    var PTM_RATIO = require("./CCPhysicsTypes").PTM_RATIO;
    var ANGLE_TO_PHYSICS_ANGLE = require("./CCPhysicsTypes").ANGLE_TO_PHYSICS_ANGLE;
    var PHYSICS_ANGLE_TO_ANGLE = require("./CCPhysicsTypes").PHYSICS_ANGLE_TO_ANGLE;
    var getWorldRotation = require("./utils").getWorldRotation;
    var BodyType = require("./CCPhysicsTypes").BodyType;
    var tempb2Vec21 = new b2.Vec2();
    var tempb2Vec22 = new b2.Vec2();
    var VEC2_ZERO = cc.Vec2.ZERO;
    var RigidBody = cc.Class({
      name: "cc.RigidBody",
      extends: cc.Component,
      editor: false,
      properties: {
        _type: BodyType.Dynamic,
        _allowSleep: true,
        _gravityScale: 1,
        _linearDamping: 0,
        _angularDamping: 0,
        _linearVelocity: cc.v2(0, 0),
        _angularVelocity: 0,
        _fixedRotation: false,
        enabled: {
          get: function get() {
            return this._enabled;
          },
          set: function set() {
            cc.warnID(8200);
          },
          visible: false,
          override: true
        },
        enabledContactListener: {
          default: false,
          tooltip: false
        },
        bullet: {
          default: false,
          tooltip: false
        },
        type: {
          type: BodyType,
          tooltip: false,
          get: function get() {
            return this._type;
          },
          set: function set(value) {
            this._type = value;
            this._b2Body && (value === BodyType.Animated ? this._b2Body.SetType(BodyType.Kinematic) : this._b2Body.SetType(value));
          }
        },
        allowSleep: {
          tooltip: false,
          get: function get() {
            if (this._b2Body) return this._b2Body.IsSleepingAllowed();
            return this._allowSleep;
          },
          set: function set(value) {
            this._allowSleep = value;
            this._b2Body && this._b2Body.SetSleepingAllowed(value);
          }
        },
        gravityScale: {
          tooltip: false,
          get: function get() {
            return this._gravityScale;
          },
          set: function set(value) {
            this._gravityScale = value;
            this._b2Body && this._b2Body.SetGravityScale(value);
          }
        },
        linearDamping: {
          tooltip: false,
          get: function get() {
            return this._linearDamping;
          },
          set: function set(value) {
            this._linearDamping = value;
            this._b2Body && this._b2Body.SetLinearDamping(this._linearDamping);
          }
        },
        angularDamping: {
          tooltip: false,
          get: function get() {
            return this._angularDamping;
          },
          set: function set(value) {
            this._angularDamping = value;
            this._b2Body && this._b2Body.SetAngularDamping(value);
          }
        },
        linearVelocity: {
          tooltip: false,
          type: cc.Vec2,
          get: function get() {
            var lv = this._linearVelocity;
            if (this._b2Body) {
              var velocity = this._b2Body.GetLinearVelocity();
              lv.x = velocity.x * PTM_RATIO;
              lv.y = velocity.y * PTM_RATIO;
            }
            return lv;
          },
          set: function set(value) {
            this._linearVelocity = value;
            var b2body = this._b2Body;
            if (b2body) {
              var temp = b2body.m_linearVelocity;
              temp.Set(value.x / PTM_RATIO, value.y / PTM_RATIO);
              b2body.SetLinearVelocity(temp);
            }
          }
        },
        angularVelocity: {
          tooltip: false,
          get: function get() {
            if (this._b2Body) return this._b2Body.GetAngularVelocity() * PHYSICS_ANGLE_TO_ANGLE;
            return this._angularVelocity;
          },
          set: function set(value) {
            this._angularVelocity = value;
            this._b2Body && this._b2Body.SetAngularVelocity(value * ANGLE_TO_PHYSICS_ANGLE);
          }
        },
        fixedRotation: {
          tooltip: false,
          get: function get() {
            return this._fixedRotation;
          },
          set: function set(value) {
            this._fixedRotation = value;
            this._b2Body && this._b2Body.SetFixedRotation(value);
          }
        },
        awake: {
          visible: false,
          tooltip: false,
          get: function get() {
            return !!this._b2Body && this._b2Body.IsAwake();
          },
          set: function set(value) {
            this._b2Body && this._b2Body.SetAwake(value);
          }
        },
        awakeOnLoad: {
          default: true,
          tooltip: false,
          animatable: false
        },
        active: {
          visible: false,
          get: function get() {
            return !!this._b2Body && this._b2Body.IsActive();
          },
          set: function set(value) {
            this._b2Body && this._b2Body.SetActive(value);
          }
        }
      },
      getLocalPoint: function getLocalPoint(worldPoint, out) {
        out = out || cc.v2();
        if (this._b2Body) {
          tempb2Vec21.Set(worldPoint.x / PTM_RATIO, worldPoint.y / PTM_RATIO);
          var pos = this._b2Body.GetLocalPoint(tempb2Vec21, out);
          out.x = pos.x * PTM_RATIO;
          out.y = pos.y * PTM_RATIO;
        }
        return out;
      },
      getWorldPoint: function getWorldPoint(localPoint, out) {
        out = out || cc.v2();
        if (this._b2Body) {
          tempb2Vec21.Set(localPoint.x / PTM_RATIO, localPoint.y / PTM_RATIO);
          var pos = this._b2Body.GetWorldPoint(tempb2Vec21, out);
          out.x = pos.x * PTM_RATIO;
          out.y = pos.y * PTM_RATIO;
        }
        return out;
      },
      getWorldVector: function getWorldVector(localVector, out) {
        out = out || cc.v2();
        if (this._b2Body) {
          tempb2Vec21.Set(localVector.x / PTM_RATIO, localVector.y / PTM_RATIO);
          var vector = this._b2Body.GetWorldVector(tempb2Vec21, out);
          out.x = vector.x * PTM_RATIO;
          out.y = vector.y * PTM_RATIO;
        }
        return out;
      },
      getLocalVector: function getLocalVector(worldVector, out) {
        out = out || cc.v2();
        if (this._b2Body) {
          tempb2Vec21.Set(worldVector.x / PTM_RATIO, worldVector.y / PTM_RATIO);
          var vector = this._b2Body.GetLocalVector(tempb2Vec21, out);
          out.x = vector.x * PTM_RATIO;
          out.y = vector.y * PTM_RATIO;
        }
        return out;
      },
      getWorldPosition: function getWorldPosition(out) {
        out = out || cc.v2();
        if (this._b2Body) {
          var pos = this._b2Body.GetPosition();
          out.x = pos.x * PTM_RATIO;
          out.y = pos.y * PTM_RATIO;
        }
        return out;
      },
      getWorldRotation: function getWorldRotation() {
        if (this._b2Body) return this._b2Body.GetAngle() * PHYSICS_ANGLE_TO_ANGLE;
        return 0;
      },
      getLocalCenter: function getLocalCenter(out) {
        out = out || cc.v2();
        if (this._b2Body) {
          var pos = this._b2Body.GetLocalCenter();
          out.x = pos.x * PTM_RATIO;
          out.y = pos.y * PTM_RATIO;
        }
        return out;
      },
      getWorldCenter: function getWorldCenter(out) {
        out = out || cc.v2();
        if (this._b2Body) {
          var pos = this._b2Body.GetWorldCenter();
          out.x = pos.x * PTM_RATIO;
          out.y = pos.y * PTM_RATIO;
        }
        return out;
      },
      getLinearVelocityFromWorldPoint: function getLinearVelocityFromWorldPoint(worldPoint, out) {
        out = out || cc.v2();
        if (this._b2Body) {
          tempb2Vec21.Set(worldPoint.x / PTM_RATIO, worldPoint.y / PTM_RATIO);
          var velocity = this._b2Body.GetLinearVelocityFromWorldPoint(tempb2Vec21, out);
          out.x = velocity.x * PTM_RATIO;
          out.y = velocity.y * PTM_RATIO;
        }
        return out;
      },
      getMass: function getMass() {
        return this._b2Body ? this._b2Body.GetMass() : 0;
      },
      getInertia: function getInertia() {
        return this._b2Body ? this._b2Body.GetInertia() * PTM_RATIO * PTM_RATIO : 0;
      },
      getJointList: function getJointList() {
        if (!this._b2Body) return [];
        var joints = [];
        var list = this._b2Body.GetJointList();
        if (!list) return [];
        joints.push(list.joint._joint);
        var prev = list.prev;
        while (prev) {
          joints.push(prev.joint._joint);
          prev = prev.prev;
        }
        var next = list.next;
        while (next) {
          joints.push(next.joint._joint);
          next = next.next;
        }
        return joints;
      },
      applyForce: function applyForce(force, point, wake) {
        if (this._b2Body) {
          tempb2Vec21.Set(force.x / PTM_RATIO, force.y / PTM_RATIO);
          tempb2Vec22.Set(point.x / PTM_RATIO, point.y / PTM_RATIO);
          this._b2Body.ApplyForce(tempb2Vec21, tempb2Vec22, wake);
        }
      },
      applyForceToCenter: function applyForceToCenter(force, wake) {
        if (this._b2Body) {
          tempb2Vec21.Set(force.x / PTM_RATIO, force.y / PTM_RATIO);
          this._b2Body.ApplyForceToCenter(tempb2Vec21, wake);
        }
      },
      applyTorque: function applyTorque(torque, wake) {
        this._b2Body && this._b2Body.ApplyTorque(torque / PTM_RATIO, wake);
      },
      applyLinearImpulse: function applyLinearImpulse(impulse, point, wake) {
        if (this._b2Body) {
          tempb2Vec21.Set(impulse.x / PTM_RATIO, impulse.y / PTM_RATIO);
          tempb2Vec22.Set(point.x / PTM_RATIO, point.y / PTM_RATIO);
          this._b2Body.ApplyLinearImpulse(tempb2Vec21, tempb2Vec22, wake);
        }
      },
      applyAngularImpulse: function applyAngularImpulse(impulse, wake) {
        this._b2Body && this._b2Body.ApplyAngularImpulse(impulse / PTM_RATIO / PTM_RATIO, wake);
      },
      syncPosition: function syncPosition(enableAnimated) {
        var b2body = this._b2Body;
        if (!b2body) return;
        var pos = this.node.convertToWorldSpaceAR(VEC2_ZERO);
        var temp;
        temp = this.type === BodyType.Animated ? b2body.GetLinearVelocity() : b2body.GetPosition();
        temp.x = pos.x / PTM_RATIO;
        temp.y = pos.y / PTM_RATIO;
        if (this.type === BodyType.Animated && enableAnimated) {
          var b2Pos = b2body.GetPosition();
          var timeStep = cc.game.config["frameRate"];
          temp.x = (temp.x - b2Pos.x) * timeStep;
          temp.y = (temp.y - b2Pos.y) * timeStep;
          b2body.SetAwake(true);
          b2body.SetLinearVelocity(temp);
        } else b2body.SetTransformVec(temp, b2body.GetAngle());
      },
      syncRotation: function syncRotation(enableAnimated) {
        var b2body = this._b2Body;
        if (!b2body) return;
        var rotation = ANGLE_TO_PHYSICS_ANGLE * getWorldRotation(this.node);
        if (this.type === BodyType.Animated && enableAnimated) {
          var b2Rotation = b2body.GetAngle();
          var timeStep = cc.game.config["frameRate"];
          b2body.SetAwake(true);
          b2body.SetAngularVelocity((rotation - b2Rotation) * timeStep);
        } else b2body.SetTransformVec(b2body.GetPosition(), rotation);
      },
      resetVelocity: function resetVelocity() {
        var b2body = this._b2Body;
        if (!b2body) return;
        var temp = b2body.m_linearVelocity;
        temp.Set(0, 0);
        b2body.SetLinearVelocity(temp);
        b2body.SetAngularVelocity(0);
      },
      onEnable: function onEnable() {
        this._init();
      },
      onDisable: function onDisable() {
        this._destroy();
      },
      _registerNodeEvents: function _registerNodeEvents() {
        var node = this.node;
        node.on(NodeEvent.POSITION_CHANGED, this._onNodePositionChanged, this);
        node.on(NodeEvent.ROTATION_CHANGED, this._onNodeRotationChanged, this);
        node.on(NodeEvent.SCALE_CHANGED, this._onNodeScaleChanged, this);
      },
      _unregisterNodeEvents: function _unregisterNodeEvents() {
        var node = this.node;
        node.off(NodeEvent.POSITION_CHANGED, this._onNodePositionChanged, this);
        node.off(NodeEvent.ROTATION_CHANGED, this._onNodeRotationChanged, this);
        node.off(NodeEvent.SCALE_CHANGED, this._onNodeScaleChanged, this);
      },
      _onNodePositionChanged: function _onNodePositionChanged() {
        this.syncPosition(true);
      },
      _onNodeRotationChanged: function _onNodeRotationChanged(event) {
        this.syncRotation(true);
      },
      _onNodeScaleChanged: function _onNodeScaleChanged(event) {
        if (this._b2Body) {
          var colliders = this.getComponents(cc.PhysicsCollider);
          for (var i = 0; i < colliders.length; i++) colliders[i].apply();
        }
      },
      _init: function _init() {
        cc.director.getPhysicsManager().pushDelayEvent(this, "__init", []);
      },
      _destroy: function _destroy() {
        cc.director.getPhysicsManager().pushDelayEvent(this, "__destroy", []);
      },
      __init: function __init() {
        if (this._inited) return;
        this._registerNodeEvents();
        var bodyDef = new b2.BodyDef();
        this.type === BodyType.Animated ? bodyDef.type = BodyType.Kinematic : bodyDef.type = this.type;
        bodyDef.allowSleep = this.allowSleep;
        bodyDef.gravityScale = this.gravityScale;
        bodyDef.linearDamping = this.linearDamping;
        bodyDef.angularDamping = this.angularDamping;
        var linearVelocity = this.linearVelocity;
        bodyDef.linearVelocity = new b2.Vec2(linearVelocity.x / PTM_RATIO, linearVelocity.y / PTM_RATIO);
        bodyDef.angularVelocity = this.angularVelocity * ANGLE_TO_PHYSICS_ANGLE;
        bodyDef.fixedRotation = this.fixedRotation;
        bodyDef.bullet = this.bullet;
        var node = this.node;
        var pos = node.convertToWorldSpaceAR(VEC2_ZERO);
        bodyDef.position = new b2.Vec2(pos.x / PTM_RATIO, pos.y / PTM_RATIO);
        bodyDef.angle = -Math.PI / 180 * getWorldRotation(node);
        bodyDef.awake = this.awakeOnLoad;
        cc.director.getPhysicsManager()._addBody(this, bodyDef);
        this._inited = true;
      },
      __destroy: function __destroy() {
        if (!this._inited) return;
        cc.director.getPhysicsManager()._removeBody(this);
        this._unregisterNodeEvents();
        this._inited = false;
      },
      _getBody: function _getBody() {
        return this._b2Body;
      }
    });
    cc.RigidBody = module.exports = RigidBody;
  }), {
    "../CCNode": 16,
    "./CCPhysicsTypes": 117,
    "./utils": 140
  } ],
  120: [ (function(require, module, exports) {
    "use strict";
    var box2d = require("../../../external/box2d/box2d");
    window.b2 = {};
    for (var key in box2d) {
      if (-1 !== key.indexOf("b2_")) continue;
      var newKey = key.replace("b2", "");
      b2[newKey] = box2d[key];
    }
    b2.maxPolygonVertices = 8;
  }), {
    "../../../external/box2d/box2d": 278
  } ],
  121: [ (function(require, module, exports) {
    "use strict";
    var PTM_RATIO = require("../CCPhysicsTypes").PTM_RATIO;
    var PhysicsBoxCollider = cc.Class({
      name: "cc.PhysicsBoxCollider",
      extends: cc.PhysicsCollider,
      mixins: [ cc.Collider.Box ],
      editor: {
        menu: false,
        requireComponent: cc.RigidBody
      },
      _createShape: function _createShape(scale) {
        var scaleX = Math.abs(scale.x);
        var scaleY = Math.abs(scale.y);
        var width = this.size.width / 2 / PTM_RATIO * scaleX;
        var height = this.size.height / 2 / PTM_RATIO * scaleY;
        var offsetX = this.offset.x / PTM_RATIO * scaleX;
        var offsetY = this.offset.y / PTM_RATIO * scaleY;
        var shape = new b2.PolygonShape();
        shape.SetAsBox(width, height, new b2.Vec2(offsetX, offsetY), 0);
        return shape;
      }
    });
    cc.PhysicsBoxCollider = module.exports = PhysicsBoxCollider;
  }), {
    "../CCPhysicsTypes": 117
  } ],
  122: [ (function(require, module, exports) {
    "use strict";
    var PTM_RATIO = require("../CCPhysicsTypes").PTM_RATIO;
    var PhysicsChainCollider = cc.Class({
      name: "cc.PhysicsChainCollider",
      extends: cc.PhysicsCollider,
      editor: {
        menu: false,
        inspector: false,
        requireComponent: cc.RigidBody
      },
      properties: {
        loop: false,
        points: {
          default: function _default() {
            return [ cc.v2(-50, 0), cc.v2(50, 0) ];
          },
          type: [ cc.Vec2 ]
        },
        threshold: {
          default: 1,
          serializable: false,
          visible: false
        }
      },
      _createShape: function _createShape(scale) {
        var shape = new b2.ChainShape();
        var points = this.points;
        var vertices = [];
        for (var i = 0; i < points.length; i++) {
          var p = points[i];
          vertices.push(new b2.Vec2(p.x / PTM_RATIO * scale.x, p.y / PTM_RATIO * scale.y));
        }
        this.loop ? shape.CreateLoop(vertices, vertices.length) : shape.CreateChain(vertices, vertices.length);
        return shape;
      },
      resetInEditor: false,
      resetPointsByContour: false
    });
    cc.PhysicsChainCollider = module.exports = PhysicsChainCollider;
  }), {
    "../CCPhysicsTypes": 117
  } ],
  123: [ (function(require, module, exports) {
    "use strict";
    var PTM_RATIO = require("../CCPhysicsTypes").PTM_RATIO;
    var PhysicsCircleCollider = cc.Class({
      name: "cc.PhysicsCircleCollider",
      extends: cc.PhysicsCollider,
      mixins: [ cc.Collider.Circle ],
      editor: {
        menu: false,
        requireComponent: cc.RigidBody
      },
      _createShape: function _createShape(scale) {
        var scaleX = Math.abs(scale.x);
        var scaleY = Math.abs(scale.y);
        var offsetX = this.offset.x / PTM_RATIO * scaleX;
        var offsetY = this.offset.y / PTM_RATIO * scaleY;
        var shape = new b2.CircleShape();
        shape.m_radius = this.radius / PTM_RATIO * scaleX;
        shape.m_p = new b2.Vec2(offsetX, offsetY);
        return shape;
      }
    });
    cc.PhysicsCircleCollider = module.exports = PhysicsCircleCollider;
  }), {
    "../CCPhysicsTypes": 117
  } ],
  124: [ (function(require, module, exports) {
    "use strict";
    var PTM_RATIO = require("../CCPhysicsTypes").PTM_RATIO;
    var getWorldScale = require("../utils").getWorldScale;
    var PhysicsCollider = cc.Class({
      name: "cc.PhysicsCollider",
      extends: cc.Collider,
      ctor: function ctor() {
        this._fixtures = [];
        this._shapes = [];
        this._inited = false;
        this._rect = cc.rect();
      },
      properties: {
        _density: 1,
        _sensor: false,
        _friction: .2,
        _restitution: 0,
        density: {
          tooltip: false,
          get: function get() {
            return this._density;
          },
          set: function set(value) {
            this._density = value;
          }
        },
        sensor: {
          tooltip: false,
          get: function get() {
            return this._sensor;
          },
          set: function set(value) {
            this._sensor = value;
          }
        },
        friction: {
          tooltip: false,
          get: function get() {
            return this._friction;
          },
          set: function set(value) {
            this._friction = value;
          }
        },
        restitution: {
          tooltip: false,
          get: function get() {
            return this._restitution;
          },
          set: function set(value) {
            this._restitution = value;
          }
        },
        body: {
          default: null,
          type: cc.RigidBody,
          visible: false
        }
      },
      onDisable: function onDisable() {
        this._destroy();
      },
      onEnable: function onEnable() {
        this._init();
      },
      start: function start() {
        this._init();
      },
      _getFixtureIndex: function _getFixtureIndex(fixture) {
        return this._fixtures.indexOf(fixture);
      },
      _init: function _init() {
        cc.director.getPhysicsManager().pushDelayEvent(this, "__init", []);
      },
      _destroy: function _destroy() {
        cc.director.getPhysicsManager().pushDelayEvent(this, "__destroy", []);
      },
      __init: function __init() {
        if (this._inited) return;
        var body = this.body || this.getComponent(cc.RigidBody);
        if (!body) return;
        var innerBody = body._getBody();
        if (!innerBody) return;
        var node = body.node;
        var scale = getWorldScale(node);
        this._scale = scale;
        var shapes = 0 === scale.x && 0 === scale.y ? [] : this._createShape(scale);
        shapes instanceof Array || (shapes = [ shapes ]);
        var categoryBits = 1 << node.groupIndex;
        var maskBits = 0;
        var bits = cc.game.collisionMatrix[node.groupIndex];
        for (var i = 0; i < bits.length; i++) {
          if (!bits[i]) continue;
          maskBits |= 1 << i;
        }
        var filter = {
          categoryBits: categoryBits,
          maskBits: maskBits,
          groupIndex: 0
        };
        var manager = cc.director.getPhysicsManager();
        for (var _i = 0; _i < shapes.length; _i++) {
          var shape = shapes[_i];
          var fixDef = new b2.FixtureDef();
          fixDef.density = this.density;
          fixDef.isSensor = this.sensor;
          fixDef.friction = this.friction;
          fixDef.restitution = this.restitution;
          fixDef.shape = shape;
          fixDef.filter = filter;
          var fixture = innerBody.CreateFixture(fixDef);
          fixture.collider = this;
          body.enabledContactListener && manager._registerContactFixture(fixture);
          this._shapes.push(shape);
          this._fixtures.push(fixture);
        }
        this.body = body;
        this._inited = true;
      },
      __destroy: function __destroy() {
        if (!this._inited) return;
        var fixtures = this._fixtures;
        var body = this.body._getBody();
        var manager = cc.director.getPhysicsManager();
        for (var i = fixtures.length - 1; i >= 0; i--) {
          var fixture = fixtures[i];
          fixture.collider = null;
          manager._unregisterContactFixture(fixture);
          body && body.DestroyFixture(fixture);
        }
        this.body = null;
        this._fixtures.length = 0;
        this._shapes.length = 0;
        this._inited = false;
      },
      _createShape: function _createShape() {},
      apply: function apply() {
        this._destroy();
        this._init();
      },
      getAABB: function getAABB() {
        var MAX = 1e7;
        var minX = MAX, minY = MAX;
        var maxX = -MAX, maxY = -MAX;
        var fixtures = this._fixtures;
        for (var i = 0; i < fixtures.length; i++) {
          var fixture = fixtures[i];
          var count = fixture.GetShape().GetChildCount();
          for (var j = 0; j < count; j++) {
            var aabb = fixture.GetAABB(j);
            aabb.lowerBound.x < minX && (minX = aabb.lowerBound.x);
            aabb.lowerBound.y < minY && (minY = aabb.lowerBound.y);
            aabb.upperBound.x > maxX && (maxX = aabb.upperBound.x);
            aabb.upperBound.y > maxY && (maxY = aabb.upperBound.y);
          }
        }
        minX *= PTM_RATIO;
        minY *= PTM_RATIO;
        maxX *= PTM_RATIO;
        maxY *= PTM_RATIO;
        var r = this._rect;
        r.x = minX;
        r.y = minY;
        r.width = maxX - minX;
        r.height = maxY - minY;
        return r;
      }
    });
    cc.PhysicsCollider = module.exports = PhysicsCollider;
  }), {
    "../CCPhysicsTypes": 117,
    "../utils": 140
  } ],
  125: [ (function(require, module, exports) {
    "use strict";
    var PTM_RATIO = require("../CCPhysicsTypes").PTM_RATIO;
    var PolygonSeparator = require("../CCPolygonSeparator");
    var PhysicsPolygonCollider = cc.Class({
      name: "cc.PhysicsPolygonCollider",
      extends: cc.PhysicsCollider,
      mixins: [ cc.Collider.Polygon ],
      editor: {
        menu: false,
        inspector: false,
        requireComponent: cc.RigidBody
      },
      _createShape: function _createShape(scale) {
        var shapes = [];
        var points = this.points;
        points.length > 0 && points[0].equals(points[points.length - 1]) && (points.length -= 1);
        var polys = PolygonSeparator.ConvexPartition(points);
        var offset = this.offset;
        for (var i = 0; i < polys.length; i++) {
          var poly = polys[i];
          var shape = null, vertices = [];
          var firstVertice = null;
          for (var j = 0, l = poly.length; j < l; j++) {
            shape || (shape = new b2.PolygonShape());
            var p = poly[j];
            var x = (p.x + offset.x) / PTM_RATIO * scale.x;
            var y = (p.y + offset.y) / PTM_RATIO * scale.y;
            var v = new b2.Vec2(x, y);
            vertices.push(v);
            firstVertice || (firstVertice = v);
            if (vertices.length === b2.maxPolygonVertices) {
              shape.Set(vertices, vertices.length);
              shapes.push(shape);
              shape = null;
              j < l - 1 && (vertices = [ firstVertice, vertices[vertices.length - 1] ]);
            }
          }
          if (shape) {
            shape.Set(vertices, vertices.length);
            shapes.push(shape);
          }
        }
        return shapes;
      }
    });
    cc.PhysicsPolygonCollider = module.exports = PhysicsPolygonCollider;
  }), {
    "../CCPhysicsTypes": 117,
    "../CCPolygonSeparator": 118
  } ],
  126: [ (function(require, module, exports) {
    "use strict";
    require("./box2d-adapter");
    require("./CCPhysicsManager");
    require("./CCRigidBody");
    require("./CCPhysicsContact");
    require("./collider/CCPhysicsCollider");
    require("./collider/CCPhysicsChainCollider");
    require("./collider/CCPhysicsCircleCollider");
    require("./collider/CCPhysicsBoxCollider");
    require("./collider/CCPhysicsPolygonCollider");
    require("./joint/CCJoint");
    require("./joint/CCDistanceJoint");
    require("./joint/CCRevoluteJoint");
    require("./joint/CCMouseJoint");
    require("./joint/CCMotorJoint");
    require("./joint/CCPrismaticJoint");
    require("./joint/CCWeldJoint");
    require("./joint/CCWheelJoint");
    require("./joint/CCRopeJoint");
    require("./platform/CCPhysicsContactListner");
    require("./platform/CCPhysicsAABBQueryCallback");
    require("./platform/CCPhysicsRayCastCallback");
  }), {
    "./CCPhysicsContact": 115,
    "./CCPhysicsManager": 116,
    "./CCRigidBody": 119,
    "./box2d-adapter": 120,
    "./collider/CCPhysicsBoxCollider": 121,
    "./collider/CCPhysicsChainCollider": 122,
    "./collider/CCPhysicsCircleCollider": 123,
    "./collider/CCPhysicsCollider": 124,
    "./collider/CCPhysicsPolygonCollider": 125,
    "./joint/CCDistanceJoint": 127,
    "./joint/CCJoint": 128,
    "./joint/CCMotorJoint": 129,
    "./joint/CCMouseJoint": 130,
    "./joint/CCPrismaticJoint": 131,
    "./joint/CCRevoluteJoint": 132,
    "./joint/CCRopeJoint": 133,
    "./joint/CCWeldJoint": 134,
    "./joint/CCWheelJoint": 135,
    "./platform/CCPhysicsAABBQueryCallback": 136,
    "./platform/CCPhysicsContactListner": 137,
    "./platform/CCPhysicsRayCastCallback": 139
  } ],
  127: [ (function(require, module, exports) {
    "use strict";
    var PTM_RATIO = require("../CCPhysicsTypes").PTM_RATIO;
    var DistanceJoint = cc.Class({
      name: "cc.DistanceJoint",
      extends: cc.Joint,
      editor: false,
      properties: {
        _distance: 1,
        _frequency: 0,
        _dampingRatio: 0,
        distance: {
          tooltip: false,
          get: function get() {
            return this._distance;
          },
          set: function set(value) {
            this._distance = value;
            this._joint && this._joint.SetLength(value);
          }
        },
        frequency: {
          tooltip: false,
          get: function get() {
            return this._frequency;
          },
          set: function set(value) {
            this._frequency = value;
            this._joint && this._joint.SetFrequency(value);
          }
        },
        dampingRatio: {
          tooltip: false,
          get: function get() {
            return this._dampingRatio;
          },
          set: function set(value) {
            this._dampingRatio = value;
            this._joint && this._joint.SetDampingRatio(value);
          }
        }
      },
      _createJointDef: function _createJointDef() {
        var def = new b2.DistanceJointDef();
        def.localAnchorA = new b2.Vec2(this.anchor.x / PTM_RATIO, this.anchor.y / PTM_RATIO);
        def.localAnchorB = new b2.Vec2(this.connectedAnchor.x / PTM_RATIO, this.connectedAnchor.y / PTM_RATIO);
        def.length = this.distance / PTM_RATIO;
        def.dampingRatio = this.dampingRatio;
        def.frequencyHz = this.frequency;
        return def;
      }
    });
    cc.DistanceJoint = module.exports = DistanceJoint;
  }), {
    "../CCPhysicsTypes": 117
  } ],
  128: [ (function(require, module, exports) {
    "use strict";
    var PTM_RATIO = require("../CCPhysicsTypes").PTM_RATIO;
    var Joint = cc.Class({
      name: "cc.Joint",
      extends: cc.Component,
      editor: {
        requireComponent: cc.RigidBody
      },
      properties: {
        anchor: {
          default: cc.v2(0, 0),
          tooltip: false
        },
        connectedAnchor: {
          default: cc.v2(0, 0),
          tooltip: false
        },
        connectedBody: {
          default: null,
          type: cc.RigidBody,
          tooltip: false
        },
        collideConnected: {
          default: false,
          tooltip: false
        }
      },
      onDisable: function onDisable() {
        this._destroy();
      },
      onEnable: function onEnable() {
        this._init();
      },
      start: function start() {
        this._init();
      },
      apply: function apply() {
        this._destroy();
        this._init();
      },
      getWorldAnchor: function getWorldAnchor() {
        if (this._joint) {
          var anchor = this._joint.GetAnchorA();
          return cc.v2(anchor.x * PTM_RATIO, anchor.y * PTM_RATIO);
        }
        return cc.Vec2.ZERO;
      },
      getWorldConnectedAnchor: function getWorldConnectedAnchor() {
        if (this._joint) {
          var anchor = this._joint.GetAnchorB();
          return cc.v2(anchor.x * PTM_RATIO, anchor.y * PTM_RATIO);
        }
        return cc.Vec2.ZERO;
      },
      getReactionForce: function getReactionForce(timeStep) {
        var out = cc.v2();
        if (this._joint) return this._joint.GetReactionForce(timeStep, out);
        return out;
      },
      getReactionTorque: function getReactionTorque(timeStep) {
        if (this._joint) return this._joint.GetReactionTorque(timeStep);
        return 0;
      },
      _init: function _init() {
        cc.director.getPhysicsManager().pushDelayEvent(this, "__init", []);
      },
      _destroy: function _destroy() {
        cc.director.getPhysicsManager().pushDelayEvent(this, "__destroy", []);
      },
      __init: function __init() {
        if (this._inited) return;
        this.body = this.getComponent(cc.RigidBody);
        if (this._isValid()) {
          var def = this._createJointDef();
          if (!def) return;
          def.bodyA = this.body._getBody();
          def.bodyB = this.connectedBody._getBody();
          def.collideConnected = this.collideConnected;
          cc.director.getPhysicsManager()._addJoint(this, def);
          this._inited = true;
        }
      },
      __destroy: function __destroy() {
        if (!this._inited) return;
        cc.director.getPhysicsManager()._removeJoint(this);
        this._joint = null;
        this._inited = false;
      },
      _createJointDef: function _createJointDef() {
        return null;
      },
      _isValid: function _isValid() {
        return this.body && this.body._getBody() && this.connectedBody && this.connectedBody._getBody();
      }
    });
    cc.Joint = module.exports = Joint;
  }), {
    "../CCPhysicsTypes": 117
  } ],
  129: [ (function(require, module, exports) {
    "use strict";
    var PTM_RATIO = require("../CCPhysicsTypes").PTM_RATIO;
    var ANGLE_TO_PHYSICS_ANGLE = require("../CCPhysicsTypes").ANGLE_TO_PHYSICS_ANGLE;
    var MotorJoint = cc.Class({
      name: "cc.MotorJoint",
      extends: cc.Joint,
      editor: false,
      properties: {
        _linearOffset: cc.v2(0, 0),
        _angularOffset: 0,
        _maxForce: 1,
        _maxTorque: 1,
        _correctionFactor: .3,
        anchor: {
          tooltip: false,
          default: cc.v2(0, 0),
          override: true,
          visible: false
        },
        connectedAnchor: {
          tooltip: false,
          default: cc.v2(0, 0),
          override: true,
          visible: false
        },
        linearOffset: {
          tooltip: false,
          get: function get() {
            return this._linearOffset;
          },
          set: function set(value) {
            this._linearOffset = value;
            this._joint && this._joint.SetLinearOffset(new b2.Vec2(value.x / PTM_RATIO, value.y / PTM_RATIO));
          }
        },
        angularOffset: {
          tooltip: false,
          get: function get() {
            return this._angularOffset;
          },
          set: function set(value) {
            this._angularOffset = value;
            this._joint && this._joint.SetAngularOffset(value);
          }
        },
        maxForce: {
          tooltip: false,
          get: function get() {
            return this._maxForce;
          },
          set: function set(value) {
            this._maxForce = value;
            this._joint && this._joint.SetMaxForce(value);
          }
        },
        maxTorque: {
          tooltip: false,
          get: function get() {
            return this._maxTorque;
          },
          set: function set(value) {
            this._maxTorque = value;
            this._joint && this._joint.SetMaxTorque(value);
          }
        },
        correctionFactor: {
          tooltip: false,
          get: function get() {
            return this._correctionFactor;
          },
          set: function set(value) {
            this._correctionFactor = value;
            this._joint && this._joint.SetCorrectionFactor(value);
          }
        }
      },
      _createJointDef: function _createJointDef() {
        var def = new b2.MotorJointDef();
        def.linearOffset = new b2.Vec2(this.linearOffset.x / PTM_RATIO, this.linearOffset.y / PTM_RATIO);
        def.angularOffset = this.angularOffset * ANGLE_TO_PHYSICS_ANGLE;
        def.maxForce = this.maxForce;
        def.maxTorque = this.maxTorque;
        def.correctionFactor = this.correctionFactor;
        return def;
      }
    });
    cc.MotorJoint = module.exports = MotorJoint;
  }), {
    "../CCPhysicsTypes": 117
  } ],
  130: [ (function(require, module, exports) {
    "use strict";
    var PTM_RATIO = require("../CCPhysicsTypes").PTM_RATIO;
    var tempB2Vec2 = new b2.Vec2();
    var MouseJoint = cc.Class({
      name: "cc.MouseJoint",
      extends: cc.Joint,
      editor: false,
      properties: {
        _target: 1,
        _frequency: 5,
        _dampingRatio: .7,
        _maxForce: 0,
        connectedBody: {
          default: null,
          type: cc.RigidBody,
          visible: false,
          override: true
        },
        collideConnected: {
          default: true,
          visible: false,
          override: true
        },
        anchor: {
          tooltip: false,
          default: cc.v2(0, 0),
          override: true,
          visible: false
        },
        connectedAnchor: {
          tooltip: false,
          default: cc.v2(0, 0),
          override: true,
          visible: false
        },
        mouseRegion: {
          tooltip: false,
          default: null,
          type: cc.Node
        },
        target: {
          tooltip: false,
          visible: false,
          get: function get() {
            return this._target;
          },
          set: function set(value) {
            this._target = value;
            if (this._joint) {
              tempB2Vec2.x = value.x / PTM_RATIO;
              tempB2Vec2.y = value.y / PTM_RATIO;
              this._joint.SetTarget(tempB2Vec2);
            }
          }
        },
        frequency: {
          tooltip: false,
          get: function get() {
            return this._frequency;
          },
          set: function set(value) {
            this._frequency = value;
            this._joint && this._joint.SetFrequency(value);
          }
        },
        dampingRatio: {
          tooltip: false,
          get: function get() {
            return this._dampingRatio;
          },
          set: function set(value) {
            this._dampingRatio = value;
            this._joint && this._joint.SetDampingRatio(value);
          }
        },
        maxForce: {
          tooltip: false,
          visible: false,
          get: function get() {
            return this._maxForce;
          },
          set: function set(value) {
            this._maxForce = value;
            this._joint && this._joint.SetMaxForce(value);
          }
        }
      },
      onLoad: function onLoad() {
        var mouseRegion = this.mouseRegion || this.node;
        mouseRegion.on(cc.Node.EventType.TOUCH_START, this.onTouchBegan, this);
        mouseRegion.on(cc.Node.EventType.TOUCH_MOVE, this.onTouchMove, this);
        mouseRegion.on(cc.Node.EventType.TOUCH_END, this.onTouchEnd, this);
        mouseRegion.on(cc.Node.EventType.TOUCH_CANCEL, this.onTouchEnd, this);
      },
      onEnable: function onEnable() {},
      start: function start() {},
      onTouchBegan: function onTouchBegan(event) {
        var manager = cc.director.getPhysicsManager();
        var target = this._pressPoint = event.touch.getLocation();
        cc.Camera && cc.Camera.main && (target = cc.Camera.main.getScreenToWorldPoint(target));
        var collider = manager.testPoint(target);
        if (!collider) return;
        var body = this.connectedBody = collider.body;
        body.awake = true;
        this.maxForce = 1e3 * this.connectedBody.getMass();
        this.target = target;
        this._init();
      },
      onTouchMove: function onTouchMove(event) {
        this._pressPoint = event.touch.getLocation();
      },
      onTouchEnd: function onTouchEnd(event) {
        this._destroy();
        this._pressPoint = null;
      },
      _createJointDef: function _createJointDef() {
        var def = new b2.MouseJointDef();
        tempB2Vec2.x = this.target.x / PTM_RATIO;
        tempB2Vec2.y = this.target.y / PTM_RATIO;
        def.target = tempB2Vec2;
        def.maxForce = this.maxForce;
        def.dampingRatio = this.dampingRatio;
        def.frequencyHz = this.frequency;
        return def;
      },
      update: function update() {
        if (!this._pressPoint || !this._isValid()) return;
        var camera = cc.Camera.findCamera(this.node);
        this.target = camera ? camera.getScreenToWorldPoint(this._pressPoint) : this._pressPoint;
      }
    });
    cc.MouseJoint = module.exports = MouseJoint;
  }), {
    "../CCPhysicsTypes": 117
  } ],
  131: [ (function(require, module, exports) {
    "use strict";
    var PTM_RATIO = require("../CCPhysicsTypes").PTM_RATIO;
    var ANGLE_TO_PHYSICS_ANGLE = require("../CCPhysicsTypes").ANGLE_TO_PHYSICS_ANGLE;
    var PrismaticJoint = cc.Class({
      name: "cc.PrismaticJoint",
      extends: cc.Joint,
      editor: false,
      properties: {
        localAxisA: {
          default: cc.v2(1, 0),
          tooltip: false
        },
        referenceAngle: {
          default: 0,
          tooltip: false
        },
        enableLimit: {
          default: false,
          tooltip: false
        },
        enableMotor: {
          default: false,
          tooltip: false
        },
        lowerLimit: {
          default: 0,
          tooltip: false
        },
        upperLimit: {
          default: 0,
          tooltip: false
        },
        _maxMotorForce: 0,
        _motorSpeed: 0,
        maxMotorForce: {
          tooltip: false,
          get: function get() {
            return this._maxMotorForce;
          },
          set: function set(value) {
            this._maxMotorForce = value;
            this._joint && this._joint.SetMaxMotorForce(value);
          }
        },
        motorSpeed: {
          tooltip: false,
          get: function get() {
            return this._motorSpeed;
          },
          set: function set(value) {
            this._motorSpeed = value;
            this._joint && this._joint.SetMotorSpeed(value);
          }
        }
      },
      _createJointDef: function _createJointDef() {
        var def = new b2.PrismaticJointDef();
        def.localAnchorA = new b2.Vec2(this.anchor.x / PTM_RATIO, this.anchor.y / PTM_RATIO);
        def.localAnchorB = new b2.Vec2(this.connectedAnchor.x / PTM_RATIO, this.connectedAnchor.y / PTM_RATIO);
        def.localAxisA = new b2.Vec2(this.localAxisA.x, this.localAxisA.y);
        def.referenceAngle = this.referenceAngle * ANGLE_TO_PHYSICS_ANGLE;
        def.enableLimit = this.enableLimit;
        def.lowerTranslation = this.lowerLimit / PTM_RATIO;
        def.upperTranslation = this.upperLimit / PTM_RATIO;
        def.enableMotor = this.enableMotor;
        def.maxMotorForce = this.maxMotorForce;
        def.motorSpeed = this.motorSpeed;
        return def;
      }
    });
    cc.PrismaticJoint = module.exports = PrismaticJoint;
  }), {
    "../CCPhysicsTypes": 117
  } ],
  132: [ (function(require, module, exports) {
    "use strict";
    var PTM_RATIO = require("../CCPhysicsTypes").PTM_RATIO;
    var ANGLE_TO_PHYSICS_ANGLE = require("../CCPhysicsTypes").ANGLE_TO_PHYSICS_ANGLE;
    var PHYSICS_ANGLE_TO_ANGLE = require("../CCPhysicsTypes").PHYSICS_ANGLE_TO_ANGLE;
    var RevoluteJoint = cc.Class({
      name: "cc.RevoluteJoint",
      extends: cc.Joint,
      editor: false,
      properties: {
        _maxMotorTorque: 0,
        _motorSpeed: 0,
        _enableLimit: false,
        _enableMotor: false,
        referenceAngle: {
          default: 0,
          tooltip: false
        },
        lowerAngle: {
          default: 0,
          tooltip: false
        },
        upperAngle: {
          default: 0,
          tooltip: false
        },
        maxMotorTorque: {
          tooltip: false,
          get: function get() {
            return this._maxMotorTorque;
          },
          set: function set(value) {
            this._maxMotorTorque = value;
            this._joint && this._joint.SetMaxMotorTorque(value);
          }
        },
        motorSpeed: {
          tooltip: false,
          get: function get() {
            return this._motorSpeed;
          },
          set: function set(value) {
            this._motorSpeed = value;
            this._joint && this._joint.SetMotorSpeed(value * ANGLE_TO_PHYSICS_ANGLE);
          }
        },
        enableLimit: {
          tooltip: false,
          get: function get() {
            return this._enableLimit;
          },
          set: function set(value) {
            this._enableLimit = value;
            this._joint && this._joint.EnableLimit(value);
          }
        },
        enableMotor: {
          tooltip: false,
          get: function get() {
            return this._enableMotor;
          },
          set: function set(value) {
            this._enableMotor = value;
            this._joint && this._joint.EnableMotor(value);
          }
        }
      },
      getJointAngle: function getJointAngle() {
        if (this._joint) return this._joint.GetJointAngle() * PHYSICS_ANGLE_TO_ANGLE;
        return 0;
      },
      setLimits: function setLimits(lower, upper) {
        if (this._joint) return this._joint.SetLimits(lower * ANGLE_TO_PHYSICS_ANGLE, upper * ANGLE_TO_PHYSICS_ANGLE);
      },
      _createJointDef: function _createJointDef() {
        var def = new b2.RevoluteJointDef();
        def.localAnchorA = new b2.Vec2(this.anchor.x / PTM_RATIO, this.anchor.y / PTM_RATIO);
        def.localAnchorB = new b2.Vec2(this.connectedAnchor.x / PTM_RATIO, this.connectedAnchor.y / PTM_RATIO);
        def.lowerAngle = this.upperAngle * ANGLE_TO_PHYSICS_ANGLE;
        def.upperAngle = this.lowerAngle * ANGLE_TO_PHYSICS_ANGLE;
        def.maxMotorTorque = this.maxMotorTorque;
        def.motorSpeed = this.motorSpeed * ANGLE_TO_PHYSICS_ANGLE;
        def.enableLimit = this.enableLimit;
        def.enableMotor = this.enableMotor;
        def.referenceAngle = this.referenceAngle * ANGLE_TO_PHYSICS_ANGLE;
        return def;
      }
    });
    cc.RevoluteJoint = module.exports = RevoluteJoint;
  }), {
    "../CCPhysicsTypes": 117
  } ],
  133: [ (function(require, module, exports) {
    "use strict";
    var PTM_RATIO = require("../CCPhysicsTypes").PTM_RATIO;
    var RopeJoint = cc.Class({
      name: "cc.RopeJoint",
      extends: cc.Joint,
      editor: false,
      properties: {
        _maxLength: 1,
        maxLength: {
          tooltip: false,
          get: function get() {
            return this._maxLength;
          },
          set: function set(value) {
            this._maxLength = value;
            this._joint && this._joint.SetMaxLength(value);
          }
        }
      },
      _createJointDef: function _createJointDef() {
        var def = new b2.RopeJointDef();
        def.localAnchorA = new b2.Vec2(this.anchor.x / PTM_RATIO, this.anchor.y / PTM_RATIO);
        def.localAnchorB = new b2.Vec2(this.connectedAnchor.x / PTM_RATIO, this.connectedAnchor.y / PTM_RATIO);
        def.maxLength = this.maxLength / PTM_RATIO;
        return def;
      }
    });
    cc.RopeJoint = module.exports = RopeJoint;
  }), {
    "../CCPhysicsTypes": 117
  } ],
  134: [ (function(require, module, exports) {
    "use strict";
    var PTM_RATIO = require("../CCPhysicsTypes").PTM_RATIO;
    var ANGLE_TO_PHYSICS_ANGLE = require("../CCPhysicsTypes").ANGLE_TO_PHYSICS_ANGLE;
    var WeldJoint = cc.Class({
      name: "cc.WeldJoint",
      extends: cc.Joint,
      editor: false,
      properties: {
        referenceAngle: {
          default: 0,
          tooltip: false
        },
        _frequency: 0,
        _dampingRatio: 0,
        frequency: {
          tooltip: false,
          get: function get() {
            return this._frequency;
          },
          set: function set(value) {
            this._frequency = value;
            this._joint && this._joint.SetFrequency(value);
          }
        },
        dampingRatio: {
          tooltip: false,
          get: function get() {
            return this._dampingRatio;
          },
          set: function set(value) {
            this._dampingRatio = value;
            this._joint && this._joint.SetDampingRatio(value);
          }
        }
      },
      _createJointDef: function _createJointDef() {
        var def = new b2.WeldJointDef();
        def.localAnchorA = new b2.Vec2(this.anchor.x / PTM_RATIO, this.anchor.y / PTM_RATIO);
        def.localAnchorB = new b2.Vec2(this.connectedAnchor.x / PTM_RATIO, this.connectedAnchor.y / PTM_RATIO);
        def.referenceAngle = this.referenceAngle * ANGLE_TO_PHYSICS_ANGLE;
        def.frequencyHz = this.frequency;
        def.dampingRatio = this.dampingRatio;
        return def;
      }
    });
    cc.WeldJoint = module.exports = WeldJoint;
  }), {
    "../CCPhysicsTypes": 117
  } ],
  135: [ (function(require, module, exports) {
    "use strict";
    var PTM_RATIO = require("../CCPhysicsTypes").PTM_RATIO;
    var ANGLE_TO_PHYSICS_ANGLE = require("../CCPhysicsTypes").ANGLE_TO_PHYSICS_ANGLE;
    var WheelJoint = cc.Class({
      name: "cc.WheelJoint",
      extends: cc.Joint,
      editor: false,
      properties: {
        _maxMotorTorque: 0,
        _motorSpeed: 0,
        _enableMotor: false,
        _frequency: 2,
        _dampingRatio: .7,
        localAxisA: {
          default: cc.v2(1, 0),
          tooltip: false
        },
        maxMotorTorque: {
          tooltip: false,
          get: function get() {
            return this._maxMotorTorque;
          },
          set: function set(value) {
            this._maxMotorTorque = value;
            this._joint && this._joint.SetMaxMotorTorque(value);
          }
        },
        motorSpeed: {
          tooltip: false,
          get: function get() {
            return this._motorSpeed;
          },
          set: function set(value) {
            this._motorSpeed = value;
            this._joint && this._joint.SetMotorSpeed(value * ANGLE_TO_PHYSICS_ANGLE);
          }
        },
        enableMotor: {
          tooltip: false,
          get: function get() {
            return this._enableMotor;
          },
          set: function set(value) {
            this._enableMotor = value;
            this._joint && this._joint.EnableMotor(value);
          }
        },
        frequency: {
          tooltip: false,
          get: function get() {
            return this._frequency;
          },
          set: function set(value) {
            this._frequency = value;
            this._joint && this._joint.SetSpringFrequencyHz(value);
          }
        },
        dampingRatio: {
          tooltip: false,
          get: function get() {
            return this._dampingRatio;
          },
          set: function set(value) {
            this._dampingRatio = value;
            this._joint && this._joint.SetDampingRatio(value);
          }
        }
      },
      _createJointDef: function _createJointDef() {
        var def = new b2.WheelJointDef();
        def.localAnchorA = new b2.Vec2(this.anchor.x / PTM_RATIO, this.anchor.y / PTM_RATIO);
        def.localAnchorB = new b2.Vec2(this.connectedAnchor.x / PTM_RATIO, this.connectedAnchor.y / PTM_RATIO);
        def.localAxisA = new b2.Vec2(this.localAxisA.x, this.localAxisA.y);
        def.maxMotorTorque = this.maxMotorTorque;
        def.motorSpeed = this.motorSpeed * ANGLE_TO_PHYSICS_ANGLE;
        def.enableMotor = this.enableMotor;
        def.dampingRatio = this.dampingRatio;
        def.frequencyHz = this.frequency;
        return def;
      }
    });
    cc.WheelJoint = module.exports = WheelJoint;
  }), {
    "../CCPhysicsTypes": 117
  } ],
  136: [ (function(require, module, exports) {
    "use strict";
    var BodyType = require("../CCPhysicsTypes").BodyType;
    function PhysicsAABBQueryCallback() {
      this._point = new b2.Vec2();
      this._isPoint = false;
      this._fixtures = [];
    }
    PhysicsAABBQueryCallback.prototype.init = function(point) {
      if (point) {
        this._isPoint = true;
        this._point.x = point.x;
        this._point.y = point.y;
      } else this._isPoint = false;
      this._fixtures.length = 0;
    };
    PhysicsAABBQueryCallback.prototype.ReportFixture = function(fixture) {
      var body = fixture.GetBody();
      if (body.GetType() === BodyType.Dynamic) if (this._isPoint) {
        if (fixture.TestPoint(this._point)) {
          this._fixtures.push(fixture);
          return false;
        }
      } else this._fixtures.push(fixture);
      return true;
    };
    PhysicsAABBQueryCallback.prototype.getFixture = function() {
      return this._fixtures[0];
    };
    PhysicsAABBQueryCallback.prototype.getFixtures = function() {
      return this._fixtures;
    };
    cc.PhysicsAABBQueryCallback = module.exports = PhysicsAABBQueryCallback;
  }), {
    "../CCPhysicsTypes": 117
  } ],
  137: [ (function(require, module, exports) {
    "use strict";
    function PhysicsContactListener() {
      this._contactFixtures = [];
    }
    PhysicsContactListener.prototype.setBeginContact = function(cb) {
      this._BeginContact = cb;
    };
    PhysicsContactListener.prototype.setEndContact = function(cb) {
      this._EndContact = cb;
    };
    PhysicsContactListener.prototype.setPreSolve = function(cb) {
      this._PreSolve = cb;
    };
    PhysicsContactListener.prototype.setPostSolve = function(cb) {
      this._PostSolve = cb;
    };
    PhysicsContactListener.prototype.BeginContact = function(contact) {
      if (!this._BeginContact) return;
      var fixtureA = contact.GetFixtureA();
      var fixtureB = contact.GetFixtureB();
      var fixtures = this._contactFixtures;
      contact._shouldReport = false;
      if (-1 !== fixtures.indexOf(fixtureA) || -1 !== fixtures.indexOf(fixtureB)) {
        contact._shouldReport = true;
        this._BeginContact(contact);
      }
    };
    PhysicsContactListener.prototype.EndContact = function(contact) {
      if (this._EndContact && contact._shouldReport) {
        contact._shouldReport = false;
        this._EndContact(contact);
      }
    };
    PhysicsContactListener.prototype.PreSolve = function(contact, oldManifold) {
      this._PreSolve && contact._shouldReport && this._PreSolve(contact, oldManifold);
    };
    PhysicsContactListener.prototype.PostSolve = function(contact, impulse) {
      this._PostSolve && contact._shouldReport && this._PostSolve(contact, impulse);
    };
    PhysicsContactListener.prototype.registerContactFixture = function(fixture) {
      this._contactFixtures.push(fixture);
    };
    PhysicsContactListener.prototype.unregisterContactFixture = function(fixture) {
      cc.js.array.remove(this._contactFixtures, fixture);
    };
    cc.PhysicsContactListener = module.exports = PhysicsContactListener;
  }), {} ],
  138: [ (function(require, module, exports) {
    "use strict";
    var PTM_RATIO = require("../CCPhysicsTypes").PTM_RATIO;
    var _tmp_vec2 = cc.v2();
    var GREEN_COLOR = cc.Color.GREEN;
    var RED_COLOR = cc.Color.RED;
    function PhysicsDebugDraw(drawer) {
      b2.Draw.call(this);
      this._drawer = drawer;
      this._xf = this._dxf = new b2.Transform();
    }
    cc.js.extend(PhysicsDebugDraw, b2.Draw);
    cc.js.mixin(PhysicsDebugDraw.prototype, {
      _DrawPolygon: function _DrawPolygon(vertices, vertexCount) {
        var drawer = this._drawer;
        for (var i = 0; i < vertexCount; i++) {
          b2.Transform.MulXV(this._xf, vertices[i], _tmp_vec2);
          var x = _tmp_vec2.x * PTM_RATIO, y = _tmp_vec2.y * PTM_RATIO;
          0 === i ? drawer.moveTo(x, y) : drawer.lineTo(x, y);
        }
        drawer.close();
      },
      DrawPolygon: function DrawPolygon(vertices, vertexCount, color) {
        this._applyStrokeColor(color);
        this._DrawPolygon(vertices, vertexCount);
        this._drawer.stroke();
      },
      DrawSolidPolygon: function DrawSolidPolygon(vertices, vertexCount, color) {
        this._applyFillColor(color);
        this._DrawPolygon(vertices, vertexCount);
        this._drawer.fill();
        this._drawer.stroke();
      },
      _DrawCircle: function _DrawCircle(center, radius) {
        var p = this._xf.p;
        this._drawer.circle((center.x + p.x) * PTM_RATIO, (center.y + p.y) * PTM_RATIO, radius * PTM_RATIO);
      },
      DrawCircle: function DrawCircle(center, radius, color) {
        this._applyStrokeColor(color);
        this._DrawCircle(center, radius);
        this._drawer.stroke();
      },
      DrawSolidCircle: function DrawSolidCircle(center, radius, axis, color) {
        this._applyFillColor(color);
        this._DrawCircle(center, radius);
        this._drawer.fill();
      },
      DrawSegment: function DrawSegment(p1, p2, color) {
        var drawer = this._drawer;
        if (p1.x === p2.x && p1.y === p2.y) {
          this._applyFillColor(color);
          this._DrawCircle(p1, 2 / PTM_RATIO);
          drawer.fill();
          return;
        }
        this._applyStrokeColor(color);
        b2.Transform.MulXV(this._xf, p1, _tmp_vec2);
        drawer.moveTo(_tmp_vec2.x * PTM_RATIO, _tmp_vec2.y * PTM_RATIO);
        b2.Transform.MulXV(this._xf, p2, _tmp_vec2);
        drawer.lineTo(_tmp_vec2.x * PTM_RATIO, _tmp_vec2.y * PTM_RATIO);
        drawer.stroke();
      },
      DrawTransform: function DrawTransform(xf) {
        var drawer = this._drawer;
        drawer.strokeColor = RED_COLOR;
        _tmp_vec2.x = _tmp_vec2.y = 0;
        b2.Transform.MulXV(xf, _tmp_vec2, _tmp_vec2);
        drawer.moveTo(_tmp_vec2.x * PTM_RATIO, _tmp_vec2.y * PTM_RATIO);
        _tmp_vec2.x = 1;
        _tmp_vec2.y = 0;
        b2.Transform.MulXV(xf, _tmp_vec2, _tmp_vec2);
        drawer.lineTo(_tmp_vec2.x * PTM_RATIO, _tmp_vec2.y * PTM_RATIO);
        drawer.stroke();
        drawer.strokeColor = GREEN_COLOR;
        _tmp_vec2.x = _tmp_vec2.y = 0;
        b2.Transform.MulXV(xf, _tmp_vec2, _tmp_vec2);
        drawer.moveTo(_tmp_vec2.x * PTM_RATIO, _tmp_vec2.y * PTM_RATIO);
        _tmp_vec2.x = 0;
        _tmp_vec2.y = 1;
        b2.Transform.MulXV(xf, _tmp_vec2, _tmp_vec2);
        drawer.lineTo(_tmp_vec2.x * PTM_RATIO, _tmp_vec2.y * PTM_RATIO);
        drawer.stroke();
      },
      DrawPoint: function DrawPoint(center, radius, color) {},
      _applyStrokeColor: function _applyStrokeColor(color) {
        var strokeColor = this._drawer.strokeColor;
        strokeColor.r = 255 * color.r;
        strokeColor.g = 255 * color.g;
        strokeColor.b = 255 * color.b;
        strokeColor.a = 150;
        this._drawer.strokeColor = strokeColor;
      },
      _applyFillColor: function _applyFillColor(color) {
        var fillColor = this._drawer.fillColor;
        fillColor.r = 255 * color.r;
        fillColor.g = 255 * color.g;
        fillColor.b = 255 * color.b;
        fillColor.a = 150;
        this._drawer.fillColor = fillColor;
      },
      PushTransform: function PushTransform(xf) {
        this._xf = xf;
      },
      PopTransform: function PopTransform() {
        this._xf = this._dxf;
      }
    });
    module.exports = PhysicsDebugDraw;
  }), {
    "../CCPhysicsTypes": 117
  } ],
  139: [ (function(require, module, exports) {
    "use strict";
    function PhysicsRayCastCallback() {
      this._type = 0;
      this._fixtures = [];
      this._points = [];
      this._normals = [];
      this._fractions = [];
    }
    PhysicsRayCastCallback.prototype.init = function(type) {
      this._type = type;
      this._fixtures.length = 0;
      this._points.length = 0;
      this._normals.length = 0;
      this._fractions.length = 0;
    };
    PhysicsRayCastCallback.prototype.ReportFixture = function(fixture, point, normal, fraction) {
      if (0 === this._type) {
        this._fixtures[0] = fixture;
        this._points[0] = point;
        this._normals[0] = normal;
        this._fractions[0] = fraction;
        return fraction;
      }
      this._fixtures.push(fixture);
      this._points.push(cc.v2(point));
      this._normals.push(cc.v2(normal));
      this._fractions.push(fraction);
      if (1 === this._type) return 0;
      if (this._type >= 2) return 1;
      return fraction;
    };
    PhysicsRayCastCallback.prototype.getFixtures = function() {
      return this._fixtures;
    };
    PhysicsRayCastCallback.prototype.getPoints = function() {
      return this._points;
    };
    PhysicsRayCastCallback.prototype.getNormals = function() {
      return this._normals;
    };
    PhysicsRayCastCallback.prototype.getFractions = function() {
      return this._fractions;
    };
    cc.PhysicsRayCastCallback = module.exports = PhysicsRayCastCallback;
  }), {} ],
  140: [ (function(require, module, exports) {
    "use strict";
    function getWorldRotation(node) {
      var rot = node.angle;
      var parent = node.parent;
      while (parent.parent) {
        rot += parent.angle;
        parent = parent.parent;
      }
      return -rot;
    }
    function getWorldScale(node) {
      var scaleX = node.scaleX;
      var scaleY = node.scaleY;
      var parent = node.parent;
      while (parent.parent) {
        scaleX *= parent.scaleX;
        scaleY *= parent.scaleY;
        parent = parent.parent;
      }
      return cc.v2(scaleX, scaleY);
    }
    function convertToNodeRotation(node, rotation) {
      rotation -= -node.angle;
      var parent = node.parent;
      while (parent.parent) {
        rotation -= -parent.angle;
        parent = parent.parent;
      }
      return rotation;
    }
    module.exports = {
      getWorldRotation: getWorldRotation,
      getWorldScale: getWorldScale,
      convertToNodeRotation: convertToNodeRotation
    };
  }), {} ],
  141: [ (function(require, module, exports) {
    "use strict";
    var js = require("./js");
    var Enum = require("./CCEnum");
    var utils = require("./utils");
    var _isPlainEmptyObj_DEV = utils.isPlainEmptyObj_DEV;
    var _cloneable_DEV = utils.cloneable_DEV;
    var Attr = require("./attribute");
    var DELIMETER = Attr.DELIMETER;
    var preprocess = require("./preprocess-class");
    require("./requiring-frame");
    var BUILTIN_ENTRIES = [ "name", "extends", "mixins", "ctor", "__ctor__", "properties", "statics", "editor", "__ES6__" ];
    var INVALID_STATICS_DEV = false;
    function pushUnique(array, item) {
      array.indexOf(item) < 0 && array.push(item);
    }
    var deferredInitializer = {
      datas: null,
      push: function push(data) {
        if (this.datas) this.datas.push(data); else {
          this.datas = [ data ];
          var self = this;
          setTimeout((function() {
            self.init();
          }), 0);
        }
      },
      init: function init() {
        var datas = this.datas;
        if (datas) {
          for (var i = 0; i < datas.length; ++i) {
            var data = datas[i];
            var cls = data.cls;
            var properties = data.props;
            "function" === typeof properties && (properties = properties());
            var name = js.getClassName(cls);
            properties ? declareProperties(cls, name, properties, cls.$super, data.mixins) : cc.errorID(3633, name);
          }
          this.datas = null;
        }
      }
    };
    function appendProp(cls, name) {
      false;
      pushUnique(cls.__props__, name);
    }
    function defineProp(cls, className, propName, val, es6) {
      var defaultValue = val["default"];
      false;
      Attr.setClassAttr(cls, propName, "default", defaultValue);
      appendProp(cls, propName);
      parseAttributes(cls, val, className, propName, false);
      var i;
      false, false;
    }
    function defineGetSet(cls, name, propName, val, es6) {
      var getter = val.get;
      var setter = val.set;
      var proto = cls.prototype;
      var d = Object.getOwnPropertyDescriptor(proto, propName);
      var setterUndefined = !d;
      if (getter) {
        false;
        parseAttributes(cls, val, name, propName, true);
        false, false;
        Attr.setClassAttr(cls, propName, "serializable", false);
        false;
        es6 || js.get(proto, propName, getter, setterUndefined, setterUndefined);
        false, false;
      }
      if (setter) {
        if (!es6) {
          false;
          js.set(proto, propName, setter, setterUndefined, setterUndefined);
        }
        false, false;
      }
    }
    function getDefault(defaultVal) {
      if ("function" === typeof defaultVal) {
        false;
        return defaultVal();
      }
      return defaultVal;
    }
    function mixinWithInherited(dest, src, filter) {
      for (var prop in src) dest.hasOwnProperty(prop) || filter && !filter(prop) || Object.defineProperty(dest, prop, js.getPropertyDescriptor(src, prop));
    }
    function doDefine(className, baseClass, mixins, options) {
      var shouldAddProtoCtor;
      var __ctor__ = options.__ctor__;
      var ctor = options.ctor;
      var __es6__ = options.__ES6__;
      var ctorToUse;
      false;
      var ctors;
      var fireClass;
      if (__es6__) {
        ctors = [ ctor ];
        fireClass = ctor;
      } else {
        ctors = __ctor__ ? [ __ctor__ ] : _getAllCtors(baseClass, mixins, options);
        fireClass = _createCtor(ctors, baseClass, className, options);
        js.value(fireClass, "extend", (function(options) {
          options["extends"] = this;
          return CCClass(options);
        }), true);
      }
      js.value(fireClass, "__ctors__", ctors.length > 0 ? ctors : null, true);
      var prototype = fireClass.prototype;
      if (baseClass) {
        if (!__es6__) {
          js.extend(fireClass, baseClass);
          prototype = fireClass.prototype;
        }
        fireClass.$super = baseClass;
        false;
      }
      if (mixins) {
        for (var m = mixins.length - 1; m >= 0; m--) {
          var mixin = mixins[m];
          mixinWithInherited(prototype, mixin.prototype);
          mixinWithInherited(fireClass, mixin, (function(prop) {
            return mixin.hasOwnProperty(prop) && true;
          }));
          CCClass._isCCClass(mixin) && mixinWithInherited(Attr.getClassAttrs(fireClass), Attr.getClassAttrs(mixin));
        }
        prototype.constructor = fireClass;
      }
      __es6__ || (prototype.__initProps__ = compileProps);
      js.setClassName(className, fireClass);
      return fireClass;
    }
    function define(className, baseClass, mixins, options) {
      var Component = cc.Component;
      var frame = cc._RF.peek();
      if (frame && js.isChildClassOf(baseClass, Component)) {
        if (js.isChildClassOf(frame.cls, Component)) {
          cc.errorID(3615);
          return null;
        }
        false;
        className = className || frame.script;
      }
      var cls = doDefine(className, baseClass, mixins, options);
      if (frame) if (js.isChildClassOf(baseClass, Component)) {
        var uuid = frame.uuid;
        if (uuid) {
          js._setClassId(uuid, cls);
          false;
        }
        frame.cls = cls;
      } else js.isChildClassOf(frame.cls, Component) || (frame.cls = cls);
      return cls;
    }
    function normalizeClassName_DEV(className) {
      var DefaultName = "CCClass";
      if (className) {
        className = className.replace(/^[^$A-Za-z_]/, "_").replace(/[^0-9A-Za-z_$]/g, "_");
        try {
          Function("function " + className + "(){}")();
          return className;
        } catch (e) {}
      }
      return DefaultName;
    }
    function getNewValueTypeCodeJit(value) {
      var clsName = js.getClassName(value);
      var type = value.constructor;
      var res = "new " + clsName + "(";
      for (var i = 0; i < type.__props__.length; i++) {
        var prop = type.__props__[i];
        var propVal = value[prop];
        false;
        res += propVal;
        i < type.__props__.length - 1 && (res += ",");
      }
      return res + ")";
    }
    function escapeForJS(s) {
      return JSON.stringify(s).replace(/\u2028/g, "\\u2028").replace(/\u2029/g, "\\u2029");
    }
    function getInitPropsJit(attrs, propList) {
      var F = [];
      var func = "";
      for (var i = 0; i < propList.length; i++) {
        var prop = propList[i];
        var attrKey = prop + DELIMETER + "default";
        if (attrKey in attrs) {
          var statement;
          statement = IDENTIFIER_RE.test(prop) ? "this." + prop + "=" : "this[" + escapeForJS(prop) + "]=";
          var expression;
          var def = attrs[attrKey];
          if ("object" === typeof def && def) expression = def instanceof cc.ValueType ? getNewValueTypeCodeJit(def) : Array.isArray(def) ? "[]" : "{}"; else if ("function" === typeof def) {
            var index = F.length;
            F.push(def);
            expression = "F[" + index + "]()";
            false;
          } else expression = "string" === typeof def ? escapeForJS(def) : def;
          statement = statement + expression + ";\n";
          func += statement;
        }
      }
      var initProps;
      initProps = 0 === F.length ? Function(func) : Function("F", "return (function(){\n" + func + "})")(F);
      return initProps;
    }
    function getInitProps(attrs, propList) {
      var props = null;
      var simpleEnd = 0;
      var valueTypeEnd = 0;
      (function() {
        var simples = null;
        var valueTypes = null;
        var advanceds = null;
        for (var i = 0; i < propList.length; ++i) {
          var prop = propList[i];
          var attrKey = prop + DELIMETER + "default";
          if (attrKey in attrs) {
            var def = attrs[attrKey];
            if ("object" === typeof def && def || "function" === typeof def) if (def instanceof cc.ValueType) {
              valueTypes || (valueTypes = []);
              valueTypes.push(prop, def);
            } else {
              advanceds || (advanceds = []);
              advanceds.push(prop, def);
            } else {
              simples || (simples = []);
              simples.push(prop, def);
            }
          }
        }
        simpleEnd = simples ? simples.length : 0;
        valueTypeEnd = simpleEnd + (valueTypes ? valueTypes.length : 0);
        var totalLength = valueTypeEnd + (advanceds ? advanceds.length : 0);
        props = new Array(totalLength);
        for (var _i = 0; _i < simpleEnd; ++_i) props[_i] = simples[_i];
        for (var _i2 = simpleEnd; _i2 < valueTypeEnd; ++_i2) props[_i2] = valueTypes[_i2 - simpleEnd];
        for (var _i3 = valueTypeEnd; _i3 < totalLength; ++_i3) props[_i3] = advanceds[_i3 - valueTypeEnd];
      })();
      return function() {
        var i = 0;
        for (;i < simpleEnd; i += 2) this[props[i]] = props[i + 1];
        for (;i < valueTypeEnd; i += 2) this[props[i]] = props[i + 1].clone();
        for (;i < props.length; i += 2) {
          var def = props[i + 1];
          if (Array.isArray(def)) this[props[i]] = []; else {
            var value;
            if ("object" === typeof def) value = {}; else {
              false;
              value = def();
            }
            this[props[i]] = value;
          }
        }
      };
    }
    var IDENTIFIER_RE = /^[A-Za-z_$][0-9A-Za-z_$]*$/;
    function compileProps(actualClass) {
      var attrs = Attr.getClassAttrs(actualClass);
      var propList = actualClass.__props__;
      if (null === propList) {
        deferredInitializer.init();
        propList = actualClass.__props__;
      }
      var initProps = getInitPropsJit(attrs, propList);
      actualClass.prototype.__initProps__ = initProps;
      initProps.call(this);
    }
    var _createCtor = function(ctors, baseClass, className, options) {
      var superCallBounded = baseClass && boundSuperCalls(baseClass, options, className);
      var ctorName = "CCClass";
      var body = "return function " + ctorName + "(){\n";
      superCallBounded && (body += "this._super=null;\n");
      body += "this.__initProps__(" + ctorName + ");\n";
      var ctorLen = ctors.length;
      if (ctorLen > 0) {
        var useTryCatch = false;
        useTryCatch && (body += "try{\n");
        var SNIPPET = "].apply(this,arguments);\n";
        if (1 === ctorLen) body += ctorName + ".__ctors__[0" + SNIPPET; else {
          body += "var cs=" + ctorName + ".__ctors__;\n";
          for (var i = 0; i < ctorLen; i++) body += "cs[" + i + SNIPPET;
        }
        useTryCatch && (body += "}catch(e){\ncc._throw(e);\n}\n");
      }
      body += "}";
      return Function(body)();
    };
    function _validateCtor_DEV(ctor, baseClass, className, options) {
      var originCtor;
      false;
      !(ctor.length > 0) || className && className.startsWith("cc.") || cc.warnID(3617, className);
      return ctor;
    }
    function _getAllCtors(baseClass, mixins, options) {
      function getCtors(cls) {
        return CCClass._isCCClass(cls) ? cls.__ctors__ || [] : [ cls ];
      }
      var ctors = [];
      var baseOrMixins = [ baseClass ].concat(mixins);
      for (var b = 0; b < baseOrMixins.length; b++) {
        var baseOrMixin = baseOrMixins[b];
        if (baseOrMixin) {
          var baseCtors = getCtors(baseOrMixin);
          for (var c = 0; c < baseCtors.length; c++) pushUnique(ctors, baseCtors[c]);
        }
      }
      var ctor = options.ctor;
      ctor && ctors.push(ctor);
      return ctors;
    }
    var SuperCallReg = /xyz/.test((function() {
      xyz;
    })) ? /\b\._super\b/ : /.*/;
    var SuperCallRegStrict = /xyz/.test((function() {
      xyz;
    })) ? /this\._super\s*\(/ : /(NONE){99}/;
    function boundSuperCalls(baseClass, options, className) {
      var hasSuperCall = false;
      for (var funcName in options) {
        if (BUILTIN_ENTRIES.indexOf(funcName) >= 0) continue;
        var func = options[funcName];
        if ("function" !== typeof func) continue;
        var pd = js.getPropertyDescriptor(baseClass.prototype, funcName);
        if (pd) {
          var superFunc = pd.value;
          if ("function" === typeof superFunc) {
            if (SuperCallReg.test(func)) {
              hasSuperCall = true;
              options[funcName] = (function(superFunc, func) {
                return function() {
                  var tmp = this._super;
                  this._super = superFunc;
                  var ret = func.apply(this, arguments);
                  this._super = tmp;
                  return ret;
                };
              })(superFunc, func);
            }
            continue;
          }
        }
        false;
      }
      return hasSuperCall;
    }
    function declareProperties(cls, className, properties, baseClass, mixins, es6) {
      cls.__props__ = [];
      baseClass && baseClass.__props__ && (cls.__props__ = baseClass.__props__.slice());
      if (mixins) for (var m = 0; m < mixins.length; ++m) {
        var mixin = mixins[m];
        mixin.__props__ && (cls.__props__ = cls.__props__.concat(mixin.__props__.filter((function(x) {
          return cls.__props__.indexOf(x) < 0;
        }))));
      }
      if (properties) {
        preprocess.preprocessAttrs(properties, className, cls, es6);
        for (var propName in properties) {
          var val = properties[propName];
          "default" in val ? defineProp(cls, className, propName, val, es6) : defineGetSet(cls, className, propName, val, es6);
        }
      }
      var attrs = Attr.getClassAttrs(cls);
      cls.__values__ = cls.__props__.filter((function(prop) {
        return false !== attrs[prop + DELIMETER + "serializable"];
      }));
    }
    function CCClass(options) {
      options = options || {};
      var name = options.name;
      var base = options["extends"];
      var mixins = options.mixins;
      var cls = define(name, base, mixins, options);
      name || (name = cc.js.getClassName(cls));
      cls._sealed = true;
      base && (base._sealed = false);
      var properties = options.properties;
      if ("function" === typeof properties || base && null === base.__props__ || mixins && mixins.some((function(x) {
        return null === x.__props__;
      }))) {
        false;
        deferredInitializer.push({
          cls: cls,
          props: properties,
          mixins: mixins
        });
        cls.__props__ = cls.__values__ = null;
      } else declareProperties(cls, name, properties, base, options.mixins, options.__ES6__);
      var statics = options.statics;
      if (statics) {
        var staticPropName;
        false;
        for (staticPropName in statics) cls[staticPropName] = statics[staticPropName];
      }
      for (var funcName in options) {
        if (BUILTIN_ENTRIES.indexOf(funcName) >= 0) continue;
        var func = options[funcName];
        if (!preprocess.validateMethodWithProps(func, funcName, name, cls, base)) continue;
        js.value(cls.prototype, funcName, func, true, true);
      }
      var editor = options.editor;
      editor && !!js.isChildClassOf(base, cc.Component) && cc.Component._registerEditorProps(cls, editor);
      return cls;
    }
    CCClass._isCCClass = function(constructor) {
      return constructor && constructor.hasOwnProperty("__ctors__");
    };
    CCClass._fastDefine = function(className, constructor, serializableFields) {
      js.setClassName(className, constructor);
      var props = constructor.__props__ = constructor.__values__ = Object.keys(serializableFields);
      var attrs = Attr.getClassAttrs(constructor);
      for (var i = 0; i < props.length; i++) {
        var key = props[i];
        attrs[key + DELIMETER + "visible"] = false;
        attrs[key + DELIMETER + "default"] = serializableFields[key];
      }
    };
    CCClass.Attr = Attr;
    CCClass.attr = Attr.attr;
    CCClass.getInheritanceChain = function(klass) {
      var chain = [];
      for (;;) {
        klass = js.getSuper(klass);
        if (!klass) break;
        klass !== Object && chain.push(klass);
      }
      return chain;
    };
    var PrimitiveTypes = {
      Integer: "Number",
      Float: "Number",
      Boolean: "Boolean",
      String: "String"
    };
    var onAfterProps_ET = [];
    function parseAttributes(cls, attributes, className, propName, usedInGetter) {
      var ERR_Type = "";
      var attrs = null;
      var propNamePrefix = "";
      function initAttrs() {
        propNamePrefix = propName + DELIMETER;
        return attrs = Attr.getClassAttrs(cls);
      }
      false, false;
      var type = attributes.type;
      if (type) {
        var primitiveType = PrimitiveTypes[type];
        if (primitiveType) {
          (attrs || initAttrs())[propNamePrefix + "type"] = type;
          (false, false) && !attributes._short && onAfterProps_ET.push(Attr.getTypeChecker_ET(primitiveType, "cc." + type));
        } else if ("Object" === type) false; else if (type === Attr.ScriptUuid) {
          (attrs || initAttrs())[propNamePrefix + "type"] = "Script";
          attrs[propNamePrefix + "ctor"] = cc.ScriptAsset;
        } else if ("object" === typeof type) if (Enum.isEnum(type)) {
          (attrs || initAttrs())[propNamePrefix + "type"] = "Enum";
          attrs[propNamePrefix + "enumList"] = Enum.getList(type);
        } else false; else if ("function" === typeof type) {
          (attrs || initAttrs())[propNamePrefix + "type"] = "Object";
          attrs[propNamePrefix + "ctor"] = type;
          (false, false) && !attributes._short && onAfterProps_ET.push(Attr.getObjTypeChecker_ET(type));
        } else false;
      }
      function parseSimpleAttr(attrName, expectType) {
        if (attrName in attributes) {
          var val = attributes[attrName];
          typeof val === expectType && ((attrs || initAttrs())[propNamePrefix + attrName] = val);
        }
      }
      if (attributes.editorOnly) {
        false;
        (attrs || initAttrs())[propNamePrefix + "editorOnly"] = true;
      }
      false;
      if (false === attributes.serializable) {
        false;
        (attrs || initAttrs())[propNamePrefix + "serializable"] = false;
      }
      parseSimpleAttr("formerlySerializedAs", "string");
      false;
      var visible;
      var startsWithUS;
      false;
      var range = attributes.range;
      if (range) if (Array.isArray(range)) if (range.length >= 2) {
        (attrs || initAttrs())[propNamePrefix + "min"] = range[0];
        attrs[propNamePrefix + "max"] = range[1];
        range.length > 2 && (attrs[propNamePrefix + "step"] = range[2]);
      } else false; else false;
      parseSimpleAttr("min", "number");
      parseSimpleAttr("max", "number");
      parseSimpleAttr("step", "number");
    }
    cc.Class = CCClass;
    module.exports = {
      isArray: function isArray(defaultVal) {
        defaultVal = getDefault(defaultVal);
        return Array.isArray(defaultVal);
      },
      fastDefine: CCClass._fastDefine,
      getNewValueTypeCode: (true, getNewValueTypeCodeJit),
      IDENTIFIER_RE: IDENTIFIER_RE,
      escapeForJS: escapeForJS,
      getDefault: getDefault
    };
    false;
  }), {
    "./CCEnum": 143,
    "./attribute": 153,
    "./js": 161,
    "./preprocess-class": 162,
    "./requiring-frame": 163,
    "./utils": 164
  } ],
  142: [ (function(require, module, exports) {
    "use strict";
    require("./CCClass");
    var Preprocess = require("./preprocess-class");
    var js = require("./js");
    var isPlainEmptyObj_DEV = false;
    var CACHE_KEY = "__ccclassCache__";
    function fNOP(ctor) {
      return ctor;
    }
    function getSubDict(obj, key) {
      return obj[key] || (obj[key] = {});
    }
    function checkCtorArgument(decorate) {
      return function(target) {
        if ("function" === typeof target) return decorate(target);
        return function(ctor) {
          return decorate(ctor, target);
        };
      };
    }
    function _checkNormalArgument(validator_DEV, decorate, decoratorName) {
      return function(target) {
        false;
        return function(ctor) {
          return decorate(ctor, target);
        };
      };
    }
    var checkCompArgument = _checkNormalArgument.bind(null, false);
    function _argumentChecker(type) {
      return _checkNormalArgument.bind(null, false);
    }
    var checkStringArgument = _argumentChecker("string");
    var checkNumberArgument = _argumentChecker("number");
    function getClassCache(ctor, decoratorName) {
      false;
      return getSubDict(ctor, CACHE_KEY);
    }
    function getDefaultFromInitializer(initializer) {
      var value;
      try {
        value = initializer();
      } catch (e) {
        return initializer;
      }
      return "object" !== typeof value || null === value ? value : initializer;
    }
    function extractActualDefaultValues(ctor) {
      var dummyObj;
      try {
        dummyObj = new ctor();
      } catch (e) {
        false;
        return {};
      }
      return dummyObj;
    }
    function genProperty(ctor, properties, propName, options, desc, cache) {
      var fullOptions;
      var isGetset = desc && (desc.get || desc.set);
      options && (fullOptions = Preprocess.getFullFormOfProperty(options, isGetset));
      var existsProperty = properties[propName];
      var prop = js.mixin(existsProperty || {}, fullOptions || options || {});
      if (isGetset) {
        var errorProps;
        false;
        desc.get && (prop.get = desc.get);
        desc.set && (prop.set = desc.set);
      } else {
        false;
        var defaultValue = void 0;
        var isDefaultValueSpecified = false;
        if (desc) {
          if (desc.initializer) {
            defaultValue = getDefaultFromInitializer(desc.initializer);
            isDefaultValueSpecified = true;
          }
        } else {
          var actualDefaultValues = cache["default"] || (cache["default"] = extractActualDefaultValues(ctor));
          if (actualDefaultValues.hasOwnProperty(propName)) {
            defaultValue = actualDefaultValues[propName];
            isDefaultValueSpecified = true;
          }
        }
        false, false;
        prop["default"] = defaultValue;
      }
      properties[propName] = prop;
    }
    var ccclass = checkCtorArgument((function(ctor, name) {
      var base = js.getSuper(ctor);
      base === Object && (base = null);
      var proto = {
        name: name,
        extends: base,
        ctor: ctor,
        __ES6__: true
      };
      var cache = ctor[CACHE_KEY];
      if (cache) {
        var decoratedProto = cache.proto;
        decoratedProto && js.mixin(proto, decoratedProto);
        ctor[CACHE_KEY] = void 0;
      }
      var res = cc.Class(proto);
      var propNames;
      var i;
      var prop;
      var desc;
      var func;
      false;
      return res;
    }));
    function property(ctorProtoOrOptions, propName, desc) {
      var options = null;
      function normalized(ctorProto, propName, desc) {
        var cache = getClassCache(ctorProto.constructor);
        if (cache) {
          var ccclassProto = getSubDict(cache, "proto");
          var properties = getSubDict(ccclassProto, "properties");
          genProperty(ctorProto.constructor, properties, propName, options, desc, cache);
        }
      }
      if ("undefined" === typeof propName) {
        options = ctorProtoOrOptions;
        return normalized;
      }
      normalized(ctorProtoOrOptions, propName, desc);
    }
    function createEditorDecorator(argCheckFunc, editorPropName, staticValue) {
      return argCheckFunc((function(ctor, decoratedValue) {
        var cache = getClassCache(ctor, editorPropName);
        if (cache) {
          var value = void 0 !== staticValue ? staticValue : decoratedValue;
          var proto = getSubDict(cache, "proto");
          getSubDict(proto, "editor")[editorPropName] = value;
        }
      }), editorPropName);
    }
    function createDummyDecorator(argCheckFunc) {
      return argCheckFunc(fNOP);
    }
    var executeInEditMode = createDummyDecorator(checkCtorArgument, "executeInEditMode", true);
    var requireComponent = createEditorDecorator(checkCompArgument, "requireComponent");
    var menu = createDummyDecorator(checkStringArgument, "menu");
    var executionOrder = createEditorDecorator(checkNumberArgument, "executionOrder");
    var disallowMultiple = createDummyDecorator(checkCtorArgument, "disallowMultiple");
    var playOnFocus = createDummyDecorator(checkCtorArgument, "playOnFocus", true);
    var inspector = createDummyDecorator(checkStringArgument, "inspector");
    var icon = createDummyDecorator(checkStringArgument, "icon");
    var help = createDummyDecorator(checkStringArgument, "help");
    function mixins() {
      var mixins = [];
      for (var i = 0; i < arguments.length; i++) mixins[i] = arguments[i];
      return function(ctor) {
        var cache = getClassCache(ctor, "mixins");
        cache && (getSubDict(cache, "proto").mixins = mixins);
      };
    }
    cc._decorator = module.exports = {
      ccclass: ccclass,
      property: property,
      executeInEditMode: executeInEditMode,
      requireComponent: requireComponent,
      menu: menu,
      executionOrder: executionOrder,
      disallowMultiple: disallowMultiple,
      playOnFocus: playOnFocus,
      inspector: inspector,
      icon: icon,
      help: help,
      mixins: mixins
    };
  }), {
    "./CCClass": 141,
    "./js": 161,
    "./preprocess-class": 162,
    "./utils": 164
  } ],
  143: [ (function(require, module, exports) {
    "use strict";
    var js = require("./js");
    function Enum(obj) {
      if ("__enums__" in obj) return obj;
      js.value(obj, "__enums__", null, true);
      var lastIndex = -1;
      var keys = Object.keys(obj);
      for (var i = 0; i < keys.length; i++) {
        var key = keys[i];
        var val = obj[key];
        if (-1 === val) {
          val = ++lastIndex;
          obj[key] = val;
        } else if ("number" === typeof val) lastIndex = val; else if ("string" === typeof val && Number.isInteger(parseFloat(key))) continue;
        var reverseKey = "" + val;
        if (key !== reverseKey) {
          if ((false, false) && reverseKey in obj && obj[reverseKey] !== key) {
            cc.errorID(7100, reverseKey);
            continue;
          }
          js.value(obj, reverseKey, key);
        }
      }
      return obj;
    }
    Enum.isEnum = function(enumType) {
      return enumType && enumType.hasOwnProperty("__enums__");
    };
    Enum.getList = function(enumDef) {
      if (enumDef.__enums__) return enumDef.__enums__;
      var enums = enumDef.__enums__ = [];
      for (var name in enumDef) {
        var value = enumDef[name];
        Number.isInteger(value) && enums.push({
          name: name,
          value: value
        });
      }
      enums.sort((function(a, b) {
        return a.value - b.value;
      }));
      return enums;
    };
    var _TestEnum;
    false;
    module.exports = cc.Enum = Enum;
  }), {
    "./js": 161
  } ],
  144: [ (function(require, module, exports) {
    "use strict";
    var eventManager = require("../event-manager");
    var inputManager = require("./CCInputManager");
    var PORTRAIT = 0;
    var LANDSCAPE_LEFT = -90;
    var PORTRAIT_UPSIDE_DOWN = 180;
    var LANDSCAPE_RIGHT = 90;
    var _didAccelerateFun;
    cc.Acceleration = function(x, y, z, timestamp) {
      this.x = x || 0;
      this.y = y || 0;
      this.z = z || 0;
      this.timestamp = timestamp || 0;
    };
    inputManager.setAccelerometerEnabled = function(isEnable) {
      var _t = this;
      if (_t._accelEnabled === isEnable) return;
      _t._accelEnabled = isEnable;
      var scheduler = cc.director.getScheduler();
      scheduler.enableForTarget(_t);
      if (_t._accelEnabled) {
        _t._registerAccelerometerEvent();
        _t._accelCurTime = 0;
        scheduler.scheduleUpdate(_t);
      } else {
        _t._unregisterAccelerometerEvent();
        _t._accelCurTime = 0;
        scheduler.unscheduleUpdate(_t);
      }
      false, false;
    };
    inputManager.setAccelerometerInterval = function(interval) {
      if (this._accelInterval !== interval) {
        this._accelInterval = interval;
        false, false;
      }
    };
    inputManager._registerKeyboardEvent = function() {
      cc.game.canvas.addEventListener("keydown", (function(e) {
        eventManager.dispatchEvent(new cc.Event.EventKeyboard(e.keyCode, true));
        e.stopPropagation();
        e.preventDefault();
      }), false);
      cc.game.canvas.addEventListener("keyup", (function(e) {
        eventManager.dispatchEvent(new cc.Event.EventKeyboard(e.keyCode, false));
        e.stopPropagation();
        e.preventDefault();
      }), false);
    };
    inputManager._registerAccelerometerEvent = function() {
      var w = window, _t = this;
      _t._acceleration = new cc.Acceleration();
      _t._accelDeviceEvent = w.DeviceMotionEvent || w.DeviceOrientationEvent;
      cc.sys.browserType === cc.sys.BROWSER_TYPE_MOBILE_QQ && (_t._accelDeviceEvent = window.DeviceOrientationEvent);
      var _deviceEventType = _t._accelDeviceEvent === w.DeviceMotionEvent ? "devicemotion" : "deviceorientation";
      var ua = navigator.userAgent;
      (/Android/.test(ua) || /Adr/.test(ua) && cc.sys.browserType === cc.BROWSER_TYPE_UC) && (_t._minus = -1);
      _didAccelerateFun = _t.didAccelerate.bind(_t);
      w.addEventListener(_deviceEventType, _didAccelerateFun, false);
    };
    inputManager._unregisterAccelerometerEvent = function() {
      var w = window, _t = this;
      var _deviceEventType = _t._accelDeviceEvent === w.DeviceMotionEvent ? "devicemotion" : "deviceorientation";
      _didAccelerateFun && w.removeEventListener(_deviceEventType, _didAccelerateFun, false);
    };
    inputManager.didAccelerate = function(eventData) {
      var _t = this, w = window;
      if (!_t._accelEnabled) return;
      var mAcceleration = _t._acceleration;
      var x, y, z;
      if (_t._accelDeviceEvent === window.DeviceMotionEvent) {
        var eventAcceleration = eventData["accelerationIncludingGravity"];
        x = _t._accelMinus * eventAcceleration.x * .1;
        y = _t._accelMinus * eventAcceleration.y * .1;
        z = .1 * eventAcceleration.z;
      } else {
        x = eventData["gamma"] / 90 * .981;
        y = -eventData["beta"] / 90 * .981;
        z = eventData["alpha"] / 90 * .981;
      }
      if (cc.view._isRotated) {
        var tmp = x;
        x = -y;
        y = tmp;
      }
      mAcceleration.x = x;
      mAcceleration.y = y;
      mAcceleration.z = z;
      mAcceleration.timestamp = eventData.timeStamp || Date.now();
      var tmpX = mAcceleration.x;
      if (w.orientation === LANDSCAPE_RIGHT) {
        mAcceleration.x = -mAcceleration.y;
        mAcceleration.y = tmpX;
      } else if (w.orientation === LANDSCAPE_LEFT) {
        mAcceleration.x = mAcceleration.y;
        mAcceleration.y = -tmpX;
      } else if (w.orientation === PORTRAIT_UPSIDE_DOWN) {
        mAcceleration.x = -mAcceleration.x;
        mAcceleration.y = -mAcceleration.y;
      }
      if (cc.sys.os === cc.sys.OS_ANDROID && cc.sys.browserType !== cc.sys.BROWSER_TYPE_MOBILE_QQ) {
        mAcceleration.x = -mAcceleration.x;
        mAcceleration.y = -mAcceleration.y;
      }
    };
  }), {
    "../event-manager": 103,
    "./CCInputManager": 145
  } ],
  145: [ (function(require, module, exports) {
    "use strict";
    var macro = require("./CCMacro");
    var sys = require("./CCSys");
    var eventManager = require("../event-manager");
    var TOUCH_TIMEOUT = macro.TOUCH_TIMEOUT;
    var _vec2 = cc.v2();
    var inputManager = {
      _mousePressed: false,
      _isRegisterEvent: false,
      _preTouchPoint: cc.v2(0, 0),
      _prevMousePoint: cc.v2(0, 0),
      _preTouchPool: [],
      _preTouchPoolPointer: 0,
      _touches: [],
      _touchesIntegerDict: {},
      _indexBitsUsed: 0,
      _maxTouches: 8,
      _accelEnabled: false,
      _accelInterval: .2,
      _accelMinus: 1,
      _accelCurTime: 0,
      _acceleration: null,
      _accelDeviceEvent: null,
      _canvasBoundingRect: {
        left: 0,
        top: 0,
        adjustedLeft: 0,
        adjustedTop: 0,
        width: 0,
        height: 0
      },
      _getUnUsedIndex: function _getUnUsedIndex() {
        var temp = this._indexBitsUsed;
        var now = cc.sys.now();
        for (var i = 0; i < this._maxTouches; i++) {
          if (!(1 & temp)) {
            this._indexBitsUsed |= 1 << i;
            return i;
          }
          var touch = this._touches[i];
          if (now - touch._lastModified > TOUCH_TIMEOUT) {
            this._removeUsedIndexBit(i);
            delete this._touchesIntegerDict[touch.getID()];
            return i;
          }
          temp >>= 1;
        }
        return -1;
      },
      _removeUsedIndexBit: function _removeUsedIndexBit(index) {
        if (index < 0 || index >= this._maxTouches) return;
        var temp = 1 << index;
        temp = ~temp;
        this._indexBitsUsed &= temp;
      },
      _glView: null,
      _updateCanvasBoundingRect: function _updateCanvasBoundingRect() {
        var element = cc.game.canvas;
        var canvasBoundingRect = this._canvasBoundingRect;
        var docElem = document.documentElement;
        var leftOffset = window.pageXOffset - docElem.clientLeft;
        var topOffset = window.pageYOffset - docElem.clientTop;
        if (element.getBoundingClientRect) {
          var box = element.getBoundingClientRect();
          canvasBoundingRect.left = box.left + leftOffset;
          canvasBoundingRect.top = box.top + topOffset;
          canvasBoundingRect.width = box.width;
          canvasBoundingRect.height = box.height;
        } else if (element instanceof HTMLCanvasElement) {
          canvasBoundingRect.left = leftOffset;
          canvasBoundingRect.top = topOffset;
          canvasBoundingRect.width = element.width;
          canvasBoundingRect.height = element.height;
        } else {
          canvasBoundingRect.left = leftOffset;
          canvasBoundingRect.top = topOffset;
          canvasBoundingRect.width = parseInt(element.style.width);
          canvasBoundingRect.height = parseInt(element.style.height);
        }
      },
      handleTouchesBegin: function handleTouchesBegin(touches) {
        var selTouch, index, curTouch, touchID, handleTouches = [], locTouchIntDict = this._touchesIntegerDict, now = sys.now();
        for (var i = 0, len = touches.length; i < len; i++) {
          selTouch = touches[i];
          touchID = selTouch.getID();
          index = locTouchIntDict[touchID];
          if (null == index) {
            var unusedIndex = this._getUnUsedIndex();
            if (-1 === unusedIndex) {
              cc.logID(2300, unusedIndex);
              continue;
            }
            curTouch = this._touches[unusedIndex] = new cc.Touch(selTouch._point.x, selTouch._point.y, selTouch.getID());
            curTouch._lastModified = now;
            curTouch._setPrevPoint(selTouch._prevPoint);
            locTouchIntDict[touchID] = unusedIndex;
            handleTouches.push(curTouch);
          }
        }
        if (handleTouches.length > 0) {
          this._glView._convertTouchesWithScale(handleTouches);
          var touchEvent = new cc.Event.EventTouch(handleTouches);
          touchEvent._eventCode = cc.Event.EventTouch.BEGAN;
          eventManager.dispatchEvent(touchEvent);
        }
      },
      handleTouchesMove: function handleTouchesMove(touches) {
        var selTouch, index, touchID, handleTouches = [], locTouches = this._touches, now = sys.now();
        for (var i = 0, len = touches.length; i < len; i++) {
          selTouch = touches[i];
          touchID = selTouch.getID();
          index = this._touchesIntegerDict[touchID];
          if (null == index) continue;
          if (locTouches[index]) {
            locTouches[index]._setPoint(selTouch._point);
            locTouches[index]._setPrevPoint(selTouch._prevPoint);
            locTouches[index]._lastModified = now;
            handleTouches.push(locTouches[index]);
          }
        }
        if (handleTouches.length > 0) {
          this._glView._convertTouchesWithScale(handleTouches);
          var touchEvent = new cc.Event.EventTouch(handleTouches);
          touchEvent._eventCode = cc.Event.EventTouch.MOVED;
          eventManager.dispatchEvent(touchEvent);
        }
      },
      handleTouchesEnd: function handleTouchesEnd(touches) {
        var handleTouches = this.getSetOfTouchesEndOrCancel(touches);
        if (handleTouches.length > 0) {
          this._glView._convertTouchesWithScale(handleTouches);
          var touchEvent = new cc.Event.EventTouch(handleTouches);
          touchEvent._eventCode = cc.Event.EventTouch.ENDED;
          eventManager.dispatchEvent(touchEvent);
        }
        this._preTouchPool.length = 0;
      },
      handleTouchesCancel: function handleTouchesCancel(touches) {
        var handleTouches = this.getSetOfTouchesEndOrCancel(touches);
        if (handleTouches.length > 0) {
          this._glView._convertTouchesWithScale(handleTouches);
          var touchEvent = new cc.Event.EventTouch(handleTouches);
          touchEvent._eventCode = cc.Event.EventTouch.CANCELED;
          eventManager.dispatchEvent(touchEvent);
        }
        this._preTouchPool.length = 0;
      },
      getSetOfTouchesEndOrCancel: function getSetOfTouchesEndOrCancel(touches) {
        var selTouch, index, touchID, handleTouches = [], locTouches = this._touches, locTouchesIntDict = this._touchesIntegerDict;
        for (var i = 0, len = touches.length; i < len; i++) {
          selTouch = touches[i];
          touchID = selTouch.getID();
          index = locTouchesIntDict[touchID];
          if (null == index) continue;
          if (locTouches[index]) {
            locTouches[index]._setPoint(selTouch._point);
            locTouches[index]._setPrevPoint(selTouch._prevPoint);
            handleTouches.push(locTouches[index]);
            this._removeUsedIndexBit(index);
            delete locTouchesIntDict[touchID];
          }
        }
        return handleTouches;
      },
      getPreTouch: function getPreTouch(touch) {
        var preTouch = null;
        var locPreTouchPool = this._preTouchPool;
        var id = touch.getID();
        for (var i = locPreTouchPool.length - 1; i >= 0; i--) if (locPreTouchPool[i].getID() === id) {
          preTouch = locPreTouchPool[i];
          break;
        }
        preTouch || (preTouch = touch);
        return preTouch;
      },
      setPreTouch: function setPreTouch(touch) {
        var find = false;
        var locPreTouchPool = this._preTouchPool;
        var id = touch.getID();
        for (var i = locPreTouchPool.length - 1; i >= 0; i--) if (locPreTouchPool[i].getID() === id) {
          locPreTouchPool[i] = touch;
          find = true;
          break;
        }
        if (!find) if (locPreTouchPool.length <= 50) locPreTouchPool.push(touch); else {
          locPreTouchPool[this._preTouchPoolPointer] = touch;
          this._preTouchPoolPointer = (this._preTouchPoolPointer + 1) % 50;
        }
      },
      getTouchByXY: function getTouchByXY(tx, ty, pos) {
        var locPreTouch = this._preTouchPoint;
        var location = this._glView.convertToLocationInView(tx, ty, pos);
        var touch = new cc.Touch(location.x, location.y, 0);
        touch._setPrevPoint(locPreTouch.x, locPreTouch.y);
        locPreTouch.x = location.x;
        locPreTouch.y = location.y;
        return touch;
      },
      getMouseEvent: function getMouseEvent(location, pos, eventType) {
        var locPreMouse = this._prevMousePoint;
        var mouseEvent = new cc.Event.EventMouse(eventType);
        mouseEvent._setPrevCursor(locPreMouse.x, locPreMouse.y);
        locPreMouse.x = location.x;
        locPreMouse.y = location.y;
        this._glView._convertMouseToLocationInView(locPreMouse, pos);
        mouseEvent.setLocation(locPreMouse.x, locPreMouse.y);
        return mouseEvent;
      },
      getPointByEvent: function getPointByEvent(event, pos) {
        cc.sys.browserType !== cc.sys.BROWSER_TYPE_QQ && cc.sys.browserType !== cc.sys.BROWSER_TYPE_UC && cc.sys.browserType !== cc.sys.BROWSER_TYPE_SAFARI || this._updateCanvasBoundingRect();
        if (null != event.pageX) return {
          x: event.pageX,
          y: event.pageY
        };
        pos.left -= document.body.scrollLeft;
        pos.top -= document.body.scrollTop;
        return {
          x: event.clientX,
          y: event.clientY
        };
      },
      getTouchesByEvent: function getTouchesByEvent(event, pos) {
        var touchArr = [], locView = this._glView;
        var touch_event, touch, preLocation;
        var locPreTouch = this._preTouchPoint;
        var length = event.changedTouches.length;
        for (var i = 0; i < length; i++) {
          touch_event = event.changedTouches[i];
          if (touch_event) {
            var location = void 0;
            location = sys.BROWSER_TYPE_FIREFOX === sys.browserType ? locView.convertToLocationInView(touch_event.pageX, touch_event.pageY, pos, _vec2) : locView.convertToLocationInView(touch_event.clientX, touch_event.clientY, pos, _vec2);
            if (null != touch_event.identifier) {
              touch = new cc.Touch(location.x, location.y, touch_event.identifier);
              preLocation = this.getPreTouch(touch).getLocation();
              touch._setPrevPoint(preLocation.x, preLocation.y);
              this.setPreTouch(touch);
            } else {
              touch = new cc.Touch(location.x, location.y);
              touch._setPrevPoint(locPreTouch.x, locPreTouch.y);
            }
            locPreTouch.x = location.x;
            locPreTouch.y = location.y;
            touchArr.push(touch);
          }
        }
        return touchArr;
      },
      registerSystemEvent: function registerSystemEvent(element) {
        if (this._isRegisterEvent) return;
        this._glView = cc.view;
        var selfPointer = this;
        var canvasBoundingRect = this._canvasBoundingRect;
        window.addEventListener("resize", this._updateCanvasBoundingRect.bind(this));
        var prohibition = sys.isMobile;
        var supportMouse = "mouse" in sys.capabilities;
        var supportTouches = "touches" in sys.capabilities;
        if (supportMouse) {
          if (!prohibition) {
            window.addEventListener("mousedown", (function() {
              selfPointer._mousePressed = true;
            }), false);
            window.addEventListener("mouseup", (function(event) {
              if (!selfPointer._mousePressed) return;
              selfPointer._mousePressed = false;
              var location = selfPointer.getPointByEvent(event, canvasBoundingRect);
              if (!cc.rect(canvasBoundingRect.left, canvasBoundingRect.top, canvasBoundingRect.width, canvasBoundingRect.height).contains(location)) {
                selfPointer.handleTouchesEnd([ selfPointer.getTouchByXY(location.x, location.y, canvasBoundingRect) ]);
                var mouseEvent = selfPointer.getMouseEvent(location, canvasBoundingRect, cc.Event.EventMouse.UP);
                mouseEvent.setButton(event.button);
                eventManager.dispatchEvent(mouseEvent);
              }
            }), false);
          }
          var EventMouse = cc.Event.EventMouse;
          var _mouseEventsOnElement = [ !prohibition && [ "mousedown", EventMouse.DOWN, function(event, mouseEvent, location, canvasBoundingRect) {
            selfPointer._mousePressed = true;
            selfPointer.handleTouchesBegin([ selfPointer.getTouchByXY(location.x, location.y, canvasBoundingRect) ]);
            element.focus();
          } ], !prohibition && [ "mouseup", EventMouse.UP, function(event, mouseEvent, location, canvasBoundingRect) {
            selfPointer._mousePressed = false;
            selfPointer.handleTouchesEnd([ selfPointer.getTouchByXY(location.x, location.y, canvasBoundingRect) ]);
          } ], !prohibition && [ "mousemove", EventMouse.MOVE, function(event, mouseEvent, location, canvasBoundingRect) {
            selfPointer.handleTouchesMove([ selfPointer.getTouchByXY(location.x, location.y, canvasBoundingRect) ]);
            selfPointer._mousePressed || mouseEvent.setButton(null);
          } ], [ "mousewheel", EventMouse.SCROLL, function(event, mouseEvent) {
            mouseEvent.setScrollData(0, event.wheelDelta);
          } ], [ "DOMMouseScroll", EventMouse.SCROLL, function(event, mouseEvent) {
            mouseEvent.setScrollData(0, -120 * event.detail);
          } ] ];
          for (var i = 0; i < _mouseEventsOnElement.length; ++i) {
            var entry = _mouseEventsOnElement[i];
            entry && (function() {
              var name = entry[0];
              var type = entry[1];
              var handler = entry[2];
              element.addEventListener(name, (function(event) {
                var location = selfPointer.getPointByEvent(event, canvasBoundingRect);
                var mouseEvent = selfPointer.getMouseEvent(location, canvasBoundingRect, type);
                mouseEvent.setButton(event.button);
                handler(event, mouseEvent, location, canvasBoundingRect);
                eventManager.dispatchEvent(mouseEvent);
                event.stopPropagation();
                event.preventDefault();
              }), false);
            })();
          }
        }
        if (window.navigator.msPointerEnabled) {
          var _pointerEventsMap = {
            MSPointerDown: selfPointer.handleTouchesBegin,
            MSPointerMove: selfPointer.handleTouchesMove,
            MSPointerUp: selfPointer.handleTouchesEnd,
            MSPointerCancel: selfPointer.handleTouchesCancel
          };
          var _loop = function _loop(eventName) {
            var touchEvent = _pointerEventsMap[eventName];
            element.addEventListener(eventName, (function(event) {
              var documentElement = document.documentElement;
              canvasBoundingRect.adjustedLeft = canvasBoundingRect.left - documentElement.scrollLeft;
              canvasBoundingRect.adjustedTop = canvasBoundingRect.top - documentElement.scrollTop;
              touchEvent.call(selfPointer, [ selfPointer.getTouchByXY(event.clientX, event.clientY, canvasBoundingRect) ]);
              event.stopPropagation();
            }), false);
          };
          for (var eventName in _pointerEventsMap) _loop(eventName);
        }
        if (supportTouches) {
          var _touchEventsMap = {
            touchstart: function touchstart(touchesToHandle) {
              selfPointer.handleTouchesBegin(touchesToHandle);
              element.focus();
            },
            touchmove: function touchmove(touchesToHandle) {
              selfPointer.handleTouchesMove(touchesToHandle);
            },
            touchend: function touchend(touchesToHandle) {
              selfPointer.handleTouchesEnd(touchesToHandle);
            },
            touchcancel: function touchcancel(touchesToHandle) {
              selfPointer.handleTouchesCancel(touchesToHandle);
            }
          };
          var registerTouchEvent = function registerTouchEvent(eventName) {
            var handler = _touchEventsMap[eventName];
            element.addEventListener(eventName, (function(event) {
              if (!event.changedTouches) return;
              var body = document.body;
              canvasBoundingRect.adjustedLeft = canvasBoundingRect.left - (body.scrollLeft || window.scrollX || 0);
              canvasBoundingRect.adjustedTop = canvasBoundingRect.top - (body.scrollTop || window.scrollY || 0);
              handler(selfPointer.getTouchesByEvent(event, canvasBoundingRect));
              event.stopPropagation();
              event.preventDefault();
            }), false);
          };
          for (var _eventName in _touchEventsMap) registerTouchEvent(_eventName);
        }
        this._registerKeyboardEvent();
        this._isRegisterEvent = true;
      },
      _registerKeyboardEvent: function _registerKeyboardEvent() {},
      _registerAccelerometerEvent: function _registerAccelerometerEvent() {},
      update: function update(dt) {
        if (this._accelCurTime > this._accelInterval) {
          this._accelCurTime -= this._accelInterval;
          eventManager.dispatchEvent(new cc.Event.EventAcceleration(this._acceleration));
        }
        this._accelCurTime += dt;
      }
    };
    module.exports = cc.internal.inputManager = inputManager;
  }), {
    "../event-manager": 103,
    "./CCMacro": 146,
    "./CCSys": 150
  } ],
  146: [ (function(require, module, exports) {
    "use strict";
    cc.macro = {
      RAD: Math.PI / 180,
      DEG: 180 / Math.PI,
      REPEAT_FOREVER: Number.MAX_VALUE - 1,
      FLT_EPSILON: 1.192092896e-7,
      MIN_ZINDEX: -Math.pow(2, 15),
      MAX_ZINDEX: Math.pow(2, 15) - 1,
      ONE: 1,
      ZERO: 0,
      SRC_ALPHA: 770,
      SRC_ALPHA_SATURATE: 776,
      SRC_COLOR: 768,
      DST_ALPHA: 772,
      DST_COLOR: 774,
      ONE_MINUS_SRC_ALPHA: 771,
      ONE_MINUS_SRC_COLOR: 769,
      ONE_MINUS_DST_ALPHA: 773,
      ONE_MINUS_DST_COLOR: 775,
      ONE_MINUS_CONSTANT_ALPHA: 32772,
      ONE_MINUS_CONSTANT_COLOR: 32770,
      ORIENTATION_PORTRAIT: 1,
      ORIENTATION_LANDSCAPE: 2,
      ORIENTATION_AUTO: 3,
      DENSITYDPI_DEVICE: "device-dpi",
      DENSITYDPI_HIGH: "high-dpi",
      DENSITYDPI_MEDIUM: "medium-dpi",
      DENSITYDPI_LOW: "low-dpi",
      FIX_ARTIFACTS_BY_STRECHING_TEXEL_TMX: true,
      DIRECTOR_STATS_POSITION: cc.v2(0, 0),
      ENABLE_STACKABLE_ACTIONS: true,
      TOUCH_TIMEOUT: 5e3,
      BATCH_VERTEX_COUNT: 2e4,
      ENABLE_TILEDMAP_CULLING: true,
      ENABLE_TRANSPARENT_CANVAS: false,
      ENABLE_WEBGL_ANTIALIAS: false,
      ENABLE_CULLING: false,
      CLEANUP_IMAGE_CACHE: false,
      SHOW_MESH_WIREFRAME: false,
      SHOW_MESH_NORMAL: false,
      ENABLE_MULTI_TOUCH: true,
      ALLOW_IMAGE_BITMAP: !cc.sys.isMobile
    };
    Object.defineProperty(cc.macro, "ROTATE_ACTION_CCW", {
      set: function set(value) {
        cc.RotateTo && cc.RotateBy && (cc.RotateTo._reverse = cc.RotateBy._reverse = value);
      }
    });
    var SUPPORT_TEXTURE_FORMATS = [ ".pkm", ".pvr", ".webp", ".jpg", ".jpeg", ".bmp", ".png" ];
    cc.macro.SUPPORT_TEXTURE_FORMATS = SUPPORT_TEXTURE_FORMATS;
    cc.macro.KEY = {
      none: 0,
      back: 6,
      menu: 18,
      backspace: 8,
      tab: 9,
      enter: 13,
      shift: 16,
      ctrl: 17,
      alt: 18,
      pause: 19,
      capslock: 20,
      escape: 27,
      space: 32,
      pageup: 33,
      pagedown: 34,
      end: 35,
      home: 36,
      left: 37,
      up: 38,
      right: 39,
      down: 40,
      select: 41,
      insert: 45,
      Delete: 46,
      0: 48,
      1: 49,
      2: 50,
      3: 51,
      4: 52,
      5: 53,
      6: 54,
      7: 55,
      8: 56,
      9: 57,
      a: 65,
      b: 66,
      c: 67,
      d: 68,
      e: 69,
      f: 70,
      g: 71,
      h: 72,
      i: 73,
      j: 74,
      k: 75,
      l: 76,
      m: 77,
      n: 78,
      o: 79,
      p: 80,
      q: 81,
      r: 82,
      s: 83,
      t: 84,
      u: 85,
      v: 86,
      w: 87,
      x: 88,
      y: 89,
      z: 90,
      num0: 96,
      num1: 97,
      num2: 98,
      num3: 99,
      num4: 100,
      num5: 101,
      num6: 102,
      num7: 103,
      num8: 104,
      num9: 105,
      "*": 106,
      "+": 107,
      "-": 109,
      numdel: 110,
      "/": 111,
      f1: 112,
      f2: 113,
      f3: 114,
      f4: 115,
      f5: 116,
      f6: 117,
      f7: 118,
      f8: 119,
      f9: 120,
      f10: 121,
      f11: 122,
      f12: 123,
      numlock: 144,
      scrolllock: 145,
      ";": 186,
      semicolon: 186,
      equal: 187,
      "=": 187,
      ",": 188,
      comma: 188,
      dash: 189,
      ".": 190,
      period: 190,
      forwardslash: 191,
      grave: 192,
      "[": 219,
      openbracket: 219,
      backslash: 220,
      "]": 221,
      closebracket: 221,
      quote: 222,
      dpadLeft: 1e3,
      dpadRight: 1001,
      dpadUp: 1003,
      dpadDown: 1004,
      dpadCenter: 1005
    };
    cc.macro.ImageFormat = cc.Enum({
      JPG: 0,
      PNG: 1,
      TIFF: 2,
      WEBP: 3,
      PVR: 4,
      ETC: 5,
      S3TC: 6,
      ATITC: 7,
      TGA: 8,
      RAWDATA: 9,
      UNKNOWN: 10
    });
    cc.macro.BlendFactor = cc.Enum({
      ONE: 1,
      ZERO: 0,
      SRC_ALPHA: 770,
      SRC_COLOR: 768,
      DST_ALPHA: 772,
      DST_COLOR: 774,
      ONE_MINUS_SRC_ALPHA: 771,
      ONE_MINUS_SRC_COLOR: 769,
      ONE_MINUS_DST_ALPHA: 773,
      ONE_MINUS_DST_COLOR: 775
    });
    cc.macro.TextAlignment = cc.Enum({
      LEFT: 0,
      CENTER: 1,
      RIGHT: 2
    });
    cc.macro.VerticalTextAlignment = cc.Enum({
      TOP: 0,
      CENTER: 1,
      BOTTOM: 2
    });
    module.exports = cc.macro;
  }), {} ],
  147: [ (function(require, module, exports) {
    "use strict";
    var js = require("./js");
    var CCClass = require("./CCClass");
    var Destroyed = 1;
    var RealDestroyed = 2;
    var ToDestroy = 4;
    var DontSave = 8;
    var EditorOnly = 16;
    var Dirty = 32;
    var DontDestroy = 64;
    var Destroying = 128;
    var Deactivating = 256;
    var LockedInEditor = 512;
    var HideInHierarchy = 1024;
    var IsOnEnableCalled = 2048;
    var IsEditorOnEnableCalled = 4096;
    var IsPreloadStarted = 8192;
    var IsOnLoadCalled = 16384;
    var IsOnLoadStarted = 32768;
    var IsStartCalled = 65536;
    var IsRotationLocked = 1 << 17;
    var IsScaleLocked = 1 << 18;
    var IsAnchorLocked = 1 << 19;
    var IsSizeLocked = 1 << 20;
    var IsPositionLocked = 1 << 21;
    var PersistentMask = ~(ToDestroy | Dirty | Destroying | DontDestroy | Deactivating | IsPreloadStarted | IsOnLoadStarted | IsOnLoadCalled | IsStartCalled | IsOnEnableCalled | IsEditorOnEnableCalled | IsRotationLocked | IsScaleLocked | IsAnchorLocked | IsSizeLocked | IsPositionLocked);
    function CCObject() {
      this._name = "";
      this._objFlags = 0;
    }
    CCClass.fastDefine("cc.Object", CCObject, {
      _name: "",
      _objFlags: 0
    });
    js.value(CCObject, "Flags", {
      Destroyed: Destroyed,
      DontSave: DontSave,
      EditorOnly: EditorOnly,
      Dirty: Dirty,
      DontDestroy: DontDestroy,
      PersistentMask: PersistentMask,
      Destroying: Destroying,
      Deactivating: Deactivating,
      LockedInEditor: LockedInEditor,
      HideInHierarchy: HideInHierarchy,
      IsPreloadStarted: IsPreloadStarted,
      IsOnLoadStarted: IsOnLoadStarted,
      IsOnLoadCalled: IsOnLoadCalled,
      IsOnEnableCalled: IsOnEnableCalled,
      IsStartCalled: IsStartCalled,
      IsEditorOnEnableCalled: IsEditorOnEnableCalled,
      IsPositionLocked: IsPositionLocked,
      IsRotationLocked: IsRotationLocked,
      IsScaleLocked: IsScaleLocked,
      IsAnchorLocked: IsAnchorLocked,
      IsSizeLocked: IsSizeLocked
    });
    var objectsToDestroy = [];
    function deferredDestroy() {
      var deleteCount = objectsToDestroy.length;
      for (var i = 0; i < deleteCount; ++i) {
        var obj = objectsToDestroy[i];
        obj._objFlags & Destroyed || obj._destroyImmediate();
      }
      deleteCount === objectsToDestroy.length ? objectsToDestroy.length = 0 : objectsToDestroy.splice(0, deleteCount);
      false;
    }
    js.value(CCObject, "_deferredDestroy", deferredDestroy);
    false;
    var prototype = CCObject.prototype;
    js.getset(prototype, "name", (function() {
      return this._name;
    }), (function(value) {
      this._name = value;
    }), true);
    js.get(prototype, "isValid", (function() {
      return !(this._objFlags & Destroyed);
    }), true);
    false, false;
    var deferredDestroyTimer = null;
    prototype.destroy = function() {
      if (this._objFlags & Destroyed) {
        cc.warnID(5e3);
        return false;
      }
      if (this._objFlags & ToDestroy) return false;
      this._objFlags |= ToDestroy;
      objectsToDestroy.push(this);
      false;
      return true;
    };
    false, false;
    function compileDestruct(obj, ctor) {
      var shouldSkipId = obj instanceof cc._BaseNode || obj instanceof cc.Component;
      var idToSkip = shouldSkipId ? "_id" : null;
      var key, propsToReset = {};
      for (key in obj) if (obj.hasOwnProperty(key)) {
        if (key === idToSkip) continue;
        switch (typeof obj[key]) {
         case "string":
          propsToReset[key] = "";
          break;

         case "object":
         case "function":
          propsToReset[key] = null;
        }
      }
      if (cc.Class._isCCClass(ctor)) {
        var attrs = cc.Class.Attr.getClassAttrs(ctor);
        var propList = ctor.__props__;
        for (var i = 0; i < propList.length; i++) {
          key = propList[i];
          var attrKey = key + cc.Class.Attr.DELIMETER + "default";
          if (attrKey in attrs) {
            if (shouldSkipId && "_id" === key) continue;
            switch (typeof attrs[attrKey]) {
             case "string":
              propsToReset[key] = "";
              break;

             case "object":
             case "function":
              propsToReset[key] = null;
              break;

             case "undefined":
              propsToReset[key] = void 0;
            }
          }
        }
      }
      true;
      var func = "";
      for (key in propsToReset) {
        var statement;
        statement = CCClass.IDENTIFIER_RE.test(key) ? "o." + key + "=" : "o[" + CCClass.escapeForJS(key) + "]=";
        var val = propsToReset[key];
        "" === val && (val = '""');
        func += statement + val + ";\n";
      }
      return Function("o", func);
    }
    prototype._destruct = function() {
      var ctor = this.constructor;
      var destruct = ctor.__destruct__;
      if (!destruct) {
        destruct = compileDestruct(this, ctor);
        js.value(ctor, "__destruct__", destruct, true);
      }
      destruct(this);
    };
    prototype._onPreDestroy = null;
    prototype._destroyImmediate = function() {
      if (this._objFlags & Destroyed) {
        cc.errorID(5e3);
        return;
      }
      this._onPreDestroy && this._onPreDestroy();
      true;
      this._destruct();
      this._objFlags |= Destroyed;
    };
    false;
    prototype._deserialize = null;
    cc.isValid = function(value, strictMode) {
      return "object" === typeof value ? !!value && !(value._objFlags & (strictMode ? Destroyed | ToDestroy : Destroyed)) : "undefined" !== typeof value;
    };
    false, false;
    cc.Object = module.exports = CCObject;
  }), {
    "./CCClass": 141,
    "./js": 161
  } ],
  148: [ (function(require, module, exports) {
    "use strict";
    var js = require("../platform/js");
    cc.SAXParser = function() {
      if (true, window.DOMParser) {
        this._isSupportDOMParser = true;
        this._parser = new DOMParser();
      } else {
        this._isSupportDOMParser = false;
        this._parser = null;
      }
    };
    cc.SAXParser.prototype = {
      constructor: cc.SAXParser,
      parse: function parse(xmlTxt) {
        return this._parseXML(xmlTxt);
      },
      _parseXML: function _parseXML(textxml) {
        var xmlDoc;
        if (this._isSupportDOMParser) xmlDoc = this._parser.parseFromString(textxml, "text/xml"); else {
          xmlDoc = new ActiveXObject("Microsoft.XMLDOM");
          xmlDoc.async = "false";
          xmlDoc.loadXML(textxml);
        }
        return xmlDoc;
      }
    };
    cc.PlistParser = function() {
      cc.SAXParser.call(this);
    };
    js.extend(cc.PlistParser, cc.SAXParser);
    js.mixin(cc.PlistParser.prototype, {
      parse: function parse(xmlTxt) {
        var xmlDoc = this._parseXML(xmlTxt);
        var plist = xmlDoc.documentElement;
        if ("plist" !== plist.tagName) {
          cc.warnID(5100);
          return {};
        }
        var node = null;
        for (var i = 0, len = plist.childNodes.length; i < len; i++) {
          node = plist.childNodes[i];
          if (1 === node.nodeType) break;
        }
        xmlDoc = null;
        return this._parseNode(node);
      },
      _parseNode: function _parseNode(node) {
        var data = null, tagName = node.tagName;
        if ("dict" === tagName) data = this._parseDict(node); else if ("array" === tagName) data = this._parseArray(node); else if ("string" === tagName) if (1 === node.childNodes.length) data = node.firstChild.nodeValue; else {
          data = "";
          for (var i = 0; i < node.childNodes.length; i++) data += node.childNodes[i].nodeValue;
        } else "false" === tagName ? data = false : "true" === tagName ? data = true : "real" === tagName ? data = parseFloat(node.firstChild.nodeValue) : "integer" === tagName && (data = parseInt(node.firstChild.nodeValue, 10));
        return data;
      },
      _parseArray: function _parseArray(node) {
        var data = [];
        for (var i = 0, len = node.childNodes.length; i < len; i++) {
          var child = node.childNodes[i];
          if (1 !== child.nodeType) continue;
          data.push(this._parseNode(child));
        }
        return data;
      },
      _parseDict: function _parseDict(node) {
        var data = {};
        var key = null;
        for (var i = 0, len = node.childNodes.length; i < len; i++) {
          var child = node.childNodes[i];
          if (1 !== child.nodeType) continue;
          "key" === child.tagName ? key = child.firstChild.nodeValue : data[key] = this._parseNode(child);
        }
        return data;
      }
    });
    cc.saxParser = new cc.SAXParser();
    cc.plistParser = new cc.PlistParser();
    module.exports = {
      saxParser: cc.saxParser,
      plistParser: cc.plistParser
    };
  }), {
    "../platform/js": 161
  } ],
  149: [ (function(require, module, exports) {
    "use strict";
    cc.screen = {
      _supportsFullScreen: false,
      _onfullscreenchange: null,
      _onfullscreenerror: null,
      _preOnFullScreenChange: null,
      _preOnFullScreenError: null,
      _preOnTouch: null,
      _touchEvent: "",
      _fn: null,
      _fnMap: [ [ "requestFullscreen", "exitFullscreen", "fullscreenchange", "fullscreenEnabled", "fullscreenElement", "fullscreenerror" ], [ "requestFullScreen", "exitFullScreen", "fullScreenchange", "fullScreenEnabled", "fullScreenElement", "fullscreenerror" ], [ "webkitRequestFullScreen", "webkitCancelFullScreen", "webkitfullscreenchange", "webkitIsFullScreen", "webkitCurrentFullScreenElement", "webkitfullscreenerror" ], [ "mozRequestFullScreen", "mozCancelFullScreen", "mozfullscreenchange", "mozFullScreen", "mozFullScreenElement", "mozfullscreenerror" ], [ "msRequestFullscreen", "msExitFullscreen", "MSFullscreenChange", "msFullscreenEnabled", "msFullscreenElement", "msfullscreenerror" ] ],
      init: function init() {
        this._fn = {};
        var i, l, val, map = this._fnMap, valL;
        for (i = 0, l = map.length; i < l; i++) {
          val = map[i];
          if (val && "undefined" !== typeof document[val[1]]) {
            for (i = 0, valL = val.length; i < valL; i++) this._fn[map[0][i]] = val[i];
            break;
          }
        }
        this._supportsFullScreen = void 0 !== this._fn.requestFullscreen;
        this._touchEvent = "ontouchend" in window ? "touchend" : "mousedown";
      },
      fullScreen: function fullScreen() {
        return !!this._supportsFullScreen && !!(document[this._fn.fullscreenElement] || document[this._fn.webkitFullscreenElement] || document[this._fn.mozFullScreenElement]);
      },
      requestFullScreen: function requestFullScreen(element, onFullScreenChange, onFullScreenError) {
        if (element && "video" === element.tagName.toLowerCase()) {
          if (cc.sys.os === cc.sys.OS_IOS && cc.sys.isBrowser && element.readyState > 0) {
            element.webkitEnterFullscreen && element.webkitEnterFullscreen();
            return;
          }
          element.setAttribute("x5-video-player-fullscreen", "true");
        }
        if (!this._supportsFullScreen) return;
        element = element || document.documentElement;
        if (onFullScreenChange) {
          var eventName = this._fn.fullscreenchange;
          this._onfullscreenchange && document.removeEventListener(eventName, this._onfullscreenchange);
          this._onfullscreenchange = onFullScreenChange;
          document.addEventListener(eventName, onFullScreenChange, false);
        }
        if (onFullScreenError) {
          var _eventName = this._fn.fullscreenerror;
          this._onfullscreenerror && document.removeEventListener(_eventName, this._onfullscreenerror);
          this._onfullscreenerror = onFullScreenError;
          document.addEventListener(_eventName, onFullScreenError, {
            once: true
          });
        }
        var requestPromise = element[this._fn.requestFullscreen]();
        "undefined" === typeof document[this._fn.fullscreenerror] && window.Promise && requestPromise instanceof Promise && requestPromise["catch"]((function(err) {}));
      },
      exitFullScreen: function exitFullScreen(element) {
        if (element && "video" === element.tagName.toLowerCase()) {
          if (cc.sys.os === cc.sys.OS_IOS && cc.sys.isBrowser) {
            element.webkitExitFullscreen && element.webkitExitFullscreen();
            return;
          }
          element.setAttribute("x5-video-player-fullscreen", "false");
        }
        return !this._supportsFullScreen || document[this._fn.exitFullscreen]();
      },
      autoFullScreen: function autoFullScreen(element, onFullScreenChange) {
        element = element || document.body;
        this._ensureFullScreen(element, onFullScreenChange);
        this.requestFullScreen(element, onFullScreenChange);
      },
      disableAutoFullScreen: function disableAutoFullScreen(element) {
        var touchTarget = cc.game.canvas || element;
        var touchEventName = this._touchEvent;
        if (this._preOnTouch) {
          touchTarget.removeEventListener(touchEventName, this._preOnTouch);
          this._preOnTouch = null;
        }
      },
      _ensureFullScreen: function _ensureFullScreen(element, onFullScreenChange) {
        var self = this;
        var touchTarget = cc.game.canvas || element;
        var fullScreenErrorEventName = this._fn.fullscreenerror;
        if ("undefined" === typeof document[fullScreenErrorEventName]) return;
        var touchEventName = this._touchEvent;
        function onFullScreenError() {
          self._preOnFullScreenError = null;
          function onTouch() {
            self._preOnTouch = null;
            self.requestFullScreen(element, onFullScreenChange);
          }
          self._preOnTouch && touchTarget.removeEventListener(touchEventName, self._preOnTouch);
          self._preOnTouch = onTouch;
          touchTarget.addEventListener(touchEventName, self._preOnTouch, {
            once: true
          });
        }
        this._preOnFullScreenError && element.removeEventListener(fullScreenErrorEventName, this._preOnFullScreenError);
        this._preOnFullScreenError = onFullScreenError;
        element.addEventListener(fullScreenErrorEventName, onFullScreenError, {
          once: true
        });
      }
    };
    cc.screen.init();
  }), {} ],
  150: [ (function(require, module, exports) {
    "use strict";
    var settingPlatform;
    true;
    settingPlatform = window._CCSettings ? _CCSettings.platform : void 0;
    var isVivoGame = "qgame" === settingPlatform;
    var isOppoGame = "quickgame" === settingPlatform;
    var isHuaweiGame = "huawei" === settingPlatform;
    var isJKWGame = "jkw-game" === settingPlatform;
    var isQttGame = "qtt-game" === settingPlatform;
    var isLinkSure = "link-sure" === settingPlatform;
    var _global = "undefined" === typeof window ? global : window;
    function initSys() {
      cc.sys = {};
      var sys = cc.sys;
      sys.LANGUAGE_ENGLISH = "en";
      sys.LANGUAGE_CHINESE = "zh";
      sys.LANGUAGE_FRENCH = "fr";
      sys.LANGUAGE_ITALIAN = "it";
      sys.LANGUAGE_GERMAN = "de";
      sys.LANGUAGE_SPANISH = "es";
      sys.LANGUAGE_DUTCH = "du";
      sys.LANGUAGE_RUSSIAN = "ru";
      sys.LANGUAGE_KOREAN = "ko";
      sys.LANGUAGE_JAPANESE = "ja";
      sys.LANGUAGE_HUNGARIAN = "hu";
      sys.LANGUAGE_PORTUGUESE = "pt";
      sys.LANGUAGE_ARABIC = "ar";
      sys.LANGUAGE_NORWEGIAN = "no";
      sys.LANGUAGE_POLISH = "pl";
      sys.LANGUAGE_TURKISH = "tr";
      sys.LANGUAGE_UKRAINIAN = "uk";
      sys.LANGUAGE_ROMANIAN = "ro";
      sys.LANGUAGE_BULGARIAN = "bg";
      sys.LANGUAGE_UNKNOWN = "unknown";
      sys.OS_IOS = "iOS";
      sys.OS_ANDROID = "Android";
      sys.OS_WINDOWS = "Windows";
      sys.OS_MARMALADE = "Marmalade";
      sys.OS_LINUX = "Linux";
      sys.OS_BADA = "Bada";
      sys.OS_BLACKBERRY = "Blackberry";
      sys.OS_OSX = "OS X";
      sys.OS_WP8 = "WP8";
      sys.OS_WINRT = "WINRT";
      sys.OS_UNKNOWN = "Unknown";
      sys.UNKNOWN = -1;
      sys.WIN32 = 0;
      sys.LINUX = 1;
      sys.MACOS = 2;
      sys.ANDROID = 3;
      sys.IPHONE = 4;
      sys.IPAD = 5;
      sys.BLACKBERRY = 6;
      sys.NACL = 7;
      sys.EMSCRIPTEN = 8;
      sys.TIZEN = 9;
      sys.WINRT = 10;
      sys.WP8 = 11;
      sys.MOBILE_BROWSER = 100;
      sys.DESKTOP_BROWSER = 101;
      sys.EDITOR_PAGE = 102;
      sys.EDITOR_CORE = 103;
      sys.WECHAT_GAME = 104;
      sys.QQ_PLAY = 105;
      sys.FB_PLAYABLE_ADS = 106;
      sys.BAIDU_GAME = 107;
      sys.VIVO_GAME = 108;
      sys.OPPO_GAME = 109;
      sys.HUAWEI_GAME = 110;
      sys.XIAOMI_GAME = 111;
      sys.JKW_GAME = 112;
      sys.ALIPAY_GAME = 113;
      sys.WECHAT_GAME_SUB = 114;
      sys.BAIDU_GAME_SUB = 115;
      sys.QTT_GAME = 116;
      sys.BYTEDANCE_GAME = 117;
      sys.BYTEDANCE_GAME_SUB = 118;
      sys.LINKSURE = 119;
      sys.BROWSER_TYPE_WECHAT = "wechat";
      sys.BROWSER_TYPE_ANDROID = "androidbrowser";
      sys.BROWSER_TYPE_IE = "ie";
      sys.BROWSER_TYPE_EDGE = "edge";
      sys.BROWSER_TYPE_QQ = "qqbrowser";
      sys.BROWSER_TYPE_MOBILE_QQ = "mqqbrowser";
      sys.BROWSER_TYPE_UC = "ucbrowser";
      sys.BROWSER_TYPE_UCBS = "ucbs";
      sys.BROWSER_TYPE_360 = "360browser";
      sys.BROWSER_TYPE_BAIDU_APP = "baiduboxapp";
      sys.BROWSER_TYPE_BAIDU = "baidubrowser";
      sys.BROWSER_TYPE_MAXTHON = "maxthon";
      sys.BROWSER_TYPE_OPERA = "opera";
      sys.BROWSER_TYPE_OUPENG = "oupeng";
      sys.BROWSER_TYPE_MIUI = "miuibrowser";
      sys.BROWSER_TYPE_FIREFOX = "firefox";
      sys.BROWSER_TYPE_SAFARI = "safari";
      sys.BROWSER_TYPE_CHROME = "chrome";
      sys.BROWSER_TYPE_LIEBAO = "liebao";
      sys.BROWSER_TYPE_QZONE = "qzone";
      sys.BROWSER_TYPE_SOUGOU = "sogou";
      sys.BROWSER_TYPE_UNKNOWN = "unknown";
      sys.isNative = (false, false);
      sys.isBrowser = "object" === typeof window && "object" === typeof document && true;
      sys.glExtension = function(name) {
        return !!cc.renderer.device.ext(name);
      };
      sys.getMaxJointMatrixSize = function() {
        if (!sys._maxJointMatrixSize) {
          var JOINT_MATRICES_SIZE = 50;
          var LEFT_UNIFORM_SIZE = 10;
          var gl = cc.game._renderContext;
          var maxUniforms = Math.floor(gl.getParameter(gl.MAX_VERTEX_UNIFORM_VECTORS) / 4) - LEFT_UNIFORM_SIZE;
          sys._maxJointMatrixSize = maxUniforms < JOINT_MATRICES_SIZE ? 0 : JOINT_MATRICES_SIZE;
        }
        return sys._maxJointMatrixSize;
      };
      sys.getSafeAreaRect = function() {
        var visibleSize = cc.view.getVisibleSize();
        return cc.rect(0, 0, visibleSize.width, visibleSize.height);
      };
      if (_global.__globalAdapter && _global.__globalAdapter.adaptSys) _global.__globalAdapter.adaptSys(sys); else {
        false;
        var platform;
        var languageCode;
        var w;
        var h;
        var ratio;
        var capabilities;
        false, false;
        var win = window, nav = win.navigator, doc = document, docEle = doc.documentElement;
        var ua = nav.userAgent.toLowerCase();
        false;
        sys.isMobile = /mobile|android|iphone|ipad/.test(ua);
        "undefined" !== typeof FbPlayableAd ? sys.platform = sys.FB_PLAYABLE_ADS : sys.platform = sys.isMobile ? sys.MOBILE_BROWSER : sys.DESKTOP_BROWSER;
        var currLanguage = nav.language;
        currLanguage = currLanguage || nav.browserLanguage;
        sys.languageCode = currLanguage.toLowerCase();
        currLanguage = currLanguage ? currLanguage.split("-")[0] : sys.LANGUAGE_ENGLISH;
        sys.language = currLanguage;
        var isAndroid = false, iOS = false, osVersion = "", osMainVersion = 0;
        var uaResult = /android\s*(\d+(?:\.\d+)*)/i.exec(ua) || /android\s*(\d+(?:\.\d+)*)/i.exec(nav.platform);
        if (uaResult) {
          isAndroid = true;
          osVersion = uaResult[1] || "";
          osMainVersion = parseInt(osVersion) || 0;
        }
        uaResult = /(iPad|iPhone|iPod).*OS ((\d+_?){2,3})/i.exec(ua);
        if (uaResult) {
          iOS = true;
          osVersion = uaResult[2] || "";
          osMainVersion = parseInt(osVersion) || 0;
        } else if (/(iPhone|iPad|iPod)/.exec(nav.platform) || "MacIntel" === nav.platform && nav.maxTouchPoints && nav.maxTouchPoints > 1) {
          iOS = true;
          osVersion = "";
          osMainVersion = 0;
        }
        var osName = sys.OS_UNKNOWN;
        -1 !== nav.appVersion.indexOf("Win") ? osName = sys.OS_WINDOWS : iOS ? osName = sys.OS_IOS : -1 !== nav.appVersion.indexOf("Mac") ? osName = sys.OS_OSX : -1 !== nav.appVersion.indexOf("X11") && -1 === nav.appVersion.indexOf("Linux") ? osName = sys.OS_UNIX : isAndroid ? osName = sys.OS_ANDROID : -1 === nav.appVersion.indexOf("Linux") && -1 === ua.indexOf("ubuntu") || (osName = sys.OS_LINUX);
        sys.os = osName;
        sys.osVersion = osVersion;
        sys.osMainVersion = osMainVersion;
        sys.browserType = sys.BROWSER_TYPE_UNKNOWN;
        (function() {
          var typeReg1 = /mqqbrowser|micromessenger|qqbrowser|sogou|qzone|liebao|maxthon|ucbs|360 aphone|360browser|baiduboxapp|baidubrowser|maxthon|mxbrowser|miuibrowser/i;
          var typeReg2 = /qq|ucbrowser|ubrowser|edge/i;
          var typeReg3 = /chrome|safari|firefox|trident|opera|opr\/|oupeng/i;
          var browserTypes = typeReg1.exec(ua) || typeReg2.exec(ua) || typeReg3.exec(ua);
          var browserType = browserTypes ? browserTypes[0].toLowerCase() : sys.BROWSER_TYPE_UNKNOWN;
          "safari" === browserType && isAndroid ? browserType = sys.BROWSER_TYPE_ANDROID : "qq" === browserType && ua.match(/android.*applewebkit/i) && (browserType = sys.BROWSER_TYPE_ANDROID);
          var typeMap = {
            micromessenger: sys.BROWSER_TYPE_WECHAT,
            trident: sys.BROWSER_TYPE_IE,
            edge: sys.BROWSER_TYPE_EDGE,
            "360 aphone": sys.BROWSER_TYPE_360,
            mxbrowser: sys.BROWSER_TYPE_MAXTHON,
            "opr/": sys.BROWSER_TYPE_OPERA,
            ubrowser: sys.BROWSER_TYPE_UC
          };
          sys.browserType = typeMap[browserType] || browserType;
        })();
        sys.browserVersion = "";
        (function() {
          var versionReg1 = /(mqqbrowser|micromessenger|qqbrowser|sogou|qzone|liebao|maxthon|uc|ucbs|360 aphone|360|baiduboxapp|baidu|maxthon|mxbrowser|miui(?:.hybrid)?)(mobile)?(browser)?\/?([\d.]+)/i;
          var versionReg2 = /(qq|chrome|safari|firefox|trident|opera|opr\/|oupeng)(mobile)?(browser)?\/?([\d.]+)/i;
          var tmp = ua.match(versionReg1);
          tmp || (tmp = ua.match(versionReg2));
          sys.browserVersion = tmp ? tmp[4] : "";
        })();
        var w = window.innerWidth || document.documentElement.clientWidth;
        var h = window.innerHeight || document.documentElement.clientHeight;
        var ratio = window.devicePixelRatio || 1;
        sys.windowPixelResolution = {
          width: ratio * w,
          height: ratio * h
        };
        sys._checkWebGLRenderMode = function() {
          if (cc.game.renderType !== cc.game.RENDER_TYPE_WEBGL) throw new Error("This feature supports WebGL render mode only.");
        };
        var _tmpCanvas1 = document.createElement("canvas");
        var create3DContext = function create3DContext(canvas, opt_attribs, opt_contextType) {
          if (!opt_contextType) return create3DContext(canvas, opt_attribs, "webgl") || create3DContext(canvas, opt_attribs, "experimental-webgl") || create3DContext(canvas, opt_attribs, "webkit-3d") || create3DContext(canvas, opt_attribs, "moz-webgl") || null;
          try {
            return canvas.getContext(opt_contextType, opt_attribs);
          } catch (e) {
            return null;
          }
        };
        try {
          var localStorage = sys.localStorage = win.localStorage;
          localStorage.setItem("storage", "");
          localStorage.removeItem("storage");
          localStorage = null;
        } catch (e) {
          var warn = function warn() {
            cc.warnID(5200);
          };
          sys.localStorage = {
            getItem: warn,
            setItem: warn,
            removeItem: warn,
            clear: warn
          };
        }
        var _supportWebp = _tmpCanvas1.toDataURL("image/webp").startsWith("data:image/webp");
        var _supportCanvas = !!_tmpCanvas1.getContext("2d");
        var _supportWebGL = false;
        false;
        win.WebGLRenderingContext && (_supportWebGL = true);
        var capabilities = sys.capabilities = {
          canvas: _supportCanvas,
          opengl: _supportWebGL,
          webp: _supportWebp,
          imageBitmap: false
        };
        if ("undefined" !== typeof createImageBitmap && "undefined" !== typeof Blob) {
          _tmpCanvas1.width = _tmpCanvas1.height = 2;
          createImageBitmap(_tmpCanvas1, {}).then((function(imageBitmap) {
            capabilities.imageBitmap = true;
            imageBitmap.close && imageBitmap.close();
          }))["catch"]((function(err) {}));
        }
        (void 0 !== docEle["ontouchstart"] || void 0 !== doc["ontouchstart"] || nav.msPointerEnabled) && (capabilities["touches"] = true);
        void 0 !== docEle["onmouseup"] && (capabilities["mouse"] = true);
        void 0 !== docEle["onkeyup"] && (capabilities["keyboard"] = true);
        (win.DeviceMotionEvent || win.DeviceOrientationEvent) && (capabilities["accelerometer"] = true);
        var __audioSupport;
        (function() {
          var DEBUG = false;
          var version = sys.browserVersion;
          var supportWebAudio = !!(window.AudioContext || window.webkitAudioContext || window.mozAudioContext);
          __audioSupport = {
            ONLY_ONE: false,
            WEB_AUDIO: supportWebAudio,
            DELAY_CREATE_CTX: false
          };
          sys.os === sys.OS_IOS && (__audioSupport.USE_LOADER_EVENT = "loadedmetadata");
          if (sys.browserType === sys.BROWSER_TYPE_FIREFOX) {
            __audioSupport.DELAY_CREATE_CTX = true;
            __audioSupport.USE_LOADER_EVENT = "canplay";
          }
          sys.os === sys.OS_ANDROID && sys.browserType === sys.BROWSER_TYPE_UC && (__audioSupport.ONE_SOURCE = true);
          DEBUG && setTimeout((function() {
            cc.log("browse type: " + sys.browserType);
            cc.log("browse version: " + version);
            cc.log("MULTI_CHANNEL: " + __audioSupport.MULTI_CHANNEL);
            cc.log("WEB_AUDIO: " + __audioSupport.WEB_AUDIO);
            cc.log("AUTOPLAY: " + __audioSupport.AUTOPLAY);
          }), 0);
        })();
        try {
          if (__audioSupport.WEB_AUDIO) {
            __audioSupport.context = new (window.AudioContext || window.webkitAudioContext || window.mozAudioContext)();
            __audioSupport.DELAY_CREATE_CTX && setTimeout((function() {
              __audioSupport.context = new (window.AudioContext || window.webkitAudioContext || window.mozAudioContext)();
            }), 0);
          }
        } catch (error) {
          __audioSupport.WEB_AUDIO = false;
          cc.logID(5201);
        }
        var formatSupport = [];
        (function() {
          var audio = document.createElement("audio");
          if (audio.canPlayType) {
            var ogg = audio.canPlayType('audio/ogg; codecs="vorbis"');
            ogg && formatSupport.push(".ogg");
            var mp3 = audio.canPlayType("audio/mpeg");
            mp3 && formatSupport.push(".mp3");
            var wav = audio.canPlayType('audio/wav; codecs="1"');
            wav && formatSupport.push(".wav");
            var mp4 = audio.canPlayType("audio/mp4");
            mp4 && formatSupport.push(".mp4");
            var m4a = audio.canPlayType("audio/x-m4a");
            m4a && formatSupport.push(".m4a");
          }
        })();
        __audioSupport.format = formatSupport;
        sys.__audioSupport = __audioSupport;
      }
      sys.NetworkType = {
        NONE: 0,
        LAN: 1,
        WWAN: 2
      };
      sys.getNetworkType = function() {
        return sys.NetworkType.LAN;
      };
      sys.getBatteryLevel = function() {
        return 1;
      };
      sys.garbageCollect = function() {};
      sys.restartVM = function() {};
      sys.isObjectValid = function(obj) {
        if (obj) return true;
        return false;
      };
      sys.dump = function() {
        var self = this;
        var str = "";
        str += "isMobile : " + self.isMobile + "\r\n";
        str += "language : " + self.language + "\r\n";
        str += "browserType : " + self.browserType + "\r\n";
        str += "browserVersion : " + self.browserVersion + "\r\n";
        str += "capabilities : " + JSON.stringify(self.capabilities) + "\r\n";
        str += "os : " + self.os + "\r\n";
        str += "osVersion : " + self.osVersion + "\r\n";
        str += "platform : " + self.platform + "\r\n";
        str += "Using " + (cc.game.renderType === cc.game.RENDER_TYPE_WEBGL ? "WEBGL" : "CANVAS") + " renderer.\r\n";
        cc.log(str);
      };
      sys.openURL = function(url) {
        false, false;
        window.open(url);
      };
      sys.now = function() {
        return Date.now ? Date.now() : +new Date();
      };
      return sys;
    }
    var sys = cc && cc.sys ? cc.sys : initSys();
    module.exports = sys;
  }), {} ],
  151: [ (function(require, module, exports) {
    "use strict";
    var EventTarget = require("../event/event-target");
    var js = require("../platform/js");
    var renderer = require("../renderer");
    require("../platform/CCClass");
    var __BrowserGetter = {
      init: function init() {
        this.html = document.getElementsByTagName("html")[0];
      },
      availWidth: function availWidth(frame) {
        return frame && frame !== this.html ? frame.clientWidth : window.innerWidth;
      },
      availHeight: function availHeight(frame) {
        return frame && frame !== this.html ? frame.clientHeight : window.innerHeight;
      },
      meta: {
        width: "device-width"
      },
      adaptationType: cc.sys.browserType
    };
    cc.sys.os === cc.sys.OS_IOS && (__BrowserGetter.adaptationType = cc.sys.BROWSER_TYPE_SAFARI);
    switch (__BrowserGetter.adaptationType) {
     case cc.sys.BROWSER_TYPE_SAFARI:
     case cc.sys.BROWSER_TYPE_SOUGOU:
     case cc.sys.BROWSER_TYPE_UC:
      __BrowserGetter.meta["minimal-ui"] = "true";
      __BrowserGetter.availWidth = function(frame) {
        return frame.clientWidth;
      };
      __BrowserGetter.availHeight = function(frame) {
        return frame.clientHeight;
      };
    }
    var _scissorRect = null;
    var View = function View() {
      EventTarget.call(this);
      var _t = this, _strategyer = cc.ContainerStrategy, _strategy = cc.ContentStrategy;
      __BrowserGetter.init(this);
      _t._frameSize = cc.size(0, 0);
      _t._designResolutionSize = cc.size(0, 0);
      _t._originalDesignResolutionSize = cc.size(0, 0);
      _t._scaleX = 1;
      _t._scaleY = 1;
      _t._viewportRect = cc.rect(0, 0, 0, 0);
      _t._visibleRect = cc.rect(0, 0, 0, 0);
      _t._autoFullScreen = false;
      _t._devicePixelRatio = 1;
      false;
      _t._maxPixelRatio = 2;
      _t._retinaEnabled = false;
      _t._resizeCallback = null;
      _t._resizing = false;
      _t._resizeWithBrowserSize = false;
      _t._orientationChanging = true;
      _t._isRotated = false;
      _t._orientation = cc.macro.ORIENTATION_AUTO;
      _t._isAdjustViewport = true;
      _t._antiAliasEnabled = false;
      _t._resolutionPolicy = null;
      _t._rpExactFit = new cc.ResolutionPolicy(_strategyer.EQUAL_TO_FRAME, _strategy.EXACT_FIT);
      _t._rpShowAll = new cc.ResolutionPolicy(_strategyer.EQUAL_TO_FRAME, _strategy.SHOW_ALL);
      _t._rpNoBorder = new cc.ResolutionPolicy(_strategyer.EQUAL_TO_FRAME, _strategy.NO_BORDER);
      _t._rpFixedHeight = new cc.ResolutionPolicy(_strategyer.EQUAL_TO_FRAME, _strategy.FIXED_HEIGHT);
      _t._rpFixedWidth = new cc.ResolutionPolicy(_strategyer.EQUAL_TO_FRAME, _strategy.FIXED_WIDTH);
      cc.game.once(cc.game.EVENT_ENGINE_INITED, this.init, this);
    };
    cc.js.extend(View, EventTarget);
    cc.js.mixin(View.prototype, {
      init: function init() {
        this._initFrameSize();
        var w = cc.game.canvas.width, h = cc.game.canvas.height;
        this._designResolutionSize.width = w;
        this._designResolutionSize.height = h;
        this._originalDesignResolutionSize.width = w;
        this._originalDesignResolutionSize.height = h;
        this._viewportRect.width = w;
        this._viewportRect.height = h;
        this._visibleRect.width = w;
        this._visibleRect.height = h;
        cc.winSize.width = this._visibleRect.width;
        cc.winSize.height = this._visibleRect.height;
        cc.visibleRect && cc.visibleRect.init(this._visibleRect);
      },
      _resizeEvent: function _resizeEvent(forceOrEvent) {
        var view;
        view = this.setDesignResolutionSize ? this : cc.view;
        var sys = cc.sys;
        if (sys.browserType === sys.BROWSER_TYPE_UC && sys.os === sys.OS_IOS) {
          setTimeout((function() {
            view._resizeEvent(forceOrEvent);
          }), 0);
          return;
        }
        var prevFrameW = view._frameSize.width, prevFrameH = view._frameSize.height, prevRotated = view._isRotated;
        if (cc.sys.isMobile) {
          var containerStyle = cc.game.container.style, margin = containerStyle.margin;
          containerStyle.margin = "0";
          containerStyle.display = "none";
          view._initFrameSize();
          containerStyle.margin = margin;
          containerStyle.display = "block";
        } else view._initFrameSize();
        if (true !== forceOrEvent && view._isRotated === prevRotated && view._frameSize.width === prevFrameW && view._frameSize.height === prevFrameH) return;
        var width = view._originalDesignResolutionSize.width;
        var height = view._originalDesignResolutionSize.height;
        view._resizing = true;
        width > 0 && view.setDesignResolutionSize(width, height, view._resolutionPolicy);
        view._resizing = false;
        view.emit("canvas-resize");
        view._resizeCallback && view._resizeCallback.call();
      },
      _orientationChange: function _orientationChange() {
        cc.view._orientationChanging = true;
        cc.view._resizeEvent();
        cc.sys.browserType === cc.sys.BROWSER_TYPE_SAFARI && cc.sys.isMobile && setTimeout((function() {
          window.innerHeight > window.innerWidth && window.scrollTo(0, 1);
        }), 500);
      },
      _resize: function _resize() {
        cc.view._resizeEvent(false);
      },
      resizeWithBrowserSize: function resizeWithBrowserSize(enabled) {
        if (enabled) {
          if (!this._resizeWithBrowserSize) {
            this._resizeWithBrowserSize = true;
            window.addEventListener("resize", this._resize);
            window.addEventListener("orientationchange", this._orientationChange);
          }
        } else if (this._resizeWithBrowserSize) {
          this._resizeWithBrowserSize = false;
          window.removeEventListener("resize", this._resize);
          window.removeEventListener("orientationchange", this._orientationChange);
        }
      },
      setResizeCallback: function setResizeCallback(callback) {
        false;
        "function" !== typeof callback && null != callback || (this._resizeCallback = callback);
      },
      setOrientation: function setOrientation(orientation) {
        orientation &= cc.macro.ORIENTATION_AUTO;
        if (orientation && this._orientation !== orientation) {
          this._orientation = orientation;
          var designWidth = this._originalDesignResolutionSize.width;
          var designHeight = this._originalDesignResolutionSize.height;
          this.setDesignResolutionSize(designWidth, designHeight, this._resolutionPolicy);
        }
      },
      _initFrameSize: function _initFrameSize() {
        var locFrameSize = this._frameSize;
        var w = __BrowserGetter.availWidth(cc.game.frame);
        var h = __BrowserGetter.availHeight(cc.game.frame);
        var isLandscape = w >= h;
        if ((false, !cc.sys.isMobile) || isLandscape && this._orientation & cc.macro.ORIENTATION_LANDSCAPE || !isLandscape && this._orientation & cc.macro.ORIENTATION_PORTRAIT) {
          locFrameSize.width = w;
          locFrameSize.height = h;
          cc.game.container.style["-webkit-transform"] = "rotate(0deg)";
          cc.game.container.style.transform = "rotate(0deg)";
          this._isRotated = false;
        } else {
          locFrameSize.width = h;
          locFrameSize.height = w;
          cc.game.container.style["-webkit-transform"] = "rotate(90deg)";
          cc.game.container.style.transform = "rotate(90deg)";
          cc.game.container.style["-webkit-transform-origin"] = "0px 0px 0px";
          cc.game.container.style.transformOrigin = "0px 0px 0px";
          this._isRotated = true;
        }
        this._orientationChanging && setTimeout((function() {
          cc.view._orientationChanging = false;
        }), 1e3);
      },
      _setViewportMeta: function _setViewportMeta(metas, overwrite) {
        var vp = document.getElementById("cocosMetaElement");
        vp && overwrite && document.head.removeChild(vp);
        var elems = document.getElementsByName("viewport"), currentVP = elems ? elems[0] : null, content, key, pattern;
        content = currentVP ? currentVP.content : "";
        vp = vp || document.createElement("meta");
        vp.id = "cocosMetaElement";
        vp.name = "viewport";
        vp.content = "";
        for (key in metas) if (-1 == content.indexOf(key)) content += "," + key + "=" + metas[key]; else if (overwrite) {
          pattern = new RegExp(key + "s*=s*[^,]+");
          content.replace(pattern, key + "=" + metas[key]);
        }
        /^,/.test(content) && (content = content.substr(1));
        vp.content = content;
        currentVP && (currentVP.content = content);
        document.head.appendChild(vp);
      },
      _adjustViewportMeta: function _adjustViewportMeta() {
        if (this._isAdjustViewport && true) {
          this._setViewportMeta(__BrowserGetter.meta, false);
          this._isAdjustViewport = false;
        }
      },
      adjustViewportMeta: function adjustViewportMeta(enabled) {
        this._isAdjustViewport = enabled;
      },
      enableRetina: function enableRetina(enabled) {
        false;
        this._retinaEnabled = !!enabled;
      },
      isRetinaEnabled: function isRetinaEnabled() {
        false;
        return this._retinaEnabled;
      },
      enableAntiAlias: function enableAntiAlias(enabled) {
        cc.warnID(9200);
        if (this._antiAliasEnabled === enabled) return;
        this._antiAliasEnabled = enabled;
        if (cc.game.renderType === cc.game.RENDER_TYPE_WEBGL) {
          var cache = cc.assetManager.assets;
          cache.forEach((function(asset) {
            if (asset instanceof cc.Texture2D) {
              var Filter = cc.Texture2D.Filter;
              enabled ? asset.setFilters(Filter.LINEAR, Filter.LINEAR) : asset.setFilters(Filter.NEAREST, Filter.NEAREST);
            }
          }));
        } else if (cc.game.renderType === cc.game.RENDER_TYPE_CANVAS) {
          var ctx = cc.game.canvas.getContext("2d");
          ctx.imageSmoothingEnabled = enabled;
          ctx.mozImageSmoothingEnabled = enabled;
        }
      },
      isAntiAliasEnabled: function isAntiAliasEnabled() {
        return this._antiAliasEnabled;
      },
      enableAutoFullScreen: function enableAutoFullScreen(enabled) {
        if (enabled && enabled !== this._autoFullScreen && cc.sys.isMobile) {
          this._autoFullScreen = true;
          cc.screen.autoFullScreen(cc.game.frame);
        } else {
          this._autoFullScreen = false;
          cc.screen.disableAutoFullScreen(cc.game.frame);
        }
      },
      isAutoFullScreenEnabled: function isAutoFullScreenEnabled() {
        return this._autoFullScreen;
      },
      setCanvasSize: function setCanvasSize(width, height) {
        var canvas = cc.game.canvas;
        var container = cc.game.container;
        canvas.width = width * this._devicePixelRatio;
        canvas.height = height * this._devicePixelRatio;
        canvas.style.width = width + "px";
        canvas.style.height = height + "px";
        container.style.width = width + "px";
        container.style.height = height + "px";
        this._resizeEvent();
      },
      getCanvasSize: function getCanvasSize() {
        return cc.size(cc.game.canvas.width, cc.game.canvas.height);
      },
      getFrameSize: function getFrameSize() {
        return cc.size(this._frameSize.width, this._frameSize.height);
      },
      setFrameSize: function setFrameSize(width, height) {
        this._frameSize.width = width;
        this._frameSize.height = height;
        cc.game.frame.style.width = width + "px";
        cc.game.frame.style.height = height + "px";
        this._resizeEvent(true);
      },
      getVisibleSize: function getVisibleSize() {
        return cc.size(this._visibleRect.width, this._visibleRect.height);
      },
      getVisibleSizeInPixel: function getVisibleSizeInPixel() {
        return cc.size(this._visibleRect.width * this._scaleX, this._visibleRect.height * this._scaleY);
      },
      getVisibleOrigin: function getVisibleOrigin() {
        return cc.v2(this._visibleRect.x, this._visibleRect.y);
      },
      getVisibleOriginInPixel: function getVisibleOriginInPixel() {
        return cc.v2(this._visibleRect.x * this._scaleX, this._visibleRect.y * this._scaleY);
      },
      getResolutionPolicy: function getResolutionPolicy() {
        return this._resolutionPolicy;
      },
      setResolutionPolicy: function setResolutionPolicy(resolutionPolicy) {
        var _t = this;
        if (resolutionPolicy instanceof cc.ResolutionPolicy) _t._resolutionPolicy = resolutionPolicy; else {
          var _locPolicy = cc.ResolutionPolicy;
          resolutionPolicy === _locPolicy.EXACT_FIT && (_t._resolutionPolicy = _t._rpExactFit);
          resolutionPolicy === _locPolicy.SHOW_ALL && (_t._resolutionPolicy = _t._rpShowAll);
          resolutionPolicy === _locPolicy.NO_BORDER && (_t._resolutionPolicy = _t._rpNoBorder);
          resolutionPolicy === _locPolicy.FIXED_HEIGHT && (_t._resolutionPolicy = _t._rpFixedHeight);
          resolutionPolicy === _locPolicy.FIXED_WIDTH && (_t._resolutionPolicy = _t._rpFixedWidth);
        }
      },
      setDesignResolutionSize: function setDesignResolutionSize(width, height, resolutionPolicy) {
        if (!(width > 0 || height > 0)) {
          cc.errorID(2200);
          return;
        }
        this.setResolutionPolicy(resolutionPolicy);
        var policy = this._resolutionPolicy;
        policy && policy.preApply(this);
        cc.sys.isMobile && this._adjustViewportMeta();
        this._orientationChanging = true;
        this._resizing || this._initFrameSize();
        if (!policy) {
          cc.logID(2201);
          return;
        }
        this._originalDesignResolutionSize.width = this._designResolutionSize.width = width;
        this._originalDesignResolutionSize.height = this._designResolutionSize.height = height;
        var result = policy.apply(this, this._designResolutionSize);
        if (result.scale && 2 === result.scale.length) {
          this._scaleX = result.scale[0];
          this._scaleY = result.scale[1];
        }
        if (result.viewport) {
          var vp = this._viewportRect, vb = this._visibleRect, rv = result.viewport;
          vp.x = rv.x;
          vp.y = rv.y;
          vp.width = rv.width;
          vp.height = rv.height;
          vb.x = 0;
          vb.y = 0;
          vb.width = rv.width / this._scaleX;
          vb.height = rv.height / this._scaleY;
        }
        policy.postApply(this);
        cc.winSize.width = this._visibleRect.width;
        cc.winSize.height = this._visibleRect.height;
        cc.visibleRect && cc.visibleRect.init(this._visibleRect);
        renderer.updateCameraViewport();
        cc.internal.inputManager._updateCanvasBoundingRect();
        this.emit("design-resolution-changed");
      },
      getDesignResolutionSize: function getDesignResolutionSize() {
        return cc.size(this._designResolutionSize.width, this._designResolutionSize.height);
      },
      setRealPixelResolution: function setRealPixelResolution(width, height, resolutionPolicy) {
        true, true;
        this._setViewportMeta({
          width: width
        }, true);
        document.documentElement.style.width = width + "px";
        document.body.style.width = width + "px";
        document.body.style.left = "0px";
        document.body.style.top = "0px";
        this.setDesignResolutionSize(width, height, resolutionPolicy);
      },
      setViewportInPoints: function setViewportInPoints(x, y, w, h) {
        var locScaleX = this._scaleX, locScaleY = this._scaleY;
        cc.game._renderContext.viewport(x * locScaleX + this._viewportRect.x, y * locScaleY + this._viewportRect.y, w * locScaleX, h * locScaleY);
      },
      setScissorInPoints: function setScissorInPoints(x, y, w, h) {
        var scaleX = this._scaleX, scaleY = this._scaleY;
        var sx = Math.ceil(x * scaleX + this._viewportRect.x);
        var sy = Math.ceil(y * scaleY + this._viewportRect.y);
        var sw = Math.ceil(w * scaleX);
        var sh = Math.ceil(h * scaleY);
        var gl = cc.game._renderContext;
        if (!_scissorRect) {
          var boxArr = gl.getParameter(gl.SCISSOR_BOX);
          _scissorRect = cc.rect(boxArr[0], boxArr[1], boxArr[2], boxArr[3]);
        }
        if (_scissorRect.x !== sx || _scissorRect.y !== sy || _scissorRect.width !== sw || _scissorRect.height !== sh) {
          _scissorRect.x = sx;
          _scissorRect.y = sy;
          _scissorRect.width = sw;
          _scissorRect.height = sh;
          gl.scissor(sx, sy, sw, sh);
        }
      },
      isScissorEnabled: function isScissorEnabled() {
        return cc.game._renderContext.isEnabled(gl.SCISSOR_TEST);
      },
      getScissorRect: function getScissorRect() {
        if (!_scissorRect) {
          var boxArr = gl.getParameter(gl.SCISSOR_BOX);
          _scissorRect = cc.rect(boxArr[0], boxArr[1], boxArr[2], boxArr[3]);
        }
        var scaleXFactor = 1 / this._scaleX;
        var scaleYFactor = 1 / this._scaleY;
        return cc.rect((_scissorRect.x - this._viewportRect.x) * scaleXFactor, (_scissorRect.y - this._viewportRect.y) * scaleYFactor, _scissorRect.width * scaleXFactor, _scissorRect.height * scaleYFactor);
      },
      getViewportRect: function getViewportRect() {
        return this._viewportRect;
      },
      getScaleX: function getScaleX() {
        return this._scaleX;
      },
      getScaleY: function getScaleY() {
        return this._scaleY;
      },
      getDevicePixelRatio: function getDevicePixelRatio() {
        return this._devicePixelRatio;
      },
      convertToLocationInView: function convertToLocationInView(tx, ty, relatedPos, out) {
        var result = out || cc.v2();
        var posLeft = relatedPos.adjustedLeft ? relatedPos.adjustedLeft : relatedPos.left;
        var posTop = relatedPos.adjustedTop ? relatedPos.adjustedTop : relatedPos.top;
        var x = this._devicePixelRatio * (tx - posLeft);
        var y = this._devicePixelRatio * (posTop + relatedPos.height - ty);
        if (this._isRotated) {
          result.x = cc.game.canvas.width - y;
          result.y = x;
        } else {
          result.x = x;
          result.y = y;
        }
        return result;
      },
      _convertMouseToLocationInView: function _convertMouseToLocationInView(in_out_point, relatedPos) {
        var viewport = this._viewportRect, _t = this;
        in_out_point.x = (_t._devicePixelRatio * (in_out_point.x - relatedPos.left) - viewport.x) / _t._scaleX;
        in_out_point.y = (_t._devicePixelRatio * (relatedPos.top + relatedPos.height - in_out_point.y) - viewport.y) / _t._scaleY;
      },
      _convertPointWithScale: function _convertPointWithScale(point) {
        var viewport = this._viewportRect;
        point.x = (point.x - viewport.x) / this._scaleX;
        point.y = (point.y - viewport.y) / this._scaleY;
      },
      _convertTouchesWithScale: function _convertTouchesWithScale(touches) {
        var viewport = this._viewportRect, scaleX = this._scaleX, scaleY = this._scaleY, selTouch, selPoint, selPrePoint;
        for (var i = 0; i < touches.length; i++) {
          selTouch = touches[i];
          selPoint = selTouch._point;
          selPrePoint = selTouch._prevPoint;
          selPoint.x = (selPoint.x - viewport.x) / scaleX;
          selPoint.y = (selPoint.y - viewport.y) / scaleY;
          selPrePoint.x = (selPrePoint.x - viewport.x) / scaleX;
          selPrePoint.y = (selPrePoint.y - viewport.y) / scaleY;
        }
      }
    });
    cc.ContainerStrategy = cc.Class({
      name: "ContainerStrategy",
      preApply: function preApply(view) {},
      apply: function apply(view, designedResolution) {},
      postApply: function postApply(view) {},
      _setupContainer: function _setupContainer(view, w, h) {
        var locCanvas = cc.game.canvas;
        this._setupStyle(view, w, h);
        var devicePixelRatio = view._devicePixelRatio = 1;
        false;
        view.isRetinaEnabled() && (devicePixelRatio = view._devicePixelRatio = Math.min(view._maxPixelRatio, window.devicePixelRatio || 1));
        locCanvas.width = w * devicePixelRatio;
        locCanvas.height = h * devicePixelRatio;
      },
      _setupStyle: function _setupStyle(view, w, h) {
        var locCanvas = cc.game.canvas;
        var locContainer = cc.game.container;
        if (cc.sys.os === cc.sys.OS_ANDROID) {
          document.body.style.width = (view._isRotated ? h : w) + "px";
          document.body.style.height = (view._isRotated ? w : h) + "px";
        }
        locContainer.style.width = locCanvas.style.width = w + "px";
        locContainer.style.height = locCanvas.style.height = h + "px";
      },
      _fixContainer: function _fixContainer() {
        document.body.insertBefore(cc.game.container, document.body.firstChild);
        var bs = document.body.style;
        bs.width = window.innerWidth + "px";
        bs.height = window.innerHeight + "px";
        bs.overflow = "hidden";
        var contStyle = cc.game.container.style;
        contStyle.position = "fixed";
        contStyle.left = contStyle.top = "0px";
        document.body.scrollTop = 0;
      }
    });
    cc.ContentStrategy = cc.Class({
      name: "ContentStrategy",
      ctor: function ctor() {
        this._result = {
          scale: [ 1, 1 ],
          viewport: null
        };
      },
      _buildResult: function _buildResult(containerW, containerH, contentW, contentH, scaleX, scaleY) {
        Math.abs(containerW - contentW) < 2 && (contentW = containerW);
        Math.abs(containerH - contentH) < 2 && (contentH = containerH);
        var viewport = cc.rect((containerW - contentW) / 2, (containerH - contentH) / 2, contentW, contentH);
        cc.game.renderType === cc.game.RENDER_TYPE_CANVAS;
        this._result.scale = [ scaleX, scaleY ];
        this._result.viewport = viewport;
        return this._result;
      },
      preApply: function preApply(view) {},
      apply: function apply(view, designedResolution) {
        return {
          scale: [ 1, 1 ]
        };
      },
      postApply: function postApply(view) {}
    });
    (function() {
      var EqualToFrame = cc.Class({
        name: "EqualToFrame",
        extends: cc.ContainerStrategy,
        apply: function apply(view) {
          var frameH = view._frameSize.height, containerStyle = cc.game.container.style;
          this._setupContainer(view, view._frameSize.width, view._frameSize.height);
          view._isRotated ? containerStyle.margin = "0 0 0 " + frameH + "px" : containerStyle.margin = "0px";
          containerStyle.padding = "0px";
        }
      });
      var ProportionalToFrame = cc.Class({
        name: "ProportionalToFrame",
        extends: cc.ContainerStrategy,
        apply: function apply(view, designedResolution) {
          var frameW = view._frameSize.width, frameH = view._frameSize.height, containerStyle = cc.game.container.style, designW = designedResolution.width, designH = designedResolution.height, scaleX = frameW / designW, scaleY = frameH / designH, containerW, containerH;
          scaleX < scaleY ? (containerW = frameW, containerH = designH * scaleX) : (containerW = designW * scaleY, 
          containerH = frameH);
          var offx = Math.round((frameW - containerW) / 2);
          var offy = Math.round((frameH - containerH) / 2);
          containerW = frameW - 2 * offx;
          containerH = frameH - 2 * offy;
          this._setupContainer(view, containerW, containerH);
          true;
          view._isRotated ? containerStyle.margin = "0 0 0 " + frameH + "px" : containerStyle.margin = "0px";
          containerStyle.paddingLeft = offx + "px";
          containerStyle.paddingRight = offx + "px";
          containerStyle.paddingTop = offy + "px";
          containerStyle.paddingBottom = offy + "px";
        }
      });
      var EqualToWindow = cc.Class({
        name: "EqualToWindow",
        extends: EqualToFrame,
        preApply: function preApply(view) {
          this._super(view);
          cc.game.frame = document.documentElement;
        },
        apply: function apply(view) {
          this._super(view);
          this._fixContainer();
        }
      });
      var ProportionalToWindow = cc.Class({
        name: "ProportionalToWindow",
        extends: ProportionalToFrame,
        preApply: function preApply(view) {
          this._super(view);
          cc.game.frame = document.documentElement;
        },
        apply: function apply(view, designedResolution) {
          this._super(view, designedResolution);
          this._fixContainer();
        }
      });
      var OriginalContainer = cc.Class({
        name: "OriginalContainer",
        extends: cc.ContainerStrategy,
        apply: function apply(view) {
          this._setupContainer(view, cc.game.canvas.width, cc.game.canvas.height);
        }
      });
      var _global = "undefined" === typeof window ? global : window;
      var globalAdapter = _global.__globalAdapter;
      if (globalAdapter) {
        globalAdapter.adaptContainerStrategy && globalAdapter.adaptContainerStrategy(cc.ContainerStrategy.prototype);
        globalAdapter.adaptView && globalAdapter.adaptView(View.prototype);
      }
      cc.ContainerStrategy.EQUAL_TO_FRAME = new EqualToFrame();
      cc.ContainerStrategy.PROPORTION_TO_FRAME = new ProportionalToFrame();
      cc.ContainerStrategy.ORIGINAL_CONTAINER = new OriginalContainer();
      var ExactFit = cc.Class({
        name: "ExactFit",
        extends: cc.ContentStrategy,
        apply: function apply(view, designedResolution) {
          var containerW = cc.game.canvas.width, containerH = cc.game.canvas.height, scaleX = containerW / designedResolution.width, scaleY = containerH / designedResolution.height;
          return this._buildResult(containerW, containerH, containerW, containerH, scaleX, scaleY);
        }
      });
      var ShowAll = cc.Class({
        name: "ShowAll",
        extends: cc.ContentStrategy,
        apply: function apply(view, designedResolution) {
          var containerW = cc.game.canvas.width, containerH = cc.game.canvas.height, designW = designedResolution.width, designH = designedResolution.height, scaleX = containerW / designW, scaleY = containerH / designH, scale = 0, contentW, contentH;
          scaleX < scaleY ? (scale = scaleX, contentW = containerW, contentH = designH * scale) : (scale = scaleY, 
          contentW = designW * scale, contentH = containerH);
          return this._buildResult(containerW, containerH, contentW, contentH, scale, scale);
        }
      });
      var NoBorder = cc.Class({
        name: "NoBorder",
        extends: cc.ContentStrategy,
        apply: function apply(view, designedResolution) {
          var containerW = cc.game.canvas.width, containerH = cc.game.canvas.height, designW = designedResolution.width, designH = designedResolution.height, scaleX = containerW / designW, scaleY = containerH / designH, scale, contentW, contentH;
          scaleX < scaleY ? (scale = scaleY, contentW = designW * scale, contentH = containerH) : (scale = scaleX, 
          contentW = containerW, contentH = designH * scale);
          return this._buildResult(containerW, containerH, contentW, contentH, scale, scale);
        }
      });
      var FixedHeight = cc.Class({
        name: "FixedHeight",
        extends: cc.ContentStrategy,
        apply: function apply(view, designedResolution) {
          var containerW = cc.game.canvas.width, containerH = cc.game.canvas.height, designH = designedResolution.height, scale = containerH / designH, contentW = containerW, contentH = containerH;
          return this._buildResult(containerW, containerH, contentW, contentH, scale, scale);
        }
      });
      var FixedWidth = cc.Class({
        name: "FixedWidth",
        extends: cc.ContentStrategy,
        apply: function apply(view, designedResolution) {
          var containerW = cc.game.canvas.width, containerH = cc.game.canvas.height, designW = designedResolution.width, scale = containerW / designW, contentW = containerW, contentH = containerH;
          return this._buildResult(containerW, containerH, contentW, contentH, scale, scale);
        }
      });
      cc.ContentStrategy.EXACT_FIT = new ExactFit();
      cc.ContentStrategy.SHOW_ALL = new ShowAll();
      cc.ContentStrategy.NO_BORDER = new NoBorder();
      cc.ContentStrategy.FIXED_HEIGHT = new FixedHeight();
      cc.ContentStrategy.FIXED_WIDTH = new FixedWidth();
    })();
    cc.ResolutionPolicy = cc.Class({
      name: "cc.ResolutionPolicy",
      ctor: function ctor(containerStg, contentStg) {
        this._containerStrategy = null;
        this._contentStrategy = null;
        this.setContainerStrategy(containerStg);
        this.setContentStrategy(contentStg);
      },
      preApply: function preApply(view) {
        this._containerStrategy.preApply(view);
        this._contentStrategy.preApply(view);
      },
      apply: function apply(view, designedResolution) {
        this._containerStrategy.apply(view, designedResolution);
        return this._contentStrategy.apply(view, designedResolution);
      },
      postApply: function postApply(view) {
        this._containerStrategy.postApply(view);
        this._contentStrategy.postApply(view);
      },
      setContainerStrategy: function setContainerStrategy(containerStg) {
        containerStg instanceof cc.ContainerStrategy && (this._containerStrategy = containerStg);
      },
      setContentStrategy: function setContentStrategy(contentStg) {
        contentStg instanceof cc.ContentStrategy && (this._contentStrategy = contentStg);
      }
    });
    js.get(cc.ResolutionPolicy.prototype, "canvasSize", (function() {
      return cc.v2(cc.game.canvas.width, cc.game.canvas.height);
    }));
    cc.ResolutionPolicy.EXACT_FIT = 0;
    cc.ResolutionPolicy.NO_BORDER = 1;
    cc.ResolutionPolicy.SHOW_ALL = 2;
    cc.ResolutionPolicy.FIXED_HEIGHT = 3;
    cc.ResolutionPolicy.FIXED_WIDTH = 4;
    cc.ResolutionPolicy.UNKNOWN = 5;
    cc.view = new View();
    cc.winSize = cc.size();
    module.exports = cc.view;
  }), {
    "../event/event-target": 105,
    "../platform/CCClass": 141,
    "../platform/js": 161,
    "../renderer": 171
  } ],
  152: [ (function(require, module, exports) {
    "use strict";
    cc.visibleRect = {
      topLeft: cc.v2(0, 0),
      topRight: cc.v2(0, 0),
      top: cc.v2(0, 0),
      bottomLeft: cc.v2(0, 0),
      bottomRight: cc.v2(0, 0),
      bottom: cc.v2(0, 0),
      center: cc.v2(0, 0),
      left: cc.v2(0, 0),
      right: cc.v2(0, 0),
      width: 0,
      height: 0,
      init: function init(visibleRect) {
        var w = this.width = visibleRect.width;
        var h = this.height = visibleRect.height;
        var l = visibleRect.x, b = visibleRect.y, t = b + h, r = l + w;
        this.topLeft.x = l;
        this.topLeft.y = t;
        this.topRight.x = r;
        this.topRight.y = t;
        this.top.x = l + w / 2;
        this.top.y = t;
        this.bottomLeft.x = l;
        this.bottomLeft.y = b;
        this.bottomRight.x = r;
        this.bottomRight.y = b;
        this.bottom.x = l + w / 2;
        this.bottom.y = b;
        this.center.x = l + w / 2;
        this.center.y = b + h / 2;
        this.left.x = l;
        this.left.y = b + h / 2;
        this.right.x = r;
        this.right.y = b + h / 2;
      }
    };
  }), {} ],
  153: [ (function(require, module, exports) {
    "use strict";
    var js = require("./js");
    var isPlainEmptyObj = require("./utils").isPlainEmptyObj_DEV;
    var DELIMETER = "$_$";
    function createAttrsSingle(owner, superAttrs) {
      var attrs = superAttrs ? Object.create(superAttrs) : {};
      js.value(owner, "__attrs__", attrs);
      return attrs;
    }
    function createAttrs(subclass) {
      if ("function" !== typeof subclass) {
        var instance = subclass;
        return createAttrsSingle(instance, getClassAttrs(instance.constructor));
      }
      var superClass;
      var chains = cc.Class.getInheritanceChain(subclass);
      for (var i = chains.length - 1; i >= 0; i--) {
        var cls = chains[i];
        var attrs = cls.hasOwnProperty("__attrs__") && cls.__attrs__;
        if (!attrs) {
          superClass = chains[i + 1];
          createAttrsSingle(cls, superClass && superClass.__attrs__);
        }
      }
      superClass = chains[0];
      createAttrsSingle(subclass, superClass && superClass.__attrs__);
      return subclass.__attrs__;
    }
    function attr(ctor, propName, newAttrs) {
      var attrs = getClassAttrs(ctor);
      var _key;
      true;
      var prefix = propName + DELIMETER;
      var ret = {};
      for (var key in attrs) key.startsWith(prefix) && (ret[key.slice(prefix.length)] = attrs[key]);
      return ret;
    }
    function getClassAttrs(ctor) {
      return ctor.hasOwnProperty("__attrs__") && ctor.__attrs__ || createAttrs(ctor);
    }
    function setClassAttr(ctor, propName, key, value) {
      getClassAttrs(ctor)[propName + DELIMETER + key] = value;
    }
    function PrimitiveType(name, def) {
      this.name = name;
      this["default"] = def;
    }
    PrimitiveType.prototype.toString = function() {
      return this.name;
    };
    cc.Integer = new PrimitiveType("Integer", 0);
    cc.Float = new PrimitiveType("Float", 0);
    false;
    cc.Boolean = new PrimitiveType("Boolean", false);
    cc.String = new PrimitiveType("String", "");
    function getTypeChecker(type, attrName) {
      return function(constructor, mainPropName) {
        var propInfo = '"' + js.getClassName(constructor) + "." + mainPropName + '"';
        var mainPropAttrs = attr(constructor, mainPropName);
        var mainPropAttrsType = mainPropAttrs.type;
        mainPropAttrsType === cc.Integer || mainPropAttrsType === cc.Float ? mainPropAttrsType = "Number" : mainPropAttrsType !== cc.String && mainPropAttrsType !== cc.Boolean || (mainPropAttrsType = "" + mainPropAttrsType);
        if (mainPropAttrsType !== type) {
          cc.warnID(3604, propInfo);
          return;
        }
        if (!mainPropAttrs.hasOwnProperty("default")) return;
        var defaultVal = mainPropAttrs["default"];
        if ("undefined" === typeof defaultVal) return;
        var isContainer = Array.isArray(defaultVal) || isPlainEmptyObj(defaultVal);
        if (isContainer) return;
        var defaultType = typeof defaultVal;
        var type_lowerCase = type.toLowerCase();
        if (defaultType === type_lowerCase) if ("object" === type_lowerCase) {
          if (!defaultVal || defaultVal instanceof mainPropAttrs.ctor) return;
          cc.warnID(3605, propInfo, js.getClassName(mainPropAttrs.ctor));
        } else "Number" !== type && cc.warnID(3606, attrName, propInfo, type); else {
          if ("function" === defaultType) return;
          type === cc.String && null == defaultVal ? cc.warnID(3607, propInfo) : cc.warnID(3611, attrName, propInfo, defaultType);
        }
        delete mainPropAttrs.type;
      };
    }
    function getObjTypeChecker(typeCtor) {
      return function(classCtor, mainPropName) {
        getTypeChecker("Object", "type")(classCtor, mainPropName);
        var defaultDef = getClassAttrs(classCtor)[mainPropName + DELIMETER + "default"];
        var defaultVal = require("./CCClass").getDefault(defaultDef);
        if (!Array.isArray(defaultVal) && js.isChildClassOf(typeCtor, cc.ValueType)) {
          var typename = js.getClassName(typeCtor);
          var info = cc.js.formatStr('No need to specify the "type" of "%s.%s" because %s is a child class of ValueType.', js.getClassName(classCtor), mainPropName, typename);
          defaultDef ? cc.log(info) : cc.warnID(3612, info, typename, js.getClassName(classCtor), mainPropName, typename);
        }
      };
    }
    module.exports = {
      PrimitiveType: PrimitiveType,
      attr: attr,
      getClassAttrs: getClassAttrs,
      setClassAttr: setClassAttr,
      DELIMETER: DELIMETER,
      getTypeChecker_ET: (false, false) && getTypeChecker,
      getObjTypeChecker_ET: (false, false) && getObjTypeChecker,
      ScriptUuid: {}
    };
  }), {
    "./CCClass": 141,
    "./js": 161,
    "./utils": 164
  } ],
  154: [ (function(require, module, exports) {
    "use strict";
    var js = require("./js");
    var fastRemoveAt = js.array.fastRemoveAt;
    function empty() {}
    function CallbackInfo() {
      this.callback = empty;
      this.target = void 0;
      this.once = false;
    }
    CallbackInfo.prototype.set = function(callback, target, once) {
      this.callback = callback;
      this.target = target;
      this.once = !!once;
    };
    var callbackInfoPool = new js.Pool(function(info) {
      info.callback = empty;
      info.target = void 0;
      info.once = false;
      return true;
    }, 32);
    callbackInfoPool.get = function() {
      return this._get() || new CallbackInfo();
    };
    function CallbackList() {
      this.callbackInfos = [];
      this.isInvoking = false;
      this.containCanceled = false;
    }
    var proto = CallbackList.prototype;
    proto.removeByCallback = function(cb) {
      for (var i = 0; i < this.callbackInfos.length; ++i) {
        var info = this.callbackInfos[i];
        if (info && info.callback === cb) {
          callbackInfoPool.put(info);
          fastRemoveAt(this.callbackInfos, i);
          --i;
        }
      }
    };
    proto.removeByTarget = function(target) {
      for (var i = 0; i < this.callbackInfos.length; ++i) {
        var info = this.callbackInfos[i];
        if (info && info.target === target) {
          callbackInfoPool.put(info);
          fastRemoveAt(this.callbackInfos, i);
          --i;
        }
      }
    };
    proto.cancel = function(index) {
      var info = this.callbackInfos[index];
      if (info) {
        callbackInfoPool.put(info);
        this.callbackInfos[index] = null;
      }
      this.containCanceled = true;
    };
    proto.cancelAll = function() {
      for (var i = 0; i < this.callbackInfos.length; i++) {
        var info = this.callbackInfos[i];
        if (info) {
          callbackInfoPool.put(info);
          this.callbackInfos[i] = null;
        }
      }
      this.containCanceled = true;
    };
    proto.purgeCanceled = function() {
      for (var i = this.callbackInfos.length - 1; i >= 0; --i) {
        var info = this.callbackInfos[i];
        info || fastRemoveAt(this.callbackInfos, i);
      }
      this.containCanceled = false;
    };
    proto.clear = function() {
      this.cancelAll();
      this.callbackInfos.length = 0;
      this.isInvoking = false;
      this.containCanceled = false;
    };
    var MAX_SIZE = 16;
    var callbackListPool = new js.Pool(function(info) {
      info.callbackInfos = [];
      info.isInvoking = false;
      info.containCanceled = false;
      return true;
    }, MAX_SIZE);
    callbackListPool.get = function() {
      return this._get() || new CallbackList();
    };
    function CallbacksInvoker() {
      this._callbackTable = js.createMap(true);
    }
    proto = CallbacksInvoker.prototype;
    proto.on = function(key, callback, target, once) {
      var list = this._callbackTable[key];
      list || (list = this._callbackTable[key] = callbackListPool.get());
      var info = callbackInfoPool.get();
      info.set(callback, target, once);
      list.callbackInfos.push(info);
    };
    proto.hasEventListener = function(key, callback, target) {
      var list = this._callbackTable[key];
      if (!list) return false;
      var infos = list.callbackInfos;
      if (!callback) {
        if (list.isInvoking) {
          for (var i = 0; i < infos.length; ++i) if (infos[i]) return true;
          return false;
        }
        return infos.length > 0;
      }
      for (var _i = 0; _i < infos.length; ++_i) {
        var info = infos[_i];
        if (info && info.callback === callback && info.target === target) return true;
      }
      return false;
    };
    proto.removeAll = function(keyOrTarget) {
      if ("string" === typeof keyOrTarget) {
        var list = this._callbackTable[keyOrTarget];
        if (list) if (list.isInvoking) list.cancelAll(); else {
          list.clear();
          callbackListPool.put(list);
          delete this._callbackTable[keyOrTarget];
        }
      } else if (keyOrTarget) for (var key in this._callbackTable) {
        var _list = this._callbackTable[key];
        if (_list.isInvoking) {
          var infos = _list.callbackInfos;
          for (var i = 0; i < infos.length; ++i) {
            var info = infos[i];
            info && info.target === keyOrTarget && _list.cancel(i);
          }
        } else _list.removeByTarget(keyOrTarget);
      }
    };
    proto.off = function(key, callback, target) {
      var list = this._callbackTable[key];
      if (list) {
        var infos = list.callbackInfos;
        for (var i = 0; i < infos.length; ++i) {
          var info = infos[i];
          if (info && info.callback === callback && info.target === target) {
            if (list.isInvoking) list.cancel(i); else {
              fastRemoveAt(infos, i);
              callbackInfoPool.put(info);
            }
            break;
          }
        }
      }
    };
    proto.emit = function(key, arg1, arg2, arg3, arg4, arg5) {
      var list = this._callbackTable[key];
      if (list) {
        var rootInvoker = !list.isInvoking;
        list.isInvoking = true;
        var infos = list.callbackInfos;
        for (var i = 0, len = infos.length; i < len; ++i) {
          var info = infos[i];
          if (info) {
            var target = info.target;
            var callback = info.callback;
            info.once && this.off(key, callback, target);
            target ? callback.call(target, arg1, arg2, arg3, arg4, arg5) : callback(arg1, arg2, arg3, arg4, arg5);
          }
        }
        if (rootInvoker) {
          list.isInvoking = false;
          list.containCanceled && list.purgeCanceled();
        }
      }
    };
    false;
    module.exports = CallbacksInvoker;
  }), {
    "./js": 161
  } ],
  155: [ (function(require, module, exports) {
    "use strict";
    function deepFlatten(strList, array) {
      for (var i = 0; i < array.length; i++) {
        var item = array[i];
        Array.isArray(item) ? deepFlatten(strList, item) : strList.push(item);
      }
    }
    function flattenCodeArray(array) {
      var separator = "";
      var strList = [];
      deepFlatten(strList, array);
      return strList.join(separator);
    }
    module.exports = {
      flattenCodeArray: flattenCodeArray
    };
  }), {} ],
  156: [ (function(require, module, exports) {
    "use strict";
    var js = require("./js");
    var Attr = require("./attribute");
    var CCClass = require("./CCClass");
    var misc = require("../utils/misc");
    var Details = function Details() {
      this.uuidList = [];
      this.uuidObjList = [];
      this.uuidPropList = [];
    };
    Details.prototype.reset = function() {
      this.uuidList.length = 0;
      this.uuidObjList.length = 0;
      this.uuidPropList.length = 0;
    };
    false, false;
    Details.prototype.push = function(obj, propName, uuid) {
      this.uuidList.push(uuid);
      this.uuidObjList.push(obj);
      this.uuidPropList.push(propName);
    };
    Details.pool = new js.Pool(function(obj) {
      obj.reset();
    }, 10);
    Details.pool.get = function() {
      return this._get() || new Details();
    };
    var _Deserializer = (function() {
      function _Deserializer(result, classFinder, customEnv, ignoreEditorOnly) {
        this.result = result;
        this.customEnv = customEnv;
        this.deserializedList = [];
        this.deserializedData = null;
        this._classFinder = classFinder;
        false;
        this._idList = [];
        this._idObjList = [];
        this._idPropList = [];
      }
      function _dereference(self) {
        var deserializedList = self.deserializedList;
        var idPropList = self._idPropList;
        var idList = self._idList;
        var idObjList = self._idObjList;
        var onDereferenced = self._classFinder && self._classFinder.onDereferenced;
        var i, propName, id;
        false;
        for (i = 0; i < idList.length; i++) {
          propName = idPropList[i];
          id = idList[i];
          idObjList[i][propName] = deserializedList[id];
        }
      }
      var prototype = _Deserializer.prototype;
      prototype.deserialize = function(jsonObj) {
        if (Array.isArray(jsonObj)) {
          var jsonArray = jsonObj;
          var refCount = jsonArray.length;
          this.deserializedList.length = refCount;
          for (var i = 0; i < refCount; i++) if (jsonArray[i]) {
            false, false;
            this.deserializedList[i] = this._deserializeObject(jsonArray[i]);
          }
          this.deserializedData = refCount > 0 ? this.deserializedList[0] : [];
        } else {
          this.deserializedList.length = 1;
          false, false;
          this.deserializedData = jsonObj ? this._deserializeObject(jsonObj) : null;
          this.deserializedList[0] = this.deserializedData;
        }
        _dereference(this);
        return this.deserializedData;
      };
      prototype._deserializeObject = function(serialized, owner, propName) {
        var prop;
        var obj = null;
        var klass = null;
        var type = serialized.__type__;
        if ("TypedArray" === type) {
          var array = serialized.array;
          obj = new window[serialized.ctor](array.length);
          for (var i = 0; i < array.length; ++i) obj[i] = array[i];
          return obj;
        }
        if (type) {
          klass = this._classFinder(type, serialized, owner, propName);
          if (!klass) {
            var notReported = this._classFinder === js._getClassById;
            notReported && cc.deserialize.reportMissingClass(type);
            return null;
          }
          obj = new klass();
          if (obj._deserialize) {
            obj._deserialize(serialized.content, this);
            return obj;
          }
          cc.Class._isCCClass(klass) ? _deserializeFireClass(this, obj, serialized, klass) : this._deserializeTypedObject(obj, serialized, klass);
        } else if (Array.isArray(serialized)) {
          obj = new Array(serialized.length);
          for (var _i = 0; _i < serialized.length; _i++) {
            prop = serialized[_i];
            "object" === typeof prop && prop ? this._deserializeObjField(obj, prop, "" + _i) : obj[_i] = prop;
          }
        } else {
          obj = {};
          this._deserializePrimitiveObject(obj, serialized);
        }
        return obj;
      };
      prototype._deserializeObjField = function(obj, jsonObj, propName) {
        var id = jsonObj.__id__;
        if (void 0 === id) {
          var uuid = jsonObj.__uuid__;
          if (uuid) this.result.push(obj, propName, uuid); else {
            false, false;
            obj[propName] = this._deserializeObject(jsonObj);
          }
        } else {
          var dObj = this.deserializedList[id];
          if (dObj) obj[propName] = dObj; else {
            this._idList.push(id);
            this._idObjList.push(obj);
            this._idPropList.push(propName);
          }
        }
      };
      prototype._deserializePrimitiveObject = function(instance, serialized) {
        for (var propName in serialized) if (serialized.hasOwnProperty(propName)) {
          var prop = serialized[propName];
          "object" !== typeof prop ? "__type__" !== propName && (instance[propName] = prop) : prop ? this._deserializeObjField(instance, prop, propName) : instance[propName] = null;
        }
      };
      prototype._deserializeTypedObject = function(instance, serialized, klass) {
        if (klass === cc.Vec2) {
          instance.x = serialized.x || 0;
          instance.y = serialized.y || 0;
          return;
        }
        if (klass === cc.Vec3) {
          instance.x = serialized.x || 0;
          instance.y = serialized.y || 0;
          instance.z = serialized.z || 0;
          return;
        }
        if (klass === cc.Color) {
          instance.r = serialized.r || 0;
          instance.g = serialized.g || 0;
          instance.b = serialized.b || 0;
          var a = serialized.a;
          instance.a = void 0 === a ? 255 : a;
          return;
        }
        if (klass === cc.Size) {
          instance.width = serialized.width || 0;
          instance.height = serialized.height || 0;
          return;
        }
        var DEFAULT = Attr.DELIMETER + "default";
        var attrs = Attr.getClassAttrs(klass);
        var fastDefinedProps = klass.__props__ || Object.keys(instance);
        for (var i = 0; i < fastDefinedProps.length; i++) {
          var propName = fastDefinedProps[i];
          var value = serialized[propName];
          void 0 !== value && serialized.hasOwnProperty(propName) || (value = CCClass.getDefault(attrs[propName + DEFAULT]));
          "object" !== typeof value ? instance[propName] = value : value ? this._deserializeObjField(instance, value, propName) : instance[propName] = null;
        }
      };
      function compileObjectTypeJit(sources, defaultValue, accessorToSet, propNameLiteralToSet, assumeHavePropIfIsValue) {
        if (defaultValue instanceof cc.ValueType) {
          assumeHavePropIfIsValue || sources.push("if(prop){");
          var ctorCode = js.getClassName(defaultValue);
          sources.push("s._deserializeTypedObject(o" + accessorToSet + ",prop," + ctorCode + ");");
          assumeHavePropIfIsValue || sources.push("}else o" + accessorToSet + "=null;");
        } else {
          sources.push("if(prop){");
          sources.push("s._deserializeObjField(o,prop," + propNameLiteralToSet + ");");
          sources.push("}else o" + accessorToSet + "=null;");
        }
      }
      var compileDeserialize = function(self, klass) {
        var TYPE = Attr.DELIMETER + "type";
        var EDITOR_ONLY = Attr.DELIMETER + "editorOnly";
        var DEFAULT = Attr.DELIMETER + "default";
        var FORMERLY_SERIALIZED_AS = Attr.DELIMETER + "formerlySerializedAs";
        var attrs = Attr.getClassAttrs(klass);
        var props = klass.__values__;
        var sources = [ "var prop;" ];
        var fastMode = misc.BUILTIN_CLASSID_RE.test(js._getClassId(klass));
        for (var p = 0; p < props.length; p++) {
          var propName = props[p];
          if ((false, false) && attrs[propName + EDITOR_ONLY]) continue;
          var accessorToSet, propNameLiteralToSet;
          if (CCClass.IDENTIFIER_RE.test(propName)) {
            propNameLiteralToSet = '"' + propName + '"';
            accessorToSet = "." + propName;
          } else {
            propNameLiteralToSet = CCClass.escapeForJS(propName);
            accessorToSet = "[" + propNameLiteralToSet + "]";
          }
          var accessorToGet = accessorToSet;
          if (attrs[propName + FORMERLY_SERIALIZED_AS]) {
            var propNameToRead = attrs[propName + FORMERLY_SERIALIZED_AS];
            accessorToGet = CCClass.IDENTIFIER_RE.test(propNameToRead) ? "." + propNameToRead : "[" + CCClass.escapeForJS(propNameToRead) + "]";
          }
          sources.push("prop=d" + accessorToGet + ";");
          sources.push("if(typeof " + (false, "prop") + '!=="undefined"){');
          var defaultValue = CCClass.getDefault(attrs[propName + DEFAULT]);
          if (fastMode) {
            var isPrimitiveType;
            var userType = attrs[propName + TYPE];
            if (void 0 === defaultValue && userType) isPrimitiveType = userType instanceof Attr.PrimitiveType; else {
              var defaultType = typeof defaultValue;
              isPrimitiveType = "string" === defaultType || "number" === defaultType || "boolean" === defaultType;
            }
            isPrimitiveType ? sources.push("o" + accessorToSet + "=prop;") : compileObjectTypeJit(sources, defaultValue, accessorToSet, propNameLiteralToSet, true);
          } else {
            sources.push("if(typeof " + (false, "prop") + '!=="object"){o' + accessorToSet + "=prop;}else{");
            compileObjectTypeJit(sources, defaultValue, accessorToSet, propNameLiteralToSet, false);
            sources.push("}");
          }
          sources.push("}");
        }
        if (cc.js.isChildClassOf(klass, cc._BaseNode) || cc.js.isChildClassOf(klass, cc.Component)) {
          var mayUsedInPersistRoot;
          false, false;
          sources.push("d._id&&(o._id=d._id);");
        }
        if ("_$erialized" === props[props.length - 1]) {
          sources.push("o._$erialized=JSON.parse(JSON.stringify(d));");
          sources.push("s._deserializePrimitiveObject(o._$erialized,d);");
        }
        return Function("s", "o", "d", "k", sources.join(""));
      };
      function unlinkUnusedPrefab(self, serialized, obj) {
        var uuid = serialized["asset"] && serialized["asset"].__uuid__;
        if (uuid) {
          var last = self.result.uuidList.length - 1;
          if (self.result.uuidList[last] === uuid && self.result.uuidObjList[last] === obj && "asset" === self.result.uuidPropList[last]) {
            self.result.uuidList.pop();
            self.result.uuidObjList.pop();
            self.result.uuidPropList.pop();
          } else {
            var debugEnvOnlyInfo = "Failed to skip prefab asset while deserializing PrefabInfo";
            cc.warn(debugEnvOnlyInfo);
          }
        }
      }
      function _deserializeFireClass(self, obj, serialized, klass) {
        var deserialize;
        if (klass.hasOwnProperty("__deserialize__")) deserialize = klass.__deserialize__; else {
          deserialize = compileDeserialize(self, klass);
          js.value(klass, "__deserialize__", deserialize, true);
        }
        deserialize(self, obj, serialized, klass);
        false, false;
      }
      _Deserializer.pool = new js.Pool(function(obj) {
        obj.result = null;
        obj.customEnv = null;
        obj.deserializedList.length = 0;
        obj.deserializedData = null;
        obj._classFinder = null;
        obj._idList.length = 0;
        obj._idObjList.length = 0;
        obj._idPropList.length = 0;
      }, 1);
      _Deserializer.pool.get = function(result, classFinder, customEnv, ignoreEditorOnly) {
        var cache = this._get();
        if (cache) {
          cache.result = result;
          cache.customEnv = customEnv;
          cache._classFinder = classFinder;
          false;
          return cache;
        }
        return new _Deserializer(result, classFinder, customEnv, ignoreEditorOnly);
      };
      return _Deserializer;
    })();
    cc.deserialize = function(data, details, options) {
      options = options || {};
      var classFinder = options.classFinder || js._getClassById;
      var createAssetRefs = options.createAssetRefs || cc.sys.platform === cc.sys.EDITOR_CORE;
      var customEnv = options.customEnv;
      var ignoreEditorOnly = options.ignoreEditorOnly;
      false;
      "string" === typeof data && (data = JSON.parse(data));
      var tempDetails = !details;
      details = details || Details.pool.get();
      var deserializer = _Deserializer.pool.get(details, classFinder, customEnv, ignoreEditorOnly);
      cc.game._isCloning = true;
      var res = deserializer.deserialize(data);
      cc.game._isCloning = false;
      _Deserializer.pool.put(deserializer);
      createAssetRefs && details.assignAssetsBy(Editor.serialize.asAsset);
      tempDetails && Details.pool.put(details);
      return res;
    };
    cc.deserialize.Details = Details;
    cc.deserialize.reportMissingClass = function(id) {
      false;
      cc.warnID(5302, id);
    };
  }), {
    "../utils/misc": 210,
    "./CCClass": 141,
    "./attribute": 153,
    "./js": 161
  } ],
  157: [ (function(require, module, exports) {
    "use strict";
    var NonUuidMark = ".";
    function IdGenerater(category) {
      this.id = 0 | 998 * Math.random();
      this.prefix = category ? category + NonUuidMark : "";
    }
    IdGenerater.prototype.getNewId = function() {
      return this.prefix + ++this.id;
    };
    IdGenerater.global = new IdGenerater("global");
    module.exports = IdGenerater;
  }), {} ],
  158: [ (function(require, module, exports) {
    "use strict";
    require("./js");
    require("./CCClass");
    require("./CCClassDecorator");
    require("./CCEnum");
    require("./CCObject");
    require("./callbacks-invoker");
    require("./deserialize");
    require("./instantiate");
    require("./instantiate-jit");
    require("./requiring-frame");
    require("./CCSys");
    require("./CCMacro");
    true;
    require("./CCVisibleRect");
  }), {
    "./CCClass": 141,
    "./CCClassDecorator": 142,
    "./CCEnum": 143,
    "./CCMacro": 146,
    "./CCObject": 147,
    "./CCSys": 150,
    "./CCVisibleRect": 152,
    "./callbacks-invoker": 154,
    "./deserialize": 156,
    "./instantiate": 160,
    "./instantiate-jit": 159,
    "./js": 161,
    "./requiring-frame": 163
  } ],
  159: [ (function(require, module, exports) {
    "use strict";
    var CCObject = require("./CCObject");
    var Destroyed = CCObject.Flags.Destroyed;
    var PersistentMask = CCObject.Flags.PersistentMask;
    var Attr = require("./attribute");
    var js = require("./js");
    var CCClass = require("./CCClass");
    var Compiler = require("./compiler");
    var DEFAULT = Attr.DELIMETER + "default";
    var IDENTIFIER_RE = CCClass.IDENTIFIER_RE;
    var escapeForJS = CCClass.escapeForJS;
    var VAR = "var ";
    var LOCAL_OBJ = "o";
    var LOCAL_TEMP_OBJ = "t";
    var LOCAL_ARRAY = "a";
    var LINE_INDEX_OF_NEW_OBJ = 0;
    var DEFAULT_MODULE_CACHE = {
      "cc.Node": "cc.Node",
      "cc.Sprite": "cc.Sprite",
      "cc.Label": "cc.Label",
      "cc.Button": "cc.Button",
      "cc.Widget": "cc.Widget",
      "cc.Animation": "cc.Animation",
      "cc.ClickEvent": false,
      "cc.PrefabInfo": false
    };
    try {
      !Float32Array.name && (Float32Array.name = "Float32Array");
      !Float64Array.name && (Float64Array.name = "Float64Array");
      !Int8Array.name && (Int8Array.name = "Int8Array");
      !Int16Array.name && (Int16Array.name = "Int16Array");
      !Int32Array.name && (Int32Array.name = "Int32Array");
      !Uint8Array.name && (Uint8Array.name = "Uint8Array");
      !Uint16Array.name && (Uint16Array.name = "Uint16Array");
      !Uint32Array.name && (Uint32Array.name = "Uint32Array");
    } catch (e) {}
    function getTypedArrayName(constructor) {
      if (constructor === Float32Array) return "Float32Array";
      if (constructor === Float64Array) return "Float64Array";
      if (constructor === Int8Array) return "Int8Array";
      if (constructor === Int16Array) return "Int16Array";
      if (constructor === Int32Array) return "Int32Array";
      if (constructor === Uint8Array) return "Uint8Array";
      if (constructor === Uint16Array) return "Uint16Array";
      if (constructor === Uint32Array) return "Uint32Array";
      throw new Error("Unknown TypedArray could not be instantiated: " + constructor);
    }
    function Declaration(varName, expression) {
      this.varName = varName;
      this.expression = expression;
    }
    Declaration.prototype.toString = function() {
      return VAR + this.varName + "=" + this.expression + ";";
    };
    function mergeDeclaration(statement, expression) {
      return expression instanceof Declaration ? new Declaration(expression.varName, statement + expression.expression) : statement + expression;
    }
    function writeAssignment(codeArray, statement, expression) {
      if (Array.isArray(expression)) {
        expression[0] = mergeDeclaration(statement, expression[0]);
        codeArray.push(expression);
      } else codeArray.push(mergeDeclaration(statement, expression) + ";");
    }
    function Assignments(targetExpression) {
      this._exps = [];
      this._targetExp = targetExpression;
    }
    Assignments.prototype.append = function(key, expression) {
      this._exps.push([ key, expression ]);
    };
    Assignments.prototype.writeCode = function(codeArray) {
      var targetVar;
      if (this._exps.length > 1) {
        codeArray.push(LOCAL_TEMP_OBJ + "=" + this._targetExp + ";");
        targetVar = LOCAL_TEMP_OBJ;
      } else {
        if (1 !== this._exps.length) return;
        targetVar = this._targetExp;
      }
      for (var i = 0; i < this._exps.length; i++) {
        var pair = this._exps[i];
        writeAssignment(codeArray, targetVar + getPropAccessor(pair[0]) + "=", pair[1]);
      }
    };
    Assignments.pool = new js.Pool(function(obj) {
      obj._exps.length = 0;
      obj._targetExp = null;
    }, 1);
    Assignments.pool.get = function(targetExpression) {
      var cache = this._get() || new Assignments();
      cache._targetExp = targetExpression;
      return cache;
    };
    function equalsToDefault(def, value) {
      if ("function" === typeof def) try {
        def = def();
      } catch (e) {
        return false;
      }
      if (def === value) return true;
      if (def && value) {
        if (def instanceof cc.ValueType && def.equals(value)) return true;
        if (Array.isArray(def) && Array.isArray(value) || def.constructor === Object && value.constructor === Object) try {
          return Array.isArray(def) && Array.isArray(value) && 0 === def.length && 0 === value.length;
        } catch (e) {}
      }
      return false;
    }
    function getPropAccessor(key) {
      return IDENTIFIER_RE.test(key) ? "." + key : "[" + escapeForJS(key) + "]";
    }
    function Parser(obj, parent) {
      this.parent = parent;
      this.objsToClear_iN$t = [];
      this.codeArray = [];
      this.objs = [];
      this.funcs = [];
      this.funcModuleCache = js.createMap();
      js.mixin(this.funcModuleCache, DEFAULT_MODULE_CACHE);
      this.globalVariables = [];
      this.globalVariableId = 0;
      this.localVariableId = 0;
      this.codeArray.push(VAR + LOCAL_OBJ + "," + LOCAL_TEMP_OBJ + ";", "if(R){", LOCAL_OBJ + "=R;", "}else{", LOCAL_OBJ + "=R=new " + this.getFuncModule(obj.constructor, true) + "();", "}");
      js.value(obj, "_iN$t", {
        globalVar: "R"
      }, true);
      this.objsToClear_iN$t.push(obj);
      this.enumerateObject(this.codeArray, obj);
      var globalVariablesDeclaration;
      this.globalVariables.length > 0 && (globalVariablesDeclaration = VAR + this.globalVariables.join(",") + ";");
      var code = Compiler.flattenCodeArray([ "return (function(R){", globalVariablesDeclaration || [], this.codeArray, "return o;", "})" ]);
      this.result = Function("O", "F", code)(this.objs, this.funcs);
      for (var i = 0, len = this.objsToClear_iN$t.length; i < len; ++i) this.objsToClear_iN$t[i]._iN$t = null;
      this.objsToClear_iN$t.length = 0;
    }
    var proto = Parser.prototype;
    proto.getFuncModule = function(func, usedInNew) {
      var clsName = js.getClassName(func);
      if (clsName) {
        var cache = this.funcModuleCache[clsName];
        if (cache) return cache;
        if (void 0 === cache) {
          var clsNameIsModule = -1 !== clsName.indexOf(".");
          if (clsNameIsModule) try {
            clsNameIsModule = func === Function("return " + clsName)();
            if (clsNameIsModule) {
              this.funcModuleCache[clsName] = clsName;
              return clsName;
            }
          } catch (e) {}
        }
      }
      var index = this.funcs.indexOf(func);
      if (index < 0) {
        index = this.funcs.length;
        this.funcs.push(func);
      }
      var res = "F[" + index + "]";
      usedInNew && (res = "(" + res + ")");
      this.funcModuleCache[clsName] = res;
      return res;
    };
    proto.getObjRef = function(obj) {
      var index = this.objs.indexOf(obj);
      if (index < 0) {
        index = this.objs.length;
        this.objs.push(obj);
      }
      return "O[" + index + "]";
    };
    proto.setValueType = function(codeArray, defaultValue, srcValue, targetExpression) {
      var assignments = Assignments.pool.get(targetExpression);
      var fastDefinedProps = defaultValue.constructor.__props__;
      fastDefinedProps || (fastDefinedProps = Object.keys(defaultValue));
      for (var i = 0; i < fastDefinedProps.length; i++) {
        var propName = fastDefinedProps[i];
        var prop = srcValue[propName];
        if (defaultValue[propName] === prop) continue;
        var expression = this.enumerateField(srcValue, propName, prop);
        assignments.append(propName, expression);
      }
      assignments.writeCode(codeArray);
      Assignments.pool.put(assignments);
    };
    proto.enumerateCCClass = function(codeArray, obj, klass) {
      var props = klass.__values__;
      var attrs = Attr.getClassAttrs(klass);
      for (var p = 0; p < props.length; p++) {
        var key = props[p];
        var val = obj[key];
        var defaultValue = attrs[key + DEFAULT];
        if (equalsToDefault(defaultValue, val)) continue;
        if ("object" === typeof val && val instanceof cc.ValueType) {
          defaultValue = CCClass.getDefault(defaultValue);
          if (defaultValue && defaultValue.constructor === val.constructor) {
            var targetExpression = LOCAL_OBJ + getPropAccessor(key);
            this.setValueType(codeArray, defaultValue, val, targetExpression);
            continue;
          }
        }
        this.setObjProp(codeArray, obj, key, val);
      }
    };
    proto.instantiateArray = function(value) {
      if (0 === value.length) return "[]";
      var arrayVar = LOCAL_ARRAY + ++this.localVariableId;
      var declaration = new Declaration(arrayVar, "new Array(" + value.length + ")");
      var codeArray = [ declaration ];
      js.value(value, "_iN$t", {
        globalVar: "",
        source: codeArray
      }, true);
      this.objsToClear_iN$t.push(value);
      for (var i = 0; i < value.length; ++i) {
        var statement = arrayVar + "[" + i + "]=";
        var expression = this.enumerateField(value, i, value[i]);
        writeAssignment(codeArray, statement, expression);
      }
      return codeArray;
    };
    proto.instantiateTypedArray = function(value) {
      var type = value.constructor.name || getTypedArrayName(value.constructor);
      if (0 === value.length) return "new " + type;
      var arrayVar = LOCAL_ARRAY + ++this.localVariableId;
      var declaration = new Declaration(arrayVar, "new " + type + "(" + value.length + ")");
      var codeArray = [ declaration ];
      value._iN$t = {
        globalVar: "",
        source: codeArray
      };
      this.objsToClear_iN$t.push(value);
      for (var i = 0; i < value.length; ++i) if (0 !== value[i]) {
        var statement = arrayVar + "[" + i + "]=";
        writeAssignment(codeArray, statement, value[i]);
      }
      return codeArray;
    };
    proto.enumerateField = function(obj, key, value) {
      if ("object" === typeof value && value) {
        var _iN$t = value._iN$t;
        if (_iN$t) {
          var globalVar = _iN$t.globalVar;
          if (!globalVar) {
            globalVar = _iN$t.globalVar = "v" + ++this.globalVariableId;
            this.globalVariables.push(globalVar);
            var line = _iN$t.source[LINE_INDEX_OF_NEW_OBJ];
            _iN$t.source[LINE_INDEX_OF_NEW_OBJ] = mergeDeclaration(globalVar + "=", line);
          }
          return globalVar;
        }
        return ArrayBuffer.isView(value) ? this.instantiateTypedArray(value) : Array.isArray(value) ? this.instantiateArray(value) : this.instantiateObj(value);
      }
      if ("function" === typeof value) return this.getFuncModule(value);
      if ("string" === typeof value) return escapeForJS(value);
      "_objFlags" === key && obj instanceof CCObject && (value &= PersistentMask);
      return value;
    };
    proto.setObjProp = function(codeArray, obj, key, value) {
      var statement = LOCAL_OBJ + getPropAccessor(key) + "=";
      var expression = this.enumerateField(obj, key, value);
      writeAssignment(codeArray, statement, expression);
    };
    proto.enumerateObject = function(codeArray, obj) {
      var klass = obj.constructor;
      if (cc.Class._isCCClass(klass)) this.enumerateCCClass(codeArray, obj, klass); else for (var key in obj) {
        if (!obj.hasOwnProperty(key) || 95 === key.charCodeAt(0) && 95 === key.charCodeAt(1) && "__type__" !== key) continue;
        var value = obj[key];
        if ("object" === typeof value && value && value === obj._iN$t) continue;
        this.setObjProp(codeArray, obj, key, value);
      }
    };
    proto.instantiateObj = function(obj) {
      if (obj instanceof cc.ValueType) return CCClass.getNewValueTypeCode(obj);
      if (obj instanceof cc.Asset) return this.getObjRef(obj);
      if (obj._objFlags & Destroyed) return null;
      var createCode;
      var ctor = obj.constructor;
      if (cc.Class._isCCClass(ctor)) {
        if (this.parent) if (this.parent instanceof cc.Component) {
          if (obj instanceof cc._BaseNode || obj instanceof cc.Component) return this.getObjRef(obj);
        } else if (this.parent instanceof cc._BaseNode) if (obj instanceof cc._BaseNode) {
          if (!obj.isChildOf(this.parent)) return this.getObjRef(obj);
        } else if (obj instanceof cc.Component && !obj.node.isChildOf(this.parent)) return this.getObjRef(obj);
        createCode = new Declaration(LOCAL_OBJ, "new " + this.getFuncModule(ctor, true) + "()");
      } else if (ctor === Object) createCode = new Declaration(LOCAL_OBJ, "{}"); else {
        if (ctor) return this.getObjRef(obj);
        createCode = new Declaration(LOCAL_OBJ, "Object.create(null)");
      }
      var codeArray = [ createCode ];
      js.value(obj, "_iN$t", {
        globalVar: "",
        source: codeArray
      }, true);
      this.objsToClear_iN$t.push(obj);
      this.enumerateObject(codeArray, obj);
      return [ "(function(){", codeArray, "return o;})();" ];
    };
    function compile(node) {
      var root = node instanceof cc._BaseNode && node;
      var parser = new Parser(node, root);
      return parser.result;
    }
    module.exports = {
      compile: compile,
      equalsToDefault: equalsToDefault
    };
    false;
  }), {
    "./CCClass": 141,
    "./CCObject": 147,
    "./attribute": 153,
    "./compiler": 155,
    "./js": 161
  } ],
  160: [ (function(require, module, exports) {
    "use strict";
    var CCObject = require("./CCObject");
    var CCValueType = require("../value-types/value-type");
    var Destroyed = CCObject.Flags.Destroyed;
    var PersistentMask = CCObject.Flags.PersistentMask;
    var _isDomNode = require("./utils").isDomNode;
    var js = require("./js");
    function instantiate(original, internal_force) {
      if (!internal_force) {
        if ("object" !== typeof original || Array.isArray(original)) {
          false;
          return null;
        }
        if (!original) {
          false;
          return null;
        }
        if (!cc.isValid(original)) {
          false;
          return null;
        }
        false;
      }
      var clone;
      if (original instanceof CCObject) {
        if (original._instantiate) {
          cc.game._isCloning = true;
          clone = original._instantiate();
          cc.game._isCloning = false;
          return clone;
        }
        if (original instanceof cc.Asset) {
          false;
          return null;
        }
      }
      cc.game._isCloning = true;
      clone = doInstantiate(original);
      cc.game._isCloning = false;
      return clone;
    }
    var objsToClearTmpVar = [];
    function doInstantiate(obj, parent) {
      if (Array.isArray(obj)) {
        false;
        return null;
      }
      if (_isDomNode && _isDomNode(obj)) {
        false;
        return null;
      }
      var clone;
      if (obj._iN$t) clone = obj._iN$t; else if (obj.constructor) {
        var klass = obj.constructor;
        clone = new klass();
      } else clone = Object.create(null);
      enumerateObject(obj, clone, parent);
      for (var i = 0, len = objsToClearTmpVar.length; i < len; ++i) objsToClearTmpVar[i]._iN$t = null;
      objsToClearTmpVar.length = 0;
      return clone;
    }
    function enumerateCCClass(klass, obj, clone, parent) {
      var props = klass.__values__;
      for (var p = 0; p < props.length; p++) {
        var key = props[p];
        var value = obj[key];
        if ("object" === typeof value && value) {
          var initValue = clone[key];
          initValue instanceof CCValueType && initValue.constructor === value.constructor ? initValue.set(value) : clone[key] = value._iN$t || instantiateObj(value, parent);
        } else clone[key] = value;
      }
    }
    function enumerateObject(obj, clone, parent) {
      js.value(obj, "_iN$t", clone, true);
      objsToClearTmpVar.push(obj);
      var klass = obj.constructor;
      if (cc.Class._isCCClass(klass)) enumerateCCClass(klass, obj, clone, parent); else for (var key in obj) {
        if (!obj.hasOwnProperty(key) || 95 === key.charCodeAt(0) && 95 === key.charCodeAt(1) && "__type__" !== key) continue;
        var value = obj[key];
        if ("object" === typeof value && value) {
          if (value === clone) continue;
          clone[key] = value._iN$t || instantiateObj(value, parent);
        } else clone[key] = value;
      }
      obj instanceof CCObject && (clone._objFlags &= PersistentMask);
    }
    function instantiateObj(obj, parent) {
      if (obj instanceof CCValueType) return obj.clone();
      if (obj instanceof cc.Asset) return obj;
      var clone;
      if (ArrayBuffer.isView(obj)) {
        var len = obj.length;
        clone = new obj.constructor(len);
        obj._iN$t = clone;
        objsToClearTmpVar.push(obj);
        for (var i = 0; i < len; ++i) clone[i] = obj[i];
        return clone;
      }
      if (Array.isArray(obj)) {
        var _len = obj.length;
        clone = new Array(_len);
        js.value(obj, "_iN$t", clone, true);
        objsToClearTmpVar.push(obj);
        for (var _i = 0; _i < _len; ++_i) {
          var value = obj[_i];
          clone[_i] = "object" === typeof value && value ? value._iN$t || instantiateObj(value, parent) : value;
        }
        return clone;
      }
      if (obj._objFlags & Destroyed) return null;
      var ctor = obj.constructor;
      if (cc.Class._isCCClass(ctor)) {
        if (parent) if (parent instanceof cc.Component) {
          if (obj instanceof cc._BaseNode || obj instanceof cc.Component) return obj;
        } else if (parent instanceof cc._BaseNode) if (obj instanceof cc._BaseNode) {
          if (!obj.isChildOf(parent)) return obj;
        } else if (obj instanceof cc.Component && !obj.node.isChildOf(parent)) return obj;
        clone = new ctor();
      } else if (ctor === Object) clone = {}; else {
        if (ctor) return obj;
        clone = Object.create(null);
      }
      enumerateObject(obj, clone, parent);
      return clone;
    }
    instantiate._clone = doInstantiate;
    cc.instantiate = instantiate;
    module.exports = instantiate;
  }), {
    "../value-types/value-type": 233,
    "./CCObject": 147,
    "./js": 161,
    "./utils": 164
  } ],
  161: [ (function(require, module, exports) {
    "use strict";
    var tempCIDGenerater = new (require("./id-generater"))("TmpCId.");
    function _getPropertyDescriptor(obj, name) {
      while (obj) {
        var pd = Object.getOwnPropertyDescriptor(obj, name);
        if (pd) return pd;
        obj = Object.getPrototypeOf(obj);
      }
      return null;
    }
    function _copyprop(name, source, target) {
      var pd = _getPropertyDescriptor(source, name);
      Object.defineProperty(target, name, pd);
    }
    var js = {
      isNumber: function isNumber(obj) {
        return "number" === typeof obj || obj instanceof Number;
      },
      isString: function isString(obj) {
        return "string" === typeof obj || obj instanceof String;
      },
      addon: function addon(obj) {
        obj = obj || {};
        for (var i = 1, length = arguments.length; i < length; i++) {
          var source = arguments[i];
          if (source) {
            if ("object" !== typeof source) {
              cc.errorID(5402, source);
              continue;
            }
            for (var name in source) name in obj || _copyprop(name, source, obj);
          }
        }
        return obj;
      },
      mixin: function mixin(obj) {
        obj = obj || {};
        for (var i = 1, length = arguments.length; i < length; i++) {
          var source = arguments[i];
          if (source) {
            if ("object" !== typeof source) {
              cc.errorID(5403, source);
              continue;
            }
            for (var name in source) _copyprop(name, source, obj);
          }
        }
        return obj;
      },
      extend: function extend(cls, base) {
        false;
        for (var p in base) base.hasOwnProperty(p) && (cls[p] = base[p]);
        cls.prototype = Object.create(base.prototype, {
          constructor: {
            value: cls,
            writable: true,
            configurable: true
          }
        });
        return cls;
      },
      getSuper: function getSuper(ctor) {
        var proto = ctor.prototype;
        var dunderProto = proto && Object.getPrototypeOf(proto);
        return dunderProto && dunderProto.constructor;
      },
      isChildClassOf: function isChildClassOf(subclass, superclass) {
        if (subclass && superclass) {
          if ("function" !== typeof subclass) return false;
          if ("function" !== typeof superclass) {
            false;
            return false;
          }
          if (subclass === superclass) return true;
          for (;;) {
            subclass = js.getSuper(subclass);
            if (!subclass) return false;
            if (subclass === superclass) return true;
          }
        }
        return false;
      },
      clear: function clear(obj) {
        var keys = Object.keys(obj);
        for (var i = 0; i < keys.length; i++) delete obj[keys[i]];
      },
      isEmptyObject: function isEmptyObject(obj) {
        for (var key in obj) return false;
        return true;
      },
      getPropertyDescriptor: _getPropertyDescriptor
    };
    var tmpValueDesc = {
      value: void 0,
      enumerable: false,
      writable: false,
      configurable: true
    };
    js.value = function(obj, prop, value, writable, enumerable) {
      tmpValueDesc.value = value;
      tmpValueDesc.writable = writable;
      tmpValueDesc.enumerable = enumerable;
      Object.defineProperty(obj, prop, tmpValueDesc);
      tmpValueDesc.value = void 0;
    };
    var tmpGetSetDesc = {
      get: null,
      set: null,
      enumerable: false
    };
    js.getset = function(obj, prop, getter, setter, enumerable, configurable) {
      if ("function" !== typeof setter) {
        enumerable = setter;
        setter = void 0;
      }
      tmpGetSetDesc.get = getter;
      tmpGetSetDesc.set = setter;
      tmpGetSetDesc.enumerable = enumerable;
      tmpGetSetDesc.configurable = configurable;
      Object.defineProperty(obj, prop, tmpGetSetDesc);
      tmpGetSetDesc.get = null;
      tmpGetSetDesc.set = null;
    };
    var tmpGetDesc = {
      get: null,
      enumerable: false,
      configurable: false
    };
    js.get = function(obj, prop, getter, enumerable, configurable) {
      tmpGetDesc.get = getter;
      tmpGetDesc.enumerable = enumerable;
      tmpGetDesc.configurable = configurable;
      Object.defineProperty(obj, prop, tmpGetDesc);
      tmpGetDesc.get = null;
    };
    var tmpSetDesc = {
      set: null,
      enumerable: false,
      configurable: false
    };
    js.set = function(obj, prop, setter, enumerable, configurable) {
      tmpSetDesc.set = setter;
      tmpSetDesc.enumerable = enumerable;
      tmpSetDesc.configurable = configurable;
      Object.defineProperty(obj, prop, tmpSetDesc);
      tmpSetDesc.set = null;
    };
    js.getClassName = function(objOrCtor) {
      if ("function" === typeof objOrCtor) {
        var prototype = objOrCtor.prototype;
        if (prototype && prototype.hasOwnProperty("__classname__") && prototype.__classname__) return prototype.__classname__;
        var retval = "";
        objOrCtor.name && (retval = objOrCtor.name);
        if (objOrCtor.toString) {
          var arr, str = objOrCtor.toString();
          arr = "[" === str.charAt(0) ? str.match(/\[\w+\s*(\w+)\]/) : str.match(/function\s*(\w+)/);
          arr && 2 === arr.length && (retval = arr[1]);
        }
        return "Object" !== retval ? retval : "";
      }
      if (objOrCtor && objOrCtor.constructor) return js.getClassName(objOrCtor.constructor);
      return "";
    };
    function isTempClassId(id) {
      return "string" !== typeof id || id.startsWith(tempCIDGenerater.prefix);
    }
    (function() {
      var _idToClass = {};
      var _nameToClass = {};
      function setup(key, publicName, table) {
        js.getset(js, publicName, (function() {
          return Object.assign({}, table);
        }), (function(value) {
          js.clear(table);
          Object.assign(table, value);
        }));
        return function(id, constructor) {
          constructor.prototype.hasOwnProperty(key) && delete table[constructor.prototype[key]];
          js.value(constructor.prototype, key, id);
          if (id) {
            var registered = table[id];
            if (registered && registered !== constructor) {
              var error = "A Class already exists with the same " + key + ' : "' + id + '".';
              false;
              cc.error(error);
            } else table[id] = constructor;
          }
        };
      }
      js._setClassId = setup("__cid__", "_registeredClassIds", _idToClass);
      var doSetClassName = setup("__classname__", "_registeredClassNames", _nameToClass);
      js.setClassName = function(className, constructor) {
        doSetClassName(className, constructor);
        if (!constructor.prototype.hasOwnProperty("__cid__")) {
          var id = className || tempCIDGenerater.getNewId();
          id && js._setClassId(id, constructor);
        }
      };
      js.unregisterClass = function() {
        for (var i = 0; i < arguments.length; i++) {
          var p = arguments[i].prototype;
          var classId = p.__cid__;
          classId && delete _idToClass[classId];
          var classname = p.__classname__;
          classname && delete _nameToClass[classname];
        }
      };
      js._getClassById = function(classId) {
        return _idToClass[classId];
      };
      js.getClassByName = function(classname) {
        return _nameToClass[classname];
      };
      js._getClassId = function(obj, allowTempId) {
        allowTempId = "undefined" === typeof allowTempId || allowTempId;
        var res;
        if ("function" === typeof obj && obj.prototype.hasOwnProperty("__cid__")) {
          res = obj.prototype.__cid__;
          if (!allowTempId && (false, false) && isTempClassId(res)) return "";
          return res;
        }
        if (obj && obj.constructor) {
          var prototype = obj.constructor.prototype;
          if (prototype && prototype.hasOwnProperty("__cid__")) {
            res = obj.__cid__;
            if (!allowTempId && (false, false) && isTempClassId(res)) return "";
            return res;
          }
        }
        return "";
      };
    })();
    js.obsolete = function(obj, obsoleted, newExpr, writable) {
      var extractPropName = /([^.]+)$/;
      var oldProp = extractPropName.exec(obsoleted)[0];
      var newProp = extractPropName.exec(newExpr)[0];
      function get() {
        false;
        return this[newProp];
      }
      writable ? js.getset(obj, oldProp, get, (function(value) {
        false;
        this[newProp] = value;
      })) : js.get(obj, oldProp, get);
    };
    js.obsoletes = function(obj, objName, props, writable) {
      for (var obsoleted in props) {
        var newName = props[obsoleted];
        js.obsolete(obj, objName + "." + obsoleted, newName, writable);
      }
    };
    var REGEXP_NUM_OR_STR = /(%d)|(%s)/;
    var REGEXP_STR = /%s/;
    js.formatStr = function() {
      var argLen = arguments.length;
      if (0 === argLen) return "";
      var msg = arguments[0];
      if (1 === argLen) return "" + msg;
      var hasSubstitution = "string" === typeof msg && REGEXP_NUM_OR_STR.test(msg);
      if (hasSubstitution) for (var i = 1; i < argLen; ++i) {
        var arg = arguments[i];
        var regExpToTest = "number" === typeof arg ? REGEXP_NUM_OR_STR : REGEXP_STR;
        regExpToTest.test(msg) ? msg = msg.replace(regExpToTest, arg) : msg += " " + arg;
      } else for (var _i = 1; _i < argLen; ++_i) msg += " " + arguments[_i];
      return msg;
    };
    js.shiftArguments = function() {
      var len = arguments.length - 1;
      var args = new Array(len);
      for (var i = 0; i < len; ++i) args[i] = arguments[i + 1];
      return args;
    };
    js.createMap = function(forceDictMode) {
      var map = Object.create(null);
      if (forceDictMode) {
        var INVALID_IDENTIFIER_1 = ".";
        var INVALID_IDENTIFIER_2 = "/";
        map[INVALID_IDENTIFIER_1] = true;
        map[INVALID_IDENTIFIER_2] = true;
        delete map[INVALID_IDENTIFIER_1];
        delete map[INVALID_IDENTIFIER_2];
      }
      return map;
    };
    function removeAt(array, index) {
      array.splice(index, 1);
    }
    function fastRemoveAt(array, index) {
      var length = array.length;
      if (index < 0 || index >= length) return;
      array[index] = array[length - 1];
      array.length = length - 1;
    }
    function remove(array, value) {
      var index = array.indexOf(value);
      if (index >= 0) {
        removeAt(array, index);
        return true;
      }
      return false;
    }
    function fastRemove(array, value) {
      var index = array.indexOf(value);
      if (index >= 0) {
        array[index] = array[array.length - 1];
        --array.length;
      }
    }
    function verifyType(array, type) {
      if (array && array.length > 0) for (var i = 0; i < array.length; i++) if (!(array[i] instanceof type)) {
        cc.logID(1300);
        return false;
      }
      return true;
    }
    function removeArray(array, minusArr) {
      for (var i = 0, l = minusArr.length; i < l; i++) remove(array, minusArr[i]);
    }
    function appendObjectsAt(array, addObjs, index) {
      array.splice.apply(array, [ index, 0 ].concat(addObjs));
      return array;
    }
    function contains(array, value) {
      return array.indexOf(value) >= 0;
    }
    function copy(array) {
      var i, len = array.length, arr_clone = new Array(len);
      for (i = 0; i < len; i += 1) arr_clone[i] = array[i];
      return arr_clone;
    }
    js.array = {
      remove: remove,
      fastRemove: fastRemove,
      removeAt: removeAt,
      fastRemoveAt: fastRemoveAt,
      contains: contains,
      verifyType: verifyType,
      removeArray: removeArray,
      appendObjectsAt: appendObjectsAt,
      copy: copy,
      MutableForwardIterator: require("../utils/mutable-forward-iterator")
    };
    function Pool(cleanupFunc, size) {
      if (void 0 === size) {
        size = cleanupFunc;
        cleanupFunc = null;
      }
      this.get = null;
      this.count = 0;
      this._pool = new Array(size);
      this._cleanup = cleanupFunc;
    }
    Pool.prototype._get = function() {
      if (this.count > 0) {
        --this.count;
        var cache = this._pool[this.count];
        this._pool[this.count] = null;
        return cache;
      }
      return null;
    };
    Pool.prototype.put = function(obj) {
      var pool = this._pool;
      if (this.count < pool.length) {
        if (this._cleanup && false === this._cleanup(obj)) return;
        pool[this.count] = obj;
        ++this.count;
      }
    };
    Pool.prototype.resize = function(length) {
      if (length >= 0) {
        this._pool.length = length;
        this.count > length && (this.count = length);
      }
    };
    js.Pool = Pool;
    cc.js = js;
    module.exports = js;
  }), {
    "../utils/mutable-forward-iterator": 211,
    "./id-generater": 157
  } ],
  162: [ (function(require, module, exports) {
    "use strict";
    var js = require("./js");
    var Attrs = require("./attribute");
    var SerializableAttrs = {
      default: {},
      serializable: {},
      editorOnly: {},
      formerlySerializedAs: {}
    };
    var TYPO_TO_CORRECT_DEV = false;
    function parseNotify(val, propName, notify, properties) {
      if (val.get || val.set) {
        false;
        return;
      }
      if (val.hasOwnProperty("default")) {
        var newKey = "_N$" + propName;
        val.get = function() {
          return this[newKey];
        };
        val.set = function(value) {
          var oldValue = this[newKey];
          this[newKey] = value;
          notify.call(this, oldValue);
        };
        false;
        var newValue = {};
        properties[newKey] = newValue;
        for (var attr in SerializableAttrs) {
          var v = SerializableAttrs[attr];
          if (val.hasOwnProperty(attr)) {
            newValue[attr] = val[attr];
            v.canUsedInGet || delete val[attr];
          }
        }
      } else false;
    }
    function parseType(val, type, className, propName) {
      var STATIC_CHECK = (false, false);
      if (Array.isArray(type)) {
        if (STATIC_CHECK && "default" in val) {
          var isArray = require("./CCClass").isArray;
          isArray(val["default"]) || cc.warnID(5507, className, propName);
        }
        if (!(type.length > 0)) return cc.errorID(5508, className, propName);
        val.type = type = type[0];
      }
      if ("function" === typeof type) {
        if (type === String) {
          val.type = cc.String;
          STATIC_CHECK && cc.warnID(3608, '"' + className + "." + propName + '"');
        } else if (type === Boolean) {
          val.type = cc.Boolean;
          STATIC_CHECK && cc.warnID(3609, '"' + className + "." + propName + '"');
        } else if (type === Number) {
          val.type = cc.Float;
          STATIC_CHECK && cc.warnID(3610, '"' + className + "." + propName + '"');
        }
      } else if (STATIC_CHECK) switch (type) {
       case "Number":
        cc.warnID(5510, className, propName);
        break;

       case "String":
        cc.warn('The type of "' + className + "." + propName + '" must be cc.String, not "String".');
        break;

       case "Boolean":
        cc.warn('The type of "' + className + "." + propName + '" must be cc.Boolean, not "Boolean".');
        break;

       case "Float":
        cc.warn('The type of "' + className + "." + propName + '" must be cc.Float, not "Float".');
        break;

       case "Integer":
        cc.warn('The type of "' + className + "." + propName + '" must be cc.Integer, not "Integer".');
        break;

       case null:
        cc.warnID(5511, className, propName);
      }
      false;
    }
    function getBaseClassWherePropertyDefined_DEV(propName, cls) {
      var res;
      false;
    }
    function _wrapOptions(isES6Getset, _default, type) {
      var res = isES6Getset ? {
        _short: true
      } : {
        _short: true,
        default: _default
      };
      type && (res.type = type);
      return res;
    }
    exports.getFullFormOfProperty = function(options, isES6Getset) {
      var isLiteral = options && options.constructor === Object;
      if (isLiteral) return null;
      return Array.isArray(options) && options.length > 0 ? _wrapOptions(isES6Getset, [], options) : "function" === typeof options ? _wrapOptions(isES6Getset, js.isChildClassOf(options, cc.ValueType) ? new options() : null, options) : options instanceof Attrs.PrimitiveType ? _wrapOptions(isES6Getset, options["default"]) : _wrapOptions(isES6Getset, options);
    };
    exports.preprocessAttrs = function(properties, className, cls, es6) {
      for (var propName in properties) {
        var val = properties[propName];
        var fullForm = exports.getFullFormOfProperty(val, false);
        fullForm && (val = properties[propName] = fullForm);
        if (val) {
          var maybeTypeScript;
          false;
          var baseClass;
          false;
          var notify = val.notify;
          if (notify) {
            false;
            parseNotify(val, propName, notify, properties);
          }
          "type" in val && parseType(val, val.type, className, propName);
        }
      }
    };
    var CALL_SUPER_DESTROY_REG_DEV;
    false;
    exports.validateMethodWithProps = function(func, funcName, className, cls, base) {
      false;
      if ("function" !== typeof func && null !== func) {
        var overrided;
        var baseFuc;
        var subFuc;
        var correct;
        false;
        return false;
      }
      false;
      return true;
    };
  }), {
    "./CCClass": 141,
    "./attribute": 153,
    "./js": 161
  } ],
  163: [ (function(require, module, exports) {
    "use strict";
    var requiringFrames = [];
    cc._RF = {
      push: function push(module, uuid, script) {
        if (void 0 === script) {
          script = uuid;
          uuid = "";
        }
        requiringFrames.push({
          uuid: uuid,
          script: script,
          module: module,
          exports: module.exports,
          beh: null
        });
      },
      pop: function pop() {
        var frameInfo = requiringFrames.pop();
        var module = frameInfo.module;
        var exports = module.exports;
        if (exports === frameInfo.exports) {
          for (var anyKey in exports) return;
          module.exports = exports = frameInfo.cls;
        }
      },
      peek: function peek() {
        return requiringFrames[requiringFrames.length - 1];
      }
    };
    false;
  }), {} ],
  164: [ (function(require, module, exports) {
    "use strict";
    var js = require("./js");
    module.exports = {
      contains: function contains(refNode, otherNode) {
        if ("function" == typeof refNode.contains) return refNode.contains(otherNode);
        if ("function" == typeof refNode.compareDocumentPosition) return !!(16 & refNode.compareDocumentPosition(otherNode));
        var node = otherNode.parentNode;
        if (node) do {
          if (node === refNode) return true;
          node = node.parentNode;
        } while (null !== node);
        return false;
      },
      isDomNode: "object" === typeof window && ("function" === typeof Node ? function(obj) {
        return obj instanceof Node;
      } : function(obj) {
        return obj && "object" === typeof obj && "number" === typeof obj.nodeType && "string" === typeof obj.nodeName;
      }),
      callInNextTick: function(callback, p1, p2) {
        callback && setTimeout((function() {
          callback(p1, p2);
        }), 0);
      }
    };
    false;
    false;
  }), {
    "./js": 161
  } ],
  165: [ (function(require, module, exports) {
    "use strict";
    require("./platform/js");
    require("./value-types");
    require("./utils");
    require("./platform/CCInputManager");
    require("./platform/CCInputExtension");
    require("./event");
    require("./platform/CCSys");
    require("./platform/CCMacro");
    require("./asset-manager");
    require("./CCDirector");
    require("./renderer");
    true;
    require("./platform/CCView");
    require("./platform/CCScreen");
    require("./CCScheduler");
    require("./event-manager");
  }), {
    "./CCDirector": 14,
    "./CCScheduler": 19,
    "./asset-manager": 37,
    "./event": 107,
    "./event-manager": 103,
    "./platform/CCInputExtension": 144,
    "./platform/CCInputManager": 145,
    "./platform/CCMacro": 146,
    "./platform/CCScreen": 149,
    "./platform/CCSys": 150,
    "./platform/CCView": 151,
    "./platform/js": 161,
    "./renderer": 171,
    "./utils": 209,
    "./value-types": 225
  } ],
  166: [ (function(require, module, exports) {
    "use strict";
    exports.__esModule = true;
    exports["default"] = void 0;
    var _assembler = _interopRequireDefault(require("./assembler"));
    var _manager = _interopRequireDefault(require("./utils/dynamic-atlas/manager"));
    var _renderData = _interopRequireDefault(require("./webgl/render-data"));
    var _valueTypes = require("../value-types");
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        "value" in descriptor && (descriptor.writable = true);
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      protoProps && _defineProperties(Constructor.prototype, protoProps);
      staticProps && _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    function _assertThisInitialized(self) {
      if (void 0 === self) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      return self;
    }
    function _inheritsLoose(subClass, superClass) {
      subClass.prototype = Object.create(superClass.prototype);
      subClass.prototype.constructor = subClass;
      subClass.__proto__ = superClass;
    }
    var Assembler2D = (function(_Assembler) {
      _inheritsLoose(Assembler2D, _Assembler);
      function Assembler2D() {
        var _this;
        _this = _Assembler.call(this) || this;
        _this._renderData = new _renderData["default"]();
        _this._renderData.init(_assertThisInitialized(_this));
        _this.initData();
        _this.initLocal();
        return _this;
      }
      var _proto = Assembler2D.prototype;
      _proto.initData = function initData() {
        var data = this._renderData;
        data.createQuadData(0, this.verticesFloats, this.indicesCount);
      };
      _proto.initLocal = function initLocal() {
        this._local = [];
        this._local.length = 4;
      };
      _proto.updateColor = function updateColor(comp, color) {
        var uintVerts = this._renderData.uintVDatas[0];
        if (!uintVerts) return;
        color = null != color ? color : comp.node.color._val;
        var floatsPerVert = this.floatsPerVert;
        var colorOffset = this.colorOffset;
        for (var i = colorOffset, l = uintVerts.length; i < l; i += floatsPerVert) uintVerts[i] = color;
      };
      _proto.getBuffer = function getBuffer() {
        return cc.renderer._handle._meshBuffer;
      };
      _proto.updateWorldVerts = function updateWorldVerts(comp) {
        var local = this._local;
        var verts = this._renderData.vDatas[0];
        var matrix = comp.node._worldMatrix;
        var matrixm = matrix.m, a = matrixm[0], b = matrixm[1], c = matrixm[4], d = matrixm[5], tx = matrixm[12], ty = matrixm[13];
        var vl = local[0], vr = local[2], vb = local[1], vt = local[3];
        var justTranslate = 1 === a && 0 === b && 0 === c && 1 === d;
        if (justTranslate) {
          verts[0] = vl + tx;
          verts[1] = vb + ty;
          verts[5] = vr + tx;
          verts[6] = vb + ty;
          verts[10] = vl + tx;
          verts[11] = vt + ty;
          verts[15] = vr + tx;
          verts[16] = vt + ty;
        } else {
          var al = a * vl, ar = a * vr, bl = b * vl, br = b * vr, cb = c * vb, ct = c * vt, db = d * vb, dt = d * vt;
          verts[0] = al + cb + tx;
          verts[1] = bl + db + ty;
          verts[5] = ar + cb + tx;
          verts[6] = br + db + ty;
          verts[10] = al + ct + tx;
          verts[11] = bl + dt + ty;
          verts[15] = ar + ct + tx;
          verts[16] = br + dt + ty;
        }
      };
      _proto.fillBuffers = function fillBuffers(comp, renderer) {
        renderer.worldMatDirty && this.updateWorldVerts(comp);
        var renderData = this._renderData;
        var vData = renderData.vDatas[0];
        var iData = renderData.iDatas[0];
        var buffer = this.getBuffer(renderer);
        var offsetInfo = buffer.request(this.verticesCount, this.indicesCount);
        var vertexOffset = offsetInfo.byteOffset >> 2, vbuf = buffer._vData;
        vData.length + vertexOffset > vbuf.length ? vbuf.set(vData.subarray(0, vbuf.length - vertexOffset), vertexOffset) : vbuf.set(vData, vertexOffset);
        var ibuf = buffer._iData, indiceOffset = offsetInfo.indiceOffset, vertexId = offsetInfo.vertexOffset;
        for (var i = 0, l = iData.length; i < l; i++) ibuf[indiceOffset++] = vertexId + iData[i];
      };
      _proto.packToDynamicAtlas = function packToDynamicAtlas(comp, frame) {
        false;
        if (!frame._original && _manager["default"] && frame._texture.packable) {
          var packedFrame = _manager["default"].insertSpriteFrame(frame);
          packedFrame && frame._setDynamicAtlasFrame(packedFrame);
        }
        var material = comp._materials[0];
        if (!material) return;
        if (material.getProperty("texture") !== frame._texture) {
          comp._vertsDirty = true;
          comp._updateMaterial();
        }
      };
      _createClass(Assembler2D, [ {
        key: "verticesFloats",
        get: function get() {
          return this.verticesCount * this.floatsPerVert;
        }
      } ]);
      return Assembler2D;
    })(_assembler["default"]);
    exports["default"] = Assembler2D;
    cc.js.addon(Assembler2D.prototype, {
      floatsPerVert: 5,
      verticesCount: 4,
      indicesCount: 6,
      uvOffset: 2,
      colorOffset: 4
    });
    cc.Assembler2D = Assembler2D;
    module.exports = exports["default"];
  }), {
    "../value-types": 225,
    "./assembler": 168,
    "./utils/dynamic-atlas/manager": void 0,
    "./webgl/render-data": 198
  } ],
  167: [ (function(require, module, exports) {
    "use strict";
    exports.__esModule = true;
    exports["default"] = void 0;
    var _pool3 = _interopRequireDefault(require("../utils/pool"));
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }
    function _inheritsLoose(subClass, superClass) {
      subClass.prototype = Object.create(superClass.prototype);
      subClass.prototype.constructor = subClass;
      subClass.__proto__ = superClass;
    }
    var _assemblerId = 0;
    function getAssemblerId(assemblerCtor) {
      Object.getOwnPropertyDescriptor(assemblerCtor, "__assemblerId__") || (assemblerCtor.__assemblerId__ = ++_assemblerId);
      return assemblerCtor.__assemblerId__;
    }
    var AssemblerPool = (function(_Pool) {
      _inheritsLoose(AssemblerPool, _Pool);
      function AssemblerPool() {
        var _this;
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) args[_key] = arguments[_key];
        _this = _Pool.call.apply(_Pool, [ this ].concat(args)) || this;
        _this._pool = {};
        return _this;
      }
      var _proto = AssemblerPool.prototype;
      _proto.put = function put(assembler) {
        if (!assembler) return;
        if (!this.enabled) {
          false;
          return;
        }
        var id = getAssemblerId(assembler.constructor);
        var pool = this._pool;
        pool[id] || (pool[id] = []);
        if (this.count > this.maxSize) return;
        this._clean(assembler);
        pool[id].push(assembler);
        this.count++;
      };
      _proto.get = function get(assemblerCtor) {
        var assembler;
        if (this.enabled) {
          var _pool = this._pool;
          var id = getAssemblerId(assemblerCtor);
          assembler = _pool[id] && _pool[id].pop();
        }
        assembler ? this.count-- : assembler = new assemblerCtor();
        return assembler;
      };
      _proto.clear = function clear() {
        var _pool2;
        var name;
        var assemblers;
        var i;
        false;
        this._pool = {};
        this.count = 0;
      };
      _proto._clean = function _clean(assembler) {
        false;
        assembler._renderComp = null;
      };
      return AssemblerPool;
    })(_pool3["default"]);
    var pool = new AssemblerPool();
    _pool3["default"].register("assembler", pool);
    var _default = pool;
    exports["default"] = _default;
    module.exports = exports["default"];
  }), {
    "../utils/pool": 212
  } ],
  168: [ (function(require, module, exports) {
    "use strict";
    exports.__esModule = true;
    exports["default"] = void 0;
    var _vertexFormat = require("./webgl/vertex-format");
    var _assemblerPool = _interopRequireDefault(require("./assembler-pool"));
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }
    var Assembler = (function() {
      function Assembler() {
        this._extendNative && this._extendNative();
      }
      var _proto = Assembler.prototype;
      _proto.init = function init(renderComp) {
        this._renderComp = renderComp;
      };
      _proto.updateRenderData = function updateRenderData(comp) {};
      _proto.fillBuffers = function fillBuffers(comp, renderer) {};
      _proto.getVfmt = function getVfmt() {
        return _vertexFormat.vfmtPosUvColor;
      };
      return Assembler;
    })();
    exports["default"] = Assembler;
    Assembler.register = function(renderCompCtor, assembler) {
      renderCompCtor.__assembler__ = assembler;
    };
    Assembler.init = function(renderComp) {
      var renderCompCtor = renderComp.constructor;
      var assemblerCtor = renderCompCtor.__assembler__;
      while (!assemblerCtor) {
        renderCompCtor = renderCompCtor.$super;
        if (!renderCompCtor) {
          cc.warn("Can not find assembler for render component : [" + cc.js.getClassName(renderComp) + "]");
          return;
        }
        assemblerCtor = renderCompCtor.__assembler__;
      }
      assemblerCtor.getConstructor && (assemblerCtor = assemblerCtor.getConstructor(renderComp));
      if (!renderComp._assembler || renderComp._assembler.constructor !== assemblerCtor) {
        var assembler = _assemblerPool["default"].get(assemblerCtor);
        assembler.init(renderComp);
        renderComp._assembler = assembler;
      }
    };
    cc.Assembler = Assembler;
    module.exports = exports["default"];
  }), {
    "./assembler-pool": 167,
    "./webgl/vertex-format": 200
  } ],
  169: [ (function(require, module, exports) {
    "use strict";
    var Device = function Device(canvasEL) {
      var ctx;
      try {
        ctx = canvasEL.getContext("2d");
      } catch (err) {
        console.error(err);
        return;
      }
      this._canvas = canvasEL;
      this._ctx = ctx;
      this._caps = {};
      this._stats = {
        drawcalls: 0
      };
      this._vx = this._vy = this._vw = this._vh = 0;
      this._sx = this._sy = this._sw = this._sh = 0;
    };
    Device.prototype._restoreTexture = function _restoreTexture(unit) {};
    Device.prototype.setViewport = function setViewport(x, y, w, h) {
      if (this._vx !== x || this._vy !== y || this._vw !== w || this._vh !== h) {
        this._vx = x;
        this._vy = y;
        this._vw = w;
        this._vh = h;
      }
    };
    Device.prototype.setScissor = function setScissor(x, y, w, h) {
      if (this._sx !== x || this._sy !== y || this._sw !== w || this._sh !== h) {
        this._sx = x;
        this._sy = y;
        this._sw = w;
        this._sh = h;
      }
    };
    Device.prototype.clear = function clear(color) {
      var ctx = this._ctx;
      ctx.clearRect(this._vx, this._vy, this._vw, this._vh);
      if (color && (0 !== color[0] || 0 !== color[1] || 0 !== color[2])) {
        ctx.fillStyle = "rgb(" + color[0] + "," + color[1] + "," + color[2] + ")";
        ctx.globalAlpha = color[3];
        ctx.fillRect(this._vx, this._vy, this._vw, this._vh);
      }
    };
    Device.prototype.resetDrawCalls = function() {
      this._stats.drawcalls = 0;
    };
    Device.prototype.getDrawCalls = function() {
      return this._stats.drawcalls;
    };
    module.exports = Device;
  }), {} ],
  170: [ (function(require, module, exports) {
    "use strict";
    var Texture2D = function Texture2D(device, options) {
      this._device = device;
      this._width = 4;
      this._height = 4;
      this._image = null;
      if (options) {
        void 0 !== options.width && (this._width = options.width);
        void 0 !== options.height && (this._height = options.height);
        this.updateImage(options);
      }
    };
    Texture2D.prototype.update = function update(options) {
      this.updateImage(options);
    };
    Texture2D.prototype.updateImage = function updateImage(options) {
      if (options.images && options.images[0]) {
        var image = options.images[0];
        image && image !== this._image && (this._image = image);
      }
    };
    Texture2D.prototype.destroy = function destroy() {
      this._image = null;
    };
    module.exports = Texture2D;
  }), {} ],
  171: [ (function(require, module, exports) {
    "use strict";
    exports.__esModule = true;
    exports["default"] = void 0;
    var _gfx = _interopRequireDefault(require("../../renderer/gfx"));
    var _inputAssembler = _interopRequireDefault(require("../../renderer/core/input-assembler"));
    var _pass = _interopRequireDefault(require("../../renderer/core/pass"));
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }
    function _initBuiltins(device) {
      var defaultTexture = new _gfx["default"].Texture2D(device, {
        images: [],
        width: 128,
        height: 128,
        wrapS: _gfx["default"].WRAP_REPEAT,
        wrapT: _gfx["default"].WRAP_REPEAT,
        format: _gfx["default"].TEXTURE_FMT_RGB8,
        mipmap: false
      });
      return {
        defaultTexture: defaultTexture,
        programTemplates: [],
        programChunks: {}
      };
    }
    var _default = cc.renderer = {
      Texture2D: null,
      InputAssembler: _inputAssembler["default"],
      Pass: _pass["default"],
      renderEngine: null,
      canvas: null,
      device: null,
      scene: null,
      drawCalls: 0,
      _handle: null,
      _cameraNode: null,
      _camera: null,
      _forward: null,
      _flow: null,
      initWebGL: function initWebGL(canvas, opts) {
        require("./webgl/assemblers");
        var ModelBatcher = require("./webgl/model-batcher");
        this.Texture2D = _gfx["default"].Texture2D;
        this.canvas = canvas;
        this._flow = cc.RenderFlow;
        var builtins;
        var nativeFlow;
        false;
        var Scene = require("../../renderer/scene/scene");
        var ForwardRenderer = require("../../renderer/renderers/forward-renderer");
        this.device = new _gfx["default"].Device(canvas, opts);
        this.scene = new Scene();
        var _builtins = _initBuiltins(this.device);
        this._forward = new ForwardRenderer(this.device, _builtins);
        this._handle = new ModelBatcher(this.device, this.scene);
        this._flow.init(this._handle, this._forward);
      },
      initCanvas: function initCanvas(canvas) {
        var canvasRenderer = require("./canvas");
        var Texture2D = require("./canvas/Texture2D");
        var Device = require("./canvas/Device");
        this.Device = Device;
        this.Texture2D = Texture2D;
        this.canvas = canvas;
        this.device = new Device(canvas);
        this._camera = {
          a: 1,
          b: 0,
          c: 0,
          d: 1,
          tx: 0,
          ty: 0
        };
        this._handle = new canvasRenderer.RenderComponentHandle(this.device, this._camera);
        this._forward = new canvasRenderer.ForwardRenderer();
        this._flow = cc.RenderFlow;
        this._flow.init(this._handle, this._forward);
      },
      updateCameraViewport: function updateCameraViewport() {
        if (true, cc.director) {
          var ecScene = cc.director.getScene();
          ecScene && ecScene.setScale(1, 1, 1);
        }
        if (cc.game.renderType === cc.game.RENDER_TYPE_CANVAS) {
          var vp = cc.view.getViewportRect();
          this.device.setViewport(vp.x, vp.y, vp.width, vp.height);
          this._camera.a = cc.view.getScaleX();
          this._camera.d = cc.view.getScaleY();
          this._camera.tx = vp.x;
          this._camera.ty = vp.y + vp.height;
        }
      },
      render: function render(ecScene, dt) {
        this.device.resetDrawCalls();
        if (ecScene) {
          this._flow.render(ecScene, dt);
          this.drawCalls = this.device.getDrawCalls();
        }
      },
      clear: function clear() {
        this._handle.reset();
        this._forward.clear();
      }
    };
    exports["default"] = _default;
    module.exports = exports["default"];
  }), {
    "../../renderer/core/input-assembler": 242,
    "../../renderer/core/pass": 243,
    "../../renderer/gfx": 252,
    "../../renderer/renderers/forward-renderer": 271,
    "../../renderer/scene/scene": 274,
    "./canvas": void 0,
    "./canvas/Device": 169,
    "./canvas/Texture2D": 170,
    "./webgl/assemblers": 181,
    "./webgl/model-batcher": 196
  } ],
  172: [ (function(require, module, exports) {
    "use strict";
    var FlagOfset = 0;
    var DONOTHING = 1 << FlagOfset++;
    var BREAK_FLOW = 1 << FlagOfset++;
    var LOCAL_TRANSFORM = 1 << FlagOfset++;
    var WORLD_TRANSFORM = 1 << FlagOfset++;
    var TRANSFORM = LOCAL_TRANSFORM | WORLD_TRANSFORM;
    var UPDATE_RENDER_DATA = 1 << FlagOfset++;
    var OPACITY = 1 << FlagOfset++;
    var COLOR = 1 << FlagOfset++;
    var OPACITY_COLOR = OPACITY | COLOR;
    var RENDER = 1 << FlagOfset++;
    var CHILDREN = 1 << FlagOfset++;
    var POST_RENDER = 1 << FlagOfset++;
    var FINAL = 1 << FlagOfset++;
    var _batcher, _forward;
    var _cullingMask = 0;
    function RenderFlow() {
      this._func = init;
      this._next = null;
    }
    var _proto = RenderFlow.prototype;
    _proto._doNothing = function() {};
    _proto._localTransform = function(node) {
      node._updateLocalMatrix();
      node._renderFlag &= ~LOCAL_TRANSFORM;
      this._next._func(node);
    };
    _proto._worldTransform = function(node) {
      _batcher.worldMatDirty++;
      var t = node._matrix;
      var trs = node._trs;
      var tm = t.m;
      tm[12] = trs[0];
      tm[13] = trs[1];
      tm[14] = trs[2];
      node._mulMat(node._worldMatrix, node._parent._worldMatrix, t);
      node._renderFlag &= ~WORLD_TRANSFORM;
      this._next._func(node);
      _batcher.worldMatDirty--;
    };
    _proto._opacity = function(node) {
      _batcher.parentOpacityDirty++;
      this._next._func(node);
      node._renderFlag &= ~OPACITY;
      _batcher.parentOpacityDirty--;
    };
    _proto._color = function(node) {
      var comp = node._renderComponent;
      comp && comp._updateColor();
      node._renderFlag &= ~COLOR;
      this._next._func(node);
    };
    _proto._updateRenderData = function(node) {
      var comp = node._renderComponent;
      comp._assembler.updateRenderData(comp);
      node._renderFlag &= ~UPDATE_RENDER_DATA;
      this._next._func(node);
    };
    _proto._render = function(node) {
      var comp = node._renderComponent;
      comp._checkBacth(_batcher, node._cullingMask);
      comp._assembler.fillBuffers(comp, _batcher);
      this._next._func(node);
    };
    _proto._children = function(node) {
      var cullingMask = _cullingMask;
      var batcher = _batcher;
      var parentOpacity = batcher.parentOpacity;
      var opacity = batcher.parentOpacity *= node._opacity / 255;
      var worldTransformFlag = batcher.worldMatDirty ? WORLD_TRANSFORM : 0;
      var worldOpacityFlag = batcher.parentOpacityDirty ? OPACITY_COLOR : 0;
      var worldDirtyFlag = worldTransformFlag | worldOpacityFlag;
      var children = node._children;
      for (var i = 0, l = children.length; i < l; i++) {
        var c = children[i];
        c._renderFlag |= worldDirtyFlag;
        if (!c._activeInHierarchy || 0 === c._opacity) continue;
        _cullingMask = c._cullingMask = 0 === c.groupIndex ? cullingMask : 1 << c.groupIndex;
        var colorVal = c._color._val;
        c._color._fastSetA(c._opacity * opacity);
        flows[c._renderFlag]._func(c);
        c._color._val = colorVal;
      }
      batcher.parentOpacity = parentOpacity;
      this._next._func(node);
    };
    _proto._postRender = function(node) {
      var comp = node._renderComponent;
      comp._checkBacth(_batcher, node._cullingMask);
      comp._assembler.postFillBuffers(comp, _batcher);
      this._next._func(node);
    };
    var EMPTY_FLOW = new RenderFlow();
    EMPTY_FLOW._func = EMPTY_FLOW._doNothing;
    EMPTY_FLOW._next = EMPTY_FLOW;
    var flows = {};
    function createFlow(flag, next) {
      var flow = new RenderFlow();
      flow._next = next || EMPTY_FLOW;
      switch (flag) {
       case DONOTHING:
       case BREAK_FLOW:
        flow._func = flow._doNothing;
        break;

       case LOCAL_TRANSFORM:
        flow._func = flow._localTransform;
        break;

       case WORLD_TRANSFORM:
        flow._func = flow._worldTransform;
        break;

       case OPACITY:
        flow._func = flow._opacity;
        break;

       case COLOR:
        flow._func = flow._color;
        break;

       case UPDATE_RENDER_DATA:
        flow._func = flow._updateRenderData;
        break;

       case RENDER:
        flow._func = flow._render;
        break;

       case CHILDREN:
        flow._func = flow._children;
        break;

       case POST_RENDER:
        flow._func = flow._postRender;
      }
      return flow;
    }
    function getFlow(flag) {
      var flow = null;
      var tFlag = FINAL;
      while (tFlag > 0) {
        tFlag & flag && (flow = createFlow(tFlag, flow));
        tFlag >>= 1;
      }
      return flow;
    }
    function init(node) {
      var flag = node._renderFlag;
      var r = flows[flag] = getFlow(flag);
      r._func(node);
    }
    RenderFlow.flows = flows;
    RenderFlow.createFlow = createFlow;
    var _validateList = [];
    RenderFlow.registerValidate = function(renderComp) {
      if (renderComp._inValidateList) return;
      _validateList.push(renderComp);
      renderComp._inValidateList = true;
    };
    RenderFlow.validateRenderers = function() {
      for (var i = 0, l = _validateList.length; i < l; i++) {
        var renderComp = _validateList[i];
        if (!renderComp.isValid) continue;
        renderComp.enabledInHierarchy ? renderComp._validateRender() : renderComp.disableRender();
        renderComp._inValidateList = false;
      }
      _validateList.length = 0;
    };
    RenderFlow.visitRootNode = function(rootNode) {
      RenderFlow.validateRenderers();
      var preCullingMask = _cullingMask;
      _cullingMask = rootNode._cullingMask;
      if (rootNode._renderFlag & WORLD_TRANSFORM) {
        _batcher.worldMatDirty++;
        rootNode._calculWorldMatrix();
        rootNode._renderFlag &= ~WORLD_TRANSFORM;
        flows[rootNode._renderFlag]._func(rootNode);
        _batcher.worldMatDirty--;
      } else flows[rootNode._renderFlag]._func(rootNode);
      _cullingMask = preCullingMask;
    };
    RenderFlow.render = function(rootNode, dt) {
      _batcher.reset();
      _batcher.walking = true;
      RenderFlow.visitRootNode(rootNode);
      _batcher.terminate();
      _batcher.walking = false;
      _forward.render(_batcher._renderScene, dt);
    };
    RenderFlow.renderCamera = function(camera, rootNode) {
      _batcher.reset();
      _batcher.walking = true;
      RenderFlow.visitRootNode(rootNode);
      _batcher.terminate();
      _batcher.walking = false;
      _forward.renderCamera(camera, _batcher._renderScene);
    };
    RenderFlow.init = function(batcher, forwardRenderer) {
      _batcher = batcher;
      _forward = forwardRenderer;
      flows[0] = EMPTY_FLOW;
      for (var i = 1; i < FINAL; i++) flows[i] = new RenderFlow();
    };
    RenderFlow.getBachther = function() {
      return _batcher;
    };
    RenderFlow.FLAG_DONOTHING = DONOTHING;
    RenderFlow.FLAG_BREAK_FLOW = BREAK_FLOW;
    RenderFlow.FLAG_LOCAL_TRANSFORM = LOCAL_TRANSFORM;
    RenderFlow.FLAG_WORLD_TRANSFORM = WORLD_TRANSFORM;
    RenderFlow.FLAG_TRANSFORM = TRANSFORM;
    RenderFlow.FLAG_OPACITY = OPACITY;
    RenderFlow.FLAG_COLOR = COLOR;
    RenderFlow.FLAG_OPACITY_COLOR = OPACITY_COLOR;
    RenderFlow.FLAG_UPDATE_RENDER_DATA = UPDATE_RENDER_DATA;
    RenderFlow.FLAG_RENDER = RENDER;
    RenderFlow.FLAG_CHILDREN = CHILDREN;
    RenderFlow.FLAG_POST_RENDER = POST_RENDER;
    RenderFlow.FLAG_FINAL = FINAL;
    module.exports = cc.RenderFlow = RenderFlow;
  }), {} ],
  173: [ (function(require, module, exports) {
    "use strict";
    exports.__esModule = true;
    exports["default"] = void 0;
    var _assembler2d = _interopRequireDefault(require("../../assembler-2d"));
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }
    function _inheritsLoose(subClass, superClass) {
      subClass.prototype = Object.create(superClass.prototype);
      subClass.prototype.constructor = subClass;
      subClass.__proto__ = superClass;
    }
    var textUtils = require("../../../utils/text-utils");
    var macro = require("../../../platform/CCMacro");
    var Label = require("../../../components/CCLabel");
    var Overflow = Label.Overflow;
    var shareLabelInfo = require("../utils").shareLabelInfo;
    var LetterInfo = function LetterInfo() {
      this["char"] = "";
      this.valid = true;
      this.x = 0;
      this.y = 0;
      this.line = 0;
      this.hash = "";
    };
    var _tmpRect = cc.rect();
    var _comp = null;
    var _horizontalKernings = [];
    var _lettersInfo = [];
    var _linesWidth = [];
    var _linesOffsetX = [];
    var _fntConfig = null;
    var _numberOfLines = 0;
    var _textDesiredHeight = 0;
    var _letterOffsetY = 0;
    var _tailoredTopY = 0;
    var _tailoredBottomY = 0;
    var _bmfontScale = 1;
    var _lineBreakWithoutSpaces = false;
    var _spriteFrame = null;
    var _lineSpacing = 0;
    var _contentSize = cc.size();
    var _string = "";
    var _fontSize = 0;
    var _originFontSize = 0;
    var _hAlign = 0;
    var _vAlign = 0;
    var _spacingX = 0;
    var _lineHeight = 0;
    var _overflow = 0;
    var _isWrapText = false;
    var _labelWidth = 0;
    var _labelHeight = 0;
    var _maxLineWidth = 0;
    var BmfontAssembler = (function(_Assembler2D) {
      _inheritsLoose(BmfontAssembler, _Assembler2D);
      function BmfontAssembler() {
        return _Assembler2D.apply(this, arguments) || this;
      }
      var _proto = BmfontAssembler.prototype;
      _proto.updateRenderData = function updateRenderData(comp) {
        if (!comp._vertsDirty) return;
        if (_comp === comp) return;
        _comp = comp;
        this._reserveQuads(comp, comp.string.toString().length);
        this._updateFontFamily(comp);
        this._updateProperties(comp);
        this._updateLabelInfo(comp);
        this._updateContent();
        this.updateWorldVerts(comp);
        _comp._actualFontSize = _fontSize;
        _comp.node.setContentSize(_contentSize);
        _comp._vertsDirty = false;
        _comp = null;
        this._resetProperties();
      };
      _proto._updateFontScale = function _updateFontScale() {
        _bmfontScale = _fontSize / _originFontSize;
      };
      _proto._updateFontFamily = function _updateFontFamily(comp) {
        var fontAsset = comp.font;
        _spriteFrame = fontAsset.spriteFrame;
        _fntConfig = fontAsset._fntConfig;
        shareLabelInfo.fontAtlas = fontAsset._fontDefDictionary;
        this.packToDynamicAtlas(comp, _spriteFrame);
      };
      _proto._updateLabelInfo = function _updateLabelInfo() {
        shareLabelInfo.hash = "";
        shareLabelInfo.margin = 0;
      };
      _proto._updateProperties = function _updateProperties(comp) {
        _string = comp.string.toString();
        _fontSize = comp.fontSize;
        _originFontSize = _fntConfig ? _fntConfig.fontSize : comp.fontSize;
        _hAlign = comp.horizontalAlign;
        _vAlign = comp.verticalAlign;
        _spacingX = comp.spacingX;
        _overflow = comp.overflow;
        _lineHeight = comp._lineHeight;
        _contentSize.width = comp.node.width;
        _contentSize.height = comp.node.height;
        if (_overflow === Overflow.NONE) {
          _isWrapText = false;
          _contentSize.width += 2 * shareLabelInfo.margin;
          _contentSize.height += 2 * shareLabelInfo.margin;
        } else if (_overflow === Overflow.RESIZE_HEIGHT) {
          _isWrapText = true;
          _contentSize.height += 2 * shareLabelInfo.margin;
        } else _isWrapText = comp.enableWrapText;
        shareLabelInfo.lineHeight = _lineHeight;
        shareLabelInfo.fontSize = _fontSize;
        this._setupBMFontOverflowMetrics();
      };
      _proto._resetProperties = function _resetProperties() {
        _fntConfig = null;
        _spriteFrame = null;
        shareLabelInfo.hash = "";
        shareLabelInfo.margin = 0;
      };
      _proto._updateContent = function _updateContent() {
        this._updateFontScale();
        this._computeHorizontalKerningForText();
        this._alignText();
      };
      _proto._computeHorizontalKerningForText = function _computeHorizontalKerningForText() {
        var string = _string;
        var stringLen = string.length;
        var horizontalKernings = _horizontalKernings;
        var kerningDict;
        _fntConfig && (kerningDict = _fntConfig.kerningDict);
        if (kerningDict && !cc.js.isEmptyObject(kerningDict)) {
          var prev = -1;
          for (var i = 0; i < stringLen; ++i) {
            var key = string.charCodeAt(i);
            var kerningAmount = kerningDict[prev << 16 | 65535 & key] || 0;
            horizontalKernings[i] = i < stringLen - 1 ? kerningAmount : 0;
            prev = key;
          }
        } else horizontalKernings.length = 0;
      };
      _proto._multilineTextWrap = function _multilineTextWrap(nextTokenFunc) {
        var textLen = _string.length;
        var lineIndex = 0;
        var nextTokenX = 0;
        var nextTokenY = 0;
        var longestLine = 0;
        var letterRight = 0;
        var highestY = 0;
        var lowestY = 0;
        var letterDef = null;
        var letterPosition = cc.v2(0, 0);
        for (var index = 0; index < textLen; ) {
          var character = _string.charAt(index);
          if ("\n" === character) {
            _linesWidth.push(letterRight);
            letterRight = 0;
            lineIndex++;
            nextTokenX = 0;
            nextTokenY -= _lineHeight * this._getFontScale() + _lineSpacing;
            this._recordPlaceholderInfo(index, character);
            index++;
            continue;
          }
          var tokenLen = nextTokenFunc(_string, index, textLen);
          var tokenHighestY = highestY;
          var tokenLowestY = lowestY;
          var tokenRight = letterRight;
          var nextLetterX = nextTokenX;
          var newLine = false;
          for (var tmp = 0; tmp < tokenLen; ++tmp) {
            var letterIndex = index + tmp;
            character = _string.charAt(letterIndex);
            if ("\r" === character) {
              this._recordPlaceholderInfo(letterIndex, character);
              continue;
            }
            letterDef = shareLabelInfo.fontAtlas.getLetterDefinitionForChar(character, shareLabelInfo);
            if (!letterDef) {
              this._recordPlaceholderInfo(letterIndex, character);
              var atlasName = "";
              _fntConfig && (atlasName = _fntConfig.atlasName);
              console.log("Can't find letter definition in texture atlas " + atlasName + " for letter:" + character);
              continue;
            }
            var letterX = nextLetterX + letterDef.offsetX * _bmfontScale - shareLabelInfo.margin;
            if (_isWrapText && _maxLineWidth > 0 && nextTokenX > 0 && letterX + letterDef.w * _bmfontScale > _maxLineWidth && !textUtils.isUnicodeSpace(character)) {
              _linesWidth.push(letterRight);
              letterRight = 0;
              lineIndex++;
              nextTokenX = 0;
              nextTokenY -= _lineHeight * this._getFontScale() + _lineSpacing;
              newLine = true;
              break;
            }
            letterPosition.x = letterX;
            letterPosition.y = nextTokenY - letterDef.offsetY * _bmfontScale + shareLabelInfo.margin;
            this._recordLetterInfo(letterPosition, character, letterIndex, lineIndex);
            letterIndex + 1 < _horizontalKernings.length && letterIndex < textLen - 1 && (nextLetterX += _horizontalKernings[letterIndex + 1]);
            nextLetterX += letterDef.xAdvance * _bmfontScale + _spacingX - 2 * shareLabelInfo.margin;
            tokenRight = letterPosition.x + letterDef.w * _bmfontScale - shareLabelInfo.margin;
            tokenHighestY < letterPosition.y && (tokenHighestY = letterPosition.y);
            tokenLowestY > letterPosition.y - letterDef.h * _bmfontScale && (tokenLowestY = letterPosition.y - letterDef.h * _bmfontScale);
          }
          if (newLine) continue;
          nextTokenX = nextLetterX;
          letterRight = tokenRight;
          highestY < tokenHighestY && (highestY = tokenHighestY);
          lowestY > tokenLowestY && (lowestY = tokenLowestY);
          longestLine < letterRight && (longestLine = letterRight);
          index += tokenLen;
        }
        _linesWidth.push(letterRight);
        _numberOfLines = lineIndex + 1;
        _textDesiredHeight = _numberOfLines * _lineHeight * this._getFontScale();
        _numberOfLines > 1 && (_textDesiredHeight += (_numberOfLines - 1) * _lineSpacing);
        _contentSize.width = _labelWidth;
        _contentSize.height = _labelHeight;
        _labelWidth <= 0 && (_contentSize.width = parseFloat(longestLine.toFixed(2)) + 2 * shareLabelInfo.margin);
        _labelHeight <= 0 && (_contentSize.height = parseFloat(_textDesiredHeight.toFixed(2)) + 2 * shareLabelInfo.margin);
        _tailoredTopY = _contentSize.height;
        _tailoredBottomY = 0;
        if (_overflow !== Overflow.CLAMP) {
          highestY > 0 && (_tailoredTopY = _contentSize.height + highestY);
          lowestY < -_textDesiredHeight && (_tailoredBottomY = _textDesiredHeight + lowestY);
        }
        return true;
      };
      _proto._getFirstCharLen = function _getFirstCharLen() {
        return 1;
      };
      _proto._getFontScale = function _getFontScale() {
        return _overflow === Overflow.SHRINK ? _bmfontScale : 1;
      };
      _proto._getFirstWordLen = function _getFirstWordLen(text, startIndex, textLen) {
        var character = text.charAt(startIndex);
        if (textUtils.isUnicodeCJK(character) || "\n" === character || textUtils.isUnicodeSpace(character)) return 1;
        var len = 1;
        var letterDef = shareLabelInfo.fontAtlas.getLetterDefinitionForChar(character, shareLabelInfo);
        if (!letterDef) return len;
        var nextLetterX = letterDef.xAdvance * _bmfontScale + _spacingX;
        var letterX;
        for (var index = startIndex + 1; index < textLen; ++index) {
          character = text.charAt(index);
          letterDef = shareLabelInfo.fontAtlas.getLetterDefinitionForChar(character, shareLabelInfo);
          if (!letterDef) break;
          letterX = nextLetterX + letterDef.offsetX * _bmfontScale;
          if (letterX + letterDef.w * _bmfontScale > _maxLineWidth && !textUtils.isUnicodeSpace(character) && _maxLineWidth > 0) return len;
          nextLetterX += letterDef.xAdvance * _bmfontScale + _spacingX;
          if ("\n" === character || textUtils.isUnicodeSpace(character) || textUtils.isUnicodeCJK(character)) break;
          len++;
        }
        return len;
      };
      _proto._multilineTextWrapByWord = function _multilineTextWrapByWord() {
        return this._multilineTextWrap(this._getFirstWordLen);
      };
      _proto._multilineTextWrapByChar = function _multilineTextWrapByChar() {
        return this._multilineTextWrap(this._getFirstCharLen);
      };
      _proto._recordPlaceholderInfo = function _recordPlaceholderInfo(letterIndex, _char) {
        if (letterIndex >= _lettersInfo.length) {
          var tmpInfo = new LetterInfo();
          _lettersInfo.push(tmpInfo);
        }
        _lettersInfo[letterIndex]["char"] = _char;
        _lettersInfo[letterIndex].hash = _char.charCodeAt(0) + shareLabelInfo.hash;
        _lettersInfo[letterIndex].valid = false;
      };
      _proto._recordLetterInfo = function _recordLetterInfo(letterPosition, character, letterIndex, lineIndex) {
        if (letterIndex >= _lettersInfo.length) {
          var tmpInfo = new LetterInfo();
          _lettersInfo.push(tmpInfo);
        }
        var _char2 = character.charCodeAt(0);
        var key = _char2 + shareLabelInfo.hash;
        _lettersInfo[letterIndex].line = lineIndex;
        _lettersInfo[letterIndex]["char"] = character;
        _lettersInfo[letterIndex].hash = key;
        _lettersInfo[letterIndex].valid = shareLabelInfo.fontAtlas.getLetter(key).valid;
        _lettersInfo[letterIndex].x = letterPosition.x;
        _lettersInfo[letterIndex].y = letterPosition.y;
      };
      _proto._alignText = function _alignText() {
        _textDesiredHeight = 0;
        _linesWidth.length = 0;
        _lineBreakWithoutSpaces ? this._multilineTextWrapByChar() : this._multilineTextWrapByWord();
        this._computeAlignmentOffset();
        _overflow === Overflow.SHRINK && _fontSize > 0 && this._isVerticalClamp() && this._shrinkLabelToContentSize(this._isVerticalClamp);
        this._updateQuads() || _overflow === Overflow.SHRINK && this._shrinkLabelToContentSize(this._isHorizontalClamp);
      };
      _proto._scaleFontSizeDown = function _scaleFontSizeDown(fontSize) {
        var shouldUpdateContent = true;
        if (!fontSize) {
          fontSize = .1;
          shouldUpdateContent = false;
        }
        _fontSize = fontSize;
        shouldUpdateContent && this._updateContent();
      };
      _proto._shrinkLabelToContentSize = function _shrinkLabelToContentSize(lambda) {
        var fontSize = _fontSize;
        var left = 0, right = 0 | fontSize, mid = 0;
        while (left < right) {
          mid = left + right + 1 >> 1;
          var newFontSize = mid;
          if (newFontSize <= 0) break;
          _bmfontScale = newFontSize / _originFontSize;
          _lineBreakWithoutSpaces ? this._multilineTextWrapByChar() : this._multilineTextWrapByWord();
          this._computeAlignmentOffset();
          lambda() ? right = mid - 1 : left = mid;
        }
        var actualFontSize = left;
        actualFontSize >= 0 && this._scaleFontSizeDown(actualFontSize);
      };
      _proto._isVerticalClamp = function _isVerticalClamp() {
        return _textDesiredHeight > _contentSize.height;
      };
      _proto._isHorizontalClamp = function _isHorizontalClamp() {
        var letterClamp = false;
        for (var ctr = 0, l = _string.length; ctr < l; ++ctr) {
          var letterInfo = _lettersInfo[ctr];
          if (letterInfo.valid) {
            var letterDef = shareLabelInfo.fontAtlas.getLetter(letterInfo.hash);
            var px = letterInfo.x + letterDef.w * _bmfontScale;
            var lineIndex = letterInfo.line;
            if (_labelWidth > 0) if (_isWrapText) {
              var wordWidth = _linesWidth[lineIndex];
              if (wordWidth > _contentSize.width && (px > _contentSize.width || px < 0)) {
                letterClamp = true;
                break;
              }
            } else if (px > _contentSize.width) {
              letterClamp = true;
              break;
            }
          }
        }
        return letterClamp;
      };
      _proto._isHorizontalClamped = function _isHorizontalClamped(px, lineIndex) {
        var wordWidth = _linesWidth[lineIndex];
        var letterOverClamp = px > _contentSize.width || px < 0;
        return _isWrapText ? wordWidth > _contentSize.width && letterOverClamp : letterOverClamp;
      };
      _proto._updateQuads = function _updateQuads() {
        var texture = _spriteFrame ? _spriteFrame._texture : shareLabelInfo.fontAtlas.getTexture();
        var node = _comp.node;
        this.verticesCount = this.indicesCount = 0;
        this._renderData && (this._renderData.dataLength = 0);
        var contentSize = _contentSize, appx = node._anchorPoint.x * contentSize.width, appy = node._anchorPoint.y * contentSize.height;
        var ret = true;
        for (var ctr = 0, l = _string.length; ctr < l; ++ctr) {
          var letterInfo = _lettersInfo[ctr];
          if (!letterInfo.valid) continue;
          var letterDef = shareLabelInfo.fontAtlas.getLetter(letterInfo.hash);
          _tmpRect.height = letterDef.h;
          _tmpRect.width = letterDef.w;
          _tmpRect.x = letterDef.u;
          _tmpRect.y = letterDef.v;
          var py = letterInfo.y + _letterOffsetY;
          if (_labelHeight > 0) {
            if (py > _tailoredTopY) {
              var clipTop = py - _tailoredTopY;
              _tmpRect.y += clipTop;
              _tmpRect.height -= clipTop;
              py -= clipTop;
            }
            py - letterDef.h * _bmfontScale < _tailoredBottomY && _overflow === Overflow.CLAMP && (_tmpRect.height = py < _tailoredBottomY ? 0 : (py - _tailoredBottomY) / _bmfontScale);
          }
          var lineIndex = letterInfo.line;
          var px = letterInfo.x + letterDef.w / 2 * _bmfontScale + _linesOffsetX[lineIndex];
          if (_labelWidth > 0 && this._isHorizontalClamped(px, lineIndex)) if (_overflow === Overflow.CLAMP) _tmpRect.width = 0; else if (_overflow === Overflow.SHRINK) {
            if (_contentSize.width > letterDef.w) {
              ret = false;
              break;
            }
            _tmpRect.width = 0;
          }
          if (_tmpRect.height > 0 && _tmpRect.width > 0) {
            var isRotated = this._determineRect(_tmpRect);
            var letterPositionX = letterInfo.x + _linesOffsetX[letterInfo.line];
            this.appendQuad(_comp, texture, _tmpRect, isRotated, letterPositionX - appx, py - appy, _bmfontScale);
          }
        }
        this._quadsUpdated(_comp);
        return ret;
      };
      _proto._determineRect = function _determineRect(tempRect) {
        var isRotated = _spriteFrame.isRotated();
        var originalSize = _spriteFrame._originalSize;
        var rect = _spriteFrame._rect;
        var offset = _spriteFrame._offset;
        var trimmedLeft = offset.x + (originalSize.width - rect.width) / 2;
        var trimmedTop = offset.y - (originalSize.height - rect.height) / 2;
        if (isRotated) {
          var originalX = tempRect.x;
          tempRect.x = rect.x + rect.height - tempRect.y - tempRect.height - trimmedTop;
          tempRect.y = originalX + rect.y - trimmedLeft;
          tempRect.y < 0 && (tempRect.height = tempRect.height + trimmedTop);
        } else {
          tempRect.x += rect.x - trimmedLeft;
          tempRect.y += rect.y + trimmedTop;
        }
        return isRotated;
      };
      _proto._computeAlignmentOffset = function _computeAlignmentOffset() {
        _linesOffsetX.length = 0;
        switch (_hAlign) {
         case macro.TextAlignment.LEFT:
          for (var i = 0; i < _numberOfLines; ++i) _linesOffsetX.push(0);
          break;

         case macro.TextAlignment.CENTER:
          for (var _i = 0, l = _linesWidth.length; _i < l; _i++) _linesOffsetX.push((_contentSize.width - _linesWidth[_i]) / 2);
          break;

         case macro.TextAlignment.RIGHT:
          for (var _i2 = 0, _l = _linesWidth.length; _i2 < _l; _i2++) _linesOffsetX.push(_contentSize.width - _linesWidth[_i2]);
        }
        _letterOffsetY = _contentSize.height;
        if (_vAlign !== macro.VerticalTextAlignment.TOP) {
          var blank = _contentSize.height - _textDesiredHeight + _lineHeight * this._getFontScale() - _originFontSize * _bmfontScale;
          _vAlign === macro.VerticalTextAlignment.BOTTOM ? _letterOffsetY -= blank : _letterOffsetY -= blank / 2;
        }
      };
      _proto._setupBMFontOverflowMetrics = function _setupBMFontOverflowMetrics() {
        var newWidth = _contentSize.width, newHeight = _contentSize.height;
        _overflow === Overflow.RESIZE_HEIGHT && (newHeight = 0);
        if (_overflow === Overflow.NONE) {
          newWidth = 0;
          newHeight = 0;
        }
        _labelWidth = newWidth;
        _labelHeight = newHeight;
        _maxLineWidth = newWidth;
      };
      _proto.updateWorldVerts = function updateWorldVerts() {};
      _proto.appendQuad = function appendQuad(comp, texture, rect, rotated, x, y, scale) {};
      _proto._quadsUpdated = function _quadsUpdated(comp) {};
      _proto._reserveQuads = function _reserveQuads() {};
      return BmfontAssembler;
    })(_assembler2d["default"]);
    exports["default"] = BmfontAssembler;
    module.exports = exports["default"];
  }), {
    "../../../components/CCLabel": 92,
    "../../../platform/CCMacro": 146,
    "../../../utils/text-utils": 217,
    "../../assembler-2d": 166,
    "../utils": 177
  } ],
  174: [ (function(require, module, exports) {
    "use strict";
    function LabelFrame() {
      this._rect = null;
      this.uv = [];
      this._texture = null;
      this._original = null;
    }
    LabelFrame.prototype = {
      constructor: LabelFrame,
      getRect: function getRect() {
        return cc.rect(this._rect);
      },
      setRect: function setRect(rect) {
        this._rect = rect;
        this._texture && this._calculateUV();
      },
      _setDynamicAtlasFrame: function _setDynamicAtlasFrame(frame) {
        if (!frame) return;
        this._original = {
          _texture: this._texture,
          _x: this._rect.x,
          _y: this._rect.y
        };
        this._texture = frame.texture;
        this._rect.x = frame.x;
        this._rect.y = frame.y;
        this._calculateUV();
      },
      _resetDynamicAtlasFrame: function _resetDynamicAtlasFrame() {
        if (!this._original) return;
        this._rect.x = this._original._x;
        this._rect.y = this._original._y;
        this._texture = this._original._texture;
        this._original = null;
        this._calculateUV();
      },
      _refreshTexture: function _refreshTexture(texture) {
        this._texture = texture;
        this._rect = cc.rect(0, 0, texture.width, texture.height);
        this._calculateUV();
      },
      _calculateUV: function _calculateUV() {
        var rect = this._rect, texture = this._texture, uv = this.uv, texw = texture.width, texh = texture.height;
        var l = 0 === texw ? 0 : rect.x / texw;
        var r = 0 === texw ? 0 : (rect.x + rect.width) / texw;
        var b = 0 === texh ? 0 : (rect.y + rect.height) / texh;
        var t = 0 === texh ? 0 : rect.y / texh;
        uv[0] = l;
        uv[1] = b;
        uv[2] = r;
        uv[3] = b;
        uv[4] = l;
        uv[5] = t;
        uv[6] = r;
        uv[7] = t;
      }
    };
    module.exports = LabelFrame;
  }), {} ],
  175: [ (function(require, module, exports) {
    "use strict";
    exports.__esModule = true;
    exports["default"] = void 0;
    var _bmfont = _interopRequireDefault(require("../../webgl/assemblers/label/2d/bmfont"));
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }
    function _inheritsLoose(subClass, superClass) {
      subClass.prototype = Object.create(superClass.prototype);
      subClass.prototype.constructor = subClass;
      subClass.__proto__ = superClass;
    }
    var Label = require("../../../components/CCLabel");
    var LabelOutline = require("../../../components/CCLabelOutline");
    var textUtils = require("../../../utils/text-utils");
    var Component = require("../../../components/CCComponent");
    var RenderTexture = require("../../../assets/CCRenderTexture");
    var OUTLINE_SUPPORTED = cc.js.isChildClassOf(LabelOutline, Component);
    var getFontFamily = require("../utils").getFontFamily;
    var shareLabelInfo = require("../utils").shareLabelInfo;
    var FontLetterDefinition = cc.BitmapFont.FontLetterDefinition;
    var FontAtlas = cc.BitmapFont.FontAtlas;
    var WHITE = cc.Color.WHITE;
    var space = 0;
    var bleed = 2;
    var _invisibleAlpha = (1 / 255).toFixed(3);
    function LetterTexture(_char, labelInfo) {
      this._texture = null;
      this._labelInfo = labelInfo;
      this._char = _char;
      this._hash = null;
      this._data = null;
      this._canvas = null;
      this._context = null;
      this._width = 0;
      this._height = 0;
      this._offsetY = 0;
      this._hash = _char.charCodeAt(0) + labelInfo.hash;
    }
    LetterTexture.prototype = {
      constructor: LetterTexture,
      updateRenderData: function updateRenderData() {
        this._updateProperties();
        this._updateTexture();
      },
      _updateProperties: function _updateProperties() {
        this._texture = new cc.Texture2D();
        this._data = Label._canvasPool.get();
        this._canvas = this._data.canvas;
        this._context = this._data.context;
        this._context.font = this._labelInfo.fontDesc;
        var width = textUtils.safeMeasureText(this._context, this._char, this._labelInfo.fontDesc);
        var blank = 2 * this._labelInfo.margin + bleed;
        this._width = parseFloat(width.toFixed(2)) + blank;
        this._height = (1 + textUtils.BASELINE_RATIO) * this._labelInfo.fontSize + blank;
        this._offsetY = -this._labelInfo.fontSize * textUtils.BASELINE_RATIO / 2;
        this._canvas.width !== this._width && (this._canvas.width = this._width);
        this._canvas.height !== this._height && (this._canvas.height = this._height);
        this._texture.initWithElement(this._canvas);
      },
      _updateTexture: function _updateTexture() {
        var context = this._context;
        var labelInfo = this._labelInfo, width = this._canvas.width, height = this._canvas.height;
        var fontSize = this._labelInfo.fontSize;
        var startX = width / 2;
        var startY = height / 2 + fontSize * textUtils.MIDDLE_RATIO + fontSize * textUtils.BASELINE_OFFSET;
        var color = labelInfo.color;
        context.textAlign = "center";
        context.clearRect(0, 0, width, height);
        context.fillStyle = "rgba(" + color.r + ", " + color.g + ", " + color.b + ", " + _invisibleAlpha + ")";
        context.fillRect(0, 0, width, height);
        context.font = labelInfo.fontDesc;
        context.fillStyle = "rgba(" + color.r + ", " + color.g + ", " + color.b + ", 1)";
        if (labelInfo.isOutlined && labelInfo.margin > 0) {
          var strokeColor = labelInfo.out || WHITE;
          context.strokeStyle = "rgba(" + strokeColor.r + ", " + strokeColor.g + ", " + strokeColor.b + ", " + strokeColor.a / 255 + ")";
          context.lineWidth = 2 * labelInfo.margin;
          context.strokeText(this._char, startX, startY);
        }
        context.fillText(this._char, startX, startY);
        this._texture.handleLoadedTexture();
      },
      destroy: function destroy() {
        this._texture.destroy();
        this._texture = null;
        Label._canvasPool.put(this._data);
      }
    };
    function LetterAtlas(width, height) {
      var texture = new RenderTexture();
      texture.initWithSize(width, height);
      texture.update();
      this._fontDefDictionary = new FontAtlas(texture);
      this._x = space;
      this._y = space;
      this._nexty = space;
      this._width = width;
      this._height = height;
      cc.director.on(cc.Director.EVENT_BEFORE_SCENE_LAUNCH, this.beforeSceneLoad, this);
    }
    cc.js.mixin(LetterAtlas.prototype, {
      insertLetterTexture: function insertLetterTexture(letterTexture) {
        var texture = letterTexture._texture;
        var width = texture.width, height = texture.height;
        if (this._x + width + space > this._width) {
          this._x = space;
          this._y = this._nexty;
        }
        this._y + height > this._nexty && (this._nexty = this._y + height + space);
        if (this._nexty > this._height) return null;
        this._fontDefDictionary._texture.drawTextureAt(texture, this._x, this._y);
        this._dirty = true;
        var letter = new FontLetterDefinition();
        letter.u = this._x + bleed / 2;
        letter.v = this._y + bleed / 2;
        letter.texture = this._fontDefDictionary._texture;
        letter.valid = true;
        letter.w = letterTexture._width - bleed;
        letter.h = letterTexture._height - bleed;
        letter.xAdvance = letter.w;
        letter.offsetY = letterTexture._offsetY;
        this._x += width + space;
        this._fontDefDictionary.addLetterDefinitions(letterTexture._hash, letter);
        return letter;
      },
      update: function update() {
        if (!this._dirty) return;
        this._fontDefDictionary._texture.update();
        this._dirty = false;
      },
      reset: function reset() {
        this._x = space;
        this._y = space;
        this._nexty = space;
        var chars = this._fontDefDictionary._letterDefinitions;
        for (var i = 0, l = chars.length; i < l; i++) {
          var _char2 = chars[i];
          if (!_char2.isValid) continue;
          _char2.destroy();
        }
        this._fontDefDictionary.clear();
      },
      destroy: function destroy() {
        this.reset();
        this._fontDefDictionary._texture.destroy();
        this._fontDefDictionary._texture = null;
      },
      beforeSceneLoad: function beforeSceneLoad() {
        this.clearAllCache();
      },
      clearAllCache: function clearAllCache() {
        this.destroy();
        var texture = new RenderTexture();
        texture.initWithSize(this._width, this._height);
        texture.update();
        this._fontDefDictionary._texture = texture;
      },
      getLetter: function getLetter(key) {
        return this._fontDefDictionary._letterDefinitions[key];
      },
      getTexture: function getTexture() {
        return this._fontDefDictionary.getTexture();
      },
      getLetterDefinitionForChar: function getLetterDefinitionForChar(_char3, labelInfo) {
        var hash = _char3.charCodeAt(0) + labelInfo.hash;
        var letter = this._fontDefDictionary._letterDefinitions[hash];
        if (!letter) {
          var temp = new LetterTexture(_char3, labelInfo);
          temp.updateRenderData();
          letter = this.insertLetterTexture(temp);
          temp.destroy();
        }
        return letter;
      }
    });
    function computeHash(labelInfo) {
      var hashData = "";
      var color = labelInfo.color.toHEX();
      var out = "";
      labelInfo.isOutlined && labelInfo.margin > 0 && (out = out + labelInfo.margin + labelInfo.out.toHEX());
      return hashData + labelInfo.fontSize + labelInfo.fontFamily + color + out;
    }
    var _shareAtlas = null;
    var _atlasWidth = 2048;
    var _atlasHeight = 2048;
    var _isBold = false;
    var LetterFontAssembler = (function(_WebglBmfontAssembler) {
      _inheritsLoose(LetterFontAssembler, _WebglBmfontAssembler);
      function LetterFontAssembler() {
        return _WebglBmfontAssembler.apply(this, arguments) || this;
      }
      var _proto = LetterFontAssembler.prototype;
      _proto._getAssemblerData = function _getAssemblerData() {
        if (!_shareAtlas) {
          _shareAtlas = new LetterAtlas(_atlasWidth, _atlasHeight);
          cc.Label._shareAtlas = _shareAtlas;
        }
        return _shareAtlas.getTexture();
      };
      _proto._updateFontFamily = function _updateFontFamily(comp) {
        shareLabelInfo.fontAtlas = _shareAtlas;
        shareLabelInfo.fontFamily = getFontFamily(comp);
        var outline = OUTLINE_SUPPORTED && comp.getComponent(LabelOutline);
        if (outline && outline.enabled) {
          shareLabelInfo.isOutlined = true;
          shareLabelInfo.margin = outline.width;
          shareLabelInfo.out = outline.color.clone();
          shareLabelInfo.out.a = outline.color.a * comp.node.color.a / 255;
        } else {
          shareLabelInfo.isOutlined = false;
          shareLabelInfo.margin = 0;
        }
      };
      _proto._updateLabelInfo = function _updateLabelInfo(comp) {
        shareLabelInfo.fontDesc = this._getFontDesc();
        shareLabelInfo.color = comp.node.color;
        shareLabelInfo.hash = computeHash(shareLabelInfo);
      };
      _proto._getFontDesc = function _getFontDesc() {
        var fontDesc = shareLabelInfo.fontSize.toString() + "px ";
        fontDesc += shareLabelInfo.fontFamily;
        _isBold && (fontDesc = "bold " + fontDesc);
        return fontDesc;
      };
      _proto._computeHorizontalKerningForText = function _computeHorizontalKerningForText() {};
      _proto._determineRect = function _determineRect(tempRect) {
        return false;
      };
      return LetterFontAssembler;
    })(_bmfont["default"]);
    exports["default"] = LetterFontAssembler;
    module.exports = exports["default"];
  }), {
    "../../../assets/CCRenderTexture": 57,
    "../../../components/CCComponent": 90,
    "../../../components/CCLabel": 92,
    "../../../components/CCLabelOutline": void 0,
    "../../../utils/text-utils": 217,
    "../../webgl/assemblers/label/2d/bmfont": 182,
    "../utils": 177
  } ],
  176: [ (function(require, module, exports) {
    "use strict";
    exports.__esModule = true;
    exports["default"] = void 0;
    var _assembler2d = _interopRequireDefault(require("../../assembler-2d"));
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }
    function _inheritsLoose(subClass, superClass) {
      subClass.prototype = Object.create(superClass.prototype);
      subClass.prototype.constructor = subClass;
      subClass.__proto__ = superClass;
    }
    var textUtils = require("../../../utils/text-utils");
    var macro = require("../../../platform/CCMacro");
    var Label = require("../../../components/CCLabel");
    var LabelOutline = require("../../../components/CCLabelOutline");
    var LabelShadow = require("../../../components/CCLabelShadow");
    var Overflow = Label.Overflow;
    var deleteFromDynamicAtlas = require("../utils").deleteFromDynamicAtlas;
    var getFontFamily = require("../utils").getFontFamily;
    var MAX_SIZE = 2048;
    var _invisibleAlpha = (1 / 255).toFixed(3);
    var _context = null;
    var _canvas = null;
    var _texture = null;
    var _fontDesc = "";
    var _string = "";
    var _fontSize = 0;
    var _drawFontSize = 0;
    var _splitedStrings = [];
    var _canvasSize = cc.Size.ZERO;
    var _lineHeight = 0;
    var _hAlign = 0;
    var _vAlign = 0;
    var _color = null;
    var _fontFamily = "";
    var _overflow = Overflow.NONE;
    var _isWrapText = false;
    var _premultiply = false;
    var _outlineComp = null;
    var _outlineColor = cc.Color.WHITE;
    var _shadowComp = null;
    var _shadowColor = cc.Color.BLACK;
    var _canvasPadding = cc.rect();
    var _contentSizeExtend = cc.Size.ZERO;
    var _nodeContentSize = cc.Size.ZERO;
    var _enableBold = false;
    var _enableItalic = false;
    var _enableUnderline = false;
    var _underlineThickness = 0;
    var _drawUnderlinePos = cc.Vec2.ZERO;
    var _drawUnderlineWidth = 0;
    var _sharedLabelData;
    var Alignment = [ "left", "center", "right" ];
    var TTFAssembler = (function(_Assembler2D) {
      _inheritsLoose(TTFAssembler, _Assembler2D);
      function TTFAssembler() {
        return _Assembler2D.apply(this, arguments) || this;
      }
      var _proto = TTFAssembler.prototype;
      _proto._getAssemblerData = function _getAssemblerData() {
        _sharedLabelData = Label._canvasPool.get();
        _sharedLabelData.canvas.width = _sharedLabelData.canvas.height = 1;
        return _sharedLabelData;
      };
      _proto._resetAssemblerData = function _resetAssemblerData(assemblerData) {
        assemblerData && Label._canvasPool.put(assemblerData);
      };
      _proto.updateRenderData = function updateRenderData(comp) {
        _Assembler2D.prototype.updateRenderData.call(this, comp);
        if (!comp._vertsDirty) return;
        this._updateProperties(comp);
        this._calculateLabelFont();
        this._updateLabelDimensions();
        this._updateTexture(comp);
        this._calDynamicAtlas(comp);
        comp._actualFontSize = _fontSize;
        comp.node.setContentSize(_nodeContentSize);
        this.updateVerts(comp);
        comp._vertsDirty = false;
        _context = null;
        _canvas = null;
        _texture = null;
      };
      _proto.updateVerts = function updateVerts() {};
      _proto._updatePaddingRect = function _updatePaddingRect() {
        var top = 0, bottom = 0, left = 0, right = 0;
        var outlineWidth = 0;
        _contentSizeExtend.width = _contentSizeExtend.height = 0;
        if (_outlineComp) {
          outlineWidth = _outlineComp.width;
          top = bottom = left = right = outlineWidth;
          _contentSizeExtend.width = _contentSizeExtend.height = 2 * outlineWidth;
        }
        if (_shadowComp) {
          var shadowWidth = _shadowComp.blur + outlineWidth;
          left = Math.max(left, -_shadowComp._offset.x + shadowWidth);
          right = Math.max(right, _shadowComp._offset.x + shadowWidth);
          top = Math.max(top, _shadowComp._offset.y + shadowWidth);
          bottom = Math.max(bottom, -_shadowComp._offset.y + shadowWidth);
        }
        if (_enableItalic) {
          var offset = _drawFontSize * Math.tan(.20943951);
          right += offset;
          _contentSizeExtend.width += offset;
        }
        _canvasPadding.x = left;
        _canvasPadding.y = top;
        _canvasPadding.width = left + right;
        _canvasPadding.height = top + bottom;
      };
      _proto._updateProperties = function _updateProperties(comp) {
        var assemblerData = comp._assemblerData;
        _context = assemblerData.context;
        _canvas = assemblerData.canvas;
        _texture = comp._frame._original ? comp._frame._original._texture : comp._frame._texture;
        _string = comp.string.toString();
        _fontSize = comp._fontSize;
        _drawFontSize = _fontSize;
        _underlineThickness = comp.underlineHeight || _drawFontSize / 8;
        _overflow = comp.overflow;
        _canvasSize.width = comp.node.width;
        _canvasSize.height = comp.node.height;
        _nodeContentSize = comp.node.getContentSize();
        _lineHeight = comp._lineHeight;
        _hAlign = comp.horizontalAlign;
        _vAlign = comp.verticalAlign;
        _color = comp.node.color;
        _enableBold = comp.enableBold;
        _enableItalic = comp.enableItalic;
        _enableUnderline = comp.enableUnderline;
        _fontFamily = getFontFamily(comp);
        _premultiply = comp.srcBlendFactor === cc.macro.BlendFactor.ONE;
        false;
        _isWrapText = _overflow !== Overflow.NONE && (_overflow === Overflow.RESIZE_HEIGHT || comp.enableWrapText);
        _outlineComp = LabelOutline && comp.getComponent(LabelOutline);
        _outlineComp = _outlineComp && _outlineComp.enabled && _outlineComp.width > 0 ? _outlineComp : null;
        _outlineComp && _outlineColor.set(_outlineComp.color);
        _shadowComp = LabelShadow && comp.getComponent(LabelShadow);
        _shadowComp = _shadowComp && _shadowComp.enabled ? _shadowComp : null;
        if (_shadowComp) {
          _shadowColor.set(_shadowComp.color);
          _shadowColor.a = _shadowColor.a * comp.node.color.a / 255;
        }
        this._updatePaddingRect();
      };
      _proto._calculateFillTextStartPosition = function _calculateFillTextStartPosition() {
        var labelX = 0;
        _hAlign === macro.TextAlignment.RIGHT ? labelX = _canvasSize.width - _canvasPadding.width : _hAlign === macro.TextAlignment.CENTER && (labelX = (_canvasSize.width - _canvasPadding.width) / 2);
        var lineHeight = this._getLineHeight();
        var drawStartY = lineHeight * (_splitedStrings.length - 1);
        var firstLinelabelY = _fontSize * (1 - textUtils.BASELINE_RATIO / 2);
        if (_vAlign !== macro.VerticalTextAlignment.TOP) {
          var blank = drawStartY + _canvasPadding.height + _fontSize - _canvasSize.height;
          if (_vAlign === macro.VerticalTextAlignment.BOTTOM) {
            blank += textUtils.BASELINE_RATIO / 2 * _fontSize;
            firstLinelabelY -= blank;
          } else firstLinelabelY -= blank / 2;
        }
        firstLinelabelY += textUtils.BASELINE_OFFSET * _fontSize;
        return cc.v2(labelX + _canvasPadding.x, firstLinelabelY + _canvasPadding.y);
      };
      _proto._setupOutline = function _setupOutline() {
        _context.strokeStyle = "rgba(" + _outlineColor.r + ", " + _outlineColor.g + ", " + _outlineColor.b + ", " + _outlineColor.a / 255 + ")";
        _context.lineWidth = 2 * _outlineComp.width;
      };
      _proto._setupShadow = function _setupShadow() {
        _context.shadowColor = "rgba(" + _shadowColor.r + ", " + _shadowColor.g + ", " + _shadowColor.b + ", " + _shadowColor.a / 255 + ")";
        _context.shadowBlur = _shadowComp.blur;
        _context.shadowOffsetX = _shadowComp.offset.x;
        _context.shadowOffsetY = -_shadowComp.offset.y;
      };
      _proto._drawTextEffect = function _drawTextEffect(startPosition, lineHeight) {
        if (!_shadowComp && !_outlineComp && !_enableUnderline) return;
        var isMultiple = _splitedStrings.length > 1 && _shadowComp;
        var measureText = this._measureText(_context, _fontDesc);
        var drawTextPosX = 0, drawTextPosY = 0;
        _shadowComp && this._setupShadow();
        _outlineComp && this._setupOutline();
        for (var i = 0; i < _splitedStrings.length; ++i) {
          drawTextPosX = startPosition.x;
          drawTextPosY = startPosition.y + i * lineHeight;
          if (isMultiple) {
            _outlineComp && _context.strokeText(_splitedStrings[i], drawTextPosX, drawTextPosY);
            _context.fillText(_splitedStrings[i], drawTextPosX, drawTextPosY);
          }
          if (_enableUnderline) {
            _drawUnderlineWidth = measureText(_splitedStrings[i]);
            _hAlign === macro.TextAlignment.RIGHT ? _drawUnderlinePos.x = startPosition.x - _drawUnderlineWidth : _hAlign === macro.TextAlignment.CENTER ? _drawUnderlinePos.x = startPosition.x - _drawUnderlineWidth / 2 : _drawUnderlinePos.x = startPosition.x;
            _drawUnderlinePos.y = drawTextPosY + _drawFontSize / 8;
            _context.fillRect(_drawUnderlinePos.x, _drawUnderlinePos.y, _drawUnderlineWidth, _underlineThickness);
          }
        }
        isMultiple && (_context.shadowColor = "transparent");
      };
      _proto._updateTexture = function _updateTexture() {
        _context.clearRect(0, 0, _canvas.width, _canvas.height);
        if (_premultiply) _context.fillStyle = "rgba(" + _color.r + ", " + _color.g + ", " + _color.b + ", " + _color.a / 255 + ")"; else {
          var _fillColor = _outlineComp ? _outlineColor : _color;
          _context.fillStyle = "rgba(" + _fillColor.r + ", " + _fillColor.g + ", " + _fillColor.b + ", " + _invisibleAlpha + ")";
          _context.fillRect(0, 0, _canvas.width, _canvas.height);
          _context.fillStyle = "rgba(" + _color.r + ", " + _color.g + ", " + _color.b + ", 1)";
        }
        var startPosition = this._calculateFillTextStartPosition();
        var lineHeight = this._getLineHeight();
        var drawTextPosX = startPosition.x, drawTextPosY = 0;
        this._drawTextEffect(startPosition, lineHeight);
        for (var i = 0; i < _splitedStrings.length; ++i) {
          drawTextPosY = startPosition.y + i * lineHeight;
          _outlineComp && _context.strokeText(_splitedStrings[i], drawTextPosX, drawTextPosY);
          _context.fillText(_splitedStrings[i], drawTextPosX, drawTextPosY);
        }
        _shadowComp && (_context.shadowColor = "transparent");
        _texture.handleLoadedTexture();
      };
      _proto._calDynamicAtlas = function _calDynamicAtlas(comp) {
        if (comp.cacheMode !== Label.CacheMode.BITMAP) return;
        var frame = comp._frame;
        deleteFromDynamicAtlas(comp, frame);
        frame._original || frame.setRect(cc.rect(0, 0, _canvas.width, _canvas.height));
        this.packToDynamicAtlas(comp, frame);
      };
      _proto._updateLabelDimensions = function _updateLabelDimensions() {
        _canvasSize.width = Math.min(_canvasSize.width, MAX_SIZE);
        _canvasSize.height = Math.min(_canvasSize.height, MAX_SIZE);
        var recreate = false;
        if (_canvas.width !== _canvasSize.width) {
          _canvas.width = _canvasSize.width;
          recreate = true;
        }
        if (_canvas.height !== _canvasSize.height) {
          _canvas.height = _canvasSize.height;
          recreate = true;
        }
        recreate && (_context.font = _fontDesc);
        _context.textAlign = Alignment[_hAlign];
      };
      _proto._getFontDesc = function _getFontDesc() {
        var fontDesc = _fontSize.toString() + "px ";
        fontDesc += _fontFamily;
        _enableBold && (fontDesc = "bold " + fontDesc);
        _enableItalic && (fontDesc = "italic " + fontDesc);
        return fontDesc;
      };
      _proto._getLineHeight = function _getLineHeight() {
        var nodeSpacingY = _lineHeight;
        nodeSpacingY = 0 === nodeSpacingY ? _fontSize : nodeSpacingY * _fontSize / _drawFontSize;
        return 0 | nodeSpacingY;
      };
      _proto._calculateParagraphLength = function _calculateParagraphLength(paragraphedStrings, ctx) {
        var paragraphLength = [];
        for (var i = 0; i < paragraphedStrings.length; ++i) {
          var width = textUtils.safeMeasureText(ctx, paragraphedStrings[i], _fontDesc);
          paragraphLength.push(width);
        }
        return paragraphLength;
      };
      _proto._measureText = function _measureText(ctx, fontDesc) {
        return function(string) {
          return textUtils.safeMeasureText(ctx, string, fontDesc);
        };
      };
      _proto._calculateShrinkFont = function _calculateShrinkFont(paragraphedStrings) {
        var paragraphLength = this._calculateParagraphLength(paragraphedStrings, _context);
        var i = 0;
        var totalHeight = 0;
        var maxLength = 0;
        if (_isWrapText) {
          var canvasWidthNoMargin = _nodeContentSize.width;
          var canvasHeightNoMargin = _nodeContentSize.height;
          if (canvasWidthNoMargin < 0 || canvasHeightNoMargin < 0) return;
          totalHeight = canvasHeightNoMargin + 1;
          var actualFontSize = _fontSize + 1;
          var textFragment = "";
          var left = 0, right = 0 | actualFontSize, mid = 0;
          while (left < right) {
            mid = left + right + 1 >> 1;
            if (mid <= 0) {
              cc.logID(4003);
              break;
            }
            _fontSize = mid;
            _fontDesc = this._getFontDesc();
            _context.font = _fontDesc;
            var lineHeight = this._getLineHeight();
            totalHeight = 0;
            for (i = 0; i < paragraphedStrings.length; ++i) {
              var allWidth = textUtils.safeMeasureText(_context, paragraphedStrings[i], _fontDesc);
              textFragment = textUtils.fragmentText(paragraphedStrings[i], allWidth, canvasWidthNoMargin, this._measureText(_context, _fontDesc));
              totalHeight += textFragment.length * lineHeight;
            }
            totalHeight > canvasHeightNoMargin ? right = mid - 1 : left = mid;
          }
          if (0 === left) cc.logID(4003); else {
            _fontSize = left;
            _fontDesc = this._getFontDesc();
            _context.font = _fontDesc;
          }
        } else {
          totalHeight = paragraphedStrings.length * this._getLineHeight();
          for (i = 0; i < paragraphedStrings.length; ++i) maxLength < paragraphLength[i] && (maxLength = paragraphLength[i]);
          var scaleX = (_canvasSize.width - _canvasPadding.width) / maxLength;
          var scaleY = _canvasSize.height / totalHeight;
          _fontSize = _drawFontSize * Math.min(1, scaleX, scaleY) | 0;
          _fontDesc = this._getFontDesc();
          _context.font = _fontDesc;
        }
      };
      _proto._calculateWrapText = function _calculateWrapText(paragraphedStrings) {
        if (!_isWrapText) return;
        _splitedStrings = [];
        var canvasWidthNoMargin = _nodeContentSize.width;
        for (var i = 0; i < paragraphedStrings.length; ++i) {
          var allWidth = textUtils.safeMeasureText(_context, paragraphedStrings[i], _fontDesc);
          var textFragment = textUtils.fragmentText(paragraphedStrings[i], allWidth, canvasWidthNoMargin, this._measureText(_context, _fontDesc));
          _splitedStrings = _splitedStrings.concat(textFragment);
        }
      };
      _proto._calculateLabelFont = function _calculateLabelFont() {
        var paragraphedStrings = _string.split("\n");
        _splitedStrings = paragraphedStrings;
        _fontDesc = this._getFontDesc();
        _context.font = _fontDesc;
        switch (_overflow) {
         case Overflow.NONE:
          var canvasSizeX = 0;
          var canvasSizeY = 0;
          for (var i = 0; i < paragraphedStrings.length; ++i) {
            var paraLength = textUtils.safeMeasureText(_context, paragraphedStrings[i], _fontDesc);
            canvasSizeX = canvasSizeX > paraLength ? canvasSizeX : paraLength;
          }
          canvasSizeY = (_splitedStrings.length + textUtils.BASELINE_RATIO) * this._getLineHeight();
          var rawWidth = parseFloat(canvasSizeX.toFixed(2));
          var rawHeight = parseFloat(canvasSizeY.toFixed(2));
          _canvasSize.width = rawWidth + _canvasPadding.width;
          _canvasSize.height = rawHeight + _canvasPadding.height;
          _nodeContentSize.width = rawWidth + _contentSizeExtend.width;
          _nodeContentSize.height = rawHeight + _contentSizeExtend.height;
          break;

         case Overflow.SHRINK:
          this._calculateShrinkFont(paragraphedStrings);
          this._calculateWrapText(paragraphedStrings);
          break;

         case Overflow.CLAMP:
          this._calculateWrapText(paragraphedStrings);
          break;

         case Overflow.RESIZE_HEIGHT:
          this._calculateWrapText(paragraphedStrings);
          var _rawHeight = (_splitedStrings.length + textUtils.BASELINE_RATIO) * this._getLineHeight();
          _canvasSize.height = _rawHeight + _canvasPadding.height;
          _nodeContentSize.height = _rawHeight + _contentSizeExtend.height;
        }
      };
      return TTFAssembler;
    })(_assembler2d["default"]);
    exports["default"] = TTFAssembler;
    module.exports = exports["default"];
  }), {
    "../../../components/CCLabel": 92,
    "../../../components/CCLabelOutline": void 0,
    "../../../components/CCLabelShadow": void 0,
    "../../../platform/CCMacro": 146,
    "../../../utils/text-utils": 217,
    "../../assembler-2d": 166,
    "../utils": 177
  } ],
  177: [ (function(require, module, exports) {
    "use strict";
    var dynamicAtlasManager = require("./dynamic-atlas/manager");
    var WHITE = cc.Color.WHITE;
    var shareLabelInfo = {
      fontAtlas: null,
      fontSize: 0,
      lineHeight: 0,
      hAlign: 0,
      vAlign: 0,
      hash: "",
      fontFamily: "",
      fontDesc: "Arial",
      color: WHITE,
      isOutlined: false,
      out: WHITE,
      margin: 0
    };
    module.exports = {
      deleteFromDynamicAtlas: function deleteFromDynamicAtlas(comp, frame) {
        if (frame && true && frame._original && dynamicAtlasManager) {
          dynamicAtlasManager.deleteAtlasSpriteFrame(frame);
          frame._resetDynamicAtlasFrame();
        }
      },
      getFontFamily: function getFontFamily(comp) {
        if (comp.useSystemFont) return comp.fontFamily || "Arial";
        if (comp.font) {
          if (comp.font._nativeAsset) return comp.font._nativeAsset;
          cc.assetManager.postLoadNative(comp.font, (function(err) {
            comp.setVertsDirty();
          }));
          return "Arial";
        }
        return "Arial";
      },
      shareLabelInfo: shareLabelInfo
    };
  }), {
    "./dynamic-atlas/manager": void 0
  } ],
  178: [ (function(require, module, exports) {
    "use strict";
    cc.Graphics.earcut = module.exports = earcut;
    function earcut(data, holeIndices, dim) {
      dim = dim || 2;
      var hasHoles = holeIndices && holeIndices.length, outerLen = hasHoles ? holeIndices[0] * dim : data.length, outerNode = linkedList(data, 0, outerLen, dim, true), triangles = [];
      if (!outerNode) return triangles;
      var minX, minY, maxX, maxY, x, y, size;
      hasHoles && (outerNode = eliminateHoles(data, holeIndices, outerNode, dim));
      if (data.length > 80 * dim) {
        minX = maxX = data[0];
        minY = maxY = data[1];
        for (var i = dim; i < outerLen; i += dim) {
          x = data[i];
          y = data[i + 1];
          x < minX && (minX = x);
          y < minY && (minY = y);
          x > maxX && (maxX = x);
          y > maxY && (maxY = y);
        }
        size = Math.max(maxX - minX, maxY - minY);
      }
      earcutLinked(outerNode, triangles, dim, minX, minY, size);
      return triangles;
    }
    function linkedList(data, start, end, dim, clockwise) {
      var i, last;
      if (clockwise === signedArea(data, start, end, dim) > 0) for (i = start; i < end; i += dim) last = insertNode(i, data[i], data[i + 1], last); else for (i = end - dim; i >= start; i -= dim) last = insertNode(i, data[i], data[i + 1], last);
      if (last && equals(last, last.next)) {
        removeNode(last);
        last = last.next;
      }
      return last;
    }
    function filterPoints(start, end) {
      if (!start) return start;
      end || (end = start);
      var p = start, again;
      do {
        again = false;
        if (p.steiner || !equals(p, p.next) && 0 !== area(p.prev, p, p.next)) p = p.next; else {
          removeNode(p);
          p = end = p.prev;
          if (p === p.next) return null;
          again = true;
        }
      } while (again || p !== end);
      return end;
    }
    function earcutLinked(ear, triangles, dim, minX, minY, size, pass) {
      if (!ear) return;
      !pass && size && indexCurve(ear, minX, minY, size);
      var stop = ear, prev, next;
      while (ear.prev !== ear.next) {
        prev = ear.prev;
        next = ear.next;
        if (size ? isEarHashed(ear, minX, minY, size) : isEar(ear)) {
          triangles.push(prev.i / dim);
          triangles.push(ear.i / dim);
          triangles.push(next.i / dim);
          removeNode(ear);
          ear = next.next;
          stop = next.next;
          continue;
        }
        ear = next;
        if (ear === stop) {
          if (pass) if (1 === pass) {
            ear = cureLocalIntersections(ear, triangles, dim);
            earcutLinked(ear, triangles, dim, minX, minY, size, 2);
          } else 2 === pass && splitEarcut(ear, triangles, dim, minX, minY, size); else earcutLinked(filterPoints(ear), triangles, dim, minX, minY, size, 1);
          break;
        }
      }
    }
    function isEar(ear) {
      var a = ear.prev, b = ear, c = ear.next;
      if (area(a, b, c) >= 0) return false;
      var p = ear.next.next;
      while (p !== ear.prev) {
        if (pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) && area(p.prev, p, p.next) >= 0) return false;
        p = p.next;
      }
      return true;
    }
    function isEarHashed(ear, minX, minY, size) {
      var a = ear.prev, b = ear, c = ear.next;
      if (area(a, b, c) >= 0) return false;
      var minTX = a.x < b.x ? a.x < c.x ? a.x : c.x : b.x < c.x ? b.x : c.x, minTY = a.y < b.y ? a.y < c.y ? a.y : c.y : b.y < c.y ? b.y : c.y, maxTX = a.x > b.x ? a.x > c.x ? a.x : c.x : b.x > c.x ? b.x : c.x, maxTY = a.y > b.y ? a.y > c.y ? a.y : c.y : b.y > c.y ? b.y : c.y;
      var minZ = zOrder(minTX, minTY, minX, minY, size), maxZ = zOrder(maxTX, maxTY, minX, minY, size);
      var p = ear.nextZ;
      while (p && p.z <= maxZ) {
        if (p !== ear.prev && p !== ear.next && pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) && area(p.prev, p, p.next) >= 0) return false;
        p = p.nextZ;
      }
      p = ear.prevZ;
      while (p && p.z >= minZ) {
        if (p !== ear.prev && p !== ear.next && pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) && area(p.prev, p, p.next) >= 0) return false;
        p = p.prevZ;
      }
      return true;
    }
    function cureLocalIntersections(start, triangles, dim) {
      var p = start;
      do {
        var a = p.prev, b = p.next.next;
        if (!equals(a, b) && intersects(a, p, p.next, b) && locallyInside(a, b) && locallyInside(b, a)) {
          triangles.push(a.i / dim);
          triangles.push(p.i / dim);
          triangles.push(b.i / dim);
          removeNode(p);
          removeNode(p.next);
          p = start = b;
        }
        p = p.next;
      } while (p !== start);
      return p;
    }
    function splitEarcut(start, triangles, dim, minX, minY, size) {
      var a = start;
      do {
        var b = a.next.next;
        while (b !== a.prev) {
          if (a.i !== b.i && isValidDiagonal(a, b)) {
            var c = splitPolygon(a, b);
            a = filterPoints(a, a.next);
            c = filterPoints(c, c.next);
            earcutLinked(a, triangles, dim, minX, minY, size);
            earcutLinked(c, triangles, dim, minX, minY, size);
            return;
          }
          b = b.next;
        }
        a = a.next;
      } while (a !== start);
    }
    function eliminateHoles(data, holeIndices, outerNode, dim) {
      var queue = [], i, len, start, end, list;
      for (i = 0, len = holeIndices.length; i < len; i++) {
        start = holeIndices[i] * dim;
        end = i < len - 1 ? holeIndices[i + 1] * dim : data.length;
        list = linkedList(data, start, end, dim, false);
        list === list.next && (list.steiner = true);
        queue.push(getLeftmost(list));
      }
      queue.sort(compareX);
      for (i = 0; i < queue.length; i++) {
        eliminateHole(queue[i], outerNode);
        outerNode = filterPoints(outerNode, outerNode.next);
      }
      return outerNode;
    }
    function compareX(a, b) {
      return a.x - b.x;
    }
    function eliminateHole(hole, outerNode) {
      outerNode = findHoleBridge(hole, outerNode);
      if (outerNode) {
        var b = splitPolygon(outerNode, hole);
        filterPoints(b, b.next);
      }
    }
    function findHoleBridge(hole, outerNode) {
      var p = outerNode, hx = hole.x, hy = hole.y, qx = -Infinity, m;
      do {
        if (hy <= p.y && hy >= p.next.y) {
          var x = p.x + (hy - p.y) * (p.next.x - p.x) / (p.next.y - p.y);
          if (x <= hx && x > qx) {
            qx = x;
            if (x === hx) {
              if (hy === p.y) return p;
              if (hy === p.next.y) return p.next;
            }
            m = p.x < p.next.x ? p : p.next;
          }
        }
        p = p.next;
      } while (p !== outerNode);
      if (!m) return null;
      if (hx === qx) return m.prev;
      var stop = m, mx = m.x, my = m.y, tanMin = Infinity, tan;
      p = m.next;
      while (p !== stop) {
        if (hx >= p.x && p.x >= mx && pointInTriangle(hy < my ? hx : qx, hy, mx, my, hy < my ? qx : hx, hy, p.x, p.y)) {
          tan = Math.abs(hy - p.y) / (hx - p.x);
          if ((tan < tanMin || tan === tanMin && p.x > m.x) && locallyInside(p, hole)) {
            m = p;
            tanMin = tan;
          }
        }
        p = p.next;
      }
      return m;
    }
    function indexCurve(start, minX, minY, size) {
      var p = start;
      do {
        null === p.z && (p.z = zOrder(p.x, p.y, minX, minY, size));
        p.prevZ = p.prev;
        p.nextZ = p.next;
        p = p.next;
      } while (p !== start);
      p.prevZ.nextZ = null;
      p.prevZ = null;
      sortLinked(p);
    }
    function sortLinked(list) {
      var i, p, q, e, tail, numMerges, pSize, qSize, inSize = 1;
      do {
        p = list;
        list = null;
        tail = null;
        numMerges = 0;
        while (p) {
          numMerges++;
          q = p;
          pSize = 0;
          for (i = 0; i < inSize; i++) {
            pSize++;
            q = q.nextZ;
            if (!q) break;
          }
          qSize = inSize;
          while (pSize > 0 || qSize > 0 && q) {
            if (0 === pSize) {
              e = q;
              q = q.nextZ;
              qSize--;
            } else if (0 !== qSize && q) if (p.z <= q.z) {
              e = p;
              p = p.nextZ;
              pSize--;
            } else {
              e = q;
              q = q.nextZ;
              qSize--;
            } else {
              e = p;
              p = p.nextZ;
              pSize--;
            }
            tail ? tail.nextZ = e : list = e;
            e.prevZ = tail;
            tail = e;
          }
          p = q;
        }
        tail.nextZ = null;
        inSize *= 2;
      } while (numMerges > 1);
      return list;
    }
    function zOrder(x, y, minX, minY, size) {
      x = 32767 * (x - minX) / size;
      y = 32767 * (y - minY) / size;
      x = 16711935 & (x | x << 8);
      x = 252645135 & (x | x << 4);
      x = 858993459 & (x | x << 2);
      x = 1431655765 & (x | x << 1);
      y = 16711935 & (y | y << 8);
      y = 252645135 & (y | y << 4);
      y = 858993459 & (y | y << 2);
      y = 1431655765 & (y | y << 1);
      return x | y << 1;
    }
    function getLeftmost(start) {
      var p = start, leftmost = start;
      do {
        p.x < leftmost.x && (leftmost = p);
        p = p.next;
      } while (p !== start);
      return leftmost;
    }
    function pointInTriangle(ax, ay, bx, by, cx, cy, px, py) {
      return (cx - px) * (ay - py) - (ax - px) * (cy - py) >= 0 && (ax - px) * (by - py) - (bx - px) * (ay - py) >= 0 && (bx - px) * (cy - py) - (cx - px) * (by - py) >= 0;
    }
    function isValidDiagonal(a, b) {
      return a.next.i !== b.i && a.prev.i !== b.i && !intersectsPolygon(a, b) && locallyInside(a, b) && locallyInside(b, a) && middleInside(a, b);
    }
    function area(p, q, r) {
      return (q.y - p.y) * (r.x - q.x) - (q.x - p.x) * (r.y - q.y);
    }
    function equals(p1, p2) {
      return p1.x === p2.x && p1.y === p2.y;
    }
    function intersects(p1, q1, p2, q2) {
      if (equals(p1, q1) && equals(p2, q2) || equals(p1, q2) && equals(p2, q1)) return true;
      return area(p1, q1, p2) > 0 !== area(p1, q1, q2) > 0 && area(p2, q2, p1) > 0 !== area(p2, q2, q1) > 0;
    }
    function intersectsPolygon(a, b) {
      var p = a;
      do {
        if (p.i !== a.i && p.next.i !== a.i && p.i !== b.i && p.next.i !== b.i && intersects(p, p.next, a, b)) return true;
        p = p.next;
      } while (p !== a);
      return false;
    }
    function locallyInside(a, b) {
      return area(a.prev, a, a.next) < 0 ? area(a, b, a.next) >= 0 && area(a, a.prev, b) >= 0 : area(a, b, a.prev) < 0 || area(a, a.next, b) < 0;
    }
    function middleInside(a, b) {
      var p = a, inside = false, px = (a.x + b.x) / 2, py = (a.y + b.y) / 2;
      do {
        p.y > py !== p.next.y > py && px < (p.next.x - p.x) * (py - p.y) / (p.next.y - p.y) + p.x && (inside = !inside);
        p = p.next;
      } while (p !== a);
      return inside;
    }
    function splitPolygon(a, b) {
      var a2 = new Node(a.i, a.x, a.y), b2 = new Node(b.i, b.x, b.y), an = a.next, bp = b.prev;
      a.next = b;
      b.prev = a;
      a2.next = an;
      an.prev = a2;
      b2.next = a2;
      a2.prev = b2;
      bp.next = b2;
      b2.prev = bp;
      return b2;
    }
    function insertNode(i, x, y, last) {
      var p = new Node(i, x, y);
      if (last) {
        p.next = last.next;
        p.prev = last;
        last.next.prev = p;
        last.next = p;
      } else {
        p.prev = p;
        p.next = p;
      }
      return p;
    }
    function removeNode(p) {
      p.next.prev = p.prev;
      p.prev.next = p.next;
      p.prevZ && (p.prevZ.nextZ = p.nextZ);
      p.nextZ && (p.nextZ.prevZ = p.prevZ);
    }
    function Node(i, x, y) {
      this.i = i;
      this.x = x;
      this.y = y;
      this.prev = null;
      this.next = null;
      this.z = null;
      this.prevZ = null;
      this.nextZ = null;
      this.steiner = false;
    }
    earcut.deviation = function(data, holeIndices, dim, triangles) {
      var hasHoles = holeIndices && holeIndices.length;
      var outerLen = hasHoles ? holeIndices[0] * dim : data.length;
      var polygonArea = Math.abs(signedArea(data, 0, outerLen, dim));
      if (hasHoles) for (var i = 0, len = holeIndices.length; i < len; i++) {
        var start = holeIndices[i] * dim;
        var end = i < len - 1 ? holeIndices[i + 1] * dim : data.length;
        polygonArea -= Math.abs(signedArea(data, start, end, dim));
      }
      var trianglesArea = 0;
      for (i = 0; i < triangles.length; i += 3) {
        var a = triangles[i] * dim;
        var b = triangles[i + 1] * dim;
        var c = triangles[i + 2] * dim;
        trianglesArea += Math.abs((data[a] - data[c]) * (data[b + 1] - data[a + 1]) - (data[a] - data[b]) * (data[c + 1] - data[a + 1]));
      }
      return 0 === polygonArea && 0 === trianglesArea ? 0 : Math.abs((trianglesArea - polygonArea) / polygonArea);
    };
    function signedArea(data, start, end, dim) {
      var sum = 0;
      for (var i = start, j = end - dim; i < end; i += dim) {
        sum += (data[j] - data[i]) * (data[i + 1] + data[j + 1]);
        j = i;
      }
      return sum;
    }
    earcut.flatten = function(data) {
      var dim = data[0][0].length, result = {
        vertices: [],
        holes: [],
        dimensions: dim
      }, holeIndex = 0;
      for (var i = 0; i < data.length; i++) {
        for (var j = 0; j < data[i].length; j++) for (var d = 0; d < dim; d++) result.vertices.push(data[i][j][d]);
        if (i > 0) {
          holeIndex += data[i - 1].length;
          result.holes.push(holeIndex);
        }
      }
      return result;
    };
  }), {} ],
  179: [ (function(require, module, exports) {
    "use strict";
    var Helper = require("../../../../graphics/helper");
    var PointFlags = require("../../../../graphics/types").PointFlags;
    var Point = cc.Graphics.Point = cc.Class({
      name: "cc.GraphicsPoint",
      extends: cc.Vec2,
      ctor: function ctor(x, y) {
        this.reset();
      },
      reset: function reset() {
        this.dx = 0;
        this.dy = 0;
        this.dmx = 0;
        this.dmy = 0;
        this.flags = 0;
        this.len = 0;
      }
    });
    function Path() {
      this.reset();
    }
    cc.js.mixin(Path.prototype, {
      reset: function reset() {
        this.closed = false;
        this.nbevel = 0;
        this.complex = true;
        this.points ? this.points.length = 0 : this.points = [];
      }
    });
    function Impl(graphics) {
      this._tessTol = .25;
      this._distTol = .01;
      this._updatePathOffset = false;
      this._paths = null;
      this._pathLength = 0;
      this._pathOffset = 0;
      this._points = null;
      this._pointsOffset = 0;
      this._commandx = 0;
      this._commandy = 0;
      this._paths = [];
      this._points = [];
    }
    cc.js.mixin(Impl.prototype, {
      moveTo: function moveTo(x, y) {
        if (this._updatePathOffset) {
          this._pathOffset = this._pathLength;
          this._updatePathOffset = false;
        }
        this._addPath();
        this._addPoint(x, y, PointFlags.PT_CORNER);
        this._commandx = x;
        this._commandy = y;
      },
      lineTo: function lineTo(x, y) {
        this._addPoint(x, y, PointFlags.PT_CORNER);
        this._commandx = x;
        this._commandy = y;
      },
      bezierCurveTo: function bezierCurveTo(c1x, c1y, c2x, c2y, x, y) {
        var path = this._curPath;
        var last = path.points[path.points.length - 1];
        if (last.x === c1x && last.y === c1y && c2x === x && c2y === y) {
          this.lineTo(x, y);
          return;
        }
        Helper.tesselateBezier(this, last.x, last.y, c1x, c1y, c2x, c2y, x, y, 0, PointFlags.PT_CORNER);
        this._commandx = x;
        this._commandy = y;
      },
      quadraticCurveTo: function quadraticCurveTo(cx, cy, x, y) {
        var x0 = this._commandx;
        var y0 = this._commandy;
        this.bezierCurveTo(x0 + 2 / 3 * (cx - x0), y0 + 2 / 3 * (cy - y0), x + 2 / 3 * (cx - x), y + 2 / 3 * (cy - y), x, y);
      },
      arc: function arc(cx, cy, r, startAngle, endAngle, counterclockwise) {
        Helper.arc(this, cx, cy, r, startAngle, endAngle, counterclockwise);
      },
      ellipse: function ellipse(cx, cy, rx, ry) {
        Helper.ellipse(this, cx, cy, rx, ry);
        this._curPath.complex = false;
      },
      circle: function circle(cx, cy, r) {
        Helper.ellipse(this, cx, cy, r, r);
        this._curPath.complex = false;
      },
      rect: function rect(x, y, w, h) {
        this.moveTo(x, y);
        this.lineTo(x, y + h);
        this.lineTo(x + w, y + h);
        this.lineTo(x + w, y);
        this.close();
        this._curPath.complex = false;
      },
      roundRect: function roundRect(x, y, w, h, r) {
        Helper.roundRect(this, x, y, w, h, r);
        this._curPath.complex = false;
      },
      clear: function clear(clean) {
        this._pathLength = 0;
        this._pathOffset = 0;
        this._pointsOffset = 0;
        this._curPath = null;
        if (clean) {
          this._paths.length = 0;
          this._points.length = 0;
        }
      },
      close: function close() {
        this._curPath.closed = true;
      },
      _addPath: function _addPath() {
        var offset = this._pathLength;
        var path = this._paths[offset];
        if (path) path.reset(); else {
          path = new Path();
          this._paths.push(path);
        }
        this._pathLength++;
        this._curPath = path;
        return path;
      },
      _addPoint: function _addPoint(x, y, flags) {
        var path = this._curPath;
        if (!path) return;
        var pt;
        var points = this._points;
        var pathPoints = path.points;
        var offset = this._pointsOffset++;
        pt = points[offset];
        if (pt) {
          pt.x = x;
          pt.y = y;
        } else {
          pt = new Point(x, y);
          points.push(pt);
        }
        pt.flags = flags;
        pathPoints.push(pt);
      }
    });
    cc.Graphics._Impl = Impl;
    module.exports = Impl;
  }), {
    "../../../../graphics/helper": 110,
    "../../../../graphics/types": 112
  } ],
  180: [ (function(require, module, exports) {
    "use strict";
    exports.__esModule = true;
    exports["default"] = void 0;
    var _assembler = _interopRequireDefault(require("../../../assembler"));
    var _inputAssembler = _interopRequireDefault(require("../../../../../renderer/core/input-assembler"));
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }
    function _inheritsLoose(subClass, superClass) {
      subClass.prototype = Object.create(superClass.prototype);
      subClass.prototype.constructor = subClass;
      subClass.__proto__ = superClass;
    }
    var MeshBuffer = require("../../mesh-buffer");
    var renderer = require("../../../index");
    var Graphics = require("../../../../graphics/graphics");
    var PointFlags = require("../../../../graphics/types").PointFlags;
    var LineJoin = Graphics.LineJoin;
    var LineCap = Graphics.LineCap;
    var Earcut = require("./earcut");
    require("./impl");
    var MAX_VERTEX = 65535;
    var MAX_INDICE = 2 * MAX_VERTEX;
    var PI = Math.PI;
    var min = Math.min;
    var max = Math.max;
    var ceil = Math.ceil;
    var acos = Math.acos;
    var cos = Math.cos;
    var sin = Math.sin;
    var atan2 = Math.atan2;
    function curveDivs(r, arc, tol) {
      var da = 2 * acos(r / (r + tol));
      return max(2, ceil(arc / da));
    }
    function clamp(v, min, max) {
      if (v < min) return min;
      if (v > max) return max;
      return v;
    }
    var gfx = cc.gfx;
    var vfmtPosColorSdf = new gfx.VertexFormat([ {
      name: gfx.ATTR_POSITION,
      type: gfx.ATTR_TYPE_FLOAT32,
      num: 2
    }, {
      name: gfx.ATTR_COLOR,
      type: gfx.ATTR_TYPE_UINT8,
      num: 4,
      normalize: true
    }, {
      name: "a_dist",
      type: gfx.ATTR_TYPE_FLOAT32,
      num: 1
    } ]);
    vfmtPosColorSdf.name = "vfmtPosColorSdf";
    var GraphicsAssembler = (function(_Assembler) {
      _inheritsLoose(GraphicsAssembler, _Assembler);
      function GraphicsAssembler(graphics) {
        var _this;
        _this = _Assembler.call(this, graphics) || this;
        _this._buffer = null;
        _this._buffers = [];
        _this._bufferOffset = 0;
        return _this;
      }
      var _proto = GraphicsAssembler.prototype;
      _proto.getVfmt = function getVfmt() {
        return vfmtPosColorSdf;
      };
      _proto.getVfmtFloatCount = function getVfmtFloatCount() {
        return 4;
      };
      _proto.requestBuffer = function requestBuffer() {
        var buffer = {
          indiceStart: 0,
          vertexStart: 0
        };
        var meshbuffer = new MeshBuffer(renderer._handle, this.getVfmt());
        buffer.meshbuffer = meshbuffer;
        var ia = new _inputAssembler["default"](meshbuffer._vb, meshbuffer._ib);
        buffer.ia = ia;
        this._buffers.push(buffer);
        return buffer;
      };
      _proto.getBuffers = function getBuffers() {
        0 === this._buffers.length && this.requestBuffer();
        return this._buffers;
      };
      _proto.clear = function clear(clean) {
        this._bufferOffset = 0;
        var datas = this._buffers;
        if (clean) {
          for (var i = 0, l = datas.length; i < l; i++) {
            var data = datas[i];
            data.meshbuffer.destroy();
            data.meshbuffer = null;
          }
          datas.length = 0;
        } else for (var _i = 0, _l = datas.length; _i < _l; _i++) {
          var _data = datas[_i];
          _data.indiceStart = 0;
          _data.vertexStart = 0;
          var meshbuffer = _data.meshbuffer;
          meshbuffer.reset();
        }
      };
      _proto.fillBuffers = function fillBuffers(graphics, renderer) {
        renderer._flush();
        renderer.node = graphics.node;
        renderer.material = graphics._materials[0];
        var buffers = this.getBuffers();
        for (var index = 0, length = buffers.length; index < length; index++) {
          var buffer = buffers[index];
          var meshbuffer = buffer.meshbuffer;
          buffer.ia._count = buffer.indiceStart;
          renderer._flushIA(buffer.ia);
          meshbuffer.uploadData();
        }
      };
      _proto.genBuffer = function genBuffer(graphics, cverts) {
        var buffers = this.getBuffers();
        var buffer = buffers[this._bufferOffset];
        var meshbuffer = buffer.meshbuffer;
        var maxVertsCount = buffer.vertexStart + cverts;
        if (maxVertsCount > MAX_VERTEX || 3 * maxVertsCount > MAX_INDICE) {
          ++this._bufferOffset;
          maxVertsCount = cverts;
          if (this._bufferOffset < buffers.length) buffer = buffers[this._bufferOffset]; else {
            buffer = this.requestBuffer(graphics);
            buffers[this._bufferOffset] = buffer;
          }
          meshbuffer = buffer.meshbuffer;
        }
        maxVertsCount > meshbuffer.vertexOffset && meshbuffer.requestStatic(cverts, 3 * cverts);
        this._buffer = buffer;
        return buffer;
      };
      _proto.stroke = function stroke(graphics) {
        this._curColor = graphics._strokeColor._val;
        this._flattenPaths(graphics._impl);
        this._expandStroke(graphics);
        graphics._impl._updatePathOffset = true;
      };
      _proto.fill = function fill(graphics) {
        this._curColor = graphics._fillColor._val;
        this._expandFill(graphics);
        graphics._impl._updatePathOffset = true;
      };
      _proto._expandStroke = function _expandStroke(graphics) {
        var w = .5 * graphics.lineWidth, lineCap = graphics.lineCap, lineJoin = graphics.lineJoin, miterLimit = graphics.miterLimit;
        var impl = graphics._impl;
        var ncap = curveDivs(w, PI, impl._tessTol);
        this._calculateJoins(impl, w, lineJoin, miterLimit);
        var paths = impl._paths;
        var cverts = 0;
        for (var i = impl._pathOffset, l = impl._pathLength; i < l; i++) {
          var path = paths[i];
          var pointsLength = path.points.length;
          lineJoin === LineJoin.ROUND ? cverts += 2 * (pointsLength + path.nbevel * (ncap + 2) + 1) : cverts += 2 * (pointsLength + 5 * path.nbevel + 1);
          path.closed || (lineCap === LineCap.ROUND ? cverts += 2 * (2 * ncap + 2) : cverts += 12);
        }
        var buffer = this.genBuffer(graphics, cverts), meshbuffer = buffer.meshbuffer, vData = meshbuffer._vData, iData = meshbuffer._iData;
        for (var _i2 = impl._pathOffset, _l2 = impl._pathLength; _i2 < _l2; _i2++) {
          var _path = paths[_i2];
          var pts = _path.points;
          var _pointsLength = pts.length;
          var offset = buffer.vertexStart;
          var p0 = void 0, p1 = void 0;
          var start = void 0, end = void 0, loop = void 0;
          loop = _path.closed;
          if (loop) {
            p0 = pts[_pointsLength - 1];
            p1 = pts[0];
            start = 0;
            end = _pointsLength;
          } else {
            p0 = pts[0];
            p1 = pts[1];
            start = 1;
            end = _pointsLength - 1;
          }
          p1 = p1 || p0;
          if (!loop) {
            var dPos = p1.sub(p0);
            dPos.normalizeSelf();
            var dx = dPos.x;
            var dy = dPos.y;
            lineCap === LineCap.BUTT ? this._buttCapStart(p0, dx, dy, w, 0) : lineCap === LineCap.SQUARE ? this._buttCapStart(p0, dx, dy, w, w) : lineCap === LineCap.ROUND && this._roundCapStart(p0, dx, dy, w, ncap);
          }
          for (var j = start; j < end; ++j) {
            if (lineJoin === LineJoin.ROUND) this._roundJoin(p0, p1, w, w, ncap); else if (0 !== (p1.flags & (PointFlags.PT_BEVEL | PointFlags.PT_INNERBEVEL))) this._bevelJoin(p0, p1, w, w); else {
              this._vset(p1.x + p1.dmx * w, p1.y + p1.dmy * w, 1);
              this._vset(p1.x - p1.dmx * w, p1.y - p1.dmy * w, -1);
            }
            p0 = p1;
            p1 = pts[j + 1];
          }
          if (loop) {
            var floatCount = this.getVfmtFloatCount();
            var vDataoOfset = offset * floatCount;
            this._vset(vData[vDataoOfset], vData[vDataoOfset + 1], 1);
            this._vset(vData[vDataoOfset + floatCount], vData[vDataoOfset + floatCount + 1], -1);
          } else {
            var _dPos = p1.sub(p0);
            _dPos.normalizeSelf();
            var _dx = _dPos.x;
            var _dy = _dPos.y;
            lineCap === LineCap.BUTT ? this._buttCapEnd(p1, _dx, _dy, w, 0) : lineCap === LineCap.SQUARE ? this._buttCapEnd(p1, _dx, _dy, w, w) : lineCap === LineCap.ROUND && this._roundCapEnd(p1, _dx, _dy, w, ncap);
          }
          var indicesOffset = buffer.indiceStart;
          for (var _start = offset + 2, _end = buffer.vertexStart; _start < _end; _start++) {
            iData[indicesOffset++] = _start - 2;
            iData[indicesOffset++] = _start - 1;
            iData[indicesOffset++] = _start;
          }
          buffer.indiceStart = indicesOffset;
        }
      };
      _proto._expandFill = function _expandFill(graphics) {
        var impl = graphics._impl;
        var paths = impl._paths;
        var cverts = 0;
        for (var i = impl._pathOffset, l = impl._pathLength; i < l; i++) {
          var path = paths[i];
          var pointsLength = path.points.length;
          cverts += pointsLength;
        }
        var buffer = this.genBuffer(graphics, cverts), meshbuffer = buffer.meshbuffer, vData = meshbuffer._vData, iData = meshbuffer._iData;
        for (var _i3 = impl._pathOffset, _l3 = impl._pathLength; _i3 < _l3; _i3++) {
          var _path2 = paths[_i3];
          var pts = _path2.points;
          var _pointsLength2 = pts.length;
          if (0 === _pointsLength2) continue;
          var offset = buffer.vertexStart;
          for (var j = 0; j < _pointsLength2; ++j) this._vset(pts[j].x, pts[j].y);
          var indicesOffset = buffer.indiceStart;
          if (_path2.complex) {
            var earcutData = [];
            var floatCount = this.getVfmtFloatCount();
            for (var _j = offset, end = buffer.vertexStart; _j < end; _j++) {
              var vDataOffset = _j * floatCount;
              earcutData.push(vData[vDataOffset]);
              earcutData.push(vData[vDataOffset + 1]);
            }
            var newIndices = Earcut(earcutData, null, 2);
            if (!newIndices || 0 === newIndices.length) continue;
            for (var _j2 = 0, nIndices = newIndices.length; _j2 < nIndices; _j2++) iData[indicesOffset++] = newIndices[_j2] + offset;
          } else {
            var first = offset;
            for (var start = offset + 2, _end2 = buffer.vertexStart; start < _end2; start++) {
              iData[indicesOffset++] = first;
              iData[indicesOffset++] = start - 1;
              iData[indicesOffset++] = start;
            }
          }
          buffer.indiceStart = indicesOffset;
        }
      };
      _proto._calculateJoins = function _calculateJoins(impl, w, lineJoin, miterLimit) {
        var iw = 0;
        w > 0 && (iw = 1 / w);
        var paths = impl._paths;
        for (var i = impl._pathOffset, l = impl._pathLength; i < l; i++) {
          var path = paths[i];
          var pts = path.points;
          var ptsLength = pts.length;
          var p0 = pts[ptsLength - 1];
          var p1 = pts[0];
          var nleft = 0;
          path.nbevel = 0;
          for (var j = 0; j < ptsLength; j++) {
            var dmr2 = void 0, cross = void 0, limit = void 0;
            var dlx0 = p0.dy;
            var dly0 = -p0.dx;
            var dlx1 = p1.dy;
            var dly1 = -p1.dx;
            p1.dmx = .5 * (dlx0 + dlx1);
            p1.dmy = .5 * (dly0 + dly1);
            dmr2 = p1.dmx * p1.dmx + p1.dmy * p1.dmy;
            if (dmr2 > 1e-6) {
              var scale = 1 / dmr2;
              scale > 600 && (scale = 600);
              p1.dmx *= scale;
              p1.dmy *= scale;
            }
            cross = p1.dx * p0.dy - p0.dx * p1.dy;
            if (cross > 0) {
              nleft++;
              p1.flags |= PointFlags.PT_LEFT;
            }
            limit = max(11, min(p0.len, p1.len) * iw);
            dmr2 * limit * limit < 1 && (p1.flags |= PointFlags.PT_INNERBEVEL);
            p1.flags & PointFlags.PT_CORNER && (dmr2 * miterLimit * miterLimit < 1 || lineJoin === LineJoin.BEVEL || lineJoin === LineJoin.ROUND) && (p1.flags |= PointFlags.PT_BEVEL);
            0 !== (p1.flags & (PointFlags.PT_BEVEL | PointFlags.PT_INNERBEVEL)) && path.nbevel++;
            p0 = p1;
            p1 = pts[j + 1];
          }
        }
      };
      _proto._flattenPaths = function _flattenPaths(impl) {
        var paths = impl._paths;
        for (var i = impl._pathOffset, l = impl._pathLength; i < l; i++) {
          var path = paths[i];
          var pts = path.points;
          var p0 = pts[pts.length - 1];
          var p1 = pts[0];
          if (pts.length > 2 && p0.equals(p1)) {
            path.closed = true;
            pts.pop();
            p0 = pts[pts.length - 1];
          }
          for (var j = 0, size = pts.length; j < size; j++) {
            var dPos = p1.sub(p0);
            p0.len = dPos.mag();
            (dPos.x || dPos.y) && dPos.normalizeSelf();
            p0.dx = dPos.x;
            p0.dy = dPos.y;
            p0 = p1;
            p1 = pts[j + 1];
          }
        }
      };
      _proto._chooseBevel = function _chooseBevel(bevel, p0, p1, w) {
        var x = p1.x;
        var y = p1.y;
        var x0, y0, x1, y1;
        if (0 !== bevel) {
          x0 = x + p0.dy * w;
          y0 = y - p0.dx * w;
          x1 = x + p1.dy * w;
          y1 = y - p1.dx * w;
        } else {
          x0 = x1 = x + p1.dmx * w;
          y0 = y1 = y + p1.dmy * w;
        }
        return [ x0, y0, x1, y1 ];
      };
      _proto._buttCapStart = function _buttCapStart(p, dx, dy, w, d) {
        var px = p.x - dx * d;
        var py = p.y - dy * d;
        var dlx = dy;
        var dly = -dx;
        this._vset(px + dlx * w, py + dly * w, 1);
        this._vset(px - dlx * w, py - dly * w, -1);
      };
      _proto._buttCapEnd = function _buttCapEnd(p, dx, dy, w, d) {
        var px = p.x + dx * d;
        var py = p.y + dy * d;
        var dlx = dy;
        var dly = -dx;
        this._vset(px + dlx * w, py + dly * w, 1);
        this._vset(px - dlx * w, py - dly * w, -1);
      };
      _proto._roundCapStart = function _roundCapStart(p, dx, dy, w, ncap) {
        var px = p.x;
        var py = p.y;
        var dlx = dy;
        var dly = -dx;
        for (var i = 0; i < ncap; i++) {
          var a = i / (ncap - 1) * PI;
          var ax = cos(a) * w, ay = sin(a) * w;
          this._vset(px - dlx * ax - dx * ay, py - dly * ax - dy * ay, 1);
          this._vset(px, py, 0);
        }
        this._vset(px + dlx * w, py + dly * w, 1);
        this._vset(px - dlx * w, py - dly * w, -1);
      };
      _proto._roundCapEnd = function _roundCapEnd(p, dx, dy, w, ncap) {
        var px = p.x;
        var py = p.y;
        var dlx = dy;
        var dly = -dx;
        this._vset(px + dlx * w, py + dly * w, 1);
        this._vset(px - dlx * w, py - dly * w, -1);
        for (var i = 0; i < ncap; i++) {
          var a = i / (ncap - 1) * PI;
          var ax = cos(a) * w, ay = sin(a) * w;
          this._vset(px, py, 0);
          this._vset(px - dlx * ax + dx * ay, py - dly * ax + dy * ay, 1);
        }
      };
      _proto._roundJoin = function _roundJoin(p0, p1, lw, rw, ncap) {
        var dlx0 = p0.dy;
        var dly0 = -p0.dx;
        var dlx1 = p1.dy;
        var dly1 = -p1.dx;
        var p1x = p1.x;
        var p1y = p1.y;
        if (0 !== (p1.flags & PointFlags.PT_LEFT)) {
          var out = this._chooseBevel(p1.flags & PointFlags.PT_INNERBEVEL, p0, p1, lw);
          var lx0 = out[0];
          var ly0 = out[1];
          var lx1 = out[2];
          var ly1 = out[3];
          var a0 = atan2(-dly0, -dlx0);
          var a1 = atan2(-dly1, -dlx1);
          a1 > a0 && (a1 -= 2 * PI);
          this._vset(lx0, ly0, 1);
          this._vset(p1x - dlx0 * rw, p1.y - dly0 * rw, -1);
          var n = clamp(ceil((a0 - a1) / PI) * ncap, 2, ncap);
          for (var i = 0; i < n; i++) {
            var u = i / (n - 1);
            var a = a0 + u * (a1 - a0);
            var rx = p1x + cos(a) * rw;
            var ry = p1y + sin(a) * rw;
            this._vset(p1x, p1y, 0);
            this._vset(rx, ry, -1);
          }
          this._vset(lx1, ly1, 1);
          this._vset(p1x - dlx1 * rw, p1y - dly1 * rw, -1);
        } else {
          var _out = this._chooseBevel(p1.flags & PointFlags.PT_INNERBEVEL, p0, p1, -rw);
          var rx0 = _out[0];
          var ry0 = _out[1];
          var rx1 = _out[2];
          var ry1 = _out[3];
          var _a = atan2(dly0, dlx0);
          var _a2 = atan2(dly1, dlx1);
          _a2 < _a && (_a2 += 2 * PI);
          this._vset(p1x + dlx0 * rw, p1y + dly0 * rw, 1);
          this._vset(rx0, ry0, -1);
          var _n = clamp(ceil((_a2 - _a) / PI) * ncap, 2, ncap);
          for (var _i4 = 0; _i4 < _n; _i4++) {
            var _u = _i4 / (_n - 1);
            var _a3 = _a + _u * (_a2 - _a);
            var lx = p1x + cos(_a3) * lw;
            var ly = p1y + sin(_a3) * lw;
            this._vset(lx, ly, 1);
            this._vset(p1x, p1y, 0);
          }
          this._vset(p1x + dlx1 * rw, p1y + dly1 * rw, 1);
          this._vset(rx1, ry1, -1);
        }
      };
      _proto._bevelJoin = function _bevelJoin(p0, p1, lw, rw) {
        var rx0, ry0, rx1, ry1;
        var lx0, ly0, lx1, ly1;
        var dlx0 = p0.dy;
        var dly0 = -p0.dx;
        var dlx1 = p1.dy;
        var dly1 = -p1.dx;
        if (p1.flags & PointFlags.PT_LEFT) {
          var out = this._chooseBevel(p1.flags & PointFlags.PT_INNERBEVEL, p0, p1, lw);
          lx0 = out[0];
          ly0 = out[1];
          lx1 = out[2];
          ly1 = out[3];
          this._vset(lx0, ly0, 1);
          this._vset(p1.x - dlx0 * rw, p1.y - dly0 * rw, -1);
          this._vset(lx1, ly1, 1);
          this._vset(p1.x - dlx1 * rw, p1.y - dly1 * rw, -1);
        } else {
          var _out2 = this._chooseBevel(p1.flags & PointFlags.PT_INNERBEVEL, p0, p1, -rw);
          rx0 = _out2[0];
          ry0 = _out2[1];
          rx1 = _out2[2];
          ry1 = _out2[3];
          this._vset(p1.x + dlx0 * lw, p1.y + dly0 * lw, 1);
          this._vset(rx0, ry0, -1);
          this._vset(p1.x + dlx1 * lw, p1.y + dly1 * lw, 1);
          this._vset(rx1, ry1, -1);
        }
      };
      _proto._vset = function _vset(x, y, distance) {
        void 0 === distance && (distance = 0);
        var buffer = this._buffer;
        var meshbuffer = buffer.meshbuffer;
        var dataOffset = buffer.vertexStart * this.getVfmtFloatCount();
        var vData = meshbuffer._vData;
        var uintVData = meshbuffer._uintVData;
        vData[dataOffset] = x;
        vData[dataOffset + 1] = y;
        uintVData[dataOffset + 2] = this._curColor;
        vData[dataOffset + 3] = distance;
        buffer.vertexStart++;
        meshbuffer._dirty = true;
      };
      return GraphicsAssembler;
    })(_assembler["default"]);
    exports["default"] = GraphicsAssembler;
    _assembler["default"].register(cc.Graphics, GraphicsAssembler);
    module.exports = exports["default"];
  }), {
    "../../../../../renderer/core/input-assembler": 242,
    "../../../../graphics/graphics": 109,
    "../../../../graphics/types": 112,
    "../../../assembler": 168,
    "../../../index": 171,
    "../../mesh-buffer": 195,
    "./earcut": 178,
    "./impl": 179
  } ],
  181: [ (function(require, module, exports) {
    "use strict";
    cc.assemblers = {};
    require("./sprite");
    require("./mask-assembler");
    require("./graphics");
    require("./label");
    require("./motion-streak");
  }), {
    "./graphics": 180,
    "./label": 186,
    "./mask-assembler": void 0,
    "./motion-streak": void 0,
    "./sprite": 193
  } ],
  182: [ (function(require, module, exports) {
    "use strict";
    exports.__esModule = true;
    exports["default"] = void 0;
    var _bmfont = _interopRequireDefault(require("../../../../utils/label/bmfont"));
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }
    function _inheritsLoose(subClass, superClass) {
      subClass.prototype = Object.create(superClass.prototype);
      subClass.prototype.constructor = subClass;
      subClass.__proto__ = superClass;
    }
    var _dataOffset = 0;
    var WebglBmfontAssembler = (function(_BmfontAssembler) {
      _inheritsLoose(WebglBmfontAssembler, _BmfontAssembler);
      function WebglBmfontAssembler() {
        return _BmfontAssembler.apply(this, arguments) || this;
      }
      var _proto = WebglBmfontAssembler.prototype;
      _proto.initData = function initData() {
        this._renderData.createFlexData(0, 4, 6, this.getVfmt());
      };
      _proto._reserveQuads = function _reserveQuads(comp, count) {
        var verticesCount = 4 * count;
        var indicesCount = 6 * count;
        var flexBuffer = this._renderData._flexBuffer;
        flexBuffer.reserve(verticesCount, indicesCount);
        flexBuffer.used(verticesCount, indicesCount);
        var iData = this._renderData.iDatas[0];
        for (var i = 0, vid = 0, l = indicesCount; i < l; i += 6, vid += 4) {
          iData[i] = vid;
          iData[i + 1] = vid + 1;
          iData[i + 2] = vid + 2;
          iData[i + 3] = vid + 1;
          iData[i + 4] = vid + 3;
          iData[i + 5] = vid + 2;
        }
        _dataOffset = 0;
      };
      _proto._quadsUpdated = function _quadsUpdated(comp) {
        _dataOffset = 0;
        var flexBuffer = this._renderData._flexBuffer;
        flexBuffer.used(this.verticesCount, this.indicesCount);
      };
      _proto._getColor = function _getColor(comp) {
        return comp.node._color._val;
      };
      _proto.appendQuad = function appendQuad(comp, texture, rect, rotated, x, y, scale) {
        var renderData = this._renderData;
        var verts = renderData.vDatas[0], uintVerts = renderData.uintVDatas[0];
        this.verticesCount += 4;
        this.indicesCount = this.verticesCount / 2 * 3;
        var texw = texture.width, texh = texture.height, rectWidth = rect.width, rectHeight = rect.height, color = this._getColor(comp);
        var l, b, r, t;
        var floatsPerVert = this.floatsPerVert;
        var uvDataOffset = _dataOffset + this.uvOffset;
        if (rotated) {
          l = rect.x / texw;
          r = (rect.x + rectHeight) / texw;
          b = (rect.y + rectWidth) / texh;
          t = rect.y / texh;
          verts[uvDataOffset] = l;
          verts[uvDataOffset + 1] = t;
          uvDataOffset += floatsPerVert;
          verts[uvDataOffset] = l;
          verts[uvDataOffset + 1] = b;
          uvDataOffset += floatsPerVert;
          verts[uvDataOffset] = r;
          verts[uvDataOffset + 1] = t;
          uvDataOffset += floatsPerVert;
          verts[uvDataOffset] = r;
          verts[uvDataOffset + 1] = b;
        } else {
          l = rect.x / texw;
          r = (rect.x + rectWidth) / texw;
          b = (rect.y + rectHeight) / texh;
          t = rect.y / texh;
          verts[uvDataOffset] = l;
          verts[uvDataOffset + 1] = b;
          uvDataOffset += floatsPerVert;
          verts[uvDataOffset] = r;
          verts[uvDataOffset + 1] = b;
          uvDataOffset += floatsPerVert;
          verts[uvDataOffset] = l;
          verts[uvDataOffset + 1] = t;
          uvDataOffset += floatsPerVert;
          verts[uvDataOffset] = r;
          verts[uvDataOffset + 1] = t;
        }
        l = x;
        r = x + rectWidth * scale;
        b = y - rectHeight * scale;
        t = y;
        this.appendVerts(comp, _dataOffset, l, r, b, t);
        var colorOffset = _dataOffset + this.colorOffset;
        for (var i = 0; i < 4; i++) {
          uintVerts[colorOffset] = color;
          colorOffset += floatsPerVert;
        }
        _dataOffset += 4 * this.floatsPerVert;
      };
      _proto.appendVerts = function appendVerts(comp, offset, l, r, b, t) {
        var local = this._local;
        var floatsPerVert = this.floatsPerVert;
        local[offset] = l;
        local[offset + 1] = b;
        offset += floatsPerVert;
        local[offset] = r;
        local[offset + 1] = b;
        offset += floatsPerVert;
        local[offset] = l;
        local[offset + 1] = t;
        offset += floatsPerVert;
        local[offset] = r;
        local[offset + 1] = t;
      };
      _proto.updateWorldVerts = function updateWorldVerts(comp) {
        var node = comp.node;
        var matrix = node._worldMatrix;
        var matrixm = matrix.m, a = matrixm[0], b = matrixm[1], c = matrixm[4], d = matrixm[5], tx = matrixm[12], ty = matrixm[13];
        var local = this._local;
        var world = this._renderData.vDatas[0];
        var floatsPerVert = this.floatsPerVert;
        for (var offset = 0; offset < local.length; offset += floatsPerVert) {
          var x = local[offset];
          var y = local[offset + 1];
          world[offset] = x * a + y * c + tx;
          world[offset + 1] = x * b + y * d + ty;
        }
      };
      return WebglBmfontAssembler;
    })(_bmfont["default"]);
    exports["default"] = WebglBmfontAssembler;
    module.exports = exports["default"];
  }), {
    "../../../../utils/label/bmfont": 173
  } ],
  183: [ (function(require, module, exports) {
    "use strict";
    exports.__esModule = true;
    exports["default"] = void 0;
    function _inheritsLoose(subClass, superClass) {
      subClass.prototype = Object.create(superClass.prototype);
      subClass.prototype.constructor = subClass;
      subClass.__proto__ = superClass;
    }
    var js = require("../../../../../platform/js");
    var WebglBmfontAssembler = require("./bmfont");
    var LetterFontAssembler = require("../../../../utils/label/letter-font");
    var WHITE = cc.color(255, 255, 255, 255);
    var WebglLetterFontAssembler = (function(_LetterFontAssembler) {
      _inheritsLoose(WebglLetterFontAssembler, _LetterFontAssembler);
      function WebglLetterFontAssembler() {
        return _LetterFontAssembler.apply(this, arguments) || this;
      }
      var _proto = WebglLetterFontAssembler.prototype;
      _proto.createData = function createData(comp) {
        return comp.requestRenderData();
      };
      _proto._getColor = function _getColor(comp) {
        WHITE._fastSetA(comp.node._color.a);
        return WHITE._val;
      };
      _proto.updateColor = function updateColor(comp) {
        var color = this._getColor(comp);
        _LetterFontAssembler.prototype.updateColor.call(this, comp, color);
      };
      return WebglLetterFontAssembler;
    })(LetterFontAssembler);
    exports["default"] = WebglLetterFontAssembler;
    module.exports = exports["default"];
  }), {
    "../../../../../platform/js": 161,
    "../../../../utils/label/letter-font": 175,
    "./bmfont": 182
  } ],
  184: [ (function(require, module, exports) {
    "use strict";
    exports.__esModule = true;
    exports["default"] = void 0;
    var _materialVariant = _interopRequireDefault(require("../../../../../assets/material/material-variant"));
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }
    var Label = require("../../../../../components/CCLabel");
    var LabelShadow = require("../../../../../components/CCLabelShadow");
    var LabelOutline = require("../../../../../components/CCLabelOutline");
    var Material = require("../../../../../assets/material/CCMaterial");
    var UPDATE_CONTENT = 1;
    var UPDATE_FONT = 2;
    var UPDATE_EFFECT = 4;
    var NativeTTF = (function() {
      function NativeTTF() {}
      var _proto = NativeTTF.prototype;
      _proto.init = function init(comp) {
        this.labelMaterial = null;
        this._label = this._renderComp = comp;
        renderer.CustomAssembler.prototype.ctor.call(this);
        comp.node._proxy.setAssembler(this);
        this._layout = new jsb.LabelRenderer();
        this._layout.init();
        this._cfg = new DataView(this._layout._cfg);
        this._layoutInfo = new DataView(this._layout._layout);
        this._cfgFields = jsb.LabelRenderer._cfgFields;
        this._layoutFields = jsb.LabelRenderer._layoutFields;
        this._layout.bindNodeProxy(comp.node._proxy);
        this._bindMaterial(comp);
      };
      _proto._setBufferFlag = function _setBufferFlag(dv, offset, size, type, flag) {
        if ("int8" == type && 1 == size) {
          var v = dv.getInt8(offset);
          dv.setInt8(offset, flag | v);
        } else if ("int32" == type && 4 == size) {
          var _v = dv.getInt32(offset, jsb.__isLittleEndian__);
          dv.setInt32(offset, flag | _v, jsb.__isLittleEndian__);
        } else cc.warn("flag storage type should be int8/int32 only, type/size -> " + type + "/" + size + ".");
      };
      _proto._updateCfgFlag = function _updateCfgFlag(flag) {
        var field = this._cfgFields.updateFlags;
        this._setBufferFlag(this._cfg, field.offset, field.size, field.type, flag);
      };
      _proto._setBufferValue = function _setBufferValue(dv, offset, size, type, value) {
        if ("float" == type && 4 == size) dv.setFloat32(offset, value, jsb.__isLittleEndian__); else if ("int32" == type && 4 == size) dv.setInt32(offset, value, jsb.__isLittleEndian__); else if ("bool" == type && 1 == size) dv.setInt8(offset, !value ? 0 : 1, jsb.__isLittleEndian__); else if ("Color4B" == type && 4 == size) {
          dv.setUint8(offset, value.r);
          dv.setUint8(offset + 1, value.g);
          dv.setUint8(offset + 2, value.b);
          dv.setUint8(offset + 3, value.a);
        } else "int8" == type && 1 == size ? dv.setUint8(offset, value) : cc.warn("dont know how to set value to buffer, type/size -> " + type + "/" + size + ".");
      };
      _proto._setFieldValue = function _setFieldValue(dv, desc, field_name, value) {
        var field = desc[field_name];
        this._setBufferValue(dv, field.offset, field.size, field.type, value);
      };
      _proto._getBufferValue = function _getBufferValue(dv, offset, size, type) {
        if ("float" == type && 4 == size) return dv.getFloat32(offset, jsb.__isLittleEndian__);
        if ("int32" == type && 4 == size) return dv.getInt32(offset, jsb.__isLittleEndian__);
        if ("bool" == type && 1 == size) return 0 != dv.getInt8(offset, jsb.__isLittleEndian__);
        if ("Color4B" == type && 4 == size) {
          var r = dv.getUint8(offset);
          var g = dv.getUint8(offset + 1);
          var b = dv.getUint8(offset + 2);
          var a = dv.getUint8(offset + 3);
          return {
            r: r,
            g: g,
            b: b,
            a: a
          };
        }
        if ("int8" == type && 1 == size) return dv.getUint8(offset);
        cc.warn("dont know how to get value from buffer, type/size -> " + type + "/" + size + ".");
        return;
      };
      _proto._getFieldValue = function _getFieldValue(dv, desc, field_name) {
        var field = desc[field_name];
        return this._getBufferValue(dv, field.offset, field.size, field.type);
      };
      _proto._getLayoutValue = function _getLayoutValue(field_name) {
        return this._getFieldValue(this._layoutInfo, this._layoutFields, field_name);
      };
      _proto._setLayoutValue = function _setLayoutValue(field_name, value) {
        return this._setFieldValue(this._layoutInfo, this._layoutFields, field_name, value);
      };
      _proto._updateCfgFlag_Content = function _updateCfgFlag_Content() {
        this._updateCfgFlag(UPDATE_CONTENT);
      };
      _proto._updateCfgFlag_Font = function _updateCfgFlag_Font() {
        this._updateCfgFlag(UPDATE_FONT);
      };
      _proto._colorEqual = function _colorEqual(a, b) {
        return a.r == b.r && a.g == b.g && a.b == b.b && a.a == b.a;
      };
      _proto._colorToObj = function _colorToObj(r, g, b, a) {
        return {
          r: r,
          g: g,
          b: b,
          a: a
        };
      };
      _proto.setString = function setString(str) {
        if (str != this._layout.string) {
          this._layout.string = str;
          this._updateCfgFlag_Content();
        }
      };
      _proto.setFontPath = function setFontPath(path) {
        if (path != this._layout.fontPath) {
          this._layout.fontPath = path;
          this._updateCfgFlag_Font();
        }
      };
      _proto.setFontSize = function setFontSize(fontSize, fontSizeRetina) {
        var oldfontsize = this._getFieldValue(this._cfg, this._cfgFields, "fontSize");
        if (oldfontsize != fontSize) {
          this._setFieldValue(this._cfg, this._cfgFields, "fontSize", fontSize);
          this._setFieldValue(this._cfg, this._cfgFields, "fontSizeRetina", fontSizeRetina);
          this._updateCfgFlag_Font();
        }
      };
      _proto.setOutline = function setOutline(outline) {
        var oldOutline = this._getLayoutValue("outlineSize");
        oldOutline > 0 != outline > 0 && this._updateCfgFlag_Font();
        if (oldOutline != outline) {
          this._updateCfgFlag_Content();
          this._setLayoutValue("outlineSize", outline);
        }
      };
      _proto.setOutlineColor = function setOutlineColor(color) {
        var oldColor = this._getLayoutValue("outlineColor");
        if (!this._colorEqual(oldColor, color)) {
          this._setLayoutValue("outlineColor", color);
          this._updateCfgFlag_Content();
        }
      };
      _proto.setLineHeight = function setLineHeight(lineHeight) {
        var oldLineHeight = this._getLayoutValue("lineHeight");
        if (oldLineHeight != lineHeight) {
          this._setLayoutValue("lineHeight", lineHeight);
          this._updateCfgFlag_Content();
        }
      };
      _proto.setOverFlow = function setOverFlow(overflow) {
        var oldValue = this._getLayoutValue("overflow");
        if (oldValue != overflow) {
          this._setLayoutValue("overflow", overflow);
          this._updateCfgFlag_Content();
        }
      };
      _proto.setEnableWrap = function setEnableWrap(value) {
        var oldValue = this._getLayoutValue("wrap");
        if (oldValue != value) {
          this._setLayoutValue("wrap", value);
          this._updateCfgFlag_Content();
        }
      };
      _proto.setVerticalAlign = function setVerticalAlign(value) {
        var oldValue = this._getLayoutValue("valign");
        if (oldValue != value) {
          this._setLayoutValue("valign", value);
          this._updateCfgFlag_Content();
        }
      };
      _proto.setHorizontalAlign = function setHorizontalAlign(value) {
        var oldValue = this._getLayoutValue("halign");
        if (oldValue != value) {
          this._setLayoutValue("halign", value);
          this._updateCfgFlag_Content();
        }
      };
      _proto.setContentSize = function setContentSize(width, height) {
        var oldWidth = this._getLayoutValue("width");
        var oldHeight = this._getLayoutValue("height");
        if (oldWidth != width || oldHeight != height) {
          this._setLayoutValue("height", height);
          this._setLayoutValue("width", width);
          this._updateCfgFlag_Content();
        }
      };
      _proto.setAnchorPoint = function setAnchorPoint(x, y) {
        var oldX = this._getLayoutValue("anchorX");
        var oldY = this._getLayoutValue("anchorY");
        if (oldX != x || oldY != y) {
          this._setLayoutValue("anchorX", x);
          this._setLayoutValue("anchorY", y);
          this._updateCfgFlag_Content();
        }
      };
      _proto.setColor = function setColor(color) {
        var oldColor = this._getLayoutValue("color");
        if (!this._colorEqual(oldColor, color)) {
          this._setLayoutValue("color", color);
          this._updateCfgFlag_Content();
        }
      };
      _proto.setShadow = function setShadow(x, y, blur) {
        var oldBlur = this._getLayoutValue("shadowBlur");
        var oldX = this._getLayoutValue("shadowX");
        var oldY = this._getLayoutValue("shadowY");
        oldBlur > 0 != blur > 0 && this._updateCfgFlag_Font();
        var updateContent = false;
        if (oldBlur != blur) {
          this._setLayoutValue("shadowBlur", blur);
          updateContent = true;
        }
        if (oldX != x) {
          this._setLayoutValue("shadowX", x);
          updateContent = true;
        }
        if (oldY != y) {
          this._setLayoutValue("shadowY", y);
          updateContent = true;
        }
        updateContent && this._updateCfgFlag_Content();
      };
      _proto.setShadowColor = function setShadowColor(color) {
        var oldColor = this._getLayoutValue("shadowColor");
        if (!this._colorEqual(oldColor, color)) {
          this._setLayoutValue("shadowColor", color);
          this._updateCfgFlag_Content();
        }
      };
      _proto.setItalic = function setItalic(enabled) {
        var oldItalic = this._getLayoutValue("italic");
        if (oldItalic != enabled) {
          this._setLayoutValue("italic", enabled);
          this._updateCfgFlag_Content();
        }
      };
      _proto.setBold = function setBold(bold) {
        var oldBold = this._getLayoutValue("bold");
        if (oldBold != bold) {
          this._setLayoutValue("bold", bold);
          this._updateCfgFlag_Content();
          this._updateCfgFlag_Font();
        }
      };
      _proto.setUnderline = function setUnderline(underline) {
        var oldBold = this._getLayoutValue("underline");
        if (oldBold != underline) {
          this._setLayoutValue("underline", underline);
          this._updateCfgFlag_Content();
        }
      };
      _proto.setSpacingX = function setSpacingX(x) {
        var oldX = this._getLayoutValue("spaceX");
        if (oldX != x && "number" == typeof x && !isNaN(x)) {
          this._setLayoutValue("spaceX", x);
          this._updateCfgFlag_Content();
        }
      };
      _proto.updateRenderData = function updateRenderData(comp) {
        if (!comp._vertsDirty) return;
        comp.font && comp.font.nativeUrl && this.setFontPath(comp.font.nativeUrl);
        var layout = this._layout;
        var c = comp.node.color;
        var node = comp.node;
        var retinaSize = comp.fontSize;
        this.setString(comp.string);
        this.setFontSize(comp.fontSize, retinaSize / 72 * comp.fontSize);
        this.setLineHeight(comp.lineHeight);
        this.setEnableWrap(comp.enableWrapText);
        this.setItalic(comp.enableItalic);
        this.setUnderline(comp.enableUnderline);
        this.setBold(comp.enableBold);
        this.setOverFlow(comp.overflow);
        this.setVerticalAlign(comp.verticalAlign);
        this.setHorizontalAlign(comp.horizontalAlign);
        this.setSpacingX(comp.spacingX);
        this.setContentSize(node.getContentSize().width, node.getContentSize().height);
        this.setAnchorPoint(node.anchorX, node.anchorY);
        this.setColor(this._colorToObj(c.getR(), c.getG(), c.getB(), Math.ceil(c.getA() * node.opacity / 255)));
        var shadow = node.getComponent(cc.LabelShadow);
        if (shadow && shadow.enabled) {
          var shadowColor = shadow.color;
          this.setShadow(shadow.offset.x, shadow.offset.y, shadow.blur);
          this.setShadowColor(this._colorToObj(shadowColor.getR(), shadowColor.getG(), shadowColor.getB(), Math.ceil(shadowColor.getA() * node.opacity / 255)));
        } else this.setShadow(0, 0, -1);
        this._updateTTFMaterial(comp);
        layout.render();
      };
      _proto._bindMaterial = function _bindMaterial(comp) {
        var material = this.labelMaterial;
        if (!material) {
          material = _materialVariant["default"].createWithBuiltin("2d-label", comp);
          this.labelMaterial = material;
        }
        return material;
      };
      _proto._updateTTFMaterial = function _updateTTFMaterial(comp) {
        var material = this._bindMaterial(comp);
        var node = this._label.node;
        var layout = this._layout;
        var outline = node.getComponent(cc.LabelOutline);
        var outlineSize = 0;
        if (outline && outline.enabled && outline.width > 0) {
          outlineSize = Math.max(Math.min(outline.width / 10, .4), .1);
          var c = outline.color;
          this.setOutlineColor(this._colorToObj(c.getR(), c.getG(), c.getB(), Math.ceil(c.getA() * node.opacity / 255)));
        }
        this.setOutline(outlineSize);
        material.define("CC_USE_MODEL", true);
        material.define("USE_TEXTURE_ALPHAONLY", true);
        material.define("USE_SDF", outlineSize > 0 || comp.enableBold);
        material.define("USE_SDF_EXTEND", comp.enableBold ? 1 : 0);
        void 0 !== material.getDefine("CC_SUPPORT_standard_derivatives") && cc.sys.glExtension("OES_standard_derivatives") && material.define("CC_SUPPORT_standard_derivatives", true);
        layout.setEffect(material.effect._nativeObj);
      };
      _proto.fillBuffers = function fillBuffers(comp, renderer) {
        this._layout.render();
      };
      _proto.getVfmt = function getVfmt() {};
      return NativeTTF;
    })();
    exports["default"] = NativeTTF;
    module.exports = exports["default"];
  }), {
    "../../../../../assets/material/CCMaterial": 67,
    "../../../../../assets/material/material-variant": 74,
    "../../../../../components/CCLabel": 92,
    "../../../../../components/CCLabelOutline": void 0,
    "../../../../../components/CCLabelShadow": void 0
  } ],
  185: [ (function(require, module, exports) {
    "use strict";
    exports.__esModule = true;
    exports["default"] = void 0;
    var _ttf = _interopRequireDefault(require("../../../../utils/label/ttf"));
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }
    function _inheritsLoose(subClass, superClass) {
      subClass.prototype = Object.create(superClass.prototype);
      subClass.prototype.constructor = subClass;
      subClass.__proto__ = superClass;
    }
    var LabelShadow = require("../../../../../components/CCLabelShadow");
    var WHITE = cc.color(255, 255, 255, 255);
    var WebglTTFAssembler = (function(_TTFAssembler) {
      _inheritsLoose(WebglTTFAssembler, _TTFAssembler);
      function WebglTTFAssembler() {
        return _TTFAssembler.apply(this, arguments) || this;
      }
      var _proto = WebglTTFAssembler.prototype;
      _proto.updateUVs = function updateUVs(comp) {
        var verts = this._renderData.vDatas[0];
        var uv = comp._frame.uv;
        var uvOffset = this.uvOffset;
        var floatsPerVert = this.floatsPerVert;
        for (var i = 0; i < 4; i++) {
          var srcOffset = 2 * i;
          var dstOffset = floatsPerVert * i + uvOffset;
          verts[dstOffset] = uv[srcOffset];
          verts[dstOffset + 1] = uv[srcOffset + 1];
        }
      };
      _proto.updateColor = function updateColor(comp) {
        WHITE._fastSetA(comp.node._color.a);
        var color = WHITE._val;
        _TTFAssembler.prototype.updateColor.call(this, comp, color);
      };
      _proto.updateVerts = function updateVerts(comp) {
        var node = comp.node, canvasWidth = comp._ttfTexture.width, canvasHeight = comp._ttfTexture.height, appx = node.anchorX * node.width, appy = node.anchorY * node.height;
        var shadow = LabelShadow && comp.getComponent(LabelShadow);
        if (shadow && shadow._enabled) {
          var offsetX = (canvasWidth - node.width) / 2;
          var offsetY = (canvasHeight - node.height) / 2;
          var shadowOffset = shadow.offset;
          -shadowOffset.x > offsetX ? appx += canvasWidth - node.width : offsetX > shadowOffset.x && (appx += offsetX - shadowOffset.x);
          -shadowOffset.y > offsetY ? appy += canvasHeight - node.height : offsetY > shadowOffset.y && (appy += offsetY - shadowOffset.y);
        }
        var local = this._local;
        local[0] = -appx;
        local[1] = -appy;
        local[2] = canvasWidth - appx;
        local[3] = canvasHeight - appy;
        this.updateUVs(comp);
        this.updateWorldVerts(comp);
      };
      return WebglTTFAssembler;
    })(_ttf["default"]);
    exports["default"] = WebglTTFAssembler;
    module.exports = exports["default"];
  }), {
    "../../../../../components/CCLabelShadow": void 0,
    "../../../../utils/label/ttf": 176
  } ],
  186: [ (function(require, module, exports) {
    "use strict";
    var _assembler = _interopRequireDefault(require("../../../assembler"));
    var _CCLabel = _interopRequireDefault(require("../../../../components/CCLabel"));
    var _ttf = _interopRequireDefault(require("./2d/ttf"));
    var _bmfont = _interopRequireDefault(require("./2d/bmfont"));
    var _letter = _interopRequireDefault(require("./2d/letter"));
    var _ttf2 = _interopRequireDefault(require("./3d/ttf"));
    var _bmfont2 = _interopRequireDefault(require("./3d/bmfont"));
    var _letter2 = _interopRequireDefault(require("./3d/letter"));
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }
    var NativeTTF = void 0;
    false;
    _CCLabel["default"]._canvasPool = {
      pool: [],
      get: function get() {
        var data = this.pool.pop();
        if (!data) {
          var canvas = document.createElement("canvas");
          var context = canvas.getContext("2d");
          data = {
            canvas: canvas,
            context: context
          };
          context.textBaseline = "alphabetic";
          context.lineJoin = "round";
        }
        return data;
      },
      put: function put(canvas) {
        if (this.pool.length >= 32) return;
        this.pool.push(canvas);
      }
    };
    _assembler["default"].register(cc.Label, {
      getConstructor: function getConstructor(label) {
        var is3DNode = label.node.is3DNode;
        var ctor = is3DNode ? _ttf2["default"] : _ttf["default"];
        if (label.font instanceof cc.BitmapFont) ctor = is3DNode ? _bmfont2["default"] : _bmfont["default"]; else if (label.cacheMode === _CCLabel["default"].CacheMode.CHAR) {
          false;
          cc.sys.platform === cc.sys.WECHAT_GAME_SUB ? cc.warn("sorry, subdomain does not support CHAR mode currently!") : ctor = is3DNode ? _letter2["default"] : _letter["default"];
        }
        return ctor;
      },
      TTF: _ttf["default"],
      Bmfont: _bmfont["default"],
      Letter: _letter["default"],
      TTF3D: _ttf2["default"],
      Bmfont3D: _bmfont2["default"],
      Letter3D: _letter2["default"],
      NativeTTF: NativeTTF
    });
  }), {
    "../../../../components/CCLabel": 92,
    "../../../assembler": 168,
    "./2d/bmfont": 182,
    "./2d/letter": 183,
    "./2d/nativeTTF": 184,
    "./2d/ttf": 185,
    "./3d/bmfont": void 0,
    "./3d/letter": void 0,
    "./3d/ttf": void 0
  } ],
  187: [ (function(require, module, exports) {
    "use strict";
    exports.__esModule = true;
    exports["default"] = void 0;
    var _assembler2d = _interopRequireDefault(require("../../../../assembler-2d"));
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }
    function _inheritsLoose(subClass, superClass) {
      subClass.prototype = Object.create(superClass.prototype);
      subClass.prototype.constructor = subClass;
      subClass.__proto__ = superClass;
    }
    var Sprite = require("../../../../../components/CCSprite");
    var FillType = Sprite.FillType;
    var BarFilledAssembler = (function(_Assembler2D) {
      _inheritsLoose(BarFilledAssembler, _Assembler2D);
      function BarFilledAssembler() {
        return _Assembler2D.apply(this, arguments) || this;
      }
      var _proto = BarFilledAssembler.prototype;
      _proto.updateRenderData = function updateRenderData(sprite) {
        var frame = sprite._spriteFrame;
        this.packToDynamicAtlas(sprite, frame);
        if (!sprite._vertsDirty) return;
        var fillStart = sprite._fillStart;
        var fillRange = sprite._fillRange;
        if (fillRange < 0) {
          fillStart += fillRange;
          fillRange = -fillRange;
        }
        fillRange = fillStart + fillRange;
        fillStart = fillStart > 1 ? 1 : fillStart;
        fillStart = fillStart < 0 ? 0 : fillStart;
        fillRange = fillRange > 1 ? 1 : fillRange;
        fillRange = fillRange < 0 ? 0 : fillRange;
        fillRange -= fillStart;
        fillRange = fillRange < 0 ? 0 : fillRange;
        var fillEnd = fillStart + fillRange;
        fillEnd = fillEnd > 1 ? 1 : fillEnd;
        this.updateUVs(sprite, fillStart, fillEnd);
        this.updateVerts(sprite, fillStart, fillEnd);
        sprite._vertsDirty = false;
      };
      _proto.updateUVs = function updateUVs(sprite, fillStart, fillEnd) {
        var spriteFrame = sprite._spriteFrame;
        var atlasWidth = spriteFrame._texture.width;
        var atlasHeight = spriteFrame._texture.height;
        var textureRect = spriteFrame._rect;
        var ul, vb, ur, vt;
        var quadUV0, quadUV1, quadUV2, quadUV3, quadUV4, quadUV5, quadUV6, quadUV7;
        if (spriteFrame._rotated) {
          ul = textureRect.x / atlasWidth;
          vb = (textureRect.y + textureRect.width) / atlasHeight;
          ur = (textureRect.x + textureRect.height) / atlasWidth;
          vt = textureRect.y / atlasHeight;
          quadUV0 = quadUV2 = ul;
          quadUV4 = quadUV6 = ur;
          quadUV3 = quadUV7 = vb;
          quadUV1 = quadUV5 = vt;
        } else {
          ul = textureRect.x / atlasWidth;
          vb = (textureRect.y + textureRect.height) / atlasHeight;
          ur = (textureRect.x + textureRect.width) / atlasWidth;
          vt = textureRect.y / atlasHeight;
          quadUV0 = quadUV4 = ul;
          quadUV2 = quadUV6 = ur;
          quadUV1 = quadUV3 = vb;
          quadUV5 = quadUV7 = vt;
        }
        var verts = this._renderData.vDatas[0];
        var uvOffset = this.uvOffset;
        var floatsPerVert = this.floatsPerVert;
        switch (sprite._fillType) {
         case FillType.HORIZONTAL:
          verts[uvOffset] = quadUV0 + (quadUV2 - quadUV0) * fillStart;
          verts[uvOffset + 1] = quadUV1 + (quadUV3 - quadUV1) * fillStart;
          verts[uvOffset + floatsPerVert] = quadUV0 + (quadUV2 - quadUV0) * fillEnd;
          verts[uvOffset + floatsPerVert + 1] = quadUV1 + (quadUV3 - quadUV1) * fillEnd;
          verts[uvOffset + 2 * floatsPerVert] = quadUV4 + (quadUV6 - quadUV4) * fillStart;
          verts[uvOffset + 2 * floatsPerVert + 1] = quadUV5 + (quadUV7 - quadUV5) * fillStart;
          verts[uvOffset + 3 * floatsPerVert] = quadUV4 + (quadUV6 - quadUV4) * fillEnd;
          verts[uvOffset + 3 * floatsPerVert + 1] = quadUV5 + (quadUV7 - quadUV5) * fillEnd;
          break;

         case FillType.VERTICAL:
          verts[uvOffset] = quadUV0 + (quadUV4 - quadUV0) * fillStart;
          verts[uvOffset + 1] = quadUV1 + (quadUV5 - quadUV1) * fillStart;
          verts[uvOffset + floatsPerVert] = quadUV2 + (quadUV6 - quadUV2) * fillStart;
          verts[uvOffset + floatsPerVert + 1] = quadUV3 + (quadUV7 - quadUV3) * fillStart;
          verts[uvOffset + 2 * floatsPerVert] = quadUV0 + (quadUV4 - quadUV0) * fillEnd;
          verts[uvOffset + 2 * floatsPerVert + 1] = quadUV1 + (quadUV5 - quadUV1) * fillEnd;
          verts[uvOffset + 3 * floatsPerVert] = quadUV2 + (quadUV6 - quadUV2) * fillEnd;
          verts[uvOffset + 3 * floatsPerVert + 1] = quadUV3 + (quadUV7 - quadUV3) * fillEnd;
          break;

         default:
          cc.errorID(2626);
        }
      };
      _proto.updateVerts = function updateVerts(sprite, fillStart, fillEnd) {
        var node = sprite.node, width = node.width, height = node.height, appx = node.anchorX * width, appy = node.anchorY * height;
        var l = -appx, b = -appy, r = width - appx, t = height - appy;
        var progressStart, progressEnd;
        switch (sprite._fillType) {
         case FillType.HORIZONTAL:
          progressStart = l + (r - l) * fillStart;
          progressEnd = l + (r - l) * fillEnd;
          l = progressStart;
          r = progressEnd;
          break;

         case FillType.VERTICAL:
          progressStart = b + (t - b) * fillStart;
          progressEnd = b + (t - b) * fillEnd;
          b = progressStart;
          t = progressEnd;
          break;

         default:
          cc.errorID(2626);
        }
        var local = this._local;
        local[0] = l;
        local[1] = b;
        local[2] = r;
        local[3] = t;
        this.updateWorldVerts(sprite);
      };
      return BarFilledAssembler;
    })(_assembler2d["default"]);
    exports["default"] = BarFilledAssembler;
    module.exports = exports["default"];
  }), {
    "../../../../../components/CCSprite": 95,
    "../../../../assembler-2d": 166
  } ],
  188: [ (function(require, module, exports) {
    "use strict";
    exports.__esModule = true;
    exports["default"] = void 0;
    var _assembler2d = _interopRequireDefault(require("../../../../assembler-2d"));
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }
    function _inheritsLoose(subClass, superClass) {
      subClass.prototype = Object.create(superClass.prototype);
      subClass.prototype.constructor = subClass;
      subClass.__proto__ = superClass;
    }
    var MeshSpriteAssembler = (function(_Assembler2D) {
      _inheritsLoose(MeshSpriteAssembler, _Assembler2D);
      function MeshSpriteAssembler() {
        return _Assembler2D.apply(this, arguments) || this;
      }
      var _proto = MeshSpriteAssembler.prototype;
      _proto.initData = function initData(sprite) {
        this._renderData.createFlexData(0, 4, 6, this.getVfmt());
      };
      _proto.updateRenderData = function updateRenderData(sprite) {
        this.packToDynamicAtlas(sprite, sprite._spriteFrame);
        var frame = sprite.spriteFrame;
        if (frame) {
          var vertices = frame.vertices;
          if (vertices) {
            this.verticesCount = vertices.x.length;
            this.indicesCount = vertices.triangles.length;
            var renderData = this._renderData;
            var flexBuffer = renderData._flexBuffer;
            if (flexBuffer.reserve(this.verticesCount, this.indicesCount)) {
              this.updateColor(sprite);
              sprite._vertsDirty = true;
            }
            flexBuffer.used(this.verticesCount, this.indicesCount);
            this.updateIndices(vertices.triangles);
            if (sprite._vertsDirty) {
              this.updateUVs(sprite);
              this.updateVerts(sprite);
              this.updateWorldVerts(sprite);
              sprite._vertsDirty = false;
            }
          }
        }
      };
      _proto.updateIndices = function updateIndices(triangles) {
        this._renderData.iDatas[0].set(triangles);
      };
      _proto.updateUVs = function updateUVs(sprite) {
        var vertices = sprite.spriteFrame.vertices, u = vertices.nu, v = vertices.nv;
        var uvOffset = this.uvOffset;
        var floatsPerVert = this.floatsPerVert;
        var verts = this._renderData.vDatas[0];
        for (var i = 0; i < u.length; i++) {
          var dstOffset = floatsPerVert * i + uvOffset;
          verts[dstOffset] = u[i];
          verts[dstOffset + 1] = v[i];
        }
      };
      _proto.updateVerts = function updateVerts(sprite) {
        var node = sprite.node, contentWidth = Math.abs(node.width), contentHeight = Math.abs(node.height), appx = node.anchorX * contentWidth, appy = node.anchorY * contentHeight;
        var frame = sprite.spriteFrame, vertices = frame.vertices, x = vertices.x, y = vertices.y, originalWidth = frame._originalSize.width, originalHeight = frame._originalSize.height, rectWidth = frame._rect.width, rectHeight = frame._rect.height, offsetX = frame._offset.x, offsetY = frame._offset.y, trimX = offsetX + (originalWidth - rectWidth) / 2, trimY = offsetY + (originalHeight - rectHeight) / 2;
        var scaleX = contentWidth / (sprite.trim ? rectWidth : originalWidth), scaleY = contentHeight / (sprite.trim ? rectHeight : originalHeight);
        var local = this._local;
        if (sprite.trim) for (var _i = 0, _l = x.length; _i < _l; _i++) {
          var _offset = 2 * _i;
          local[_offset] = (x[_i] - trimX) * scaleX - appx;
          local[_offset + 1] = (originalHeight - y[_i] - trimY) * scaleY - appy;
        } else for (var i = 0, l = x.length; i < l; i++) {
          var offset = 2 * i;
          local[offset] = x[i] * scaleX - appx;
          local[offset + 1] = (originalHeight - y[i]) * scaleY - appy;
        }
      };
      _proto.updateWorldVerts = function updateWorldVerts(sprite) {
        var node = sprite.node;
        var matrix = node._worldMatrix;
        var matrixm = matrix.m;
        var a = matrixm[0], b = matrixm[1], c = matrixm[4], d = matrixm[5], tx = matrixm[12], ty = matrixm[13];
        var local = this._local;
        var world = this._renderData.vDatas[0];
        var floatsPerVert = this.floatsPerVert;
        for (var i = 0, l = this.verticesCount; i < l; i++) {
          var lx = local[2 * i];
          var ly = local[2 * i + 1];
          world[floatsPerVert * i] = lx * a + ly * c + tx;
          world[floatsPerVert * i + 1] = lx * b + ly * d + ty;
        }
      };
      return MeshSpriteAssembler;
    })(_assembler2d["default"]);
    exports["default"] = MeshSpriteAssembler;
    module.exports = exports["default"];
  }), {
    "../../../../assembler-2d": 166
  } ],
  189: [ (function(require, module, exports) {
    "use strict";
    exports.__esModule = true;
    exports["default"] = void 0;
    var _assembler2d = _interopRequireDefault(require("../../../../assembler-2d"));
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }
    function _inheritsLoose(subClass, superClass) {
      subClass.prototype = Object.create(superClass.prototype);
      subClass.prototype.constructor = subClass;
      subClass.__proto__ = superClass;
    }
    var PI_2 = 2 * Math.PI;
    var _vertPos = [ cc.v2(0, 0), cc.v2(0, 0), cc.v2(0, 0), cc.v2(0, 0) ];
    var _vertices = [ 0, 0, 0, 0 ];
    var _uvs = [ 0, 0, 0, 0, 0, 0, 0, 0 ];
    var _intersectPoint_1 = [ cc.v2(0, 0), cc.v2(0, 0), cc.v2(0, 0), cc.v2(0, 0) ];
    var _intersectPoint_2 = [ cc.v2(0, 0), cc.v2(0, 0), cc.v2(0, 0), cc.v2(0, 0) ];
    var _center = cc.v2(0, 0);
    var _triangles = [];
    function _calcInsectedPoints(left, right, bottom, top, center, angle, intersectPoints) {
      var sinAngle = Math.sin(angle);
      var cosAngle = Math.cos(angle);
      var tanAngle, cotAngle;
      if (0 !== Math.cos(angle)) {
        tanAngle = sinAngle / cosAngle;
        if ((left - center.x) * cosAngle > 0) {
          var yleft = center.y + tanAngle * (left - center.x);
          intersectPoints[0].x = left;
          intersectPoints[0].y = yleft;
        }
        if ((right - center.x) * cosAngle > 0) {
          var yright = center.y + tanAngle * (right - center.x);
          intersectPoints[2].x = right;
          intersectPoints[2].y = yright;
        }
      }
      if (0 !== Math.sin(angle)) {
        cotAngle = cosAngle / sinAngle;
        if ((top - center.y) * sinAngle > 0) {
          var xtop = center.x + cotAngle * (top - center.y);
          intersectPoints[3].x = xtop;
          intersectPoints[3].y = top;
        }
        if ((bottom - center.y) * sinAngle > 0) {
          var xbottom = center.x + cotAngle * (bottom - center.y);
          intersectPoints[1].x = xbottom;
          intersectPoints[1].y = bottom;
        }
      }
    }
    function _calculateVertices(sprite) {
      var node = sprite.node, width = node.width, height = node.height, appx = node.anchorX * width, appy = node.anchorY * height;
      var l = -appx, b = -appy, r = width - appx, t = height - appy;
      var vertices = _vertices;
      vertices[0] = l;
      vertices[1] = b;
      vertices[2] = r;
      vertices[3] = t;
      var fillCenter = sprite._fillCenter, cx = _center.x = Math.min(Math.max(0, fillCenter.x), 1) * (r - l) + l, cy = _center.y = Math.min(Math.max(0, fillCenter.y), 1) * (t - b) + b;
      _vertPos[0].x = _vertPos[3].x = l;
      _vertPos[1].x = _vertPos[2].x = r;
      _vertPos[0].y = _vertPos[1].y = b;
      _vertPos[2].y = _vertPos[3].y = t;
      _triangles.length = 0;
      cx !== vertices[0] && (_triangles[0] = [ 3, 0 ]);
      cx !== vertices[2] && (_triangles[2] = [ 1, 2 ]);
      cy !== vertices[1] && (_triangles[1] = [ 0, 1 ]);
      cy !== vertices[3] && (_triangles[3] = [ 2, 3 ]);
    }
    function _calculateUVs(spriteFrame) {
      var atlasWidth = spriteFrame._texture.width;
      var atlasHeight = spriteFrame._texture.height;
      var textureRect = spriteFrame._rect;
      var u0, u1, v0, v1;
      var uvs = _uvs;
      if (spriteFrame._rotated) {
        u0 = textureRect.x / atlasWidth;
        u1 = (textureRect.x + textureRect.height) / atlasWidth;
        v0 = textureRect.y / atlasHeight;
        v1 = (textureRect.y + textureRect.width) / atlasHeight;
        uvs[0] = uvs[2] = u0;
        uvs[4] = uvs[6] = u1;
        uvs[3] = uvs[7] = v1;
        uvs[1] = uvs[5] = v0;
      } else {
        u0 = textureRect.x / atlasWidth;
        u1 = (textureRect.x + textureRect.width) / atlasWidth;
        v0 = textureRect.y / atlasHeight;
        v1 = (textureRect.y + textureRect.height) / atlasHeight;
        uvs[0] = uvs[4] = u0;
        uvs[2] = uvs[6] = u1;
        uvs[1] = uvs[3] = v1;
        uvs[5] = uvs[7] = v0;
      }
    }
    function _getVertAngle(start, end) {
      var placementX, placementY;
      placementX = end.x - start.x;
      placementY = end.y - start.y;
      if (0 === placementX && 0 === placementY) return;
      if (0 === placementX) return placementY > 0 ? .5 * Math.PI : 1.5 * Math.PI;
      var angle = Math.atan(placementY / placementX);
      placementX < 0 && (angle += Math.PI);
      return angle;
    }
    var RadialFilledAssembler = (function(_Assembler2D) {
      _inheritsLoose(RadialFilledAssembler, _Assembler2D);
      function RadialFilledAssembler() {
        return _Assembler2D.apply(this, arguments) || this;
      }
      var _proto = RadialFilledAssembler.prototype;
      _proto.initData = function initData(sprite) {
        this._renderData.createFlexData(0, 4, 6, this.getVfmt());
        this.updateIndices();
      };
      _proto.updateRenderData = function updateRenderData(sprite) {
        _Assembler2D.prototype.updateRenderData.call(this, sprite);
        var frame = sprite.spriteFrame;
        this.packToDynamicAtlas(sprite, frame);
        if (sprite._vertsDirty) {
          var fillStart = sprite._fillStart;
          var fillRange = sprite._fillRange;
          if (fillRange < 0) {
            fillStart += fillRange;
            fillRange = -fillRange;
          }
          while (fillStart >= 1) fillStart -= 1;
          while (fillStart < 0) fillStart += 1;
          fillStart *= PI_2;
          fillRange *= PI_2;
          _calculateVertices(sprite);
          _calculateUVs(frame);
          _calcInsectedPoints(_vertices[0], _vertices[2], _vertices[1], _vertices[3], _center, fillStart, _intersectPoint_1);
          _calcInsectedPoints(_vertices[0], _vertices[2], _vertices[1], _vertices[3], _center, fillStart + fillRange, _intersectPoint_2);
          this.updateVerts(sprite, fillStart, fillRange);
          sprite._vertsDirty = false;
        }
      };
      _proto.updateVerts = function updateVerts(sprite, fillStart, fillRange) {
        var fillEnd = fillStart + fillRange;
        var local = this._local;
        local.length = 0;
        var offset = 0;
        var floatsPerTriangle = 3 * this.floatsPerVert;
        for (var triangleIndex = 0; triangleIndex < 4; ++triangleIndex) {
          var triangle = _triangles[triangleIndex];
          if (!triangle) continue;
          if (fillRange >= PI_2) {
            local.length = offset + floatsPerTriangle;
            this._generateTriangle(local, offset, _center, _vertPos[triangle[0]], _vertPos[triangle[1]]);
            offset += floatsPerTriangle;
            continue;
          }
          var startAngle = _getVertAngle(_center, _vertPos[triangle[0]]);
          var endAngle = _getVertAngle(_center, _vertPos[triangle[1]]);
          endAngle < startAngle && (endAngle += PI_2);
          startAngle -= PI_2;
          endAngle -= PI_2;
          for (var testIndex = 0; testIndex < 3; ++testIndex) {
            if (startAngle >= fillEnd) ; else if (startAngle >= fillStart) {
              local.length = offset + floatsPerTriangle;
              endAngle >= fillEnd ? this._generateTriangle(local, offset, _center, _vertPos[triangle[0]], _intersectPoint_2[triangleIndex]) : this._generateTriangle(local, offset, _center, _vertPos[triangle[0]], _vertPos[triangle[1]]);
              offset += floatsPerTriangle;
            } else if (endAngle <= fillStart) ; else if (endAngle <= fillEnd) {
              local.length = offset + floatsPerTriangle;
              this._generateTriangle(local, offset, _center, _intersectPoint_1[triangleIndex], _vertPos[triangle[1]]);
              offset += floatsPerTriangle;
            } else {
              local.length = offset + floatsPerTriangle;
              this._generateTriangle(local, offset, _center, _intersectPoint_1[triangleIndex], _intersectPoint_2[triangleIndex]);
              offset += floatsPerTriangle;
            }
            startAngle += PI_2;
            endAngle += PI_2;
          }
        }
        this.allocWorldVerts(sprite);
        this.updateWorldVerts(sprite);
      };
      _proto.allocWorldVerts = function allocWorldVerts(sprite) {
        var color = sprite.node._color._val;
        var renderData = this._renderData;
        var floatsPerVert = this.floatsPerVert;
        var local = this._local;
        var verticesCount = local.length / floatsPerVert;
        this.verticesCount = this.indicesCount = verticesCount;
        var flexBuffer = renderData._flexBuffer;
        flexBuffer.reserve(verticesCount, verticesCount) && this.updateIndices();
        flexBuffer.used(this.verticesCount, this.indicesCount);
        var verts = renderData.vDatas[0], uintVerts = renderData.uintVDatas[0];
        var uvOffset = this.uvOffset;
        for (var offset = 0; offset < local.length; offset += floatsPerVert) {
          var start = offset + uvOffset;
          verts[start] = local[start];
          verts[start + 1] = local[start + 1];
          uintVerts[start + 2] = color;
        }
      };
      _proto.updateIndices = function updateIndices() {
        var iData = this._renderData.iDatas[0];
        for (var i = 0; i < iData.length; i++) iData[i] = i;
      };
      _proto.updateWorldVerts = function updateWorldVerts(sprite) {
        var node = sprite.node;
        var matrix = node._worldMatrix;
        var matrixm = matrix.m, a = matrixm[0], b = matrixm[1], c = matrixm[4], d = matrixm[5], tx = matrixm[12], ty = matrixm[13];
        var local = this._local;
        var world = this._renderData.vDatas[0];
        var floatsPerVert = this.floatsPerVert;
        for (var offset = 0; offset < local.length; offset += floatsPerVert) {
          var x = local[offset];
          var y = local[offset + 1];
          world[offset] = x * a + y * c + tx;
          world[offset + 1] = x * b + y * d + ty;
        }
      };
      _proto._generateTriangle = function _generateTriangle(verts, offset, vert0, vert1, vert2) {
        var vertices = _vertices;
        var v0x = vertices[0];
        var v0y = vertices[1];
        var v1x = vertices[2];
        var v1y = vertices[3];
        var floatsPerVert = this.floatsPerVert;
        verts[offset] = vert0.x;
        verts[offset + 1] = vert0.y;
        verts[offset + floatsPerVert] = vert1.x;
        verts[offset + floatsPerVert + 1] = vert1.y;
        verts[offset + 2 * floatsPerVert] = vert2.x;
        verts[offset + 2 * floatsPerVert + 1] = vert2.y;
        var uvOffset = this.uvOffset;
        var progressX, progressY;
        progressX = (vert0.x - v0x) / (v1x - v0x);
        progressY = (vert0.y - v0y) / (v1y - v0y);
        this._generateUV(progressX, progressY, verts, offset + uvOffset);
        progressX = (vert1.x - v0x) / (v1x - v0x);
        progressY = (vert1.y - v0y) / (v1y - v0y);
        this._generateUV(progressX, progressY, verts, offset + floatsPerVert + uvOffset);
        progressX = (vert2.x - v0x) / (v1x - v0x);
        progressY = (vert2.y - v0y) / (v1y - v0y);
        this._generateUV(progressX, progressY, verts, offset + 2 * floatsPerVert + uvOffset);
      };
      _proto._generateUV = function _generateUV(progressX, progressY, verts, offset) {
        var uvs = _uvs;
        var px1 = uvs[0] + (uvs[2] - uvs[0]) * progressX;
        var px2 = uvs[4] + (uvs[6] - uvs[4]) * progressX;
        var py1 = uvs[1] + (uvs[3] - uvs[1]) * progressX;
        var py2 = uvs[5] + (uvs[7] - uvs[5]) * progressX;
        verts[offset] = px1 + (px2 - px1) * progressY;
        verts[offset + 1] = py1 + (py2 - py1) * progressY;
      };
      return RadialFilledAssembler;
    })(_assembler2d["default"]);
    exports["default"] = RadialFilledAssembler;
    module.exports = exports["default"];
  }), {
    "../../../../assembler-2d": 166
  } ],
  190: [ (function(require, module, exports) {
    "use strict";
    exports.__esModule = true;
    exports["default"] = void 0;
    var _assembler2d = _interopRequireDefault(require("../../../../assembler-2d"));
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }
    function _inheritsLoose(subClass, superClass) {
      subClass.prototype = Object.create(superClass.prototype);
      subClass.prototype.constructor = subClass;
      subClass.__proto__ = superClass;
    }
    var SimpleSpriteAssembler = (function(_Assembler2D) {
      _inheritsLoose(SimpleSpriteAssembler, _Assembler2D);
      function SimpleSpriteAssembler() {
        return _Assembler2D.apply(this, arguments) || this;
      }
      var _proto = SimpleSpriteAssembler.prototype;
      _proto.updateRenderData = function updateRenderData(sprite) {
        this.packToDynamicAtlas(sprite, sprite._spriteFrame);
        if (sprite._vertsDirty) {
          this.updateUVs(sprite);
          this.updateVerts(sprite);
          sprite._vertsDirty = false;
        }
      };
      _proto.updateUVs = function updateUVs(sprite) {
        var uv = sprite._spriteFrame.uv;
        var uvOffset = this.uvOffset;
        var floatsPerVert = this.floatsPerVert;
        var verts = this._renderData.vDatas[0];
        for (var i = 0; i < 4; i++) {
          var srcOffset = 2 * i;
          var dstOffset = floatsPerVert * i + uvOffset;
          verts[dstOffset] = uv[srcOffset];
          verts[dstOffset + 1] = uv[srcOffset + 1];
        }
      };
      _proto.updateVerts = function updateVerts(sprite) {
        var node = sprite.node, cw = node.width, ch = node.height, appx = node.anchorX * cw, appy = node.anchorY * ch, l, b, r, t;
        if (sprite.trim) {
          l = -appx;
          b = -appy;
          r = cw - appx;
          t = ch - appy;
        } else {
          var frame = sprite.spriteFrame, ow = frame._originalSize.width, oh = frame._originalSize.height, rw = frame._rect.width, rh = frame._rect.height, offset = frame._offset, scaleX = cw / ow, scaleY = ch / oh;
          var trimLeft = offset.x + (ow - rw) / 2;
          var trimRight = offset.x - (ow - rw) / 2;
          var trimBottom = offset.y + (oh - rh) / 2;
          var trimTop = offset.y - (oh - rh) / 2;
          l = trimLeft * scaleX - appx;
          b = trimBottom * scaleY - appy;
          r = cw + trimRight * scaleX - appx;
          t = ch + trimTop * scaleY - appy;
        }
        var local = this._local;
        local[0] = l;
        local[1] = b;
        local[2] = r;
        local[3] = t;
        this.updateWorldVerts(sprite);
      };
      return SimpleSpriteAssembler;
    })(_assembler2d["default"]);
    exports["default"] = SimpleSpriteAssembler;
    module.exports = exports["default"];
  }), {
    "../../../../assembler-2d": 166
  } ],
  191: [ (function(require, module, exports) {
    "use strict";
    exports.__esModule = true;
    exports["default"] = void 0;
    var _assembler2d = _interopRequireDefault(require("../../../../assembler-2d"));
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }
    function _inheritsLoose(subClass, superClass) {
      subClass.prototype = Object.create(superClass.prototype);
      subClass.prototype.constructor = subClass;
      subClass.__proto__ = superClass;
    }
    var SlicedAssembler = (function(_Assembler2D) {
      _inheritsLoose(SlicedAssembler, _Assembler2D);
      function SlicedAssembler() {
        return _Assembler2D.apply(this, arguments) || this;
      }
      var _proto = SlicedAssembler.prototype;
      _proto.initData = function initData(sprite) {
        if (this._renderData.meshCount > 0) return;
        this._renderData.createData(0, this.verticesFloats, this.indicesCount);
        var indices = this._renderData.iDatas[0];
        var indexOffset = 0;
        for (var r = 0; r < 3; ++r) for (var c = 0; c < 3; ++c) {
          var start = 4 * r + c;
          indices[indexOffset++] = start;
          indices[indexOffset++] = start + 1;
          indices[indexOffset++] = start + 4;
          indices[indexOffset++] = start + 1;
          indices[indexOffset++] = start + 5;
          indices[indexOffset++] = start + 4;
        }
      };
      _proto.initLocal = function initLocal() {
        this._local = [];
        this._local.length = 8;
      };
      _proto.updateRenderData = function updateRenderData(sprite) {
        var frame = sprite._spriteFrame;
        this.packToDynamicAtlas(sprite, frame);
        if (sprite._vertsDirty) {
          this.updateUVs(sprite);
          this.updateVerts(sprite);
          sprite._vertsDirty = false;
        }
      };
      _proto.updateVerts = function updateVerts(sprite) {
        var node = sprite.node, width = node.width, height = node.height, appx = node.anchorX * width, appy = node.anchorY * height;
        var frame = sprite.spriteFrame;
        var leftWidth = frame.insetLeft;
        var rightWidth = frame.insetRight;
        var topHeight = frame.insetTop;
        var bottomHeight = frame.insetBottom;
        var sizableWidth = width - leftWidth - rightWidth;
        var sizableHeight = height - topHeight - bottomHeight;
        var xScale = width / (leftWidth + rightWidth);
        var yScale = height / (topHeight + bottomHeight);
        xScale = isNaN(xScale) || xScale > 1 ? 1 : xScale;
        yScale = isNaN(yScale) || yScale > 1 ? 1 : yScale;
        sizableWidth = sizableWidth < 0 ? 0 : sizableWidth;
        sizableHeight = sizableHeight < 0 ? 0 : sizableHeight;
        var local = this._local;
        local[0] = -appx;
        local[1] = -appy;
        local[2] = leftWidth * xScale - appx;
        local[3] = bottomHeight * yScale - appy;
        local[4] = local[2] + sizableWidth;
        local[5] = local[3] + sizableHeight;
        local[6] = width - appx;
        local[7] = height - appy;
        this.updateWorldVerts(sprite);
      };
      _proto.updateUVs = function updateUVs(sprite) {
        var verts = this._renderData.vDatas[0];
        var uvSliced = sprite.spriteFrame.uvSliced;
        var uvOffset = this.uvOffset;
        var floatsPerVert = this.floatsPerVert;
        for (var row = 0; row < 4; ++row) for (var col = 0; col < 4; ++col) {
          var vid = 4 * row + col;
          var uv = uvSliced[vid];
          var voffset = vid * floatsPerVert;
          verts[voffset + uvOffset] = uv.u;
          verts[voffset + uvOffset + 1] = uv.v;
        }
      };
      _proto.updateWorldVerts = function updateWorldVerts(sprite) {
        var matrix = sprite.node._worldMatrix;
        var matrixm = matrix.m, a = matrixm[0], b = matrixm[1], c = matrixm[4], d = matrixm[5], tx = matrixm[12], ty = matrixm[13];
        var local = this._local;
        var world = this._renderData.vDatas[0];
        var floatsPerVert = this.floatsPerVert;
        for (var row = 0; row < 4; ++row) {
          var localRowY = local[2 * row + 1];
          for (var col = 0; col < 4; ++col) {
            var localColX = local[2 * col];
            var worldIndex = (4 * row + col) * floatsPerVert;
            world[worldIndex] = localColX * a + localRowY * c + tx;
            world[worldIndex + 1] = localColX * b + localRowY * d + ty;
          }
        }
      };
      return SlicedAssembler;
    })(_assembler2d["default"]);
    exports["default"] = SlicedAssembler;
    Object.assign(SlicedAssembler.prototype, {
      verticesCount: 16,
      indicesCount: 54
    });
    module.exports = exports["default"];
  }), {
    "../../../../assembler-2d": 166
  } ],
  192: [ (function(require, module, exports) {
    "use strict";
    exports.__esModule = true;
    exports["default"] = void 0;
    var _assembler2d = _interopRequireDefault(require("../../../../assembler-2d"));
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }
    function _inheritsLoose(subClass, superClass) {
      subClass.prototype = Object.create(superClass.prototype);
      subClass.prototype.constructor = subClass;
      subClass.__proto__ = superClass;
    }
    var TiledAssembler = (function(_Assembler2D) {
      _inheritsLoose(TiledAssembler, _Assembler2D);
      function TiledAssembler() {
        return _Assembler2D.apply(this, arguments) || this;
      }
      var _proto = TiledAssembler.prototype;
      _proto.initData = function initData(sprite) {
        this.verticesCount = 0;
        this.contentWidth = 0;
        this.contentHeight = 0;
        this.rectWidth = 0;
        this.rectHeight = 0;
        this.hRepeat = 0;
        this.vRepeat = 0;
        this.row = 0;
        this.col = 0;
        this._renderData.createFlexData(0, 4, 6, this.getVfmt());
        this._updateIndices();
      };
      _proto.initLocal = function initLocal() {
        this._local = {
          x: [],
          y: []
        };
      };
      _proto._updateIndices = function _updateIndices() {
        var iData = this._renderData.iDatas[0];
        for (var i = 0, vid = 0, l = iData.length; i < l; i += 6, vid += 4) {
          iData[i] = vid;
          iData[i + 1] = vid + 1;
          iData[i + 2] = vid + 2;
          iData[i + 3] = vid + 1;
          iData[i + 4] = vid + 3;
          iData[i + 5] = vid + 2;
        }
      };
      _proto.updateRenderData = function updateRenderData(sprite) {
        var frame = sprite._spriteFrame;
        this.packToDynamicAtlas(sprite, frame);
        var node = sprite.node;
        var contentWidth = this.contentWidth = Math.abs(node.width);
        var contentHeight = this.contentHeight = Math.abs(node.height);
        var rect = frame._rect;
        var leftWidth = frame.insetLeft, rightWidth = frame.insetRight, centerWidth = rect.width - leftWidth - rightWidth, topHeight = frame.insetTop, bottomHeight = frame.insetBottom, centerHeight = rect.height - topHeight - bottomHeight;
        this.sizableWidth = contentWidth - leftWidth - rightWidth;
        this.sizableHeight = contentHeight - topHeight - bottomHeight;
        this.sizableWidth = this.sizableWidth > 0 ? this.sizableWidth : 0;
        this.sizableHeight = this.sizableHeight > 0 ? this.sizableHeight : 0;
        var hRepeat = this.hRepeat = 0 === centerWidth ? this.sizableWidth : this.sizableWidth / centerWidth;
        var vRepeat = this.vRepeat = 0 === centerHeight ? this.sizableHeight : this.sizableHeight / centerHeight;
        var row = this.row = Math.ceil(vRepeat + 2);
        var col = this.col = Math.ceil(hRepeat + 2);
        var count = row * col;
        this.verticesCount = 4 * count;
        this.indicesCount = 6 * count;
        var renderData = this._renderData;
        var flexBuffer = renderData._flexBuffer;
        if (flexBuffer.reserve(this.verticesCount, this.indicesCount)) {
          this._updateIndices();
          this.updateColor(sprite);
        }
        flexBuffer.used(this.verticesCount, this.indicesCount);
        if (sprite._vertsDirty) {
          this.updateUVs(sprite);
          this.updateVerts(sprite);
          sprite._vertsDirty = false;
        }
      };
      _proto.updateVerts = function updateVerts(sprite) {
        var frame = sprite._spriteFrame;
        var rect = frame._rect;
        var node = sprite.node, appx = node.anchorX * node.width, appy = node.anchorY * node.height;
        var row = this.row, col = this.col, contentWidth = this.contentWidth, contentHeight = this.contentHeight;
        var _this$_local = this._local, x = _this$_local.x, y = _this$_local.y;
        x.length = y.length = 0;
        var leftWidth = frame.insetLeft, rightWidth = frame.insetRight, centerWidth = rect.width - leftWidth - rightWidth, topHeight = frame.insetTop, bottomHeight = frame.insetBottom, centerHeight = rect.height - topHeight - bottomHeight;
        var xScale = node.width / (leftWidth + rightWidth) > 1 ? 1 : node.width / (leftWidth + rightWidth);
        var yScale = node.height / (topHeight + bottomHeight) > 1 ? 1 : node.height / (topHeight + bottomHeight);
        var offsetWidth = 0, offsetHeight = 0;
        offsetWidth = centerWidth > 0 ? Math.floor(1e3 * this.sizableWidth) / 1e3 % centerWidth === 0 ? centerWidth : this.sizableWidth % centerWidth : this.sizableWidth;
        offsetHeight = centerHeight > 0 ? Math.floor(1e3 * this.sizableHeight) / 1e3 % centerHeight === 0 ? centerHeight : this.sizableHeight % centerHeight : this.sizableHeight;
        for (var i = 0; i <= col; i++) 0 === i ? x[i] = -appx : i > 0 && i < col ? x[i] = 1 === i ? leftWidth * xScale + Math.min(centerWidth, this.sizableWidth) - appx : centerWidth > 0 ? i === col - 1 ? leftWidth + offsetWidth + centerWidth * (i - 2) - appx : leftWidth + Math.min(centerWidth, this.sizableWidth) + centerWidth * (i - 2) - appx : leftWidth + this.sizableWidth - appx : i === col && (x[i] = Math.min(leftWidth + this.sizableWidth + rightWidth, contentWidth) - appx);
        for (var _i = 0; _i <= row; _i++) 0 === _i ? y[_i] = -appy : _i > 0 && _i < row ? y[_i] = 1 === _i ? bottomHeight * yScale + Math.min(centerHeight, this.sizableHeight) - appy : centerHeight > 0 ? _i === row - 1 ? bottomHeight + offsetHeight + (_i - 2) * centerHeight - appy : bottomHeight + Math.min(centerHeight, this.sizableHeight) + (_i - 2) * centerHeight - appy : bottomHeight + this.sizableHeight - appy : _i === row && (y[_i] = Math.min(bottomHeight + this.sizableHeight + topHeight, contentHeight) - appy);
        this.updateWorldVerts(sprite);
      };
      _proto.updateWorldVerts = function updateWorldVerts(sprite) {
        var renderData = this._renderData;
        var local = this._local;
        var localX = local.x, localY = local.y;
        var world = renderData.vDatas[0];
        var row = this.row, col = this.col;
        var matrix = sprite.node._worldMatrix;
        var matrixm = matrix.m;
        var a = matrixm[0], b = matrixm[1], c = matrixm[4], d = matrixm[5], tx = matrixm[12], ty = matrixm[13];
        var x, x1, y, y1;
        var floatsPerVert = this.floatsPerVert;
        var vertexOffset = 0;
        for (var yindex = 0, ylength = row; yindex < ylength; ++yindex) {
          y = localY[yindex];
          y1 = localY[yindex + 1];
          for (var xindex = 0, xlength = col; xindex < xlength; ++xindex) {
            x = localX[xindex];
            x1 = localX[xindex + 1];
            world[vertexOffset] = x * a + y * c + tx;
            world[vertexOffset + 1] = x * b + y * d + ty;
            vertexOffset += floatsPerVert;
            world[vertexOffset] = x1 * a + y * c + tx;
            world[vertexOffset + 1] = x1 * b + y * d + ty;
            vertexOffset += floatsPerVert;
            world[vertexOffset] = x * a + y1 * c + tx;
            world[vertexOffset + 1] = x * b + y1 * d + ty;
            vertexOffset += floatsPerVert;
            world[vertexOffset] = x1 * a + y1 * c + tx;
            world[vertexOffset + 1] = x1 * b + y1 * d + ty;
            vertexOffset += floatsPerVert;
          }
        }
      };
      _proto.updateUVs = function updateUVs(sprite) {
        var verts = this._renderData.vDatas[0];
        if (!verts) return;
        var frame = sprite._spriteFrame;
        var rect = frame._rect;
        var leftWidth = frame.insetLeft, rightWidth = frame.insetRight, centerWidth = rect.width - leftWidth - rightWidth, topHeight = frame.insetTop, bottomHeight = frame.insetBottom, centerHeight = rect.height - topHeight - bottomHeight;
        var row = this.row, col = this.col, hRepeat = this.hRepeat, vRepeat = this.vRepeat;
        var coefu = 0, coefv = 0;
        var uv = sprite.spriteFrame.uv;
        var uvSliced = sprite.spriteFrame.uvSliced;
        var rotated = sprite.spriteFrame._rotated;
        var floatsPerVert = this.floatsPerVert, uvOffset = this.uvOffset;
        for (var yindex = 0, ylength = row; yindex < ylength; ++yindex) {
          coefv = this.sizableHeight > centerHeight ? this.sizableHeight >= yindex * centerHeight ? 1 : vRepeat % 1 : vRepeat;
          for (var xindex = 0, xlength = col; xindex < xlength; ++xindex) {
            coefu = this.sizableWidth > centerWidth ? this.sizableWidth >= xindex * centerWidth ? 1 : hRepeat % 1 : hRepeat;
            if (rotated) {
              verts[uvOffset] = uv[0];
              verts[uvOffset + 1] = uv[1];
              uvOffset += floatsPerVert;
              verts[uvOffset] = uv[0];
              verts[uvOffset + 1] = uv[1] + (uv[7] - uv[1]) * coefu;
              uvOffset += floatsPerVert;
              verts[uvOffset] = uv[0] + (uv[6] - uv[0]) * coefv;
              verts[uvOffset + 1] = uv[1];
              uvOffset += floatsPerVert;
              verts[uvOffset] = verts[uvOffset - floatsPerVert];
              verts[uvOffset + 1] = verts[uvOffset + 1 - 2 * floatsPerVert];
              uvOffset += floatsPerVert;
            } else {
              0 === xindex ? verts[uvOffset] = uv[0] : xindex > 0 && xindex < col - 1 ? verts[uvOffset] = uvSliced[1].u : xindex === col - 1 && (verts[uvOffset] = uvSliced[2].u);
              0 === yindex ? verts[uvOffset + 1] = uvSliced[0].v : yindex > 0 && yindex < row - 1 ? verts[uvOffset + 1] = uvSliced[4].v : yindex === row - 1 && (verts[uvOffset + 1] = uvSliced[8].v);
              uvOffset += floatsPerVert;
              0 === xindex ? verts[uvOffset] = uvSliced[1].u + (uvSliced[2].u - uvSliced[1].u) * coefu : xindex > 0 && xindex < col - 1 ? verts[uvOffset] = uvSliced[1].u + (uvSliced[2].u - uvSliced[1].u) * coefu : xindex === col - 1 && (verts[uvOffset] = uvSliced[3].u);
              0 === yindex ? verts[uvOffset + 1] = uvSliced[0].v : yindex > 0 && yindex < row - 1 ? verts[uvOffset + 1] = uvSliced[4].v : yindex === row - 1 && (verts[uvOffset + 1] = uvSliced[8].v);
              uvOffset += floatsPerVert;
              0 === xindex ? verts[uvOffset] = uv[0] : xindex > 0 && xindex < col - 1 ? verts[uvOffset] = uvSliced[1].u : xindex === col - 1 && (verts[uvOffset] = uvSliced[2].u);
              0 === yindex ? verts[uvOffset + 1] = uvSliced[4].v + (uvSliced[8].v - uvSliced[4].v) * coefv : yindex > 0 && yindex < row - 1 ? verts[uvOffset + 1] = uvSliced[4].v + (uvSliced[8].v - uvSliced[4].v) * coefv : yindex === row - 1 && (verts[uvOffset + 1] = uvSliced[12].v);
              uvOffset += floatsPerVert;
              verts[uvOffset] = verts[uvOffset - 2 * floatsPerVert];
              verts[uvOffset + 1] = verts[uvOffset + 1 - floatsPerVert];
              uvOffset += floatsPerVert;
            }
          }
        }
      };
      return TiledAssembler;
    })(_assembler2d["default"]);
    exports["default"] = TiledAssembler;
    module.exports = exports["default"];
  }), {
    "../../../../assembler-2d": 166
  } ],
  193: [ (function(require, module, exports) {
    "use strict";
    var _assembler = _interopRequireDefault(require("../../../assembler"));
    var _CCSprite = require("../../../../components/CCSprite");
    var _simple = _interopRequireDefault(require("./2d/simple"));
    var _sliced = _interopRequireDefault(require("./2d/sliced"));
    var _tiled = _interopRequireDefault(require("./2d/tiled"));
    var _radialFilled = _interopRequireDefault(require("./2d/radial-filled"));
    var _barFilled = _interopRequireDefault(require("./2d/bar-filled"));
    var _mesh = _interopRequireDefault(require("./2d/mesh"));
    var _simple2 = _interopRequireDefault(require("./3d/simple"));
    var _sliced2 = _interopRequireDefault(require("./3d/sliced"));
    var _tiled2 = _interopRequireDefault(require("./3d/tiled"));
    var _radialFilled2 = _interopRequireDefault(require("./3d/radial-filled"));
    var _barFilled2 = _interopRequireDefault(require("./3d/bar-filled"));
    var _mesh2 = _interopRequireDefault(require("./3d/mesh"));
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }
    var ctor = {
      getConstructor: function getConstructor(sprite) {
        var is3DNode = sprite.node.is3DNode;
        var ctor = is3DNode ? _simple2["default"] : _simple["default"];
        switch (sprite.type) {
         case _CCSprite.Type.SLICED:
          ctor = is3DNode ? _sliced2["default"] : _sliced["default"];
          break;

         case _CCSprite.Type.TILED:
          ctor = is3DNode ? _tiled2["default"] : _tiled["default"];
          break;

         case _CCSprite.Type.FILLED:
          ctor = sprite._fillType === _CCSprite.FillType.RADIAL ? is3DNode ? _radialFilled2["default"] : _radialFilled["default"] : is3DNode ? _barFilled2["default"] : _barFilled["default"];
          break;

         case _CCSprite.Type.MESH:
          ctor = is3DNode ? _mesh2["default"] : _mesh["default"];
        }
        return ctor;
      },
      Simple: _simple["default"],
      Sliced: _sliced["default"],
      Tiled: _tiled["default"],
      RadialFilled: _radialFilled["default"],
      BarFilled: _barFilled["default"],
      Mesh: _mesh["default"],
      Simple3D: _simple2["default"],
      Sliced3D: _sliced2["default"],
      Tiled3D: _tiled2["default"],
      RadialFilled3D: _radialFilled2["default"],
      BarFilled3D: _barFilled2["default"],
      Mesh3D: _mesh2["default"]
    };
    _assembler["default"].register(cc.Sprite, ctor);
  }), {
    "../../../../components/CCSprite": 95,
    "../../../assembler": 168,
    "./2d/bar-filled": 187,
    "./2d/mesh": 188,
    "./2d/radial-filled": 189,
    "./2d/simple": 190,
    "./2d/sliced": 191,
    "./2d/tiled": 192,
    "./3d/bar-filled": void 0,
    "./3d/mesh": void 0,
    "./3d/radial-filled": void 0,
    "./3d/simple": void 0,
    "./3d/sliced": void 0,
    "./3d/tiled": void 0
  } ],
  194: [ (function(require, module, exports) {
    "use strict";
    exports.__esModule = true;
    exports["default"] = void 0;
    var FlexBuffer = (function() {
      function FlexBuffer(handler, index, verticesCount, indicesCount, vfmt) {
        this._handler = handler;
        this._index = index;
        this._vfmt = vfmt;
        this._verticesBytes = vfmt._bytes;
        this._initVerticesCount = verticesCount;
        this._initIndicesCount = indicesCount;
        this.reset();
      }
      var _proto = FlexBuffer.prototype;
      _proto._reallocVData = function _reallocVData(floatsCount, oldData) {
        this.vData = new Float32Array(floatsCount);
        this.uintVData = new Uint32Array(this.vData.buffer);
        oldData && this.vData.set(oldData);
        this._handler.updateMesh(this._index, this.vData, this.iData);
      };
      _proto._reallocIData = function _reallocIData(indicesCount, oldData) {
        this.iData = new Uint16Array(indicesCount);
        oldData && this.iData.set(oldData);
        this._handler.updateMesh(this._index, this.vData, this.iData);
      };
      _proto.reserve = function reserve(verticesCount, indicesCount) {
        var floatsCount = verticesCount * this._verticesBytes >> 2;
        var newFloatsCount = this.vData.length;
        var realloced = false;
        if (floatsCount > newFloatsCount) {
          while (newFloatsCount < floatsCount) newFloatsCount *= 2;
          this._reallocVData(newFloatsCount, this.vData);
          realloced = true;
        }
        var newIndicesCount = this.iData.length;
        if (indicesCount > newIndicesCount) {
          while (newIndicesCount < indicesCount) newIndicesCount *= 2;
          this._reallocIData(indicesCount, this.iData);
          realloced = true;
        }
        return realloced;
      };
      _proto.used = function used(verticesCount, indicesCount) {
        this.usedVertices = verticesCount;
        this.usedIndices = indicesCount;
        this.usedVerticesFloats = verticesCount * this._verticesBytes >> 2;
        this._handler.updateMeshRange(verticesCount, indicesCount);
      };
      _proto.reset = function reset() {
        var floatsCount = this._initVerticesCount * this._verticesBytes >> 2;
        this._reallocVData(floatsCount);
        this._reallocIData(this._initIndicesCount);
        this.usedVertices = 0;
        this.usedVerticesFloats = 0;
        this.usedIndices = 0;
      };
      return FlexBuffer;
    })();
    exports["default"] = FlexBuffer;
    cc.FlexBuffer = FlexBuffer;
    module.exports = exports["default"];
  }), {} ],
  195: [ (function(require, module, exports) {
    "use strict";
    var _gfx = _interopRequireDefault(require("../../../renderer/gfx"));
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }
    var MeshBuffer = cc.Class({
      name: "cc.MeshBuffer",
      ctor: function ctor(batcher, vertexFormat) {
        this.init(batcher, vertexFormat);
      },
      init: function init(batcher, vertexFormat) {
        this.byteOffset = 0;
        this.indiceOffset = 0;
        this.vertexOffset = 0;
        this.indiceStart = 0;
        this._dirty = false;
        this._vertexFormat = vertexFormat;
        this._vertexBytes = this._vertexFormat._bytes;
        this._arrOffset = 0;
        this._vbArr = [];
        this._vb = new _gfx["default"].VertexBuffer(batcher._device, vertexFormat, _gfx["default"].USAGE_DYNAMIC, new ArrayBuffer(), 0);
        this._vbArr[0] = this._vb;
        this._ibArr = [];
        this._ib = new _gfx["default"].IndexBuffer(batcher._device, _gfx["default"].INDEX_FMT_UINT16, _gfx["default"].USAGE_STATIC, new ArrayBuffer(), 0);
        this._ibArr[0] = this._ib;
        this._vData = null;
        this._uintVData = null;
        this._iData = null;
        this._batcher = batcher;
        this._initVDataCount = 256 * vertexFormat._bytes;
        this._initIDataCount = 1536;
        this._offsetInfo = {
          byteOffset: 0,
          vertexOffset: 0,
          indiceOffset: 0
        };
        this._reallocBuffer();
      },
      uploadData: function uploadData() {
        if (0 === this.byteOffset || !this._dirty) return;
        var vertexsData = new Float32Array(this._vData.buffer, 0, this.byteOffset >> 2);
        var indicesData = new Uint16Array(this._iData.buffer, 0, this.indiceOffset);
        var vb = this._vb;
        vb.update(0, vertexsData);
        var ib = this._ib;
        ib.update(0, indicesData);
        this._dirty = false;
      },
      switchBuffer: function switchBuffer() {
        var offset = ++this._arrOffset;
        this.byteOffset = 0;
        this.vertexOffset = 0;
        this.indiceOffset = 0;
        this.indiceStart = 0;
        if (offset < this._vbArr.length) {
          this._vb = this._vbArr[offset];
          this._ib = this._ibArr[offset];
        } else {
          this._vb = new _gfx["default"].VertexBuffer(this._batcher._device, this._vertexFormat, _gfx["default"].USAGE_DYNAMIC, new ArrayBuffer(), 0);
          this._vbArr[offset] = this._vb;
          this._ib = new _gfx["default"].IndexBuffer(this._batcher._device, _gfx["default"].INDEX_FMT_UINT16, _gfx["default"].USAGE_STATIC, new ArrayBuffer(), 0);
          this._ibArr[offset] = this._ib;
        }
      },
      checkAndSwitchBuffer: function checkAndSwitchBuffer(vertexCount) {
        if (this.vertexOffset + vertexCount > 65535) {
          this.uploadData();
          this._batcher._flush();
          this.switchBuffer();
        }
      },
      requestStatic: function requestStatic(vertexCount, indiceCount) {
        this.checkAndSwitchBuffer(vertexCount);
        var byteOffset = this.byteOffset + vertexCount * this._vertexBytes;
        var indiceOffset = this.indiceOffset + indiceCount;
        var byteLength = this._vData.byteLength;
        var indiceLength = this._iData.length;
        if (byteOffset > byteLength || indiceOffset > indiceLength) {
          while (byteLength < byteOffset || indiceLength < indiceOffset) {
            this._initVDataCount *= 2;
            this._initIDataCount *= 2;
            byteLength = 4 * this._initVDataCount;
            indiceLength = this._initIDataCount;
          }
          this._reallocBuffer();
        }
        this._updateOffset(vertexCount, indiceCount, byteOffset);
      },
      _updateOffset: function _updateOffset(vertexCount, indiceCount, byteOffset) {
        var offsetInfo = this._offsetInfo;
        offsetInfo.vertexOffset = this.vertexOffset;
        this.vertexOffset += vertexCount;
        offsetInfo.indiceOffset = this.indiceOffset;
        this.indiceOffset += indiceCount;
        offsetInfo.byteOffset = this.byteOffset;
        this.byteOffset = byteOffset;
        this._dirty = true;
      },
      request: function request(vertexCount, indiceCount) {
        if (this._batcher._buffer !== this) {
          this._batcher._flush();
          this._batcher._buffer = this;
        }
        this.requestStatic(vertexCount, indiceCount);
        return this._offsetInfo;
      },
      _reallocBuffer: function _reallocBuffer() {
        this._reallocVData(true);
        this._reallocIData(true);
      },
      _reallocVData: function _reallocVData(copyOldData) {
        var oldVData;
        this._vData && (oldVData = new Uint8Array(this._vData.buffer));
        this._vData = new Float32Array(this._initVDataCount);
        this._uintVData = new Uint32Array(this._vData.buffer);
        var newData = new Uint8Array(this._uintVData.buffer);
        if (oldVData && copyOldData) for (var i = 0, l = oldVData.length; i < l; i++) newData[i] = oldVData[i];
      },
      _reallocIData: function _reallocIData(copyOldData) {
        var oldIData = this._iData;
        this._iData = new Uint16Array(this._initIDataCount);
        if (oldIData && copyOldData) {
          var iData = this._iData;
          for (var i = 0, l = oldIData.length; i < l; i++) iData[i] = oldIData[i];
        }
      },
      reset: function reset() {
        this._arrOffset = 0;
        this._vb = this._vbArr[0];
        this._ib = this._ibArr[0];
        this.byteOffset = 0;
        this.indiceOffset = 0;
        this.vertexOffset = 0;
        this.indiceStart = 0;
        this._dirty = false;
      },
      destroy: function destroy() {
        this.reset();
        for (var i = 0; i < this._vbArr.length; i++) {
          var vb = this._vbArr[i];
          vb.destroy();
        }
        this._vbArr = null;
        for (var _i = 0; _i < this._ibArr.length; _i++) {
          var ib = this._ibArr[_i];
          ib.destroy();
        }
        this._ibArr = null;
        this._ib = null;
        this._vb = null;
      },
      forwardIndiceStartToOffset: function forwardIndiceStartToOffset() {
        this.indiceStart = this.indiceOffset;
      }
    });
    cc.MeshBuffer = module.exports = MeshBuffer;
  }), {
    "../../../renderer/gfx": 252
  } ],
  196: [ (function(require, module, exports) {
    "use strict";
    var _inputAssembler = _interopRequireDefault(require("../../../renderer/core/input-assembler"));
    var _recyclePool = _interopRequireDefault(require("../../../renderer/memop/recycle-pool"));
    var _model = _interopRequireDefault(require("../../../renderer/scene/model"));
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }
    var _require = require("./vertex-format"), vfmtPosUvColor = _require.vfmtPosUvColor, vfmt3D = _require.vfmt3D;
    var QuadBuffer = require("./quad-buffer");
    var MeshBuffer = require("./mesh-buffer");
    var SpineBuffer = require("./spine-buffer");
    var Material = require("../../assets/material/CCMaterial");
    var idGenerater = new (require("../../platform/id-generater"))("VertextFormat");
    var _buffers = {};
    var empty_material = new Material();
    var empty_ia = new _inputAssembler["default"]();
    empty_ia._count = 0;
    var ModelBatcher = function ModelBatcher(device, renderScene) {
      this._renderScene = renderScene;
      this._device = device;
      this.walking = false;
      this.material = empty_material;
      this.cullingMask = 1;
      this._iaPool = new _recyclePool["default"](function() {
        return new _inputAssembler["default"]();
      }, 16);
      this._modelPool = new _recyclePool["default"](function() {
        return new _model["default"]();
      }, 16);
      this._quadBuffer = this.getBuffer("quad", vfmtPosUvColor);
      this._meshBuffer = this.getBuffer("mesh", vfmtPosUvColor);
      this._quadBuffer3D = this.getBuffer("quad", vfmt3D);
      this._meshBuffer3D = this.getBuffer("mesh", vfmt3D);
      this._buffer = this._meshBuffer;
      this._batchedModels = [];
      this._dummyNode = new cc.Node();
      this._sortKey = 0;
      this.node = this._dummyNode;
      this.parentOpacity = 1;
      this.parentOpacityDirty = 0;
      this.worldMatDirty = 0;
    };
    ModelBatcher.prototype = {
      constructor: ModelBatcher,
      reset: function reset() {
        this._iaPool.reset();
        var scene = this._renderScene;
        var models = this._batchedModels;
        for (var i = 0; i < models.length; ++i) {
          models[i].setInputAssembler(null);
          models[i].setEffect(null);
          scene.removeModel(models[i]);
        }
        this._modelPool.reset();
        models.length = 0;
        this._sortKey = 0;
        for (var key in _buffers) _buffers[key].reset();
        this._buffer = this._meshBuffer;
        this.node = this._dummyNode;
        this.material = empty_material;
        this.cullingMask = 1;
        this.parentOpacity = 1;
        this.parentOpacityDirty = 0;
        this.worldMatDirty = 0;
      },
      _flushMaterial: function _flushMaterial(material) {
        if (!material) return;
        this.material = material;
        var effect = material.effect;
        if (!effect) return;
        var model = this._modelPool.add();
        this._batchedModels.push(model);
        model.sortKey = this._sortKey++;
        model._cullingMask = this.cullingMask;
        model.setNode(this.node);
        model.setEffect(effect, null);
        model.setInputAssembler(empty_ia);
        this._renderScene.addModel(model);
      },
      _flush: function _flush() {
        var material = this.material, buffer = this._buffer, indiceCount = buffer.indiceOffset - buffer.indiceStart;
        if (!this.walking || !material || indiceCount <= 0) return;
        var effect = material.effect;
        if (!effect) return;
        var ia = this._iaPool.add();
        ia._vertexBuffer = buffer._vb;
        ia._indexBuffer = buffer._ib;
        ia._start = buffer.indiceStart;
        ia._count = indiceCount;
        var model = this._modelPool.add();
        this._batchedModels.push(model);
        model.sortKey = this._sortKey++;
        model._cullingMask = this.cullingMask;
        model.setNode(this.node);
        model.setEffect(effect);
        model.setInputAssembler(ia);
        this._renderScene.addModel(model);
        buffer.forwardIndiceStartToOffset();
      },
      _flushIA: function _flushIA(ia) {
        if (!ia) return;
        var material = this.material;
        var effect = material.effect;
        if (!effect) return;
        var model = this._modelPool.add();
        this._batchedModels.push(model);
        model.sortKey = this._sortKey++;
        model._cullingMask = this.cullingMask;
        model.setNode(this.node);
        model.setEffect(effect);
        model.setInputAssembler(ia);
        this._renderScene.addModel(model);
      },
      terminate: function terminate() {
        cc.dynamicAtlasManager && cc.dynamicAtlasManager.enabled && cc.dynamicAtlasManager.update();
        this._flush();
        for (var key in _buffers) _buffers[key].uploadData();
        this.walking = false;
      },
      getBuffer: function getBuffer(type, vertextFormat) {
        var key = type + vertextFormat.getHash();
        var buffer = _buffers[key];
        if (!buffer) {
          if ("mesh" === type) buffer = new MeshBuffer(this, vertextFormat); else if ("quad" === type) buffer = new QuadBuffer(this, vertextFormat); else {
            if ("spine" !== type) {
              cc.error("Not support buffer type [" + type + "]");
              return null;
            }
            buffer = new SpineBuffer(this, vertextFormat);
          }
          _buffers[key] = buffer;
        }
        return buffer;
      }
    };
    module.exports = ModelBatcher;
  }), {
    "../../../renderer/core/input-assembler": 242,
    "../../../renderer/memop/recycle-pool": 267,
    "../../../renderer/scene/model": 273,
    "../../assets/material/CCMaterial": 67,
    "../../platform/id-generater": 157,
    "./mesh-buffer": 195,
    "./quad-buffer": 197,
    "./spine-buffer": 199,
    "./vertex-format": 200
  } ],
  197: [ (function(require, module, exports) {
    "use strict";
    var MeshBuffer = require("./mesh-buffer");
    var QuadBuffer = cc.Class({
      name: "cc.QuadBuffer",
      extends: MeshBuffer,
      _fillQuadBuffer: function _fillQuadBuffer() {
        var count = this._initIDataCount / 6;
        var buffer = this._iData;
        for (var i = 0, idx = 0; i < count; i++) {
          var vertextID = 4 * i;
          buffer[idx++] = vertextID;
          buffer[idx++] = vertextID + 1;
          buffer[idx++] = vertextID + 2;
          buffer[idx++] = vertextID + 1;
          buffer[idx++] = vertextID + 3;
          buffer[idx++] = vertextID + 2;
        }
        var indicesData = new Uint16Array(this._iData.buffer, 0, 6 * count);
        this._ib.update(0, indicesData);
      },
      uploadData: function uploadData() {
        if (0 === this.byteOffset || !this._dirty) return;
        var vertexsData = new Float32Array(this._vData.buffer, 0, this.byteOffset >> 2);
        this._vb.update(0, vertexsData);
        this._dirty = false;
      },
      switchBuffer: function switchBuffer() {
        this._super();
        var indicesData = new Uint16Array(this._iData.buffer, 0, this._initIDataCount);
        this._ib.update(0, indicesData);
      },
      _reallocBuffer: function _reallocBuffer() {
        this._reallocVData(true);
        this._reallocIData();
        this._fillQuadBuffer();
      }
    });
    cc.QuadBuffer = module.exports = QuadBuffer;
  }), {
    "./mesh-buffer": 195
  } ],
  198: [ (function(require, module, exports) {
    "use strict";
    exports.__esModule = true;
    exports["default"] = RenderData;
    var _flexBuffer = _interopRequireDefault(require("./flex-buffer"));
    var _vertexFormat = require("./vertex-format");
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }
    function RenderData() {
      this.vDatas = [];
      this.uintVDatas = [];
      this.iDatas = [];
      this.meshCount = 0;
      this._infos = null;
      this._flexBuffer = null;
    }
    cc.js.mixin(RenderData.prototype, {
      init: function init(assembler) {},
      clear: function clear() {
        this.vDatas.length = 0;
        this.iDatas.length = 0;
        this.uintVDatas.length = 0;
        this.meshCount = 0;
        this._infos = null;
        this._flexBuffer && this._flexBuffer.reset();
      },
      updateMesh: function updateMesh(index, vertices, indices) {
        this.vDatas[index] = vertices;
        this.uintVDatas[index] = new Uint32Array(vertices.buffer, 0, vertices.length);
        this.iDatas[index] = indices;
        this.meshCount = this.vDatas.length;
      },
      updateMeshRange: function updateMeshRange(verticesCount, indicesCount) {},
      createData: function createData(index, verticesFloats, indicesCount) {
        var vertices = new Float32Array(verticesFloats);
        var indices = new Uint16Array(indicesCount);
        this.updateMesh(index, vertices, indices);
      },
      createQuadData: function createQuadData(index, verticesFloats, indicesCount) {
        this.createData(index, verticesFloats, indicesCount);
        this.initQuadIndices(this.iDatas[index]);
      },
      createFlexData: function createFlexData(index, verticesFloats, indicesCount, vfmt) {
        vfmt = vfmt || _vertexFormat.vfmtPosUvColor;
        this._flexBuffer = new _flexBuffer["default"](this, index, verticesFloats, indicesCount, vfmt);
      },
      initQuadIndices: function initQuadIndices(indices) {
        var count = indices.length / 6;
        for (var i = 0, idx = 0; i < count; i++) {
          var vertextID = 4 * i;
          indices[idx++] = vertextID;
          indices[idx++] = vertextID + 1;
          indices[idx++] = vertextID + 2;
          indices[idx++] = vertextID + 1;
          indices[idx++] = vertextID + 3;
          indices[idx++] = vertextID + 2;
        }
      }
    });
    cc.RenderData = RenderData;
    module.exports = exports["default"];
  }), {
    "./flex-buffer": 194,
    "./vertex-format": 200
  } ],
  199: [ (function(require, module, exports) {
    "use strict";
    var SpineBuffer = cc.Class({
      name: "cc.SpineBuffer",
      extends: require("./mesh-buffer"),
      requestStatic: function requestStatic(vertexCount, indiceCount) {
        this.checkAndSwitchBuffer(vertexCount);
        var byteOffset = this.byteOffset + vertexCount * this._vertexBytes;
        var indiceOffset = this.indiceOffset + indiceCount;
        var byteLength = this._vData.byteLength;
        var indiceLength = this._iData.length;
        if (byteOffset > byteLength || indiceOffset > indiceLength) {
          while (byteLength < byteOffset || indiceLength < indiceOffset) {
            this._initVDataCount *= 2;
            this._initIDataCount *= 2;
            byteLength = 4 * this._initVDataCount;
            indiceLength = this._initIDataCount;
          }
          this._reallocBuffer();
        }
        var offsetInfo = this._offsetInfo;
        offsetInfo.vertexOffset = this.vertexOffset;
        offsetInfo.indiceOffset = this.indiceOffset;
        offsetInfo.byteOffset = this.byteOffset;
      },
      adjust: function adjust(vertexCount, indiceCount) {
        this.vertexOffset += vertexCount;
        this.indiceOffset += indiceCount;
        this.byteOffset = this.byteOffset + vertexCount * this._vertexBytes;
        this._dirty = true;
      }
    });
    cc.SpineBuffer = module.exports = SpineBuffer;
  }), {
    "./mesh-buffer": 195
  } ],
  200: [ (function(require, module, exports) {
    "use strict";
    var _gfx = _interopRequireDefault(require("../../../renderer/gfx"));
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }
    var vfmt3D = new _gfx["default"].VertexFormat([ {
      name: _gfx["default"].ATTR_POSITION,
      type: _gfx["default"].ATTR_TYPE_FLOAT32,
      num: 3
    }, {
      name: _gfx["default"].ATTR_UV0,
      type: _gfx["default"].ATTR_TYPE_FLOAT32,
      num: 2
    }, {
      name: _gfx["default"].ATTR_COLOR,
      type: _gfx["default"].ATTR_TYPE_UINT8,
      num: 4,
      normalize: true
    } ]);
    vfmt3D.name = "vfmt3D";
    _gfx["default"].VertexFormat.XYZ_UV_Color = vfmt3D;
    var vfmtPosUvColor = new _gfx["default"].VertexFormat([ {
      name: _gfx["default"].ATTR_POSITION,
      type: _gfx["default"].ATTR_TYPE_FLOAT32,
      num: 2
    }, {
      name: _gfx["default"].ATTR_UV0,
      type: _gfx["default"].ATTR_TYPE_FLOAT32,
      num: 2
    }, {
      name: _gfx["default"].ATTR_COLOR,
      type: _gfx["default"].ATTR_TYPE_UINT8,
      num: 4,
      normalize: true
    } ]);
    vfmtPosUvColor.name = "vfmtPosUvColor";
    _gfx["default"].VertexFormat.XY_UV_Color = vfmtPosUvColor;
    var vfmtPosUvTwoColor = new _gfx["default"].VertexFormat([ {
      name: _gfx["default"].ATTR_POSITION,
      type: _gfx["default"].ATTR_TYPE_FLOAT32,
      num: 2
    }, {
      name: _gfx["default"].ATTR_UV0,
      type: _gfx["default"].ATTR_TYPE_FLOAT32,
      num: 2
    }, {
      name: _gfx["default"].ATTR_COLOR,
      type: _gfx["default"].ATTR_TYPE_UINT8,
      num: 4,
      normalize: true
    }, {
      name: _gfx["default"].ATTR_COLOR0,
      type: _gfx["default"].ATTR_TYPE_UINT8,
      num: 4,
      normalize: true
    } ]);
    vfmtPosUvTwoColor.name = "vfmtPosUvTwoColor";
    _gfx["default"].VertexFormat.XY_UV_Two_Color = vfmtPosUvTwoColor;
    var vfmtPosUv = new _gfx["default"].VertexFormat([ {
      name: _gfx["default"].ATTR_POSITION,
      type: _gfx["default"].ATTR_TYPE_FLOAT32,
      num: 2
    }, {
      name: _gfx["default"].ATTR_UV0,
      type: _gfx["default"].ATTR_TYPE_FLOAT32,
      num: 2
    } ]);
    vfmtPosUv.name = "vfmtPosUv";
    _gfx["default"].VertexFormat.XY_UV = vfmtPosUv;
    var vfmtPosColor = new _gfx["default"].VertexFormat([ {
      name: _gfx["default"].ATTR_POSITION,
      type: _gfx["default"].ATTR_TYPE_FLOAT32,
      num: 2
    }, {
      name: _gfx["default"].ATTR_COLOR,
      type: _gfx["default"].ATTR_TYPE_UINT8,
      num: 4,
      normalize: true
    } ]);
    vfmtPosColor.name = "vfmtPosColor";
    _gfx["default"].VertexFormat.XY_Color = vfmtPosColor;
    var vfmtPos = new _gfx["default"].VertexFormat([ {
      name: _gfx["default"].ATTR_POSITION,
      type: _gfx["default"].ATTR_TYPE_FLOAT32,
      num: 2
    } ]);
    vfmtPos.name = "vfmtPos";
    _gfx["default"].VertexFormat.XY = vfmtPos;
    module.exports = {
      vfmt3D: vfmt3D,
      vfmtPosUvColor: vfmtPosUvColor,
      vfmtPosUvTwoColor: vfmtPosUvTwoColor,
      vfmtPosUv: vfmtPosUv,
      vfmtPosColor: vfmtPosColor,
      vfmtPos: vfmtPos
    };
  }), {
    "../../../renderer/gfx": 252
  } ],
  201: [ (function(require, module, exports) {
    "use strict";
    require("../platform/CCSys");
    var EXTNAME_RE = /(\.[^\.\/\?\\]*)(\?.*)?$/;
    var DIRNAME_RE = /((.*)(\/|\\|\\\\))?(.*?\..*$)?/;
    var NORMALIZE_RE = /[^\.\/]+\/\.\.\//;
    cc.path = {
      join: function join() {
        var l = arguments.length;
        var result = "";
        for (var i = 0; i < l; i++) result = (result + ("" === result ? "" : "/") + arguments[i]).replace(/(\/|\\\\)$/, "");
        return result;
      },
      extname: function extname(pathStr) {
        var temp = EXTNAME_RE.exec(pathStr);
        return temp ? temp[1] : "";
      },
      mainFileName: function mainFileName(fileName) {
        if (fileName) {
          var idx = fileName.lastIndexOf(".");
          if (-1 !== idx) return fileName.substring(0, idx);
        }
        return fileName;
      },
      basename: function basename(pathStr, extname) {
        var index = pathStr.indexOf("?");
        index > 0 && (pathStr = pathStr.substring(0, index));
        var reg = /(\/|\\)([^\/\\]+)$/g;
        var result = reg.exec(pathStr.replace(/(\/|\\)$/, ""));
        if (!result) return pathStr;
        var baseName = result[2];
        if (extname && pathStr.substring(pathStr.length - extname.length).toLowerCase() === extname.toLowerCase()) return baseName.substring(0, baseName.length - extname.length);
        return baseName;
      },
      dirname: function dirname(pathStr) {
        var temp = DIRNAME_RE.exec(pathStr);
        return temp ? temp[2] : "";
      },
      changeExtname: function changeExtname(pathStr, extname) {
        extname = extname || "";
        var index = pathStr.indexOf("?");
        var tempStr = "";
        if (index > 0) {
          tempStr = pathStr.substring(index);
          pathStr = pathStr.substring(0, index);
        }
        index = pathStr.lastIndexOf(".");
        if (index < 0) return pathStr + extname + tempStr;
        return pathStr.substring(0, index) + extname + tempStr;
      },
      changeBasename: function changeBasename(pathStr, basename, isSameExt) {
        if (0 === basename.indexOf(".")) return this.changeExtname(pathStr, basename);
        var index = pathStr.indexOf("?");
        var tempStr = "";
        var ext = isSameExt ? this.extname(pathStr) : "";
        if (index > 0) {
          tempStr = pathStr.substring(index);
          pathStr = pathStr.substring(0, index);
        }
        index = pathStr.lastIndexOf("/");
        index = index <= 0 ? 0 : index + 1;
        return pathStr.substring(0, index) + basename + ext + tempStr;
      },
      _normalize: function _normalize(url) {
        var oldUrl = url = String(url);
        do {
          oldUrl = url;
          url = url.replace(NORMALIZE_RE, "");
        } while (oldUrl.length !== url.length);
        return url;
      },
      sep: cc.sys.os === cc.sys.OS_WINDOWS ? "\\" : "/",
      stripSep: function stripSep(path) {
        return path.replace(/[\/\\]$/, "");
      }
    };
    module.exports = cc.path;
  }), {
    "../platform/CCSys": 150
  } ],
  202: [ (function(require, module, exports) {
    "use strict";
    var AffineTransform = function AffineTransform(a, b, c, d, tx, ty) {
      this.a = a;
      this.b = b;
      this.c = c;
      this.d = d;
      this.tx = tx;
      this.ty = ty;
    };
    AffineTransform.create = function(a, b, c, d, tx, ty) {
      return {
        a: a,
        b: b,
        c: c,
        d: d,
        tx: tx,
        ty: ty
      };
    };
    AffineTransform.identity = function() {
      return {
        a: 1,
        b: 0,
        c: 0,
        d: 1,
        tx: 0,
        ty: 0
      };
    };
    AffineTransform.clone = function(t) {
      return {
        a: t.a,
        b: t.b,
        c: t.c,
        d: t.d,
        tx: t.tx,
        ty: t.ty
      };
    };
    AffineTransform.concat = function(out, t1, t2) {
      var a = t1.a, b = t1.b, c = t1.c, d = t1.d, tx = t1.tx, ty = t1.ty;
      out.a = a * t2.a + b * t2.c;
      out.b = a * t2.b + b * t2.d;
      out.c = c * t2.a + d * t2.c;
      out.d = c * t2.b + d * t2.d;
      out.tx = tx * t2.a + ty * t2.c + t2.tx;
      out.ty = tx * t2.b + ty * t2.d + t2.ty;
      return out;
    };
    AffineTransform.invert = function(out, t) {
      var a = t.a, b = t.b, c = t.c, d = t.d;
      var determinant = 1 / (a * d - b * c);
      var tx = t.tx, ty = t.ty;
      out.a = determinant * d;
      out.b = -determinant * b;
      out.c = -determinant * c;
      out.d = determinant * a;
      out.tx = determinant * (c * ty - d * tx);
      out.ty = determinant * (b * tx - a * ty);
      return out;
    };
    AffineTransform.fromMat4 = function(out, mat) {
      var matm = mat.m;
      out.a = matm[0];
      out.b = matm[1];
      out.c = matm[4];
      out.d = matm[5];
      out.tx = matm[12];
      out.ty = matm[13];
      return out;
    };
    AffineTransform.transformVec2 = function(out, point, transOrY, t) {
      var x, y;
      if (void 0 === t) {
        t = transOrY;
        x = point.x;
        y = point.y;
      } else {
        x = point;
        y = transOrY;
      }
      out.x = t.a * x + t.c * y + t.tx;
      out.y = t.b * x + t.d * y + t.ty;
      return out;
    };
    AffineTransform.transformSize = function(out, size, t) {
      out.width = t.a * size.width + t.c * size.height;
      out.height = t.b * size.width + t.d * size.height;
      return out;
    };
    AffineTransform.transformRect = function(out, rect, t) {
      var ol = rect.x;
      var ob = rect.y;
      var or = ol + rect.width;
      var ot = ob + rect.height;
      var lbx = t.a * ol + t.c * ob + t.tx;
      var lby = t.b * ol + t.d * ob + t.ty;
      var rbx = t.a * or + t.c * ob + t.tx;
      var rby = t.b * or + t.d * ob + t.ty;
      var ltx = t.a * ol + t.c * ot + t.tx;
      var lty = t.b * ol + t.d * ot + t.ty;
      var rtx = t.a * or + t.c * ot + t.tx;
      var rty = t.b * or + t.d * ot + t.ty;
      var minX = Math.min(lbx, rbx, ltx, rtx);
      var maxX = Math.max(lbx, rbx, ltx, rtx);
      var minY = Math.min(lby, rby, lty, rty);
      var maxY = Math.max(lby, rby, lty, rty);
      out.x = minX;
      out.y = minY;
      out.width = maxX - minX;
      out.height = maxY - minY;
      return out;
    };
    AffineTransform.transformObb = function(out_bl, out_tl, out_tr, out_br, rect, anAffineTransform) {
      var x = rect.x;
      var y = rect.y;
      var width = rect.width;
      var height = rect.height;
      var tx = anAffineTransform.a * x + anAffineTransform.c * y + anAffineTransform.tx;
      var ty = anAffineTransform.b * x + anAffineTransform.d * y + anAffineTransform.ty;
      var xa = anAffineTransform.a * width;
      var xb = anAffineTransform.b * width;
      var yc = anAffineTransform.c * height;
      var yd = anAffineTransform.d * height;
      out_tl.x = tx;
      out_tl.y = ty;
      out_tr.x = xa + tx;
      out_tr.y = xb + ty;
      out_bl.x = yc + tx;
      out_bl.y = yd + ty;
      out_br.x = xa + yc + tx;
      out_br.y = xb + yd + ty;
    };
    cc.AffineTransform = module.exports = AffineTransform;
  }), {} ],
  203: [ (function(require, module, exports) {
    "use strict";
    var Flags = require("../platform/CCObject").Flags;
    var misc = require("./misc");
    var js = require("../platform/js");
    var IdGenerater = require("../platform/id-generater");
    var eventManager = require("../event-manager");
    var RenderFlow = require("../renderer/render-flow");
    var Destroying = Flags.Destroying;
    var DontDestroy = Flags.DontDestroy;
    var Deactivating = Flags.Deactivating;
    var CHILD_ADDED = "child-added";
    var CHILD_REMOVED = "child-removed";
    var idGenerater = new IdGenerater("Node");
    function getConstructor(typeOrClassName) {
      if (!typeOrClassName) {
        cc.errorID(3804);
        return null;
      }
      if ("string" === typeof typeOrClassName) return js.getClassByName(typeOrClassName);
      return typeOrClassName;
    }
    function findComponent(node, constructor) {
      if (constructor._sealed) for (var i = 0; i < node._components.length; ++i) {
        var comp = node._components[i];
        if (comp.constructor === constructor) return comp;
      } else for (var _i = 0; _i < node._components.length; ++_i) {
        var _comp = node._components[_i];
        if (_comp instanceof constructor) return _comp;
      }
      return null;
    }
    function findComponents(node, constructor, components) {
      if (constructor._sealed) for (var i = 0; i < node._components.length; ++i) {
        var comp = node._components[i];
        comp.constructor === constructor && components.push(comp);
      } else for (var _i2 = 0; _i2 < node._components.length; ++_i2) {
        var _comp2 = node._components[_i2];
        _comp2 instanceof constructor && components.push(_comp2);
      }
    }
    function findChildComponent(children, constructor) {
      for (var i = 0; i < children.length; ++i) {
        var node = children[i];
        var comp = findComponent(node, constructor);
        if (comp) return comp;
        if (node._children.length > 0) {
          comp = findChildComponent(node._children, constructor);
          if (comp) return comp;
        }
      }
      return null;
    }
    function findChildComponents(children, constructor, components) {
      for (var i = 0; i < children.length; ++i) {
        var node = children[i];
        findComponents(node, constructor, components);
        node._children.length > 0 && findChildComponents(node._children, constructor, components);
      }
    }
    var BaseNode = cc.Class({
      name: "cc._BaseNode",
      extends: cc.Object,
      properties: {
        _parent: null,
        _children: [],
        _active: true,
        _components: [],
        _prefab: null,
        _persistNode: {
          get: function get() {
            return (this._objFlags & DontDestroy) > 0;
          },
          set: function set(value) {
            value ? this._objFlags |= DontDestroy : this._objFlags &= ~DontDestroy;
          }
        },
        name: {
          get: function get() {
            return this._name;
          },
          set: function set(value) {
            false;
            this._name = value;
            false;
          }
        },
        uuid: {
          get: function get() {
            return this._id;
          }
        },
        children: {
          get: function get() {
            return this._children;
          }
        },
        childrenCount: {
          get: function get() {
            return this._children.length;
          }
        },
        active: {
          get: function get() {
            return this._active;
          },
          set: function set(value) {
            value = !!value;
            if (this._active !== value) {
              this._active = value;
              var parent = this._parent;
              if (parent) {
                var couldActiveInScene = parent._activeInHierarchy;
                couldActiveInScene && cc.director._nodeActivator.activateNode(this, value);
              }
            }
          }
        },
        activeInHierarchy: {
          get: function get() {
            return this._activeInHierarchy;
          }
        }
      },
      ctor: function ctor(name) {
        this._name = void 0 !== name ? name : "New Node";
        this._activeInHierarchy = false;
        this._id = idGenerater.getNewId();
        cc.director._scheduler && cc.director._scheduler.enableForTarget(this);
        this.__eventTargets = [];
      },
      getParent: function getParent() {
        return this._parent;
      },
      setParent: function setParent(value) {
        if (this._parent === value) return;
        false;
        var oldParent = this._parent;
        (true, oldParent) && oldParent._objFlags & Deactivating && cc.errorID(3821);
        this._parent = value || null;
        this._onSetParent(value);
        if (value) {
          (true, value._objFlags & Deactivating) && cc.errorID(3821);
          eventManager._setDirtyForNode(this);
          value._children.push(this);
          value.emit && value.emit(CHILD_ADDED, this);
          value._renderFlag |= RenderFlow.FLAG_CHILDREN;
        }
        if (oldParent) {
          if (!(oldParent._objFlags & Destroying)) {
            var removeAt = oldParent._children.indexOf(this);
            false;
            oldParent._children.splice(removeAt, 1);
            oldParent.emit && oldParent.emit(CHILD_REMOVED, this);
            this._onHierarchyChanged(oldParent);
            0 === oldParent._children.length && (oldParent._renderFlag &= ~RenderFlow.FLAG_CHILDREN);
          }
        } else value && this._onHierarchyChanged(null);
      },
      attr: function attr(attrs) {
        js.mixin(this, attrs);
      },
      getChildByUuid: function getChildByUuid(uuid) {
        if (!uuid) {
          cc.log("Invalid uuid");
          return null;
        }
        var locChildren = this._children;
        for (var i = 0, len = locChildren.length; i < len; i++) if (locChildren[i]._id === uuid) return locChildren[i];
        return null;
      },
      getChildByName: function getChildByName(name) {
        if (!name) {
          cc.log("Invalid name");
          return null;
        }
        var locChildren = this._children;
        for (var i = 0, len = locChildren.length; i < len; i++) if (locChildren[i]._name === name) return locChildren[i];
        return null;
      },
      addChild: function addChild(child) {
        false;
        cc.assertID(child, 1606);
        cc.assertID(null === child._parent, 1605);
        child.setParent(this);
      },
      insertChild: function insertChild(child, siblingIndex) {
        child.parent = this;
        child.setSiblingIndex(siblingIndex);
      },
      getSiblingIndex: function getSiblingIndex() {
        return this._parent ? this._parent._children.indexOf(this) : 0;
      },
      setSiblingIndex: function setSiblingIndex(index) {
        if (!this._parent) return;
        if (this._parent._objFlags & Deactivating) {
          cc.errorID(3821);
          return;
        }
        var siblings = this._parent._children;
        index = -1 !== index ? index : siblings.length - 1;
        var oldIndex = siblings.indexOf(this);
        if (index !== oldIndex) {
          siblings.splice(oldIndex, 1);
          index < siblings.length ? siblings.splice(index, 0, this) : siblings.push(this);
          this._onSiblingIndexChanged && this._onSiblingIndexChanged(index);
        }
      },
      walk: function walk(prefunc, postfunc) {
        var BaseNode = cc._BaseNode;
        var index = 1;
        var children, child, curr, i, afterChildren;
        var stack = BaseNode._stacks[BaseNode._stackId];
        if (!stack) {
          stack = [];
          BaseNode._stacks.push(stack);
        }
        BaseNode._stackId++;
        stack.length = 0;
        stack[0] = this;
        var parent = null;
        afterChildren = false;
        while (index) {
          index--;
          curr = stack[index];
          if (!curr) continue;
          !afterChildren && prefunc ? prefunc(curr) : afterChildren && postfunc && postfunc(curr);
          stack[index] = null;
          if (!afterChildren) {
            if (curr._children.length > 0) {
              parent = curr;
              children = curr._children;
              i = 0;
              stack[index] = children[i];
              index++;
            } else {
              stack[index] = curr;
              index++;
              afterChildren = true;
            }
            continue;
          }
          if (parent === this._parent) break;
          afterChildren = false;
          if (children) {
            i++;
            if (children[i]) {
              stack[index] = children[i];
              index++;
            } else if (parent) {
              stack[index] = parent;
              index++;
              afterChildren = true;
              if (parent._parent) {
                children = parent._parent._children;
                i = children.indexOf(parent);
                parent = parent._parent;
              } else {
                parent = null;
                children = null;
              }
              if (i < 0) break;
            }
          }
        }
        stack.length = 0;
        BaseNode._stackId--;
      },
      cleanup: function cleanup() {},
      removeFromParent: function removeFromParent(cleanup) {
        if (this._parent) {
          void 0 === cleanup && (cleanup = true);
          this._parent.removeChild(this, cleanup);
        }
      },
      removeChild: function removeChild(child, cleanup) {
        if (this._children.indexOf(child) > -1) {
          (cleanup || void 0 === cleanup) && child.cleanup();
          child.parent = null;
        }
      },
      removeAllChildren: function removeAllChildren(cleanup) {
        var children = this._children;
        void 0 === cleanup && (cleanup = true);
        for (var i = children.length - 1; i >= 0; i--) {
          var node = children[i];
          if (node) {
            cleanup && node.cleanup();
            node.parent = null;
          }
        }
        this._children.length = 0;
      },
      isChildOf: function isChildOf(parent) {
        var child = this;
        do {
          if (child === parent) return true;
          child = child._parent;
        } while (child);
        return false;
      },
      getComponent: function getComponent(typeOrClassName) {
        var constructor = getConstructor(typeOrClassName);
        if (constructor) return findComponent(this, constructor);
        return null;
      },
      getComponents: function getComponents(typeOrClassName) {
        var constructor = getConstructor(typeOrClassName), components = [];
        constructor && findComponents(this, constructor, components);
        return components;
      },
      getComponentInChildren: function getComponentInChildren(typeOrClassName) {
        var constructor = getConstructor(typeOrClassName);
        if (constructor) return findChildComponent(this._children, constructor);
        return null;
      },
      getComponentsInChildren: function getComponentsInChildren(typeOrClassName) {
        var constructor = getConstructor(typeOrClassName), components = [];
        if (constructor) {
          findComponents(this, constructor, components);
          findChildComponents(this._children, constructor, components);
        }
        return components;
      },
      _checkMultipleComp: (false, false) && function(ctor) {
        var existing = this.getComponent(ctor._disallowMultiple);
        if (existing) {
          existing.constructor === ctor ? cc.errorID(3805, js.getClassName(ctor), this._name) : cc.errorID(3806, js.getClassName(ctor), this._name, js.getClassName(existing));
          return false;
        }
        return true;
      },
      addComponent: function addComponent(typeOrClassName) {
        false;
        var constructor;
        if ("string" === typeof typeOrClassName) {
          constructor = js.getClassByName(typeOrClassName);
          if (!constructor) {
            cc.errorID(3807, typeOrClassName);
            cc._RFpeek() && cc.errorID(3808, typeOrClassName);
            return null;
          }
        } else {
          if (!typeOrClassName) {
            cc.errorID(3804);
            return null;
          }
          constructor = typeOrClassName;
        }
        if ("function" !== typeof constructor) {
          cc.errorID(3809);
          return null;
        }
        if (!js.isChildClassOf(constructor, cc.Component)) {
          cc.errorID(3810);
          return null;
        }
        if ((false, false) && constructor._disallowMultiple && !this._checkMultipleComp(constructor)) return null;
        var ReqComp = constructor._requireComponent;
        if (ReqComp && !this.getComponent(ReqComp)) {
          var depended = this.addComponent(ReqComp);
          if (!depended) return null;
        }
        var component = new constructor();
        component.node = this;
        this._components.push(component);
        (false, false) && cc.engine && this._id in cc.engine.attachedObjsForEditor && (cc.engine.attachedObjsForEditor[component._id] = component);
        this._activeInHierarchy && cc.director._nodeActivator.activateComp(component);
        return component;
      },
      _addComponentAt: false,
      removeComponent: function removeComponent(component) {
        if (!component) {
          cc.errorID(3813);
          return;
        }
        component instanceof cc.Component || (component = this.getComponent(component));
        component && component.destroy();
      },
      _getDependComponent: false,
      _removeComponent: function _removeComponent(component) {
        if (!component) {
          cc.errorID(3814);
          return;
        }
        if (!(this._objFlags & Destroying)) {
          var i = this._components.indexOf(component);
          if (-1 !== i) {
            this._components.splice(i, 1);
            (false, false) && cc.engine && delete cc.engine.attachedObjsForEditor[component._id];
          } else component.node !== this && cc.errorID(3815);
        }
      },
      destroy: function destroy() {
        cc.Object.prototype.destroy.call(this) && (this.active = false);
      },
      destroyAllChildren: function destroyAllChildren() {
        var children = this._children;
        for (var i = 0; i < children.length; ++i) children[i].destroy();
      },
      _onSetParent: function _onSetParent(value) {},
      _onPostActivated: function _onPostActivated() {},
      _onBatchRestored: function _onBatchRestored() {},
      _onBatchCreated: function _onBatchCreated() {},
      _onHierarchyChanged: function _onHierarchyChanged(oldParent) {
        var newParent = this._parent;
        if (this._persistNode && !(newParent instanceof cc.Scene)) {
          cc.game.removePersistRootNode(this);
          false;
        }
        var scene;
        var inCurrentSceneBefore;
        var inCurrentSceneNow;
        var newPrefabRoot;
        var myPrefabInfo;
        var PrefabUtils;
        false, false;
        var shouldActiveNow = this._active && !!(newParent && newParent._activeInHierarchy);
        this._activeInHierarchy !== shouldActiveNow && cc.director._nodeActivator.activateNode(this, shouldActiveNow);
      },
      _instantiate: function _instantiate(cloned) {
        cloned || (cloned = cc.instantiate._clone(this, this));
        var thisPrefabInfo = this._prefab;
        var PrefabUtils;
        false;
        var syncing = thisPrefabInfo && this === thisPrefabInfo.root && thisPrefabInfo.sync;
        syncing || false;
        cloned._parent = null;
        cloned._onBatchRestored();
        return cloned;
      },
      _registerIfAttached: (false, false) && function(register) {
        var attachedObjsForEditor = cc.engine.attachedObjsForEditor;
        if (register) {
          attachedObjsForEditor[this._id] = this;
          for (var i = 0; i < this._components.length; i++) {
            var comp = this._components[i];
            attachedObjsForEditor[comp._id] = comp;
          }
          cc.engine.emit("node-attach-to-scene", this);
        } else {
          cc.engine.emit("node-detach-from-scene", this);
          delete attachedObjsForEditor[this._id];
          for (var _i3 = 0; _i3 < this._components.length; _i3++) {
            var _comp3 = this._components[_i3];
            delete attachedObjsForEditor[_comp3._id];
          }
        }
        var children = this._children;
        for (var _i4 = 0, len = children.length; _i4 < len; ++_i4) {
          var child = children[_i4];
          child._registerIfAttached(register);
        }
      },
      _onPreDestroy: function _onPreDestroy() {
        var i, len;
        this._objFlags |= Destroying;
        var parent = this._parent;
        var destroyByParent = parent && parent._objFlags & Destroying;
        !destroyByParent && (false, false) && this._registerIfAttached(false);
        var children = this._children;
        for (i = 0, len = children.length; i < len; ++i) children[i]._destroyImmediate();
        for (i = 0, len = this._components.length; i < len; ++i) {
          var component = this._components[i];
          component._destroyImmediate();
        }
        var eventTargets = this.__eventTargets;
        for (i = 0, len = eventTargets.length; i < len; ++i) {
          var target = eventTargets[i];
          target && target.targetOff(this);
        }
        eventTargets.length = 0;
        this._persistNode && cc.game.removePersistRootNode(this);
        if (!destroyByParent && parent) {
          var childIndex = parent._children.indexOf(this);
          parent._children.splice(childIndex, 1);
          parent.emit && parent.emit("child-removed", this);
        }
        return destroyByParent;
      },
      onRestore: false
    });
    BaseNode.idGenerater = idGenerater;
    BaseNode._stacks = [ [] ];
    BaseNode._stackId = 0;
    BaseNode.prototype._onPreDestroyBase = BaseNode.prototype._onPreDestroy;
    false;
    BaseNode.prototype._onHierarchyChangedBase = BaseNode.prototype._onHierarchyChanged;
    false;
    var SameNameGetSets = [ "parent", "name", "children", "childrenCount" ];
    misc.propertyDefine(BaseNode, SameNameGetSets, {});
    false;
    cc._BaseNode = module.exports = BaseNode;
  }), {
    "../event-manager": 103,
    "../platform/CCObject": 147,
    "../platform/id-generater": 157,
    "../platform/js": 161,
    "../renderer/render-flow": 172,
    "./misc": 210
  } ],
  204: [ (function(require, module, exports) {
    "use strict";
    var EPSILON = 1e-6;
    function binarySearchEpsilon(array, value) {
      for (var l = 0, h = array.length - 1, m = h >>> 1; l <= h; m = l + h >>> 1) {
        var test = array[m];
        if (test > value + EPSILON) h = m - 1; else {
          if (!(test < value - EPSILON)) return m;
          l = m + 1;
        }
      }
      return ~l;
    }
    module.exports = {
      binarySearchEpsilon: binarySearchEpsilon
    };
  }), {} ],
  205: [ (function(require, module, exports) {
    "use strict";
    var RenderComponent = require("../components/CCRenderComponent");
    var BlendFactor = require("../platform/CCMacro").BlendFactor;
    var gfx = require("../../renderer/gfx");
    var BlendFunc = cc.Class({
      properties: {
        _srcBlendFactor: BlendFactor.SRC_ALPHA,
        _dstBlendFactor: BlendFactor.ONE_MINUS_SRC_ALPHA,
        srcBlendFactor: {
          get: function get() {
            return this._srcBlendFactor;
          },
          set: function set(value) {
            if (this._srcBlendFactor === value) return;
            this._srcBlendFactor = value;
            this._updateBlendFunc(true);
            this._onBlendChanged && this._onBlendChanged();
          },
          animatable: false,
          type: BlendFactor,
          tooltip: false,
          visible: true
        },
        dstBlendFactor: {
          get: function get() {
            return this._dstBlendFactor;
          },
          set: function set(value) {
            if (this._dstBlendFactor === value) return;
            this._dstBlendFactor = value;
            this._updateBlendFunc(true);
          },
          animatable: false,
          type: BlendFactor,
          tooltip: false,
          visible: true
        }
      },
      setMaterial: function setMaterial(index, material) {
        var materialVar = RenderComponent.prototype.setMaterial.call(this, index, material);
        this._srcBlendFactor === BlendFactor.SRC_ALPHA && this._dstBlendFactor === BlendFactor.ONE_MINUS_SRC_ALPHA || this._updateMaterialBlendFunc(materialVar);
        return materialVar;
      },
      _updateMaterial: function _updateMaterial() {
        this._updateBlendFunc();
      },
      _updateBlendFunc: function _updateBlendFunc(force) {
        if (!force && this._srcBlendFactor === BlendFactor.SRC_ALPHA && this._dstBlendFactor === BlendFactor.ONE_MINUS_SRC_ALPHA) return;
        var materials = this.getMaterials();
        for (var i = 0; i < materials.length; i++) {
          var material = materials[i];
          this._updateMaterialBlendFunc(material);
        }
      },
      _updateMaterialBlendFunc: function _updateMaterialBlendFunc(material) {
        material.setBlend(true, gfx.BLEND_FUNC_ADD, this._srcBlendFactor, this._dstBlendFactor, gfx.BLEND_FUNC_ADD, this._srcBlendFactor, this._dstBlendFactor);
      }
    });
    module.exports = cc.BlendFunc = BlendFunc;
  }), {
    "../../renderer/gfx": 252,
    "../components/CCRenderComponent": 94,
    "../platform/CCMacro": 146
  } ],
  206: [ (function(require, module, exports) {
    "use strict";
    var Base64Values = require("./misc").BASE64_VALUES;
    var HexChars = "0123456789abcdef".split("");
    var _t = [ "", "", "", "" ];
    var UuidTemplate = _t.concat(_t, "-", _t, "-", _t, "-", _t, "-", _t, _t, _t);
    var Indices = UuidTemplate.map((function(x, i) {
      return "-" === x ? NaN : i;
    })).filter(isFinite);
    module.exports = function(base64) {
      if (22 !== base64.length) return base64;
      UuidTemplate[0] = base64[0];
      UuidTemplate[1] = base64[1];
      for (var i = 2, j = 2; i < 22; i += 2) {
        var lhs = Base64Values[base64.charCodeAt(i)];
        var rhs = Base64Values[base64.charCodeAt(i + 1)];
        UuidTemplate[Indices[j++]] = HexChars[lhs >> 2];
        UuidTemplate[Indices[j++]] = HexChars[(3 & lhs) << 2 | rhs >> 4];
        UuidTemplate[Indices[j++]] = HexChars[15 & rhs];
      }
      return UuidTemplate.join("");
    };
    false;
  }), {
    "./misc": 210
  } ],
  207: [ (function(require, module, exports) {
    "use strict";
    cc.find = module.exports = function(path, referenceNode) {
      if (null == path) {
        cc.errorID(3814);
        return null;
      }
      if (referenceNode) false; else {
        var scene = cc.director.getScene();
        if (!scene) {
          false;
          return null;
        }
        false;
        referenceNode = scene;
      }
      var match = referenceNode;
      var startIndex = "/" !== path[0] ? 0 : 1;
      var nameList = path.split("/");
      for (var n = startIndex; n < nameList.length; n++) {
        var name = nameList[n];
        var children = match._children;
        match = null;
        for (var t = 0, len = children.length; t < len; ++t) {
          var subChild = children[t];
          if (subChild.name === name) {
            match = subChild;
            break;
          }
        }
        if (!match) return null;
      }
      return match;
    };
  }), {} ],
  208: [ (function(require, module, exports) {
    "use strict";
    var _materialVariant = _interopRequireDefault(require("../assets/material/material-variant"));
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }
    var Material = require("../assets/material/CCMaterial");
    var GraySpriteState = cc.Class({
      properties: {
        _normalMaterial: null,
        normalMaterial: {
          get: function get() {
            return this._normalMaterial;
          },
          set: function set(val) {
            this._normalMaterial = val;
            this._updateDisabledState && this._updateDisabledState();
          },
          type: Material,
          tooltip: false,
          animatable: false
        },
        _grayMaterial: null,
        grayMaterial: {
          get: function get() {
            return this._grayMaterial;
          },
          set: function set(val) {
            this._grayMaterial = val;
            this._updateDisabledState && this._updateDisabledState();
          },
          type: Material,
          tooltip: false,
          animatable: false
        }
      },
      _switchGrayMaterial: function _switchGrayMaterial(useGrayMaterial, renderComp) {
        var material;
        if (useGrayMaterial) {
          material = this._grayMaterial;
          material || (material = Material.getBuiltinMaterial("2d-gray-sprite"));
          material = this._grayMaterial = _materialVariant["default"].create(material, renderComp);
        } else {
          material = this._normalMaterial;
          material || (material = Material.getBuiltinMaterial("2d-sprite", renderComp));
          material = this._normalMaterial = _materialVariant["default"].create(material, renderComp);
        }
        renderComp.setMaterial(0, material);
      }
    });
    module.exports = GraySpriteState;
  }), {
    "../assets/material/CCMaterial": 67,
    "../assets/material/material-variant": 74
  } ],
  209: [ (function(require, module, exports) {
    "use strict";
    require("./CCPath");
    true;
    require("./profiler/CCProfiler");
    require("./find");
    require("./mutable-forward-iterator");
  }), {
    "./CCPath": 201,
    "./find": 207,
    "./mutable-forward-iterator": 211,
    "./profiler/CCProfiler": 214
  } ],
  210: [ (function(require, module, exports) {
    "use strict";
    var js = require("../platform/js");
    var misc = {};
    misc.propertyDefine = function(ctor, sameNameGetSets, diffNameGetSets) {
      function define(np, propName, getter, setter) {
        var pd = Object.getOwnPropertyDescriptor(np, propName);
        if (pd) {
          pd.get && (np[getter] = pd.get);
          pd.set && setter && (np[setter] = pd.set);
        } else {
          var getterFunc = np[getter];
          var clsName;
          false;
          js.getset(np, propName, getterFunc, np[setter]);
        }
      }
      var propName, np = ctor.prototype;
      for (var i = 0; i < sameNameGetSets.length; i++) {
        propName = sameNameGetSets[i];
        var suffix = propName[0].toUpperCase() + propName.slice(1);
        define(np, propName, "get" + suffix, "set" + suffix);
      }
      for (propName in diffNameGetSets) {
        var getset = diffNameGetSets[propName];
        define(np, propName, getset[0], getset[1]);
      }
    };
    misc.NextPOT = function(x) {
      x -= 1;
      x |= x >> 1;
      x |= x >> 2;
      x |= x >> 4;
      x |= x >> 8;
      x |= x >> 16;
      return x + 1;
    };
    false;
    misc.BUILTIN_CLASSID_RE = /^(?:cc|dragonBones|sp|ccsg)\..+/;
    var BASE64_KEYS = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
    var BASE64_VALUES = new Array(123);
    for (var i = 0; i < 123; ++i) BASE64_VALUES[i] = 64;
    for (var _i = 0; _i < 64; ++_i) BASE64_VALUES[BASE64_KEYS.charCodeAt(_i)] = _i;
    misc.BASE64_VALUES = BASE64_VALUES;
    misc.pushToMap = function(map, key, value, pushFront) {
      var exists = map[key];
      if (exists) if (Array.isArray(exists)) if (pushFront) {
        exists.push(exists[0]);
        exists[0] = value;
      } else exists.push(value); else map[key] = pushFront ? [ value, exists ] : [ exists, value ]; else map[key] = value;
    };
    misc.clampf = function(value, min_inclusive, max_inclusive) {
      if (min_inclusive > max_inclusive) {
        var temp = min_inclusive;
        min_inclusive = max_inclusive;
        max_inclusive = temp;
      }
      return value < min_inclusive ? min_inclusive : value < max_inclusive ? value : max_inclusive;
    };
    misc.clamp01 = function(value) {
      return value < 0 ? 0 : value < 1 ? value : 1;
    };
    misc.lerp = function(a, b, r) {
      return a + (b - a) * r;
    };
    misc.degreesToRadians = function(angle) {
      return angle * cc.macro.RAD;
    };
    misc.radiansToDegrees = function(angle) {
      return angle * cc.macro.DEG;
    };
    cc.misc = module.exports = misc;
  }), {
    "../platform/js": 161
  } ],
  211: [ (function(require, module, exports) {
    "use strict";
    function MutableForwardIterator(array) {
      this.i = 0;
      this.array = array;
    }
    var proto = MutableForwardIterator.prototype;
    proto.remove = function(value) {
      var index = this.array.indexOf(value);
      index >= 0 && this.removeAt(index);
    };
    proto.removeAt = function(i) {
      this.array.splice(i, 1);
      i <= this.i && --this.i;
    };
    proto.fastRemove = function(value) {
      var index = this.array.indexOf(value);
      index >= 0 && this.fastRemoveAt(index);
    };
    proto.fastRemoveAt = function(i) {
      var array = this.array;
      array[i] = array[array.length - 1];
      --array.length;
      i <= this.i && --this.i;
    };
    proto.push = function(item) {
      this.array.push(item);
    };
    module.exports = MutableForwardIterator;
  }), {} ],
  212: [ (function(require, module, exports) {
    "use strict";
    exports.__esModule = true;
    exports["default"] = void 0;
    var Pool = (function() {
      function Pool() {
        this.enabled = false;
        this.count = 0;
        this.maxSize = 1024;
      }
      var _proto = Pool.prototype;
      _proto.get = function get() {};
      _proto.put = function put() {};
      _proto.clear = function clear() {};
      return Pool;
    })();
    exports["default"] = Pool;
    cc.pool = {};
    Pool.register = function(name, pool) {
      cc.pool[name] = pool;
    };
    module.exports = exports["default"];
  }), {} ],
  213: [ (function(require, module, exports) {
    "use strict";
    cc._PrefabInfo = cc.Class({
      name: "cc.PrefabInfo",
      properties: {
        root: null,
        asset: null,
        fileId: "",
        sync: false,
        _synced: {
          default: false,
          serializable: false
        }
      }
    });
    module.exports = {
      syncWithPrefab: function syncWithPrefab(node) {
        var _prefab = node._prefab;
        _prefab._synced = true;
        if (!_prefab.asset) {
          var NodeUtils;
          var PrefabUtils;
          false;
          cc.errorID(3701, node.name);
          node._prefab = null;
          return;
        }
        var _objFlags = node._objFlags;
        var _parent = node._parent;
        var _id = node._id;
        var _name = node._name;
        var _active = node._active;
        var eulerAnglesX = node._eulerAngles.x;
        var eulerAnglesY = node._eulerAngles.y;
        var eulerAnglesZ = node._eulerAngles.z;
        var _localZOrder = node._localZOrder;
        var _globalZOrder = node._globalZOrder;
        var trs = node._trs;
        var x = trs[0];
        var y = trs[1];
        var z = trs[2];
        cc.game._isCloning = true;
        var prefabRoot;
        true;
        _prefab.asset._doInstantiate(node);
        cc.game._isCloning = false;
        node._objFlags = _objFlags;
        node._parent = _parent;
        node._id = _id;
        node._prefab = _prefab;
        node._name = _name;
        node._active = _active;
        node._localZOrder = _localZOrder;
        node._globalZOrder = _globalZOrder;
        trs = node._trs;
        trs[0] = x;
        trs[1] = y;
        trs[2] = z;
        node._eulerAngles.x = eulerAnglesX;
        node._eulerAngles.y = eulerAnglesY;
        node._eulerAngles.z = eulerAnglesZ;
      }
    };
  }), {} ],
  214: [ (function(require, module, exports) {
    "use strict";
    var macro = require("../../platform/CCMacro");
    var PerfCounter = require("./perf-counter");
    var _showFPS = false;
    var _fontSize = 15;
    var _stats = null;
    var _rootNode = null;
    var _label = null;
    function generateStats() {
      if (_stats) return;
      _stats = {
        frame: {
          desc: "Frame time (ms)",
          min: 0,
          max: 50,
          average: 500
        },
        fps: {
          desc: "Framerate (FPS)",
          below: 30,
          average: 500
        },
        draws: {
          desc: "Draw call"
        },
        logic: {
          desc: "Game Logic (ms)",
          min: 0,
          max: 50,
          average: 500,
          color: "#080"
        },
        render: {
          desc: "Renderer (ms)",
          min: 0,
          max: 50,
          average: 500,
          color: "#f90"
        },
        mode: {
          desc: cc.game.renderType === cc.game.RENDER_TYPE_WEBGL ? "WebGL" : "Canvas",
          min: 1
        }
      };
      var now = performance.now();
      for (var id in _stats) _stats[id]._counter = new PerfCounter(id, _stats[id], now);
    }
    function generateNode() {
      if (_rootNode && _rootNode.isValid) return;
      _rootNode = new cc.Node("PROFILER-NODE");
      _rootNode.x = _rootNode.y = 10;
      _rootNode.groupIndex = cc.Node.BuiltinGroupIndex.DEBUG;
      cc.Camera._setupDebugCamera();
      _rootNode.zIndex = macro.MAX_ZINDEX;
      cc.game.addPersistRootNode(_rootNode);
      var left = new cc.Node("LEFT-PANEL");
      left.anchorX = left.anchorY = 0;
      var leftLabel = left.addComponent(cc.Label);
      leftLabel.fontSize = _fontSize;
      leftLabel.lineHeight = _fontSize;
      left.parent = _rootNode;
      var right = new cc.Node("RIGHT-PANEL");
      right.anchorX = 1;
      right.anchorY = 0;
      right.x = 200;
      var rightLabel = right.addComponent(cc.Label);
      rightLabel.horizontalAlign = cc.Label.HorizontalAlign.RIGHT;
      rightLabel.fontSize = _fontSize;
      rightLabel.lineHeight = _fontSize;
      right.parent = _rootNode;
      if (cc.sys.platform !== cc.sys.BAIDU_GAME_SUB && cc.sys.platform !== cc.sys.WECHAT_GAME_SUB) {
        leftLabel.cacheMode = cc.Label.CacheMode.CHAR;
        rightLabel.cacheMode = cc.Label.CacheMode.CHAR;
      }
      _label = {
        left: leftLabel,
        right: rightLabel
      };
    }
    function beforeUpdate() {
      generateNode();
      var now = cc.director._lastUpdate;
      _stats["frame"]._counter.start(now);
      _stats["logic"]._counter.start(now);
    }
    function afterUpdate() {
      var now = performance.now();
      cc.director.isPaused() ? _stats["frame"]._counter.start(now) : _stats["logic"]._counter.end(now);
      _stats["render"]._counter.start(now);
    }
    function updateLabel(stat) {
      var length = 20;
      var desc = stat.desc;
      var value = stat._counter.human() + "";
      stat.label.string = stat.desc + "  " + stat._counter.human();
    }
    function afterDraw() {
      var now = performance.now();
      _stats["render"]._counter.end(now);
      _stats["draws"]._counter.value = cc.renderer.drawCalls;
      _stats["frame"]._counter.end(now);
      _stats["fps"]._counter.frame(now);
      var left = "";
      var right = "";
      for (var id in _stats) {
        var stat = _stats[id];
        stat._counter.sample(now);
        left += stat.desc + "\n";
        right += stat._counter.human() + "\n";
      }
      if (_label) {
        _label.left.string = left;
        _label.right.string = right;
      }
    }
    cc.profiler = module.exports = {
      isShowingStats: function isShowingStats() {
        return _showFPS;
      },
      hideStats: function hideStats() {
        if (_showFPS) {
          _rootNode && (_rootNode.active = false);
          cc.director.off(cc.Director.EVENT_BEFORE_UPDATE, beforeUpdate);
          cc.director.off(cc.Director.EVENT_AFTER_UPDATE, afterUpdate);
          cc.director.off(cc.Director.EVENT_AFTER_DRAW, afterDraw);
          _showFPS = false;
        }
      },
      showStats: function showStats() {
        if (!_showFPS) {
          generateStats();
          _rootNode && (_rootNode.active = true);
          cc.director.on(cc.Director.EVENT_BEFORE_UPDATE, beforeUpdate);
          cc.director.on(cc.Director.EVENT_AFTER_UPDATE, afterUpdate);
          cc.director.on(cc.Director.EVENT_AFTER_DRAW, afterDraw);
          _showFPS = true;
        }
      }
    };
  }), {
    "../../platform/CCMacro": 146,
    "./perf-counter": 216
  } ],
  215: [ (function(require, module, exports) {
    "use strict";
    var Counter = cc.Class({
      name: "cc.Counter",
      ctor: function ctor(id, opts, now) {
        this._id = id;
        this._opts = opts || {};
        this._value = 0;
        this._total = 0;
        this._averageValue = 0;
        this._accumValue = 0;
        this._accumSamples = 0;
        this._accumStart = now;
      },
      properties: {
        value: {
          get: function get() {
            return this._value;
          },
          set: function set(v) {
            this._value = v;
          }
        }
      },
      _average: function _average(v, now) {
        if (this._opts.average) {
          this._accumValue += v;
          ++this._accumSamples;
          var t = now;
          if (t - this._accumStart >= this._opts.average) {
            this._averageValue = this._accumValue / this._accumSamples;
            this._accumValue = 0;
            this._accumStart = t;
            this._accumSamples = 0;
          }
        }
      },
      sample: function sample(now) {
        this._average(this._value, now);
      },
      human: function human() {
        var v = this._opts.average ? this._averageValue : this._value;
        return Math.round(100 * v) / 100;
      },
      alarm: function alarm() {
        return this._opts.below && this._value < this._opts.below || this._opts.over && this._value > this._opts.over;
      }
    });
    module.exports = Counter;
  }), {} ],
  216: [ (function(require, module, exports) {
    "use strict";
    var Counter = require("./counter");
    var PerfCounter = cc.Class({
      name: "cc.PerfCounter",
      extends: Counter,
      ctor: function ctor(id, opts, now) {
        this._time = now;
      },
      start: function start(now) {
        this._time = now;
      },
      end: function end(now) {
        this._value = now - this._time;
        this._average(this._value);
      },
      tick: function tick() {
        this.end();
        this.start();
      },
      frame: function frame(now) {
        var t = now;
        var e = t - this._time;
        this._total++;
        var avg = this._opts.average || 1e3;
        if (e > avg) {
          this._value = 1e3 * this._total / e;
          this._total = 0;
          this._time = t;
          this._average(this._value);
        }
      }
    });
    module.exports = PerfCounter;
  }), {
    "./counter": 215
  } ],
  217: [ (function(require, module, exports) {
    "use strict";
    var _js = _interopRequireDefault(require("../platform/js"));
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }
    var _BASELINE_RATIO = .26;
    var _BASELINE_OFFSET = 0;
    false;
    var MAX_CACHE_SIZE = 100;
    var pool = new _js["default"].Pool(2);
    pool.get = function() {
      var node = this._get() || {
        key: null,
        value: null,
        prev: null,
        next: null
      };
      return node;
    };
    function LRUCache(size) {
      this.count = 0;
      this.limit = size;
      this.datas = {};
      this.head = null;
      this.tail = null;
    }
    LRUCache.prototype.moveToHead = function(node) {
      node.next = this.head;
      node.prev = null;
      null !== this.head && (this.head.prev = node);
      this.head = node;
      null === this.tail && (this.tail = node);
      this.count++;
      this.datas[node.key] = node;
    };
    LRUCache.prototype.put = function(key, value) {
      var node = pool.get();
      node.key = key;
      node.value = value;
      if (this.count >= this.limit) {
        var discard = this.tail;
        delete this.datas[discard.key];
        this.count--;
        this.tail = discard.prev;
        this.tail.next = null;
        discard.prev = null;
        discard.next = null;
        pool.put(discard);
      }
      this.moveToHead(node);
    };
    LRUCache.prototype.remove = function(node) {
      null !== node.prev ? node.prev.next = node.next : this.head = node.next;
      null !== node.next ? node.next.prev = node.prev : this.tail = node.prev;
      delete this.datas[node.key];
      this.count--;
    };
    LRUCache.prototype.get = function(key) {
      var node = this.datas[key];
      if (node) {
        this.remove(node);
        this.moveToHead(node);
        return node.value;
      }
      return null;
    };
    LRUCache.prototype.clear = function() {
      this.count = 0;
      this.datas = {};
      this.head = null;
      this.tail = null;
    };
    LRUCache.prototype.has = function(key) {
      return !!this.datas[key];
    };
    LRUCache.prototype["delete"] = function(key) {
      var node = this.datas[key];
      this.remove(node);
    };
    var measureCache = new LRUCache(MAX_CACHE_SIZE);
    var textUtils = {
      BASELINE_RATIO: _BASELINE_RATIO,
      MIDDLE_RATIO: (_BASELINE_RATIO + 1) / 2 - _BASELINE_RATIO,
      BASELINE_OFFSET: _BASELINE_OFFSET,
      label_wordRex: /([a-zA-Z0-9\xc4\xd6\xdc\xe4\xf6\xfc\xdf\xe9\xe8\xe7\xe0\xf9\xea\xe2\xee\xf4\xfb\u0430-\u044f\u0410-\u042f\u0401\u0451]+|\S)/,
      label_symbolRex: /^[!,.:;'}\]%\?>\u3001\u2018\u201c\u300b\uff1f\u3002\uff0c\uff01]/,
      label_lastWordRex: /([a-zA-Z0-9\xc4\xd6\xdc\xe4\xf6\xfc\xdf\xe9\xe8\xe7\xe0\xf9\xea\xe2\xee\xf4\xfb\u0430\xed\xec\xcd\xcc\xef\xc1\xc0\xe1\xe0\xc9\xc8\xd2\xd3\xf2\xf3\u0150\u0151\xd9\xda\u0170\xfa\u0171\xf1\xd1\xe6\xc6\u0153\u0152\xc3\xc2\xe3\xd4\xf5\u011b\u0161\u010d\u0159\u017e\xfd\xe1\xed\xe9\xf3\xfa\u016f\u0165\u010f\u0148\u011a\u0160\u010c\u0158\u017d\xc1\xcd\xc9\xd3\xda\u0164\u017c\u017a\u015b\xf3\u0144\u0142\u0119\u0107\u0105\u017b\u0179\u015a\xd3\u0143\u0141\u0118\u0106\u0104-\u044f\u0410-\u042f\u0401\u0451]+|\S)$/,
      label_lastEnglish: /[a-zA-Z0-9\xc4\xd6\xdc\xe4\xf6\xfc\xdf\xe9\xe8\xe7\xe0\xf9\xea\xe2\xee\xf4\xfb\u0430\xed\xec\xcd\xcc\xef\xc1\xc0\xe1\xe0\xc9\xc8\xd2\xd3\xf2\xf3\u0150\u0151\xd9\xda\u0170\xfa\u0171\xf1\xd1\xe6\xc6\u0153\u0152\xc3\xc2\xe3\xd4\xf5\u011b\u0161\u010d\u0159\u017e\xfd\xe1\xed\xe9\xf3\xfa\u016f\u0165\u010f\u0148\u011a\u0160\u010c\u0158\u017d\xc1\xcd\xc9\xd3\xda\u0164\u017c\u017a\u015b\xf3\u0144\u0142\u0119\u0107\u0105\u017b\u0179\u015a\xd3\u0143\u0141\u0118\u0106\u0104-\u044f\u0410-\u042f\u0401\u0451]+$/,
      label_firstEnglish: /^[a-zA-Z0-9\xc4\xd6\xdc\xe4\xf6\xfc\xdf\xe9\xe8\xe7\xe0\xf9\xea\xe2\xee\xf4\xfb\u0430\xed\xec\xcd\xcc\xef\xc1\xc0\xe1\xe0\xc9\xc8\xd2\xd3\xf2\xf3\u0150\u0151\xd9\xda\u0170\xfa\u0171\xf1\xd1\xe6\xc6\u0153\u0152\xc3\xc2\xe3\xd4\xf5\u011b\u0161\u010d\u0159\u017e\xfd\xe1\xed\xe9\xf3\xfa\u016f\u0165\u010f\u0148\u011a\u0160\u010c\u0158\u017d\xc1\xcd\xc9\xd3\xda\u0164\u017c\u017a\u015b\xf3\u0144\u0142\u0119\u0107\u0105\u017b\u0179\u015a\xd3\u0143\u0141\u0118\u0106\u0104-\u044f\u0410-\u042f\u0401\u0451]/,
      highSurrogateRex: /[\uD800-\uDBFF]/,
      lowSurrogateRex: /[\uDC00-\uDFFF]/,
      label_wrapinspection: true,
      __CHINESE_REG: /^[\u4E00-\u9FFF\u3400-\u4DFF]+$/,
      __JAPANESE_REG: /[\u3000-\u303F]|[\u3040-\u309F]|[\u30A0-\u30FF]|[\uFF00-\uFFEF]|[\u4E00-\u9FAF]|[\u2605-\u2606]|[\u2190-\u2195]|\u203B/g,
      __KOREAN_REG: /^[\u1100-\u11FF]|[\u3130-\u318F]|[\uA960-\uA97F]|[\uAC00-\uD7AF]|[\uD7B0-\uD7FF]+$/,
      isUnicodeCJK: function isUnicodeCJK(ch) {
        return this.__CHINESE_REG.test(ch) || this.__JAPANESE_REG.test(ch) || this.__KOREAN_REG.test(ch);
      },
      isUnicodeSpace: function isUnicodeSpace(ch) {
        ch = ch.charCodeAt(0);
        return ch >= 9 && ch <= 13 || 32 === ch || 133 === ch || 160 === ch || 5760 === ch || ch >= 8192 && ch <= 8202 || 8232 === ch || 8233 === ch || 8239 === ch || 8287 === ch || 12288 === ch;
      },
      safeMeasureText: function safeMeasureText(ctx, string, desc) {
        var font = desc || ctx.font;
        var key = font + "\ud83c\udfae" + string;
        var cache = measureCache.get(key);
        if (null !== cache) return cache;
        var metric = ctx.measureText(string);
        var width = metric && metric.width || 0;
        measureCache.put(key, width);
        return width;
      },
      _safeSubstring: function _safeSubstring(targetString, startIndex, endIndex) {
        var newStartIndex = startIndex, newEndIndex = endIndex;
        var startChar = targetString[startIndex];
        this.lowSurrogateRex.test(startChar) && newStartIndex--;
        if (void 0 !== endIndex) if (endIndex - 1 !== startIndex) {
          var endChar = targetString[endIndex - 1];
          this.highSurrogateRex.test(endChar) && newEndIndex--;
        } else this.highSurrogateRex.test(startChar) && newEndIndex++;
        return targetString.substring(newStartIndex, newEndIndex);
      },
      fragmentText: function fragmentText(stringToken, allWidth, maxWidth, measureText) {
        var wrappedWords = [];
        if (0 === stringToken.length || maxWidth < 0) {
          wrappedWords.push("");
          return wrappedWords;
        }
        var text = stringToken;
        while (allWidth > maxWidth && text.length > 1) {
          var fuzzyLen = text.length * (maxWidth / allWidth) | 0;
          var tmpText = this._safeSubstring(text, fuzzyLen);
          var width = allWidth - measureText(tmpText);
          var sLine = tmpText;
          var pushNum = 0;
          var checkWhile = 0;
          var checkCount = 10;
          while (width > maxWidth && checkWhile++ < checkCount) {
            fuzzyLen *= maxWidth / width;
            fuzzyLen |= 0;
            tmpText = this._safeSubstring(text, fuzzyLen);
            width = allWidth - measureText(tmpText);
          }
          checkWhile = 0;
          while (width <= maxWidth && checkWhile++ < checkCount) {
            if (tmpText) {
              var exec = this.label_wordRex.exec(tmpText);
              pushNum = exec ? exec[0].length : 1;
              sLine = tmpText;
            }
            fuzzyLen += pushNum;
            tmpText = this._safeSubstring(text, fuzzyLen);
            width = allWidth - measureText(tmpText);
          }
          fuzzyLen -= pushNum;
          if (0 === fuzzyLen) {
            fuzzyLen = 1;
            sLine = this._safeSubstring(text, 1);
          } else if (1 === fuzzyLen && this.highSurrogateRex.test(text[0])) {
            fuzzyLen = 2;
            sLine = this._safeSubstring(text, 2);
          }
          var sText = this._safeSubstring(text, 0, fuzzyLen), result;
          if (this.label_wrapinspection && this.label_symbolRex.test(sLine || tmpText)) {
            result = this.label_lastWordRex.exec(sText);
            fuzzyLen -= result ? result[0].length : 0;
            0 === fuzzyLen && (fuzzyLen = 1);
            sLine = this._safeSubstring(text, fuzzyLen);
            sText = this._safeSubstring(text, 0, fuzzyLen);
          }
          if (this.label_firstEnglish.test(sLine)) {
            result = this.label_lastEnglish.exec(sText);
            if (result && sText !== result[0]) {
              fuzzyLen -= result[0].length;
              sLine = this._safeSubstring(text, fuzzyLen);
              sText = this._safeSubstring(text, 0, fuzzyLen);
            }
          }
          if (0 === wrappedWords.length) wrappedWords.push(sText); else {
            sText = sText.trimLeft();
            sText.length > 0 && wrappedWords.push(sText);
          }
          text = sLine || tmpText;
          allWidth = measureText(text);
        }
        if (0 === wrappedWords.length) wrappedWords.push(text); else {
          text = text.trimLeft();
          text.length > 0 && wrappedWords.push(text);
        }
        return wrappedWords;
      }
    };
    cc.textUtils = module.exports = textUtils;
  }), {
    "../platform/js": 161
  } ],
  218: [ (function(require, module, exports) {
    "use strict";
    var Texture2D = require("../assets/CCTexture2D");
    var textureUtil = {
      loadImage: function loadImage(url, cb, target) {
        cc.assertID(url, 3103);
        var tex = cc.assetManager.assets.get(url);
        if (tex) {
          if (tex.loaded) {
            cb && cb.call(target, null, tex);
            return tex;
          }
          tex.once("load", (function() {
            cb && cb.call(target, null, tex);
          }), target);
          return tex;
        }
        cc.assetManager.loadRemote(url, (function(err, texture) {
          cb && cb.call(target, err, texture);
        }));
      },
      cacheImage: function cacheImage(url, image) {
        if (url && image) {
          var tex = new Texture2D();
          tex.initWithElement(image);
          cc.assetManager.assets.add(url, tex);
          return tex;
        }
      },
      postLoadTexture: function postLoadTexture(texture, callback) {
        if (texture.loaded) {
          callback && callback();
          return;
        }
        if (!texture.nativeUrl) {
          callback && callback();
          return;
        }
        cc.assetManager.loadNativeFile(texture, (function(err, image) {
          err || (texture._nativeAsset = image);
          callback && callback(err);
        }));
      }
    };
    module.exports = textureUtil;
  }), {
    "../assets/CCTexture2D": 64
  } ],
  219: [ (function(require, module, exports) {
    "use strict";
    var NodeUnit = require("./node-unit");
    var NodeMemPool = require("./node-mem-pool");
    module.exports = {
      NodeMemPool: new NodeMemPool(NodeUnit)
    };
  }), {
    "./node-mem-pool": 221,
    "./node-unit": 222
  } ],
  220: [ (function(require, module, exports) {
    "use strict";
    var MemPool = function MemPool(unitClass) {
      this._unitClass = unitClass;
      this._pool = [];
      this._findOrder = [];
      false;
    };
    var proto = MemPool.prototype;
    proto._initNative = function() {
      this._nativeMemPool = new renderer.MemPool();
    };
    proto._buildUnit = function(unitID) {
      var unit = new this._unitClass(unitID, this);
      false;
      return unit;
    };
    proto._destroyUnit = function(unitID) {
      this._pool[unitID] = null;
      for (var idx = 0, n = this._findOrder.length; idx < n; idx++) {
        var unit = this._findOrder[idx];
        if (unit && unit.unitID == unitID) {
          this._findOrder.splice(idx, 1);
          break;
        }
      }
      false;
    };
    proto._findUnitID = function() {
      var unitID = 0;
      var pool = this._pool;
      while (pool[unitID]) unitID++;
      return unitID;
    };
    proto.pop = function() {
      var findUnit = null;
      var idx = 0;
      var findOrder = this._findOrder;
      var pool = this._pool;
      for (var n = findOrder.length; idx < n; idx++) {
        var unit = findOrder[idx];
        if (unit && unit.hasSpace()) {
          findUnit = unit;
          break;
        }
      }
      if (!findUnit) {
        var unitID = this._findUnitID();
        findUnit = this._buildUnit(unitID);
        pool[unitID] = findUnit;
        findOrder.push(findUnit);
        idx = findOrder.length - 1;
      }
      var firstUnit = findOrder[0];
      if (firstUnit !== findUnit) {
        findOrder[0] = findUnit;
        findOrder[idx] = firstUnit;
      }
      return findUnit.pop();
    };
    proto.push = function(info) {
      var unit = this._pool[info.unitID];
      unit.push(info.index);
      this._findOrder.length > 1 && unit.isAllFree() && this._destroyUnit(info.unitID);
      return unit;
    };
    module.exports = MemPool;
  }), {} ],
  221: [ (function(require, module, exports) {
    "use strict";
    var MemPool = require("./mem-pool");
    var NodeMemPool = function NodeMemPool(unitClass) {
      MemPool.call(this, unitClass);
    };
    (function() {
      var Super = function Super() {};
      Super.prototype = MemPool.prototype;
      NodeMemPool.prototype = new Super();
    })();
    var proto = NodeMemPool.prototype;
    proto._initNative = function() {
      this._nativeMemPool = new renderer.NodeMemPool();
    };
    proto._destroyUnit = function(unitID) {
      MemPool.prototype._destroyUnit.call(this, unitID);
      false;
    };
    module.exports = NodeMemPool;
  }), {
    "./mem-pool": 220
  } ],
  222: [ (function(require, module, exports) {
    "use strict";
    var _utils = require("../../value-types/utils");
    var Uint32_Bytes = 4;
    var Uint8_Bytes = 1;
    var Dirty_Type = Uint32Array;
    var Dirty_Members = 1;
    var Dirty_Stride = Dirty_Members * Uint32_Bytes;
    var TRS_Members = 10;
    var TRS_Stride = TRS_Members * _utils.FLOAT_BYTES;
    var LocalMatrix_Members = 16;
    var LocalMatrix_Stride = LocalMatrix_Members * _utils.FLOAT_BYTES;
    var WorldMatrix_Members = 16;
    var WorldMatrix_Stride = WorldMatrix_Members * _utils.FLOAT_BYTES;
    var Parent_Type = Uint32Array;
    var Parent_Members = 2;
    var Parent_Stride = Parent_Members * Uint32_Bytes;
    var ZOrder_Type = Uint32Array;
    var ZOrder_Members = 1;
    var ZOrder_Stride = ZOrder_Members * Uint32_Bytes;
    var CullingMask_Type = Int32Array;
    var CullingMask_Members = 1;
    var CullingMask_Stride = CullingMask_Members * Uint32_Bytes;
    var Opacity_Type = Uint8Array;
    var Opacity_Members = 1;
    var Opacity_Stride = Opacity_Members * Uint8_Bytes;
    var Is3D_Type = Uint8Array;
    var Is3D_Members = 1;
    var Is3D_Stride = Is3D_Members * Uint8_Bytes;
    var Node_Type = Uint32Array;
    var Node_Members = 2;
    var Skew_Members = 2;
    var Skew_Stride = Skew_Members * _utils.FLOAT_BYTES;
    var UnitBase = require("./unit-base");
    var NodeUnit = function NodeUnit(unitID, memPool) {
      UnitBase.call(this, unitID, memPool);
      var contentNum = this._contentNum;
      this.trsList = new _utils.FLOAT_ARRAY_TYPE(contentNum * TRS_Members);
      this.localMatList = new _utils.FLOAT_ARRAY_TYPE(contentNum * LocalMatrix_Members);
      this.worldMatList = new _utils.FLOAT_ARRAY_TYPE(contentNum * WorldMatrix_Members);
      false;
      for (var i = 0; i < contentNum; i++) {
        var space = this._spacesData[i];
        space.trs = new _utils.FLOAT_ARRAY_TYPE(this.trsList.buffer, i * TRS_Stride, TRS_Members);
        space.localMat = new _utils.FLOAT_ARRAY_TYPE(this.localMatList.buffer, i * LocalMatrix_Stride, LocalMatrix_Members);
        space.worldMat = new _utils.FLOAT_ARRAY_TYPE(this.worldMatList.buffer, i * WorldMatrix_Stride, WorldMatrix_Members);
        false;
      }
    };
    (function() {
      var Super = function Super() {};
      Super.prototype = UnitBase.prototype;
      NodeUnit.prototype = new Super();
    })();
    module.exports = NodeUnit;
  }), {
    "../../value-types/utils": 232,
    "./unit-base": 223
  } ],
  223: [ (function(require, module, exports) {
    "use strict";
    var POINTER_INVALID_FLAG = 65535;
    var SPACE_FREE_FLAG = 0;
    var SPACE_USE_FLAG = 1;
    var POS_NEXT_FREE = 0;
    var POS_FREE_FLAG = 1;
    var UnitBase = function UnitBase(unitID, memPool, contentNum) {
      contentNum = contentNum || 128;
      this.unitID = unitID;
      this._memPool = memPool;
      this._data = new Uint16Array(2);
      this._data[0] = 0;
      this._data[1] = 0;
      this._contentNum = contentNum;
      this._signData = new Uint16Array(2 * this._contentNum);
      this._spacesData = [];
      for (var i = 0; i < contentNum; i++) {
        var signIndex = 2 * i;
        this._signData[signIndex + POS_NEXT_FREE] = i + 1;
        this._signData[signIndex + POS_FREE_FLAG] = SPACE_FREE_FLAG;
        this._spacesData[i] = {
          index: i,
          unitID: unitID
        };
      }
      this._signData[2 * (contentNum - 1)] = POINTER_INVALID_FLAG;
    };
    var UnitBaseProto = UnitBase.prototype;
    UnitBaseProto.hasSpace = function() {
      return this._data[0] !== POINTER_INVALID_FLAG;
    };
    UnitBaseProto.isAllFree = function() {
      return 0 == this._data[1];
    };
    UnitBaseProto.pop = function() {
      var headFreeIndex = this._data[0];
      if (headFreeIndex === POINTER_INVALID_FLAG) return null;
      var index = headFreeIndex;
      var signIndex = 2 * index;
      var space = this._spacesData[index];
      this._signData[signIndex + POS_FREE_FLAG] = SPACE_USE_FLAG;
      this._data[0] = this._signData[signIndex + POS_NEXT_FREE];
      this._data[1]++;
      return space;
    };
    UnitBaseProto.push = function(index) {
      var signIndex = 2 * index;
      this._signData[signIndex + POS_FREE_FLAG] = SPACE_FREE_FLAG;
      this._signData[signIndex + POS_NEXT_FREE] = this._data[0];
      this._data[0] = index;
      this._data[1]--;
    };
    UnitBaseProto.dump = function() {
      var spaceNum = 0;
      var index = this._data[0];
      var freeStr = "";
      while (index != POINTER_INVALID_FLAG) {
        spaceNum++;
        freeStr += index + "->";
        index = this._signData[2 * index + POS_NEXT_FREE];
      }
      var usingNum = 0;
      var usingStr = "";
      var contentNum = this._contentNum;
      for (var i = 0; i < contentNum; i++) {
        var freeFlag = this._signData[2 * i + POS_FREE_FLAG];
        if (freeFlag == SPACE_USE_FLAG) {
          usingNum++;
          usingStr += i + "->";
        }
      }
      var totalNum = spaceNum + usingNum;
      console.log("unitID:", this.unitID, "spaceNum:", spaceNum, "calc using num:", usingNum, "store using num:", this._data[1], "calc total num:", totalNum, "actually total num:", this._contentNum);
      console.log("free info:", freeStr);
      console.log("using info:", usingStr);
      usingNum != this._data[1] && cc.error("using num error", "calc using num:", usingNum, "store using num:", this._data[1]);
      spaceNum + usingNum != this._contentNum && cc.error("total num error", "calc total num:", totalNum, "actually total num:", this._contentNum);
    };
    module.exports = UnitBase;
  }), {} ],
  224: [ (function(require, module, exports) {
    "use strict";
    exports.__esModule = true;
    exports["default"] = void 0;
    var _valueType = _interopRequireDefault(require("./value-type"));
    var _CCClass = _interopRequireDefault(require("../platform/CCClass"));
    var _misc = _interopRequireDefault(require("../utils/misc"));
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        "value" in descriptor && (descriptor.writable = true);
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      protoProps && _defineProperties(Constructor.prototype, protoProps);
      staticProps && _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    function _inheritsLoose(subClass, superClass) {
      subClass.prototype = Object.create(superClass.prototype);
      subClass.prototype.constructor = subClass;
      subClass.__proto__ = superClass;
    }
    var Color = (function(_ValueType) {
      _inheritsLoose(Color, _ValueType);
      Color.copy = function copy(out, a) {
        out.r = a.r;
        out.g = a.g;
        out.b = a.b;
        out.a = a.a;
        return out;
      };
      Color.clone = function clone(a) {
        return new Color(a.r, a.g, a.b, a.a);
      };
      Color.set = function set(out, r, g, b, a) {
        void 0 === r && (r = 255);
        void 0 === g && (g = 255);
        void 0 === b && (b = 255);
        void 0 === a && (a = 255);
        out.r = r;
        out.g = g;
        out.b = b;
        out.a = a;
        return out;
      };
      Color.fromHex = function fromHex(out, hex) {
        var r = (hex >> 24) / 255;
        var g = (hex >> 16 & 255) / 255;
        var b = (hex >> 8 & 255) / 255;
        var a = (255 & hex) / 255;
        out.r = r;
        out.g = g;
        out.b = b;
        out.a = a;
        return out;
      };
      Color.fromHEX = function fromHEX(out, hexString) {
        hexString = 0 === hexString.indexOf("#") ? hexString.substring(1) : hexString;
        out.r = parseInt(hexString.substr(0, 2), 16) || 0;
        out.g = parseInt(hexString.substr(2, 2), 16) || 0;
        out.b = parseInt(hexString.substr(4, 2), 16) || 0;
        out.a = parseInt(hexString.substr(6, 2), 16) || 255;
        out._val = (out.a << 24 >>> 0) + (out.b << 16) + (out.g << 8) + out.r;
        return out;
      };
      Color.add = function add(out, a, b) {
        out.r = a.r + b.r;
        out.g = a.g + b.g;
        out.b = a.b + b.b;
        out.a = a.a + b.a;
        return out;
      };
      Color.subtract = function subtract(out, a, b) {
        out.r = a.r - b.r;
        out.g = a.g - b.g;
        out.b = a.b - b.b;
        out.a = a.a - b.a;
        return out;
      };
      Color.multiply = function multiply(out, a, b) {
        out.r = a.r * b.r;
        out.g = a.g * b.g;
        out.b = a.b * b.b;
        out.a = a.a * b.a;
        return out;
      };
      Color.divide = function divide(out, a, b) {
        out.r = a.r / b.r;
        out.g = a.g / b.g;
        out.b = a.b / b.b;
        out.a = a.a / b.a;
        return out;
      };
      Color.scale = function scale(out, a, b) {
        out.r = a.r * b;
        out.g = a.g * b;
        out.b = a.b * b;
        out.a = a.a * b;
        return out;
      };
      Color.lerp = function lerp(out, a, b, t) {
        var ar = a.r, ag = a.g, ab = a.b, aa = a.a;
        out.r = ar + t * (b.r - ar);
        out.g = ag + t * (b.g - ag);
        out.b = ab + t * (b.b - ab);
        out.a = aa + t * (b.a - aa);
        return out;
      };
      Color.toArray = function toArray(out, a, ofs) {
        void 0 === ofs && (ofs = 0);
        var scale = a instanceof Color || a.a > 1 ? 1 / 255 : 1;
        out[ofs + 0] = a.r * scale;
        out[ofs + 1] = a.g * scale;
        out[ofs + 2] = a.b * scale;
        out[ofs + 3] = a.a * scale;
        return out;
      };
      Color.fromArray = function fromArray(arr, out, ofs) {
        void 0 === ofs && (ofs = 0);
        out.r = 255 * arr[ofs + 0];
        out.g = 255 * arr[ofs + 1];
        out.b = 255 * arr[ofs + 2];
        out.a = 255 * arr[ofs + 3];
        return out;
      };
      Color.premultiplyAlpha = function premultiplyAlpha(out, color) {
        var alpha = color.a / 255;
        out.r = color.r * alpha;
        out.g = color.g * alpha;
        out.b = color.b * alpha;
        out._fastSetA(color.a);
        return out;
      };
      _createClass(Color, null, [ {
        key: "WHITE",
        get: function get() {
          return new Color(255, 255, 255, 255);
        }
      }, {
        key: "BLACK",
        get: function get() {
          return new Color(0, 0, 0, 255);
        }
      }, {
        key: "TRANSPARENT",
        get: function get() {
          return new Color(0, 0, 0, 0);
        }
      }, {
        key: "GRAY",
        get: function get() {
          return new Color(127.5, 127.5, 127.5);
        }
      }, {
        key: "RED",
        get: function get() {
          return new Color(255, 0, 0);
        }
      }, {
        key: "GREEN",
        get: function get() {
          return new Color(0, 255, 0);
        }
      }, {
        key: "BLUE",
        get: function get() {
          return new Color(0, 0, 255);
        }
      }, {
        key: "YELLOW",
        get: function get() {
          return new Color(255, 235, 4);
        }
      }, {
        key: "ORANGE",
        get: function get() {
          return new Color(255, 127, 0);
        }
      }, {
        key: "CYAN",
        get: function get() {
          return new Color(0, 255, 255);
        }
      }, {
        key: "MAGENTA",
        get: function get() {
          return new Color(255, 0, 255);
        }
      } ]);
      function Color(r, g, b, a) {
        var _this;
        void 0 === r && (r = 0);
        void 0 === g && (g = 0);
        void 0 === b && (b = 0);
        void 0 === a && (a = 255);
        _this = _ValueType.call(this) || this;
        _this._val = 0;
        if ("object" === typeof r) {
          g = r.g;
          b = r.b;
          a = r.a;
          r = r.r;
        }
        _this._val = (a << 24 >>> 0) + (b << 16) + (g << 8) + r;
        return _this;
      }
      var _proto = Color.prototype;
      _proto.clone = function clone() {
        var ret = new Color();
        ret._val = this._val;
        return ret;
      };
      _proto.equals = function equals(other) {
        return other && this._val === other._val;
      };
      _proto.lerp = function lerp(to, ratio, out) {
        out = out || new Color();
        var r = this.r;
        var g = this.g;
        var b = this.b;
        var a = this.a;
        out.r = r + (to.r - r) * ratio;
        out.g = g + (to.g - g) * ratio;
        out.b = b + (to.b - b) * ratio;
        out.a = a + (to.a - a) * ratio;
        return out;
      };
      _proto.toString = function toString() {
        return "rgba(" + this.r.toFixed() + ", " + this.g.toFixed() + ", " + this.b.toFixed() + ", " + this.a.toFixed() + ")";
      };
      _proto.getR = function getR() {
        return 255 & this._val;
      };
      _proto.setR = function setR(red) {
        red = ~~_misc["default"].clampf(red, 0, 255);
        this._val = (4294967040 & this._val | red) >>> 0;
        return this;
      };
      _proto.getG = function getG() {
        return (65280 & this._val) >> 8;
      };
      _proto.setG = function setG(green) {
        green = ~~_misc["default"].clampf(green, 0, 255);
        this._val = (4294902015 & this._val | green << 8) >>> 0;
        return this;
      };
      _proto.getB = function getB() {
        return (16711680 & this._val) >> 16;
      };
      _proto.setB = function setB(blue) {
        blue = ~~_misc["default"].clampf(blue, 0, 255);
        this._val = (4278255615 & this._val | blue << 16) >>> 0;
        return this;
      };
      _proto.getA = function getA() {
        return (4278190080 & this._val) >>> 24;
      };
      _proto.setA = function setA(alpha) {
        alpha = ~~_misc["default"].clampf(alpha, 0, 255);
        this._val = (16777215 & this._val | alpha << 24) >>> 0;
        return this;
      };
      _proto.toCSS = function toCSS(opt) {
        return opt && "rgba" !== opt ? "rgb" === opt ? "rgb(" + this.r + "," + this.g + "," + this.b + ")" : "#" + this.toHEX(opt) : "rgba(" + this.r + "," + this.g + "," + this.b + "," + (this.a / 255).toFixed(2) + ")";
      };
      _proto.fromHEX = function fromHEX(hexString) {
        hexString = 0 === hexString.indexOf("#") ? hexString.substring(1) : hexString;
        var r = parseInt(hexString.substr(0, 2), 16) || 0;
        var g = parseInt(hexString.substr(2, 2), 16) || 0;
        var b = parseInt(hexString.substr(4, 2), 16) || 0;
        var a = parseInt(hexString.substr(6, 2), 16) || 255;
        this._val = (a << 24 >>> 0) + (b << 16) + (g << 8) + r;
        return this;
      };
      _proto.toHEX = function toHEX(fmt) {
        var prefix = "0";
        var hex = [ (this.r < 16 ? prefix : "") + this.r.toString(16), (this.g < 16 ? prefix : "") + this.g.toString(16), (this.b < 16 ? prefix : "") + this.b.toString(16) ];
        if ("#rgb" === fmt) {
          hex[0] = hex[0][0];
          hex[1] = hex[1][0];
          hex[2] = hex[2][0];
        } else "#rrggbbaa" === fmt && hex.push((this.a < 16 ? prefix : "") + this.a.toString(16));
        return hex.join("");
      };
      _proto.toRGBValue = function toRGBValue() {
        return 16777215 & this._val;
      };
      _proto.fromHSV = function fromHSV(h, s, v) {
        var r, g, b;
        if (0 === s) r = g = b = v; else if (0 === v) r = g = b = 0; else {
          1 === h && (h = 0);
          h *= 6;
          var i = Math.floor(h);
          var f = h - i;
          var p = v * (1 - s);
          var q = v * (1 - s * f);
          var t = v * (1 - s * (1 - f));
          switch (i) {
           case 0:
            r = v;
            g = t;
            b = p;
            break;

           case 1:
            r = q;
            g = v;
            b = p;
            break;

           case 2:
            r = p;
            g = v;
            b = t;
            break;

           case 3:
            r = p;
            g = q;
            b = v;
            break;

           case 4:
            r = t;
            g = p;
            b = v;
            break;

           case 5:
            r = v;
            g = p;
            b = q;
          }
        }
        r *= 255;
        g *= 255;
        b *= 255;
        this._val = (this.a << 24 >>> 0) + (b << 16) + (g << 8) + r;
        return this;
      };
      _proto.toHSV = function toHSV() {
        var r = this.r / 255;
        var g = this.g / 255;
        var b = this.b / 255;
        var hsv = {
          h: 0,
          s: 0,
          v: 0
        };
        var max = Math.max(r, g, b);
        var min = Math.min(r, g, b);
        var delta = 0;
        hsv.v = max;
        hsv.s = max ? (max - min) / max : 0;
        if (hsv.s) {
          delta = max - min;
          hsv.h = r === max ? (g - b) / delta : g === max ? 2 + (b - r) / delta : 4 + (r - g) / delta;
          hsv.h /= 6;
          hsv.h < 0 && (hsv.h += 1);
        } else hsv.h = 0;
        return hsv;
      };
      _proto.set = function set(color) {
        if (color._val) this._val = color._val; else {
          this.r = color.r;
          this.g = color.g;
          this.b = color.b;
          this.a = color.a;
        }
        return this;
      };
      _proto._fastSetA = function _fastSetA(alpha) {
        this._val = (16777215 & this._val | alpha << 24) >>> 0;
      };
      _proto.multiply = function multiply(other) {
        var r = (255 & this._val) * other.r >> 8;
        var g = (65280 & this._val) * other.g >> 8;
        var b = (16711680 & this._val) * other.b >> 8;
        var a = ((4278190080 & this._val) >>> 8) * other.a;
        this._val = 4278190080 & a | 16711680 & b | 65280 & g | 255 & r;
        return this;
      };
      _createClass(Color, [ {
        key: "r",
        get: function get() {
          return this.getR();
        },
        set: function set(v) {
          this.setR(v);
        }
      }, {
        key: "g",
        get: function get() {
          return this.getG();
        },
        set: function set(v) {
          this.setG(v);
        }
      }, {
        key: "b",
        get: function get() {
          return this.getB();
        },
        set: function set(v) {
          this.setB(v);
        }
      }, {
        key: "a",
        get: function get() {
          return this.getA();
        },
        set: function set(v) {
          this.setA(v);
        }
      } ]);
      return Color;
    })(_valueType["default"]);
    exports["default"] = Color;
    Color.div = Color.divide;
    Color.sub = Color.subtract;
    Color.mul = Color.multiply;
    Color.WHITE_R = Color.WHITE;
    Color.BLACK_R = Color.BLACK;
    Color.TRANSPARENT_R = Color.TRANSPARENT;
    Color.GRAY_R = Color.GRAY;
    Color.RED_R = Color.RED;
    Color.GREEN_R = Color.GREEN;
    Color.BLUE_R = Color.BLUE;
    Color.YELLOW_R = Color.YELLOW;
    Color.ORANGE_R = Color.ORANGE;
    Color.CYAN_R = Color.CYAN;
    Color.MAGENTA_R = Color.MAGENTA;
    _CCClass["default"].fastDefine("cc.Color", Color, {
      r: 0,
      g: 0,
      b: 0,
      a: 255
    });
    cc.Color = Color;
    cc.color = function color(r, g, b, a) {
      if ("string" === typeof r) {
        var result = new Color();
        return result.fromHEX(r);
      }
      if ("object" === typeof r) return new Color(r.r, r.g, r.b, r.a);
      return new Color(r, g, b, a);
    };
    module.exports = exports["default"];
  }), {
    "../platform/CCClass": 141,
    "../utils/misc": 210,
    "./value-type": 233
  } ],
  225: [ (function(require, module, exports) {
    "use strict";
    exports.__esModule = true;
    var _exportNames = {
      Vec2: true,
      Vec3: true,
      Vec4: true,
      Mat4: true,
      Mat3: true,
      Rect: true,
      Size: true,
      Color: true,
      Quat: true,
      Trs: true
    };
    exports.Trs = exports.Quat = exports.Color = exports.Size = exports.Rect = exports.Mat3 = exports.Mat4 = exports.Vec4 = exports.Vec3 = exports.Vec2 = void 0;
    var _vec = _interopRequireDefault(require("./vec2"));
    exports.Vec2 = _vec["default"];
    var _vec2 = _interopRequireDefault(require("./vec3"));
    exports.Vec3 = _vec2["default"];
    var _vec3 = _interopRequireDefault(require("./vec4"));
    exports.Vec4 = _vec3["default"];
    var _mat = _interopRequireDefault(require("./mat4"));
    exports.Mat4 = _mat["default"];
    var _mat2 = _interopRequireDefault(require("./mat3"));
    exports.Mat3 = _mat2["default"];
    var _rect = _interopRequireDefault(require("./rect"));
    exports.Rect = _rect["default"];
    var _size = _interopRequireDefault(require("./size"));
    exports.Size = _size["default"];
    var _color = _interopRequireDefault(require("./color"));
    exports.Color = _color["default"];
    var _quat = _interopRequireDefault(require("./quat"));
    exports.Quat = _quat["default"];
    var _trs = _interopRequireDefault(require("./trs"));
    exports.Trs = _trs["default"];
    var _utils = require("./utils");
    Object.keys(_utils).forEach((function(key) {
      if ("default" === key || "__esModule" === key) return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      exports[key] = _utils[key];
    }));
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }
    cc.math = module.exports;
  }), {
    "./color": 224,
    "./mat3": 226,
    "./mat4": 227,
    "./quat": 228,
    "./rect": 229,
    "./size": 230,
    "./trs": 231,
    "./utils": 232,
    "./vec2": 234,
    "./vec3": 235,
    "./vec4": 236
  } ],
  226: [ (function(require, module, exports) {
    "use strict";
    exports.__esModule = true;
    exports["default"] = void 0;
    var _utils = require("../value-types/utils");
    var _vec = _interopRequireDefault(require("./vec3"));
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }
    var Mat3 = (function() {
      Mat3.create = function create(m00, m01, m02, m03, m04, m05, m06, m07, m08) {
        void 0 === m00 && (m00 = 1);
        void 0 === m01 && (m01 = 0);
        void 0 === m02 && (m02 = 0);
        void 0 === m03 && (m03 = 0);
        void 0 === m04 && (m04 = 1);
        void 0 === m05 && (m05 = 0);
        void 0 === m06 && (m06 = 0);
        void 0 === m07 && (m07 = 0);
        void 0 === m08 && (m08 = 1);
        return new Mat3(m00, m01, m02, m03, m04, m05, m06, m07, m08);
      };
      Mat3.clone = function clone(a) {
        var am = a.m;
        return new Mat3(am[0], am[1], am[2], am[3], am[4], am[5], am[6], am[7], am[8]);
      };
      Mat3.copy = function copy(out, a) {
        out.m.set(a.m);
        return out;
      };
      Mat3.set = function set(out, m00, m01, m02, m10, m11, m12, m20, m21, m22) {
        var outm = out.m;
        outm[0] = m00;
        outm[1] = m01;
        outm[2] = m02;
        outm[3] = m10;
        outm[4] = m11;
        outm[5] = m12;
        outm[6] = m20;
        outm[7] = m21;
        outm[8] = m22;
        return out;
      };
      Mat3.identity = function identity(out) {
        var outm = out.m;
        outm[0] = 1;
        outm[1] = 0;
        outm[2] = 0;
        outm[3] = 0;
        outm[4] = 1;
        outm[5] = 0;
        outm[6] = 0;
        outm[7] = 0;
        outm[8] = 1;
        return out;
      };
      Mat3.transpose = function transpose(out, a) {
        var am = a.m, outm = out.m;
        if (out === a) {
          var a01 = am[1], a02 = am[2], a12 = am[5];
          outm[1] = am[3];
          outm[2] = am[6];
          outm[3] = a01;
          outm[5] = am[7];
          outm[6] = a02;
          outm[7] = a12;
        } else {
          outm[0] = am[0];
          outm[1] = am[3];
          outm[2] = am[6];
          outm[3] = am[1];
          outm[4] = am[4];
          outm[5] = am[7];
          outm[6] = am[2];
          outm[7] = am[5];
          outm[8] = am[8];
        }
        return out;
      };
      Mat3.invert = function invert(out, a) {
        var am = a.m, outm = out.m;
        var a00 = am[0], a01 = am[1], a02 = am[2], a10 = am[3], a11 = am[4], a12 = am[5], a20 = am[6], a21 = am[7], a22 = am[8];
        var b01 = a22 * a11 - a12 * a21;
        var b11 = -a22 * a10 + a12 * a20;
        var b21 = a21 * a10 - a11 * a20;
        var det = a00 * b01 + a01 * b11 + a02 * b21;
        if (!det) return out;
        det = 1 / det;
        outm[0] = b01 * det;
        outm[1] = (-a22 * a01 + a02 * a21) * det;
        outm[2] = (a12 * a01 - a02 * a11) * det;
        outm[3] = b11 * det;
        outm[4] = (a22 * a00 - a02 * a20) * det;
        outm[5] = (-a12 * a00 + a02 * a10) * det;
        outm[6] = b21 * det;
        outm[7] = (-a21 * a00 + a01 * a20) * det;
        outm[8] = (a11 * a00 - a01 * a10) * det;
        return out;
      };
      Mat3.adjoint = function adjoint(out, a) {
        var am = a.m, outm = out.m;
        var a00 = am[0], a01 = am[1], a02 = am[2], a10 = am[3], a11 = am[4], a12 = am[5], a20 = am[6], a21 = am[7], a22 = am[8];
        outm[0] = a11 * a22 - a12 * a21;
        outm[1] = a02 * a21 - a01 * a22;
        outm[2] = a01 * a12 - a02 * a11;
        outm[3] = a12 * a20 - a10 * a22;
        outm[4] = a00 * a22 - a02 * a20;
        outm[5] = a02 * a10 - a00 * a12;
        outm[6] = a10 * a21 - a11 * a20;
        outm[7] = a01 * a20 - a00 * a21;
        outm[8] = a00 * a11 - a01 * a10;
        return out;
      };
      Mat3.determinant = function determinant(a) {
        var am = a.m;
        var a00 = am[0], a01 = am[1], a02 = am[2], a10 = am[3], a11 = am[4], a12 = am[5], a20 = am[6], a21 = am[7], a22 = am[8];
        return a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20);
      };
      Mat3.multiply = function multiply(out, a, b) {
        var am = a.m, bm = b.m, outm = out.m;
        var a00 = am[0], a01 = am[1], a02 = am[2], a10 = am[3], a11 = am[4], a12 = am[5], a20 = am[6], a21 = am[7], a22 = am[8];
        var b00 = bm[0], b01 = bm[1], b02 = bm[2];
        var b10 = bm[3], b11 = bm[4], b12 = bm[5];
        var b20 = bm[6], b21 = bm[7], b22 = bm[8];
        outm[0] = b00 * a00 + b01 * a10 + b02 * a20;
        outm[1] = b00 * a01 + b01 * a11 + b02 * a21;
        outm[2] = b00 * a02 + b01 * a12 + b02 * a22;
        outm[3] = b10 * a00 + b11 * a10 + b12 * a20;
        outm[4] = b10 * a01 + b11 * a11 + b12 * a21;
        outm[5] = b10 * a02 + b11 * a12 + b12 * a22;
        outm[6] = b20 * a00 + b21 * a10 + b22 * a20;
        outm[7] = b20 * a01 + b21 * a11 + b22 * a21;
        outm[8] = b20 * a02 + b21 * a12 + b22 * a22;
        return out;
      };
      Mat3.multiplyMat4 = function multiplyMat4(out, a, b) {
        var am = a.m, bm = b.m, outm = out.m;
        var a00 = am[0], a01 = am[1], a02 = am[2], a10 = am[3], a11 = am[4], a12 = am[5], a20 = am[6], a21 = am[7], a22 = am[8];
        var b00 = bm[0], b01 = bm[1], b02 = bm[2];
        var b10 = bm[4], b11 = bm[5], b12 = bm[6];
        var b20 = bm[8], b21 = bm[9], b22 = bm[10];
        outm[0] = b00 * a00 + b01 * a10 + b02 * a20;
        outm[1] = b00 * a01 + b01 * a11 + b02 * a21;
        outm[2] = b00 * a02 + b01 * a12 + b02 * a22;
        outm[3] = b10 * a00 + b11 * a10 + b12 * a20;
        outm[4] = b10 * a01 + b11 * a11 + b12 * a21;
        outm[5] = b10 * a02 + b11 * a12 + b12 * a22;
        outm[6] = b20 * a00 + b21 * a10 + b22 * a20;
        outm[7] = b20 * a01 + b21 * a11 + b22 * a21;
        outm[8] = b20 * a02 + b21 * a12 + b22 * a22;
        return out;
      };
      Mat3.translate = function translate(out, a, v) {
        var am = a.m, outm = out.m;
        var a00 = am[0], a01 = am[1], a02 = am[2], a10 = am[3], a11 = am[4], a12 = am[5], a20 = am[6], a21 = am[7], a22 = am[8];
        var x = v.x, y = v.y;
        outm[0] = a00;
        outm[1] = a01;
        outm[2] = a02;
        outm[3] = a10;
        outm[4] = a11;
        outm[5] = a12;
        outm[6] = x * a00 + y * a10 + a20;
        outm[7] = x * a01 + y * a11 + a21;
        outm[8] = x * a02 + y * a12 + a22;
        return out;
      };
      Mat3.rotate = function rotate(out, a, rad) {
        var am = a.m, outm = out.m;
        var a00 = am[0], a01 = am[1], a02 = am[2], a10 = am[3], a11 = am[4], a12 = am[5], a20 = am[6], a21 = am[7], a22 = am[8];
        var s = Math.sin(rad);
        var c = Math.cos(rad);
        outm[0] = c * a00 + s * a10;
        outm[1] = c * a01 + s * a11;
        outm[2] = c * a02 + s * a12;
        outm[3] = c * a10 - s * a00;
        outm[4] = c * a11 - s * a01;
        outm[5] = c * a12 - s * a02;
        outm[6] = a20;
        outm[7] = a21;
        outm[8] = a22;
        return out;
      };
      Mat3.scale = function scale(out, a, v) {
        var x = v.x, y = v.y;
        var am = a.m, outm = out.m;
        outm[0] = x * am[0];
        outm[1] = x * am[1];
        outm[2] = x * am[2];
        outm[3] = y * am[3];
        outm[4] = y * am[4];
        outm[5] = y * am[5];
        outm[6] = am[6];
        outm[7] = am[7];
        outm[8] = am[8];
        return out;
      };
      Mat3.fromMat4 = function fromMat4(out, a) {
        var am = a.m, outm = out.m;
        outm[0] = am[0];
        outm[1] = am[1];
        outm[2] = am[2];
        outm[3] = am[4];
        outm[4] = am[5];
        outm[5] = am[6];
        outm[6] = am[8];
        outm[7] = am[9];
        outm[8] = am[10];
        return out;
      };
      Mat3.fromTranslation = function fromTranslation(out, v) {
        var outm = out.m;
        outm[0] = 1;
        outm[1] = 0;
        outm[2] = 0;
        outm[3] = 0;
        outm[4] = 1;
        outm[5] = 0;
        outm[6] = v.x;
        outm[7] = v.y;
        outm[8] = 1;
        return out;
      };
      Mat3.fromRotation = function fromRotation(out, rad) {
        var s = Math.sin(rad), c = Math.cos(rad);
        var outm = out.m;
        outm[0] = c;
        outm[1] = s;
        outm[2] = 0;
        outm[3] = -s;
        outm[4] = c;
        outm[5] = 0;
        outm[6] = 0;
        outm[7] = 0;
        outm[8] = 1;
        return out;
      };
      Mat3.fromScaling = function fromScaling(out, v) {
        var outm = out.m;
        outm[0] = v.x;
        outm[1] = 0;
        outm[2] = 0;
        outm[3] = 0;
        outm[4] = v.y;
        outm[5] = 0;
        outm[6] = 0;
        outm[7] = 0;
        outm[8] = 1;
        return out;
      };
      Mat3.fromQuat = function fromQuat(out, q) {
        var outm = out.m;
        var x = q.x, y = q.y, z = q.z, w = q.w;
        var x2 = x + x;
        var y2 = y + y;
        var z2 = z + z;
        var xx = x * x2;
        var yx = y * x2;
        var yy = y * y2;
        var zx = z * x2;
        var zy = z * y2;
        var zz = z * z2;
        var wx = w * x2;
        var wy = w * y2;
        var wz = w * z2;
        outm[0] = 1 - yy - zz;
        outm[3] = yx - wz;
        outm[6] = zx + wy;
        outm[1] = yx + wz;
        outm[4] = 1 - xx - zz;
        outm[7] = zy - wx;
        outm[2] = zx - wy;
        outm[5] = zy + wx;
        outm[8] = 1 - xx - yy;
        return out;
      };
      Mat3.fromViewUp = function fromViewUp(out, view, up) {
        var _fromViewUpIIFE = (function() {
          var default_up = new _vec["default"](0, 1, 0);
          var x = new _vec["default"]();
          var y = new _vec["default"]();
          return function(out, view, up) {
            if (_vec["default"].lengthSqr(view) < _utils.EPSILON * _utils.EPSILON) {
              Mat3.identity(out);
              return out;
            }
            up = up || default_up;
            _vec["default"].normalize(x, _vec["default"].cross(x, up, view));
            if (_vec["default"].lengthSqr(x) < _utils.EPSILON * _utils.EPSILON) {
              Mat3.identity(out);
              return out;
            }
            _vec["default"].cross(y, view, x);
            Mat3.set(out, x.x, x.y, x.z, y.x, y.y, y.z, view.x, view.y, view.z);
            return out;
          };
        })();
        return _fromViewUpIIFE(out, view, up);
      };
      Mat3.normalFromMat4 = function normalFromMat4(out, a) {
        var am = a.m, outm = out.m;
        var a00 = am[0], a01 = am[1], a02 = am[2], a03 = am[3], a10 = am[4], a11 = am[5], a12 = am[6], a13 = am[7], a20 = am[8], a21 = am[9], a22 = am[10], a23 = am[11], a30 = am[12], a31 = am[13], a32 = am[14], a33 = am[15];
        var b00 = a00 * a11 - a01 * a10;
        var b01 = a00 * a12 - a02 * a10;
        var b02 = a00 * a13 - a03 * a10;
        var b03 = a01 * a12 - a02 * a11;
        var b04 = a01 * a13 - a03 * a11;
        var b05 = a02 * a13 - a03 * a12;
        var b06 = a20 * a31 - a21 * a30;
        var b07 = a20 * a32 - a22 * a30;
        var b08 = a20 * a33 - a23 * a30;
        var b09 = a21 * a32 - a22 * a31;
        var b10 = a21 * a33 - a23 * a31;
        var b11 = a22 * a33 - a23 * a32;
        var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;
        if (!det) return out;
        det = 1 / det;
        outm[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;
        outm[1] = (a12 * b08 - a10 * b11 - a13 * b07) * det;
        outm[2] = (a10 * b10 - a11 * b08 + a13 * b06) * det;
        outm[3] = (a02 * b10 - a01 * b11 - a03 * b09) * det;
        outm[4] = (a00 * b11 - a02 * b08 + a03 * b07) * det;
        outm[5] = (a01 * b08 - a00 * b10 - a03 * b06) * det;
        outm[6] = (a31 * b05 - a32 * b04 + a33 * b03) * det;
        outm[7] = (a32 * b02 - a30 * b05 - a33 * b01) * det;
        outm[8] = (a30 * b04 - a31 * b02 + a33 * b00) * det;
        return out;
      };
      Mat3.frob = function frob(a) {
        var am = a.m;
        return Math.sqrt(Math.pow(am[0], 2) + Math.pow(am[1], 2) + Math.pow(am[2], 2) + Math.pow(am[3], 2) + Math.pow(am[4], 2) + Math.pow(am[5], 2) + Math.pow(am[6], 2) + Math.pow(am[7], 2) + Math.pow(am[8], 2));
      };
      Mat3.add = function add(out, a, b) {
        var am = a.m, bm = b.m, outm = out.m;
        outm[0] = am[0] + bm[0];
        outm[1] = am[1] + bm[1];
        outm[2] = am[2] + bm[2];
        outm[3] = am[3] + bm[3];
        outm[4] = am[4] + bm[4];
        outm[5] = am[5] + bm[5];
        outm[6] = am[6] + bm[6];
        outm[7] = am[7] + bm[7];
        outm[8] = am[8] + bm[8];
        return out;
      };
      Mat3.subtract = function subtract(out, a, b) {
        var am = a.m, bm = b.m, outm = out.m;
        outm[0] = am[0] - bm[0];
        outm[1] = am[1] - bm[1];
        outm[2] = am[2] - bm[2];
        outm[3] = am[3] - bm[3];
        outm[4] = am[4] - bm[4];
        outm[5] = am[5] - bm[5];
        outm[6] = am[6] - bm[6];
        outm[7] = am[7] - bm[7];
        outm[8] = am[8] - bm[8];
        return out;
      };
      Mat3.multiplyScalar = function multiplyScalar(out, a, b) {
        var am = a.m, outm = out.m;
        outm[0] = am[0] * b;
        outm[1] = am[1] * b;
        outm[2] = am[2] * b;
        outm[3] = am[3] * b;
        outm[4] = am[4] * b;
        outm[5] = am[5] * b;
        outm[6] = am[6] * b;
        outm[7] = am[7] * b;
        outm[8] = am[8] * b;
        return out;
      };
      Mat3.multiplyScalarAndAdd = function multiplyScalarAndAdd(out, a, b, scale) {
        var am = a.m, bm = b.m, outm = out.m;
        outm[0] = am[0] + bm[0] * scale;
        outm[1] = am[1] + bm[1] * scale;
        outm[2] = am[2] + bm[2] * scale;
        outm[3] = am[3] + bm[3] * scale;
        outm[4] = am[4] + bm[4] * scale;
        outm[5] = am[5] + bm[5] * scale;
        outm[6] = am[6] + bm[6] * scale;
        outm[7] = am[7] + bm[7] * scale;
        outm[8] = am[8] + bm[8] * scale;
        return out;
      };
      Mat3.exactEquals = function exactEquals(a, b) {
        var am = a.m, bm = b.m;
        return am[0] === bm[0] && am[1] === bm[1] && am[2] === bm[2] && am[3] === bm[3] && am[4] === bm[4] && am[5] === bm[5] && am[6] === bm[6] && am[7] === bm[7] && am[8] === bm[8];
      };
      Mat3.equals = function equals(a, b) {
        var am = a.m, bm = b.m;
        var a0 = am[0], a1 = am[1], a2 = am[2], a3 = am[3], a4 = am[4], a5 = am[5], a6 = am[6], a7 = am[7], a8 = am[8];
        var b0 = bm[0], b1 = bm[1], b2 = bm[2], b3 = bm[3], b4 = bm[4], b5 = bm[5], b6 = bm[6], b7 = bm[7], b8 = bm[8];
        return Math.abs(a0 - b0) <= _utils.EPSILON * Math.max(1, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= _utils.EPSILON * Math.max(1, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= _utils.EPSILON * Math.max(1, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= _utils.EPSILON * Math.max(1, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= _utils.EPSILON * Math.max(1, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= _utils.EPSILON * Math.max(1, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= _utils.EPSILON * Math.max(1, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= _utils.EPSILON * Math.max(1, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= _utils.EPSILON * Math.max(1, Math.abs(a8), Math.abs(b8));
      };
      Mat3.toArray = function toArray(out, mat, ofs) {
        void 0 === ofs && (ofs = 0);
        var m = mat.m;
        for (var i = 0; i < 9; i++) out[ofs + i] = m[i];
        return out;
      };
      Mat3.fromArray = function fromArray(out, arr, ofs) {
        void 0 === ofs && (ofs = 0);
        var m = out.m;
        for (var i = 0; i < 9; i++) m[i] = arr[ofs + i];
        return out;
      };
      function Mat3(m00, m01, m02, m03, m04, m05, m06, m07, m08) {
        void 0 === m00 && (m00 = 1);
        void 0 === m01 && (m01 = 0);
        void 0 === m02 && (m02 = 0);
        void 0 === m03 && (m03 = 0);
        void 0 === m04 && (m04 = 1);
        void 0 === m05 && (m05 = 0);
        void 0 === m06 && (m06 = 0);
        void 0 === m07 && (m07 = 0);
        void 0 === m08 && (m08 = 1);
        this.m = void 0;
        if (m00 instanceof _utils.FLOAT_ARRAY_TYPE) this.m = m00; else {
          this.m = new _utils.FLOAT_ARRAY_TYPE(9);
          var m = this.m;
          m[0] = m00;
          m[1] = m01;
          m[2] = m02;
          m[3] = m03;
          m[4] = m04;
          m[5] = m05;
          m[6] = m06;
          m[7] = m07;
          m[8] = m08;
        }
      }
      var _proto = Mat3.prototype;
      _proto.toString = function toString() {
        var am = this.m;
        return "mat3(" + am[0] + ", " + am[1] + ", " + am[2] + ", " + am[3] + ", " + am[4] + ", " + am[5] + ", " + am[6] + ", " + am[7] + ", " + am[8] + ")";
      };
      return Mat3;
    })();
    exports["default"] = Mat3;
    Mat3.sub = Mat3.subtract;
    Mat3.mul = Mat3.multiply;
    Mat3.IDENTITY = Object.freeze(new Mat3());
    cc.Mat3 = Mat3;
    module.exports = exports["default"];
  }), {
    "../value-types/utils": 232,
    "./vec3": 235
  } ],
  227: [ (function(require, module, exports) {
    "use strict";
    exports.__esModule = true;
    exports["default"] = void 0;
    var _valueType = _interopRequireDefault(require("./value-type"));
    var _CCClass = _interopRequireDefault(require("../platform/CCClass"));
    var _vec = _interopRequireDefault(require("./vec3"));
    var _quat = _interopRequireDefault(require("./quat"));
    var _utils = require("./utils");
    var _mat = _interopRequireDefault(require("./mat3"));
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }
    function _inheritsLoose(subClass, superClass) {
      subClass.prototype = Object.create(superClass.prototype);
      subClass.prototype.constructor = subClass;
      subClass.__proto__ = superClass;
    }
    var _a00 = 0;
    var _a01 = 0;
    var _a02 = 0;
    var _a03 = 0;
    var _a10 = 0;
    var _a11 = 0;
    var _a12 = 0;
    var _a13 = 0;
    var _a20 = 0;
    var _a21 = 0;
    var _a22 = 0;
    var _a23 = 0;
    var _a30 = 0;
    var _a31 = 0;
    var _a32 = 0;
    var _a33 = 0;
    var Mat4 = (function(_ValueType) {
      _inheritsLoose(Mat4, _ValueType);
      var _proto = Mat4.prototype;
      _proto.mul = function mul(m, out) {
        return Mat4.multiply(out || new Mat4(), this, m);
      };
      _proto.mulScalar = function mulScalar(num, out) {
        Mat4.multiplyScalar(out || new Mat4(), this, num);
      };
      _proto.sub = function sub(m, out) {
        Mat4.subtract(out || new Mat4(), this, m);
      };
      Mat4.clone = function clone(a) {
        var m = a.m;
        return new Mat4(m[0], m[1], m[2], m[3], m[4], m[5], m[6], m[7], m[8], m[9], m[10], m[11], m[12], m[13], m[14], m[15]);
      };
      Mat4.copy = function copy(out, a) {
        var m = out.m, am = a.m;
        m[0] = am[0];
        m[1] = am[1];
        m[2] = am[2];
        m[3] = am[3];
        m[4] = am[4];
        m[5] = am[5];
        m[6] = am[6];
        m[7] = am[7];
        m[8] = am[8];
        m[9] = am[9];
        m[10] = am[10];
        m[11] = am[11];
        m[12] = am[12];
        m[13] = am[13];
        m[14] = am[14];
        m[15] = am[15];
        return out;
      };
      Mat4.set = function set(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {
        var m = out.m;
        m[0] = m00;
        m[1] = m01;
        m[2] = m02;
        m[3] = m03;
        m[4] = m10;
        m[5] = m11;
        m[6] = m12;
        m[7] = m13;
        m[8] = m20;
        m[9] = m21;
        m[10] = m22;
        m[11] = m23;
        m[12] = m30;
        m[13] = m31;
        m[14] = m32;
        m[15] = m33;
        return out;
      };
      Mat4.identity = function identity(out) {
        var m = out.m;
        m[0] = 1;
        m[1] = 0;
        m[2] = 0;
        m[3] = 0;
        m[4] = 0;
        m[5] = 1;
        m[6] = 0;
        m[7] = 0;
        m[8] = 0;
        m[9] = 0;
        m[10] = 1;
        m[11] = 0;
        m[12] = 0;
        m[13] = 0;
        m[14] = 0;
        m[15] = 1;
        return out;
      };
      Mat4.transpose = function transpose(out, a) {
        var m = out.m, am = a.m;
        if (out === a) {
          var a01 = am[1], a02 = am[2], a03 = am[3], a12 = am[6], a13 = am[7], a23 = am[11];
          m[1] = am[4];
          m[2] = am[8];
          m[3] = am[12];
          m[4] = a01;
          m[6] = am[9];
          m[7] = am[13];
          m[8] = a02;
          m[9] = a12;
          m[11] = am[14];
          m[12] = a03;
          m[13] = a13;
          m[14] = a23;
        } else {
          m[0] = am[0];
          m[1] = am[4];
          m[2] = am[8];
          m[3] = am[12];
          m[4] = am[1];
          m[5] = am[5];
          m[6] = am[9];
          m[7] = am[13];
          m[8] = am[2];
          m[9] = am[6];
          m[10] = am[10];
          m[11] = am[14];
          m[12] = am[3];
          m[13] = am[7];
          m[14] = am[11];
          m[15] = am[15];
        }
        return out;
      };
      Mat4.invert = function invert(out, a) {
        var am = a.m;
        _a00 = am[0];
        _a01 = am[1];
        _a02 = am[2];
        _a03 = am[3];
        _a10 = am[4];
        _a11 = am[5];
        _a12 = am[6];
        _a13 = am[7];
        _a20 = am[8];
        _a21 = am[9];
        _a22 = am[10];
        _a23 = am[11];
        _a30 = am[12];
        _a31 = am[13];
        _a32 = am[14];
        _a33 = am[15];
        var b00 = _a00 * _a11 - _a01 * _a10;
        var b01 = _a00 * _a12 - _a02 * _a10;
        var b02 = _a00 * _a13 - _a03 * _a10;
        var b03 = _a01 * _a12 - _a02 * _a11;
        var b04 = _a01 * _a13 - _a03 * _a11;
        var b05 = _a02 * _a13 - _a03 * _a12;
        var b06 = _a20 * _a31 - _a21 * _a30;
        var b07 = _a20 * _a32 - _a22 * _a30;
        var b08 = _a20 * _a33 - _a23 * _a30;
        var b09 = _a21 * _a32 - _a22 * _a31;
        var b10 = _a21 * _a33 - _a23 * _a31;
        var b11 = _a22 * _a33 - _a23 * _a32;
        var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;
        if (0 === det) return null;
        det = 1 / det;
        var m = out.m;
        m[0] = (_a11 * b11 - _a12 * b10 + _a13 * b09) * det;
        m[1] = (_a02 * b10 - _a01 * b11 - _a03 * b09) * det;
        m[2] = (_a31 * b05 - _a32 * b04 + _a33 * b03) * det;
        m[3] = (_a22 * b04 - _a21 * b05 - _a23 * b03) * det;
        m[4] = (_a12 * b08 - _a10 * b11 - _a13 * b07) * det;
        m[5] = (_a00 * b11 - _a02 * b08 + _a03 * b07) * det;
        m[6] = (_a32 * b02 - _a30 * b05 - _a33 * b01) * det;
        m[7] = (_a20 * b05 - _a22 * b02 + _a23 * b01) * det;
        m[8] = (_a10 * b10 - _a11 * b08 + _a13 * b06) * det;
        m[9] = (_a01 * b08 - _a00 * b10 - _a03 * b06) * det;
        m[10] = (_a30 * b04 - _a31 * b02 + _a33 * b00) * det;
        m[11] = (_a21 * b02 - _a20 * b04 - _a23 * b00) * det;
        m[12] = (_a11 * b07 - _a10 * b09 - _a12 * b06) * det;
        m[13] = (_a00 * b09 - _a01 * b07 + _a02 * b06) * det;
        m[14] = (_a31 * b01 - _a30 * b03 - _a32 * b00) * det;
        m[15] = (_a20 * b03 - _a21 * b01 + _a22 * b00) * det;
        return out;
      };
      Mat4.determinant = function determinant(a) {
        var m = a.m;
        _a00 = m[0];
        _a01 = m[1];
        _a02 = m[2];
        _a03 = m[3];
        _a10 = m[4];
        _a11 = m[5];
        _a12 = m[6];
        _a13 = m[7];
        _a20 = m[8];
        _a21 = m[9];
        _a22 = m[10];
        _a23 = m[11];
        _a30 = m[12];
        _a31 = m[13];
        _a32 = m[14];
        _a33 = m[15];
        var b00 = _a00 * _a11 - _a01 * _a10;
        var b01 = _a00 * _a12 - _a02 * _a10;
        var b02 = _a00 * _a13 - _a03 * _a10;
        var b03 = _a01 * _a12 - _a02 * _a11;
        var b04 = _a01 * _a13 - _a03 * _a11;
        var b05 = _a02 * _a13 - _a03 * _a12;
        var b06 = _a20 * _a31 - _a21 * _a30;
        var b07 = _a20 * _a32 - _a22 * _a30;
        var b08 = _a20 * _a33 - _a23 * _a30;
        var b09 = _a21 * _a32 - _a22 * _a31;
        var b10 = _a21 * _a33 - _a23 * _a31;
        var b11 = _a22 * _a33 - _a23 * _a32;
        return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;
      };
      Mat4.multiply = function multiply(out, a, b) {
        var m = out.m, am = a.m, bm = b.m;
        _a00 = am[0];
        _a01 = am[1];
        _a02 = am[2];
        _a03 = am[3];
        _a10 = am[4];
        _a11 = am[5];
        _a12 = am[6];
        _a13 = am[7];
        _a20 = am[8];
        _a21 = am[9];
        _a22 = am[10];
        _a23 = am[11];
        _a30 = am[12];
        _a31 = am[13];
        _a32 = am[14];
        _a33 = am[15];
        var b0 = bm[0], b1 = bm[1], b2 = bm[2], b3 = bm[3];
        m[0] = b0 * _a00 + b1 * _a10 + b2 * _a20 + b3 * _a30;
        m[1] = b0 * _a01 + b1 * _a11 + b2 * _a21 + b3 * _a31;
        m[2] = b0 * _a02 + b1 * _a12 + b2 * _a22 + b3 * _a32;
        m[3] = b0 * _a03 + b1 * _a13 + b2 * _a23 + b3 * _a33;
        b0 = bm[4];
        b1 = bm[5];
        b2 = bm[6];
        b3 = bm[7];
        m[4] = b0 * _a00 + b1 * _a10 + b2 * _a20 + b3 * _a30;
        m[5] = b0 * _a01 + b1 * _a11 + b2 * _a21 + b3 * _a31;
        m[6] = b0 * _a02 + b1 * _a12 + b2 * _a22 + b3 * _a32;
        m[7] = b0 * _a03 + b1 * _a13 + b2 * _a23 + b3 * _a33;
        b0 = bm[8];
        b1 = bm[9];
        b2 = bm[10];
        b3 = bm[11];
        m[8] = b0 * _a00 + b1 * _a10 + b2 * _a20 + b3 * _a30;
        m[9] = b0 * _a01 + b1 * _a11 + b2 * _a21 + b3 * _a31;
        m[10] = b0 * _a02 + b1 * _a12 + b2 * _a22 + b3 * _a32;
        m[11] = b0 * _a03 + b1 * _a13 + b2 * _a23 + b3 * _a33;
        b0 = bm[12];
        b1 = bm[13];
        b2 = bm[14];
        b3 = bm[15];
        m[12] = b0 * _a00 + b1 * _a10 + b2 * _a20 + b3 * _a30;
        m[13] = b0 * _a01 + b1 * _a11 + b2 * _a21 + b3 * _a31;
        m[14] = b0 * _a02 + b1 * _a12 + b2 * _a22 + b3 * _a32;
        m[15] = b0 * _a03 + b1 * _a13 + b2 * _a23 + b3 * _a33;
        return out;
      };
      Mat4.transform = function transform(out, a, v) {
        var x = v.x, y = v.y, z = v.z;
        var m = out.m, am = a.m;
        if (a === out) {
          m[12] = am[0] * x + am[4] * y + am[8] * z + am[12];
          m[13] = am[1] * x + am[5] * y + am[9] * z + am[13];
          m[14] = am[2] * x + am[6] * y + am[10] * z + am[14];
          m[15] = am[3] * x + am[7] * y + am[11] * z + am[15];
        } else {
          _a00 = am[0];
          _a01 = am[1];
          _a02 = am[2];
          _a03 = am[3];
          _a10 = am[4];
          _a11 = am[5];
          _a12 = am[6];
          _a13 = am[7];
          _a20 = am[8];
          _a21 = am[9];
          _a22 = am[10];
          _a23 = am[11];
          _a30 = am[12];
          _a31 = am[13];
          _a32 = am[14];
          _a33 = am[15];
          m[0] = _a00;
          m[1] = _a01;
          m[2] = _a02;
          m[3] = _a03;
          m[4] = _a10;
          m[5] = _a11;
          m[6] = _a12;
          m[7] = _a13;
          m[8] = _a20;
          m[9] = _a21;
          m[10] = _a22;
          m[11] = _a23;
          m[12] = _a00 * x + _a10 * y + _a20 * z + am[12];
          m[13] = _a01 * x + _a11 * y + _a21 * z + am[13];
          m[14] = _a02 * x + _a12 * y + _a22 * z + am[14];
          m[15] = _a03 * x + _a13 * y + _a23 * z + am[15];
        }
        return out;
      };
      Mat4.translate = function translate(out, a, v) {
        var m = out.m, am = a.m;
        if (a === out) {
          m[12] += v.x;
          m[13] += v.y;
          m[14] += v.z;
        } else {
          m[0] = am[0];
          m[1] = am[1];
          m[2] = am[2];
          m[3] = am[3];
          m[4] = am[4];
          m[5] = am[5];
          m[6] = am[6];
          m[7] = am[7];
          m[8] = am[8];
          m[9] = am[9];
          m[10] = am[10];
          m[11] = am[11];
          m[12] += v.x;
          m[13] += v.y;
          m[14] += v.z;
          m[15] = am[15];
        }
        return out;
      };
      Mat4.scale = function scale(out, a, v) {
        var x = v.x, y = v.y, z = v.z;
        var m = out.m, am = a.m;
        m[0] = am[0] * x;
        m[1] = am[1] * x;
        m[2] = am[2] * x;
        m[3] = am[3] * x;
        m[4] = am[4] * y;
        m[5] = am[5] * y;
        m[6] = am[6] * y;
        m[7] = am[7] * y;
        m[8] = am[8] * z;
        m[9] = am[9] * z;
        m[10] = am[10] * z;
        m[11] = am[11] * z;
        m[12] = am[12];
        m[13] = am[13];
        m[14] = am[14];
        m[15] = am[15];
        return out;
      };
      Mat4.rotate = function rotate(out, a, rad, axis) {
        var x = axis.x, y = axis.y, z = axis.z;
        var len = Math.sqrt(x * x + y * y + z * z);
        if (Math.abs(len) < _utils.EPSILON) return null;
        len = 1 / len;
        x *= len;
        y *= len;
        z *= len;
        var s = Math.sin(rad);
        var c = Math.cos(rad);
        var t = 1 - c;
        var am = a.m;
        _a00 = am[0];
        _a01 = am[1];
        _a02 = am[2];
        _a03 = am[3];
        _a10 = am[4];
        _a11 = am[5];
        _a12 = am[6];
        _a13 = am[7];
        _a20 = am[8];
        _a21 = am[9];
        _a22 = am[10];
        _a23 = am[11];
        var b00 = x * x * t + c, b01 = y * x * t + z * s, b02 = z * x * t - y * s;
        var b10 = x * y * t - z * s, b11 = y * y * t + c, b12 = z * y * t + x * s;
        var b20 = x * z * t + y * s, b21 = y * z * t - x * s, b22 = z * z * t + c;
        var m = out.m;
        m[0] = _a00 * b00 + _a10 * b01 + _a20 * b02;
        m[1] = _a01 * b00 + _a11 * b01 + _a21 * b02;
        m[2] = _a02 * b00 + _a12 * b01 + _a22 * b02;
        m[3] = _a03 * b00 + _a13 * b01 + _a23 * b02;
        m[4] = _a00 * b10 + _a10 * b11 + _a20 * b12;
        m[5] = _a01 * b10 + _a11 * b11 + _a21 * b12;
        m[6] = _a02 * b10 + _a12 * b11 + _a22 * b12;
        m[7] = _a03 * b10 + _a13 * b11 + _a23 * b12;
        m[8] = _a00 * b20 + _a10 * b21 + _a20 * b22;
        m[9] = _a01 * b20 + _a11 * b21 + _a21 * b22;
        m[10] = _a02 * b20 + _a12 * b21 + _a22 * b22;
        m[11] = _a03 * b20 + _a13 * b21 + _a23 * b22;
        if (a !== out) {
          m[12] = am[12];
          m[13] = am[13];
          m[14] = am[14];
          m[15] = am[15];
        }
        return out;
      };
      Mat4.rotateX = function rotateX(out, a, rad) {
        var m = out.m, am = a.m;
        var s = Math.sin(rad), c = Math.cos(rad), a10 = am[4], a11 = am[5], a12 = am[6], a13 = am[7], a20 = am[8], a21 = am[9], a22 = am[10], a23 = am[11];
        if (a !== out) {
          m[0] = am[0];
          m[1] = am[1];
          m[2] = am[2];
          m[3] = am[3];
          m[12] = am[12];
          m[13] = am[13];
          m[14] = am[14];
          m[15] = am[15];
        }
        m[4] = a10 * c + a20 * s;
        m[5] = a11 * c + a21 * s;
        m[6] = a12 * c + a22 * s;
        m[7] = a13 * c + a23 * s;
        m[8] = a20 * c - a10 * s;
        m[9] = a21 * c - a11 * s;
        m[10] = a22 * c - a12 * s;
        m[11] = a23 * c - a13 * s;
        return out;
      };
      Mat4.rotateY = function rotateY(out, a, rad) {
        var m = out.m, am = a.m;
        var s = Math.sin(rad), c = Math.cos(rad), a00 = am[0], a01 = am[1], a02 = am[2], a03 = am[3], a20 = am[8], a21 = am[9], a22 = am[10], a23 = am[11];
        if (a !== out) {
          m[4] = am[4];
          m[5] = am[5];
          m[6] = am[6];
          m[7] = am[7];
          m[12] = am[12];
          m[13] = am[13];
          m[14] = am[14];
          m[15] = am[15];
        }
        m[0] = a00 * c - a20 * s;
        m[1] = a01 * c - a21 * s;
        m[2] = a02 * c - a22 * s;
        m[3] = a03 * c - a23 * s;
        m[8] = a00 * s + a20 * c;
        m[9] = a01 * s + a21 * c;
        m[10] = a02 * s + a22 * c;
        m[11] = a03 * s + a23 * c;
        return out;
      };
      Mat4.rotateZ = function rotateZ(out, a, rad) {
        var am = a.m;
        var m = out.m;
        var s = Math.sin(rad), c = Math.cos(rad), a00 = a.m[0], a01 = a.m[1], a02 = a.m[2], a03 = a.m[3], a10 = a.m[4], a11 = a.m[5], a12 = a.m[6], a13 = a.m[7];
        if (a !== out) {
          m[8] = am[8];
          m[9] = am[9];
          m[10] = am[10];
          m[11] = am[11];
          m[12] = am[12];
          m[13] = am[13];
          m[14] = am[14];
          m[15] = am[15];
        }
        m[0] = a00 * c + a10 * s;
        m[1] = a01 * c + a11 * s;
        m[2] = a02 * c + a12 * s;
        m[3] = a03 * c + a13 * s;
        m[4] = a10 * c - a00 * s;
        m[5] = a11 * c - a01 * s;
        m[6] = a12 * c - a02 * s;
        m[7] = a13 * c - a03 * s;
        return out;
      };
      Mat4.fromTranslation = function fromTranslation(out, v) {
        var m = out.m;
        m[0] = 1;
        m[1] = 0;
        m[2] = 0;
        m[3] = 0;
        m[4] = 0;
        m[5] = 1;
        m[6] = 0;
        m[7] = 0;
        m[8] = 0;
        m[9] = 0;
        m[10] = 1;
        m[11] = 0;
        m[12] = v.x;
        m[13] = v.y;
        m[14] = v.z;
        m[15] = 1;
        return out;
      };
      Mat4.fromScaling = function fromScaling(out, v) {
        var m = out.m;
        m[0] = v.x;
        m[1] = 0;
        m[2] = 0;
        m[3] = 0;
        m[4] = 0;
        m[5] = v.y;
        m[6] = 0;
        m[7] = 0;
        m[8] = 0;
        m[9] = 0;
        m[10] = v.z;
        m[11] = 0;
        m[12] = 0;
        m[13] = 0;
        m[14] = 0;
        m[15] = 1;
        return out;
      };
      Mat4.fromRotation = function fromRotation(out, rad, axis) {
        var x = axis.x, y = axis.y, z = axis.z;
        var len = Math.sqrt(x * x + y * y + z * z);
        if (Math.abs(len) < _utils.EPSILON) return null;
        len = 1 / len;
        x *= len;
        y *= len;
        z *= len;
        var s = Math.sin(rad);
        var c = Math.cos(rad);
        var t = 1 - c;
        var m = out.m;
        m[0] = x * x * t + c;
        m[1] = y * x * t + z * s;
        m[2] = z * x * t - y * s;
        m[3] = 0;
        m[4] = x * y * t - z * s;
        m[5] = y * y * t + c;
        m[6] = z * y * t + x * s;
        m[7] = 0;
        m[8] = x * z * t + y * s;
        m[9] = y * z * t - x * s;
        m[10] = z * z * t + c;
        m[11] = 0;
        m[12] = 0;
        m[13] = 0;
        m[14] = 0;
        m[15] = 1;
        return out;
      };
      Mat4.fromXRotation = function fromXRotation(out, rad) {
        var s = Math.sin(rad), c = Math.cos(rad);
        var m = out.m;
        m[0] = 1;
        m[1] = 0;
        m[2] = 0;
        m[3] = 0;
        m[4] = 0;
        m[5] = c;
        m[6] = s;
        m[7] = 0;
        m[8] = 0;
        m[9] = -s;
        m[10] = c;
        m[11] = 0;
        m[12] = 0;
        m[13] = 0;
        m[14] = 0;
        m[15] = 1;
        return out;
      };
      Mat4.fromYRotation = function fromYRotation(out, rad) {
        var s = Math.sin(rad), c = Math.cos(rad);
        var m = out.m;
        m[0] = c;
        m[1] = 0;
        m[2] = -s;
        m[3] = 0;
        m[4] = 0;
        m[5] = 1;
        m[6] = 0;
        m[7] = 0;
        m[8] = s;
        m[9] = 0;
        m[10] = c;
        m[11] = 0;
        m[12] = 0;
        m[13] = 0;
        m[14] = 0;
        m[15] = 1;
        return out;
      };
      Mat4.fromZRotation = function fromZRotation(out, rad) {
        var s = Math.sin(rad), c = Math.cos(rad);
        var m = out.m;
        m[0] = c;
        m[1] = s;
        m[2] = 0;
        m[3] = 0;
        m[4] = -s;
        m[5] = c;
        m[6] = 0;
        m[7] = 0;
        m[8] = 0;
        m[9] = 0;
        m[10] = 1;
        m[11] = 0;
        m[12] = 0;
        m[13] = 0;
        m[14] = 0;
        m[15] = 1;
        return out;
      };
      Mat4.fromRT = function fromRT(out, q, v) {
        var x = q.x, y = q.y, z = q.z, w = q.w;
        var x2 = x + x;
        var y2 = y + y;
        var z2 = z + z;
        var xx = x * x2;
        var xy = x * y2;
        var xz = x * z2;
        var yy = y * y2;
        var yz = y * z2;
        var zz = z * z2;
        var wx = w * x2;
        var wy = w * y2;
        var wz = w * z2;
        var m = out.m;
        m[0] = 1 - (yy + zz);
        m[1] = xy + wz;
        m[2] = xz - wy;
        m[3] = 0;
        m[4] = xy - wz;
        m[5] = 1 - (xx + zz);
        m[6] = yz + wx;
        m[7] = 0;
        m[8] = xz + wy;
        m[9] = yz - wx;
        m[10] = 1 - (xx + yy);
        m[11] = 0;
        m[12] = v.x;
        m[13] = v.y;
        m[14] = v.z;
        m[15] = 1;
        return out;
      };
      Mat4.getTranslation = function getTranslation(out, mat) {
        var m = mat.m;
        out.x = m[12];
        out.y = m[13];
        out.z = m[14];
        return out;
      };
      Mat4.getScaling = function getScaling(out, mat) {
        var m = mat.m;
        var m3 = m3_1.m;
        var m00 = m3[0] = m[0];
        var m01 = m3[1] = m[1];
        var m02 = m3[2] = m[2];
        var m04 = m3[3] = m[4];
        var m05 = m3[4] = m[5];
        var m06 = m3[5] = m[6];
        var m08 = m3[6] = m[8];
        var m09 = m3[7] = m[9];
        var m10 = m3[8] = m[10];
        out.x = Math.sqrt(m00 * m00 + m01 * m01 + m02 * m02);
        out.y = Math.sqrt(m04 * m04 + m05 * m05 + m06 * m06);
        out.z = Math.sqrt(m08 * m08 + m09 * m09 + m10 * m10);
        _mat["default"].determinant(m3_1) < 0 && (out.x *= -1);
        return out;
      };
      Mat4.getRotation = function getRotation(out, mat) {
        var m = mat.m;
        var trace = m[0] + m[5] + m[10];
        var S = 0;
        if (trace > 0) {
          S = 2 * Math.sqrt(trace + 1);
          out.w = .25 * S;
          out.x = (m[6] - m[9]) / S;
          out.y = (m[8] - m[2]) / S;
          out.z = (m[1] - m[4]) / S;
        } else if (m[0] > m[5] && m[0] > m[10]) {
          S = 2 * Math.sqrt(1 + m[0] - m[5] - m[10]);
          out.w = (m[6] - m[9]) / S;
          out.x = .25 * S;
          out.y = (m[1] + m[4]) / S;
          out.z = (m[8] + m[2]) / S;
        } else if (m[5] > m[10]) {
          S = 2 * Math.sqrt(1 + m[5] - m[0] - m[10]);
          out.w = (m[8] - m[2]) / S;
          out.x = (m[1] + m[4]) / S;
          out.y = .25 * S;
          out.z = (m[6] + m[9]) / S;
        } else {
          S = 2 * Math.sqrt(1 + m[10] - m[0] - m[5]);
          out.w = (m[1] - m[4]) / S;
          out.x = (m[8] + m[2]) / S;
          out.y = (m[6] + m[9]) / S;
          out.z = .25 * S;
        }
        return out;
      };
      Mat4.toRTS = function toRTS(mat, q, v, s) {
        var m = mat.m;
        var m3 = m3_1.m;
        s.x = _vec["default"].set(v3_1, m[0], m[1], m[2]).mag();
        m3[0] = m[0] / s.x;
        m3[1] = m[1] / s.x;
        m3[2] = m[2] / s.x;
        s.y = _vec["default"].set(v3_1, m[4], m[5], m[6]).mag();
        m3[3] = m[4] / s.y;
        m3[4] = m[5] / s.y;
        m3[5] = m[6] / s.y;
        s.z = _vec["default"].set(v3_1, m[8], m[9], m[10]).mag();
        m3[6] = m[8] / s.z;
        m3[7] = m[9] / s.z;
        m3[8] = m[10] / s.z;
        var det = _mat["default"].determinant(m3_1);
        if (det < 0) {
          s.x *= -1;
          m3[0] *= -1;
          m3[1] *= -1;
          m3[2] *= -1;
        }
        _quat["default"].fromMat3(q, m3_1);
        _vec["default"].set(v, m[12], m[13], m[14]);
      };
      Mat4.fromRTS = function fromRTS(out, q, v, s) {
        var x = q.x, y = q.y, z = q.z, w = q.w;
        var x2 = x + x;
        var y2 = y + y;
        var z2 = z + z;
        var xx = x * x2;
        var xy = x * y2;
        var xz = x * z2;
        var yy = y * y2;
        var yz = y * z2;
        var zz = z * z2;
        var wx = w * x2;
        var wy = w * y2;
        var wz = w * z2;
        var sx = s.x;
        var sy = s.y;
        var sz = s.z;
        var m = out.m;
        m[0] = (1 - (yy + zz)) * sx;
        m[1] = (xy + wz) * sx;
        m[2] = (xz - wy) * sx;
        m[3] = 0;
        m[4] = (xy - wz) * sy;
        m[5] = (1 - (xx + zz)) * sy;
        m[6] = (yz + wx) * sy;
        m[7] = 0;
        m[8] = (xz + wy) * sz;
        m[9] = (yz - wx) * sz;
        m[10] = (1 - (xx + yy)) * sz;
        m[11] = 0;
        m[12] = v.x;
        m[13] = v.y;
        m[14] = v.z;
        m[15] = 1;
        return out;
      };
      Mat4.fromRTSOrigin = function fromRTSOrigin(out, q, v, s, o) {
        var x = q.x, y = q.y, z = q.z, w = q.w;
        var x2 = x + x;
        var y2 = y + y;
        var z2 = z + z;
        var xx = x * x2;
        var xy = x * y2;
        var xz = x * z2;
        var yy = y * y2;
        var yz = y * z2;
        var zz = z * z2;
        var wx = w * x2;
        var wy = w * y2;
        var wz = w * z2;
        var sx = s.x;
        var sy = s.y;
        var sz = s.z;
        var ox = o.x;
        var oy = o.y;
        var oz = o.z;
        var m = out.m;
        m[0] = (1 - (yy + zz)) * sx;
        m[1] = (xy + wz) * sx;
        m[2] = (xz - wy) * sx;
        m[3] = 0;
        m[4] = (xy - wz) * sy;
        m[5] = (1 - (xx + zz)) * sy;
        m[6] = (yz + wx) * sy;
        m[7] = 0;
        m[8] = (xz + wy) * sz;
        m[9] = (yz - wx) * sz;
        m[10] = (1 - (xx + yy)) * sz;
        m[11] = 0;
        m[12] = v.x + ox - (m[0] * ox + m[4] * oy + m[8] * oz);
        m[13] = v.y + oy - (m[1] * ox + m[5] * oy + m[9] * oz);
        m[14] = v.z + oz - (m[2] * ox + m[6] * oy + m[10] * oz);
        m[15] = 1;
        return out;
      };
      Mat4.fromQuat = function fromQuat(out, q) {
        var x = q.x, y = q.y, z = q.z, w = q.w;
        var x2 = x + x;
        var y2 = y + y;
        var z2 = z + z;
        var xx = x * x2;
        var yx = y * x2;
        var yy = y * y2;
        var zx = z * x2;
        var zy = z * y2;
        var zz = z * z2;
        var wx = w * x2;
        var wy = w * y2;
        var wz = w * z2;
        var m = out.m;
        m[0] = 1 - yy - zz;
        m[1] = yx + wz;
        m[2] = zx - wy;
        m[3] = 0;
        m[4] = yx - wz;
        m[5] = 1 - xx - zz;
        m[6] = zy + wx;
        m[7] = 0;
        m[8] = zx + wy;
        m[9] = zy - wx;
        m[10] = 1 - xx - yy;
        m[11] = 0;
        m[12] = 0;
        m[13] = 0;
        m[14] = 0;
        m[15] = 1;
        return out;
      };
      Mat4.frustum = function frustum(out, left, right, bottom, top, near, far) {
        var rl = 1 / (right - left);
        var tb = 1 / (top - bottom);
        var nf = 1 / (near - far);
        var m = out.m;
        m[0] = 2 * near * rl;
        m[1] = 0;
        m[2] = 0;
        m[3] = 0;
        m[4] = 0;
        m[5] = 2 * near * tb;
        m[6] = 0;
        m[7] = 0;
        m[8] = (right + left) * rl;
        m[9] = (top + bottom) * tb;
        m[10] = (far + near) * nf;
        m[11] = -1;
        m[12] = 0;
        m[13] = 0;
        m[14] = far * near * 2 * nf;
        m[15] = 0;
        return out;
      };
      Mat4.perspective = function perspective(out, fovy, aspect, near, far) {
        var f = 1 / Math.tan(fovy / 2);
        var nf = 1 / (near - far);
        var m = out.m;
        m[0] = f / aspect;
        m[1] = 0;
        m[2] = 0;
        m[3] = 0;
        m[4] = 0;
        m[5] = f;
        m[6] = 0;
        m[7] = 0;
        m[8] = 0;
        m[9] = 0;
        m[10] = (far + near) * nf;
        m[11] = -1;
        m[12] = 0;
        m[13] = 0;
        m[14] = 2 * far * near * nf;
        m[15] = 0;
        return out;
      };
      Mat4.ortho = function ortho(out, left, right, bottom, top, near, far) {
        var lr = 1 / (left - right);
        var bt = 1 / (bottom - top);
        var nf = 1 / (near - far);
        var m = out.m;
        m[0] = -2 * lr;
        m[1] = 0;
        m[2] = 0;
        m[3] = 0;
        m[4] = 0;
        m[5] = -2 * bt;
        m[6] = 0;
        m[7] = 0;
        m[8] = 0;
        m[9] = 0;
        m[10] = 2 * nf;
        m[11] = 0;
        m[12] = (left + right) * lr;
        m[13] = (top + bottom) * bt;
        m[14] = (far + near) * nf;
        m[15] = 1;
        return out;
      };
      Mat4.lookAt = function lookAt(out, eye, center, up) {
        var eyex = eye.x;
        var eyey = eye.y;
        var eyez = eye.z;
        var upx = up.x;
        var upy = up.y;
        var upz = up.z;
        var centerx = center.x;
        var centery = center.y;
        var centerz = center.z;
        var z0 = eyex - centerx;
        var z1 = eyey - centery;
        var z2 = eyez - centerz;
        var len = 1 / Math.sqrt(z0 * z0 + z1 * z1 + z2 * z2);
        z0 *= len;
        z1 *= len;
        z2 *= len;
        var x0 = upy * z2 - upz * z1;
        var x1 = upz * z0 - upx * z2;
        var x2 = upx * z1 - upy * z0;
        len = 1 / Math.sqrt(x0 * x0 + x1 * x1 + x2 * x2);
        x0 *= len;
        x1 *= len;
        x2 *= len;
        var y0 = z1 * x2 - z2 * x1;
        var y1 = z2 * x0 - z0 * x2;
        var y2 = z0 * x1 - z1 * x0;
        var m = out.m;
        m[0] = x0;
        m[1] = y0;
        m[2] = z0;
        m[3] = 0;
        m[4] = x1;
        m[5] = y1;
        m[6] = z1;
        m[7] = 0;
        m[8] = x2;
        m[9] = y2;
        m[10] = z2;
        m[11] = 0;
        m[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);
        m[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);
        m[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);
        m[15] = 1;
        return out;
      };
      Mat4.inverseTranspose = function inverseTranspose(out, a) {
        var m = a.m;
        _a00 = m[0];
        _a01 = m[1];
        _a02 = m[2];
        _a03 = m[3];
        _a10 = m[4];
        _a11 = m[5];
        _a12 = m[6];
        _a13 = m[7];
        _a20 = m[8];
        _a21 = m[9];
        _a22 = m[10];
        _a23 = m[11];
        _a30 = m[12];
        _a31 = m[13];
        _a32 = m[14];
        _a33 = m[15];
        var b00 = _a00 * _a11 - _a01 * _a10;
        var b01 = _a00 * _a12 - _a02 * _a10;
        var b02 = _a00 * _a13 - _a03 * _a10;
        var b03 = _a01 * _a12 - _a02 * _a11;
        var b04 = _a01 * _a13 - _a03 * _a11;
        var b05 = _a02 * _a13 - _a03 * _a12;
        var b06 = _a20 * _a31 - _a21 * _a30;
        var b07 = _a20 * _a32 - _a22 * _a30;
        var b08 = _a20 * _a33 - _a23 * _a30;
        var b09 = _a21 * _a32 - _a22 * _a31;
        var b10 = _a21 * _a33 - _a23 * _a31;
        var b11 = _a22 * _a33 - _a23 * _a32;
        var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;
        if (!det) return null;
        det = 1 / det;
        m = out.m;
        m[0] = (_a11 * b11 - _a12 * b10 + _a13 * b09) * det;
        m[1] = (_a12 * b08 - _a10 * b11 - _a13 * b07) * det;
        m[2] = (_a10 * b10 - _a11 * b08 + _a13 * b06) * det;
        m[3] = 0;
        m[4] = (_a02 * b10 - _a01 * b11 - _a03 * b09) * det;
        m[5] = (_a00 * b11 - _a02 * b08 + _a03 * b07) * det;
        m[6] = (_a01 * b08 - _a00 * b10 - _a03 * b06) * det;
        m[7] = 0;
        m[8] = (_a31 * b05 - _a32 * b04 + _a33 * b03) * det;
        m[9] = (_a32 * b02 - _a30 * b05 - _a33 * b01) * det;
        m[10] = (_a30 * b04 - _a31 * b02 + _a33 * b00) * det;
        m[11] = 0;
        m[12] = 0;
        m[13] = 0;
        m[14] = 0;
        m[15] = 1;
        return out;
      };
      Mat4.add = function add(out, a, b) {
        var m = out.m, am = a.m, bm = b.m;
        m[0] = am[0] + bm[0];
        m[1] = am[1] + bm[1];
        m[2] = am[2] + bm[2];
        m[3] = am[3] + bm[3];
        m[4] = am[4] + bm[4];
        m[5] = am[5] + bm[5];
        m[6] = am[6] + bm[6];
        m[7] = am[7] + bm[7];
        m[8] = am[8] + bm[8];
        m[9] = am[9] + bm[9];
        m[10] = am[10] + bm[10];
        m[11] = am[11] + bm[11];
        m[12] = am[12] + bm[12];
        m[13] = am[13] + bm[13];
        m[14] = am[14] + bm[14];
        m[15] = am[15] + bm[15];
        return out;
      };
      Mat4.subtract = function subtract(out, a, b) {
        var m = out.m, am = a.m, bm = b.m;
        m[0] = am[0] - bm[0];
        m[1] = am[1] - bm[1];
        m[2] = am[2] - bm[2];
        m[3] = am[3] - bm[3];
        m[4] = am[4] - bm[4];
        m[5] = am[5] - bm[5];
        m[6] = am[6] - bm[6];
        m[7] = am[7] - bm[7];
        m[8] = am[8] - bm[8];
        m[9] = am[9] - bm[9];
        m[10] = am[10] - bm[10];
        m[11] = am[11] - bm[11];
        m[12] = am[12] - bm[12];
        m[13] = am[13] - bm[13];
        m[14] = am[14] - bm[14];
        m[15] = am[15] - bm[15];
        return out;
      };
      Mat4.multiplyScalar = function multiplyScalar(out, a, b) {
        var m = out.m, am = a.m;
        m[0] = am[0] * b;
        m[1] = am[1] * b;
        m[2] = am[2] * b;
        m[3] = am[3] * b;
        m[4] = am[4] * b;
        m[5] = am[5] * b;
        m[6] = am[6] * b;
        m[7] = am[7] * b;
        m[8] = am[8] * b;
        m[9] = am[9] * b;
        m[10] = am[10] * b;
        m[11] = am[11] * b;
        m[12] = am[12] * b;
        m[13] = am[13] * b;
        m[14] = am[14] * b;
        m[15] = am[15] * b;
        return out;
      };
      Mat4.multiplyScalarAndAdd = function multiplyScalarAndAdd(out, a, b, scale) {
        var m = out.m, am = a.m, bm = b.m;
        m[0] = am[0] + bm[0] * scale;
        m[1] = am[1] + bm[1] * scale;
        m[2] = am[2] + bm[2] * scale;
        m[3] = am[3] + bm[3] * scale;
        m[4] = am[4] + bm[4] * scale;
        m[5] = am[5] + bm[5] * scale;
        m[6] = am[6] + bm[6] * scale;
        m[7] = am[7] + bm[7] * scale;
        m[8] = am[8] + bm[8] * scale;
        m[9] = am[9] + bm[9] * scale;
        m[10] = am[10] + bm[10] * scale;
        m[11] = am[11] + bm[11] * scale;
        m[12] = am[12] + bm[12] * scale;
        m[13] = am[13] + bm[13] * scale;
        m[14] = am[14] + bm[14] * scale;
        m[15] = am[15] + bm[15] * scale;
        return out;
      };
      Mat4.strictEquals = function strictEquals(a, b) {
        var am = a.m, bm = b.m;
        return am[0] === bm[0] && am[1] === bm[1] && am[2] === bm[2] && am[3] === bm[3] && am[4] === bm[4] && am[5] === bm[5] && am[6] === bm[6] && am[7] === bm[7] && am[8] === bm[8] && am[9] === bm[9] && am[10] === bm[10] && am[11] === bm[11] && am[12] === bm[12] && am[13] === bm[13] && am[14] === bm[14] && am[15] === bm[15];
      };
      Mat4.equals = function equals(a, b, epsilon) {
        void 0 === epsilon && (epsilon = _utils.EPSILON);
        var am = a.m, bm = b.m;
        return Math.abs(am[0] - bm[0]) <= epsilon * Math.max(1, Math.abs(am[0]), Math.abs(bm[0])) && Math.abs(am[1] - bm[1]) <= epsilon * Math.max(1, Math.abs(am[1]), Math.abs(bm[1])) && Math.abs(am[2] - bm[2]) <= epsilon * Math.max(1, Math.abs(am[2]), Math.abs(bm[2])) && Math.abs(am[3] - bm[3]) <= epsilon * Math.max(1, Math.abs(am[3]), Math.abs(bm[3])) && Math.abs(am[4] - bm[4]) <= epsilon * Math.max(1, Math.abs(am[4]), Math.abs(bm[4])) && Math.abs(am[5] - bm[5]) <= epsilon * Math.max(1, Math.abs(am[5]), Math.abs(bm[5])) && Math.abs(am[6] - bm[6]) <= epsilon * Math.max(1, Math.abs(am[6]), Math.abs(bm[6])) && Math.abs(am[7] - bm[7]) <= epsilon * Math.max(1, Math.abs(am[7]), Math.abs(bm[7])) && Math.abs(am[8] - bm[8]) <= epsilon * Math.max(1, Math.abs(am[8]), Math.abs(bm[8])) && Math.abs(am[9] - bm[9]) <= epsilon * Math.max(1, Math.abs(am[9]), Math.abs(bm[9])) && Math.abs(am[10] - bm[10]) <= epsilon * Math.max(1, Math.abs(am[10]), Math.abs(bm[10])) && Math.abs(am[11] - bm[11]) <= epsilon * Math.max(1, Math.abs(am[11]), Math.abs(bm[11])) && Math.abs(am[12] - bm[12]) <= epsilon * Math.max(1, Math.abs(am[12]), Math.abs(bm[12])) && Math.abs(am[13] - bm[13]) <= epsilon * Math.max(1, Math.abs(am[13]), Math.abs(bm[13])) && Math.abs(am[14] - bm[14]) <= epsilon * Math.max(1, Math.abs(am[14]), Math.abs(bm[14])) && Math.abs(am[15] - bm[15]) <= epsilon * Math.max(1, Math.abs(am[15]), Math.abs(bm[15]));
      };
      Mat4.adjoint = function adjoint(out, a) {
        var am = a.m, outm = out.m;
        var a00 = am[0], a01 = am[1], a02 = am[2], a03 = am[3], a10 = am[4], a11 = am[5], a12 = am[6], a13 = am[7], a20 = am[8], a21 = am[9], a22 = am[10], a23 = am[11], a30 = am[12], a31 = am[13], a32 = am[14], a33 = am[15];
        outm[0] = a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22);
        outm[1] = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));
        outm[2] = a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12);
        outm[3] = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));
        outm[4] = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));
        outm[5] = a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22);
        outm[6] = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));
        outm[7] = a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12);
        outm[8] = a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21);
        outm[9] = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));
        outm[10] = a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11);
        outm[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));
        outm[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));
        outm[13] = a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21);
        outm[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));
        outm[15] = a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11);
        return out;
      };
      Mat4.toArray = function toArray(out, mat, ofs) {
        void 0 === ofs && (ofs = 0);
        var m = mat.m;
        for (var i = 0; i < 16; i++) out[ofs + i] = m[i];
        return out;
      };
      Mat4.fromArray = function fromArray(out, arr, ofs) {
        void 0 === ofs && (ofs = 0);
        var m = out.m;
        for (var i = 0; i < 16; i++) m[i] = arr[ofs + i];
        return out;
      };
      function Mat4(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {
        var _this;
        void 0 === m00 && (m00 = 1);
        void 0 === m01 && (m01 = 0);
        void 0 === m02 && (m02 = 0);
        void 0 === m03 && (m03 = 0);
        void 0 === m10 && (m10 = 0);
        void 0 === m11 && (m11 = 1);
        void 0 === m12 && (m12 = 0);
        void 0 === m13 && (m13 = 0);
        void 0 === m20 && (m20 = 0);
        void 0 === m21 && (m21 = 0);
        void 0 === m22 && (m22 = 1);
        void 0 === m23 && (m23 = 0);
        void 0 === m30 && (m30 = 0);
        void 0 === m31 && (m31 = 0);
        void 0 === m32 && (m32 = 0);
        void 0 === m33 && (m33 = 1);
        _this = _ValueType.call(this) || this;
        _this.m = void 0;
        if (m00 instanceof _utils.FLOAT_ARRAY_TYPE) _this.m = m00; else {
          _this.m = new _utils.FLOAT_ARRAY_TYPE(16);
          var tm = _this.m;
          tm[0] = m00;
          tm[1] = m01;
          tm[2] = m02;
          tm[3] = m03;
          tm[4] = m10;
          tm[5] = m11;
          tm[6] = m12;
          tm[7] = m13;
          tm[8] = m20;
          tm[9] = m21;
          tm[10] = m22;
          tm[11] = m23;
          tm[12] = m30;
          tm[13] = m31;
          tm[14] = m32;
          tm[15] = m33;
        }
        return _this;
      }
      _proto.clone = function clone() {
        var t = this;
        var tm = t.m;
        return new Mat4(tm[0], tm[1], tm[2], tm[3], tm[4], tm[5], tm[6], tm[7], tm[8], tm[9], tm[10], tm[11], tm[12], tm[13], tm[14], tm[15]);
      };
      _proto.set = function set(s) {
        var t = this;
        var tm = t.m, sm = s.m;
        tm[0] = sm[0];
        tm[1] = sm[1];
        tm[2] = sm[2];
        tm[3] = sm[3];
        tm[4] = sm[4];
        tm[5] = sm[5];
        tm[6] = sm[6];
        tm[7] = sm[7];
        tm[8] = sm[8];
        tm[9] = sm[9];
        tm[10] = sm[10];
        tm[11] = sm[11];
        tm[12] = sm[12];
        tm[13] = sm[13];
        tm[14] = sm[14];
        tm[15] = sm[15];
        return this;
      };
      _proto.equals = function equals(other) {
        return Mat4.strictEquals(this, other);
      };
      _proto.fuzzyEquals = function fuzzyEquals(other) {
        return Mat4.equals(this, other);
      };
      _proto.toString = function toString() {
        var tm = this.m;
        return tm ? "[\n" + tm[0] + ", " + tm[1] + ", " + tm[2] + ", " + tm[3] + ",\n" + tm[4] + ", " + tm[5] + ", " + tm[6] + ", " + tm[7] + ",\n" + tm[8] + ", " + tm[9] + ", " + tm[10] + ", " + tm[11] + ",\n" + tm[12] + ", " + tm[13] + ", " + tm[14] + ", " + tm[15] + "\n]" : "[\n1, 0, 0, 0\n0, 1, 0, 0\n0, 0, 1, 0\n0, 0, 0, 1\n]";
      };
      _proto.identity = function identity() {
        return Mat4.identity(this);
      };
      _proto.transpose = function transpose(out) {
        out = out || new Mat4();
        return Mat4.transpose(out, this);
      };
      _proto.invert = function invert(out) {
        out = out || new Mat4();
        return Mat4.invert(out, this);
      };
      _proto.adjoint = function adjoint(out) {
        out = out || new Mat4();
        return Mat4.adjoint(out, this);
      };
      _proto.determinant = function determinant() {
        return Mat4.determinant(this);
      };
      _proto.add = function add(other, out) {
        out = out || new Mat4();
        return Mat4.add(out, this, other);
      };
      _proto.subtract = function subtract(other) {
        return Mat4.subtract(this, this, other);
      };
      _proto.multiply = function multiply(other) {
        return Mat4.multiply(this, this, other);
      };
      _proto.multiplyScalar = function multiplyScalar(number) {
        return Mat4.multiplyScalar(this, this, number);
      };
      _proto.translate = function translate(v, out) {
        out = out || new Mat4();
        return Mat4.translate(out, this, v);
      };
      _proto.scale = function scale(v, out) {
        out = out || new Mat4();
        return Mat4.scale(out, this, v);
      };
      _proto.rotate = function rotate(rad, axis, out) {
        out = out || new Mat4();
        return Mat4.rotate(out, this, rad, axis);
      };
      _proto.getTranslation = function getTranslation(out) {
        out = out || new _vec["default"]();
        return Mat4.getTranslation(out, this);
      };
      _proto.getScale = function getScale(out) {
        out = out || new _vec["default"]();
        return Mat4.getScaling(out, this);
      };
      _proto.getRotation = function getRotation(out) {
        out = out || new _quat["default"]();
        return Mat4.getRotation(out, this);
      };
      _proto.fromRTS = function fromRTS(q, v, s) {
        return Mat4.fromRTS(this, q, v, s);
      };
      _proto.fromQuat = function fromQuat(quat) {
        return Mat4.fromQuat(this, quat);
      };
      return Mat4;
    })(_valueType["default"]);
    exports["default"] = Mat4;
    Mat4.mul = Mat4.multiply;
    Mat4.sub = Mat4.subtract;
    Mat4.IDENTITY = Object.freeze(new Mat4());
    var v3_1 = new _vec["default"]();
    var m3_1 = new _mat["default"]();
    _CCClass["default"].fastDefine("cc.Mat4", Mat4, {
      m00: 1,
      m01: 0,
      m02: 0,
      m03: 0,
      m04: 0,
      m05: 1,
      m06: 0,
      m07: 0,
      m08: 0,
      m09: 0,
      m10: 1,
      m11: 0,
      m12: 0,
      m13: 0,
      m14: 0,
      m15: 1
    });
    var _loop = function _loop(i) {
      Object.defineProperty(Mat4.prototype, "m" + i, {
        get: function get() {
          return this.m[i];
        },
        set: function set(value) {
          this.m[i] = value;
        }
      });
    };
    for (var i = 0; i < 16; i++) _loop(i);
    cc.mat4 = function(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {
      var mat = new Mat4(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33);
      void 0 === m00 && Mat4.identity(mat);
      return mat;
    };
    cc.Mat4 = Mat4;
    module.exports = exports["default"];
  }), {
    "../platform/CCClass": 141,
    "./mat3": 226,
    "./quat": 228,
    "./utils": 232,
    "./value-type": 233,
    "./vec3": 235
  } ],
  228: [ (function(require, module, exports) {
    "use strict";
    exports.__esModule = true;
    exports["default"] = void 0;
    var _valueType = _interopRequireDefault(require("./value-type"));
    var _CCClass = _interopRequireDefault(require("../platform/CCClass"));
    var _vec = _interopRequireDefault(require("./vec3"));
    var _mat = _interopRequireDefault(require("./mat3"));
    var _utils = require("./utils");
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }
    function _inheritsLoose(subClass, superClass) {
      subClass.prototype = Object.create(superClass.prototype);
      subClass.prototype.constructor = subClass;
      subClass.__proto__ = superClass;
    }
    var _x = 0;
    var _y = 0;
    var _z = 0;
    var _w = 0;
    var Quat = (function(_ValueType) {
      _inheritsLoose(Quat, _ValueType);
      var _proto = Quat.prototype;
      _proto.mul = function mul(other, out) {
        return Quat.multiply(out || new Quat(), this, other);
      };
      Quat.clone = function clone(a) {
        return new Quat(a.x, a.y, a.z, a.w);
      };
      Quat.copy = function copy(out, a) {
        out.x = a.x;
        out.y = a.y;
        out.z = a.z;
        out.w = a.w;
        return out;
      };
      Quat.set = function set(out, x, y, z, w) {
        out.x = x;
        out.y = y;
        out.z = z;
        out.w = w;
        return out;
      };
      Quat.identity = function identity(out) {
        out.x = 0;
        out.y = 0;
        out.z = 0;
        out.w = 1;
        return out;
      };
      Quat.rotationTo = function rotationTo(out, a, b) {
        var dot = _vec["default"].dot(a, b);
        if (dot < -.999999) {
          _vec["default"].cross(v3_1, _vec["default"].RIGHT, a);
          v3_1.mag() < 1e-6 && _vec["default"].cross(v3_1, _vec["default"].UP, a);
          _vec["default"].normalize(v3_1, v3_1);
          Quat.fromAxisAngle(out, v3_1, Math.PI);
          return out;
        }
        if (dot > .999999) {
          out.x = 0;
          out.y = 0;
          out.z = 0;
          out.w = 1;
          return out;
        }
        _vec["default"].cross(v3_1, a, b);
        out.x = v3_1.x;
        out.y = v3_1.y;
        out.z = v3_1.z;
        out.w = 1 + dot;
        return Quat.normalize(out, out);
      };
      Quat.getAxisAngle = function getAxisAngle(outAxis, q) {
        var rad = 2 * Math.acos(q.w);
        var s = Math.sin(rad / 2);
        if (0 !== s) {
          outAxis.x = q.x / s;
          outAxis.y = q.y / s;
          outAxis.z = q.z / s;
        } else {
          outAxis.x = 1;
          outAxis.y = 0;
          outAxis.z = 0;
        }
        return rad;
      };
      Quat.multiply = function multiply(out, a, b) {
        _x = a.x * b.w + a.w * b.x + a.y * b.z - a.z * b.y;
        _y = a.y * b.w + a.w * b.y + a.z * b.x - a.x * b.z;
        _z = a.z * b.w + a.w * b.z + a.x * b.y - a.y * b.x;
        _w = a.w * b.w - a.x * b.x - a.y * b.y - a.z * b.z;
        out.x = _x;
        out.y = _y;
        out.z = _z;
        out.w = _w;
        return out;
      };
      Quat.multiplyScalar = function multiplyScalar(out, a, b) {
        out.x = a.x * b;
        out.y = a.y * b;
        out.z = a.z * b;
        out.w = a.w * b;
        return out;
      };
      Quat.scaleAndAdd = function scaleAndAdd(out, a, b, scale) {
        out.x = a.x + b.x * scale;
        out.y = a.y + b.y * scale;
        out.z = a.z + b.z * scale;
        out.w = a.w + b.w * scale;
        return out;
      };
      Quat.rotateX = function rotateX(out, a, rad) {
        rad *= .5;
        var bx = Math.sin(rad);
        var bw = Math.cos(rad);
        out.x = a.x * bw + a.w * bx;
        out.y = a.y * bw + a.z * bx;
        out.z = a.z * bw - a.y * bx;
        out.w = a.w * bw - a.x * bx;
        return out;
      };
      Quat.rotateY = function rotateY(out, a, rad) {
        rad *= .5;
        var by = Math.sin(rad);
        var bw = Math.cos(rad);
        out.x = a.x * bw - a.z * by;
        out.y = a.y * bw + a.w * by;
        out.z = a.z * bw + a.x * by;
        out.w = a.w * bw - a.y * by;
        return out;
      };
      Quat.rotateZ = function rotateZ(out, a, rad) {
        rad *= .5;
        var bz = Math.sin(rad);
        var bw = Math.cos(rad);
        out.x = a.x * bw + a.y * bz;
        out.y = a.y * bw - a.x * bz;
        out.z = a.z * bw + a.w * bz;
        out.w = a.w * bw - a.z * bz;
        return out;
      };
      Quat.rotateAround = function rotateAround(out, rot, axis, rad) {
        Quat.invert(qt_1, rot);
        _vec["default"].transformQuat(v3_1, axis, qt_1);
        Quat.fromAxisAngle(qt_1, v3_1, rad);
        Quat.multiply(out, rot, qt_1);
        return out;
      };
      Quat.rotateAroundLocal = function rotateAroundLocal(out, rot, axis, rad) {
        Quat.fromAxisAngle(qt_1, axis, rad);
        Quat.multiply(out, rot, qt_1);
        return out;
      };
      Quat.calculateW = function calculateW(out, a) {
        out.x = a.x;
        out.y = a.y;
        out.z = a.z;
        out.w = Math.sqrt(Math.abs(1 - a.x * a.x - a.y * a.y - a.z * a.z));
        return out;
      };
      Quat.dot = function dot(a, b) {
        return a.x * b.x + a.y * b.y + a.z * b.z + a.w * b.w;
      };
      Quat.lerp = function lerp(out, a, b, t) {
        out.x = a.x + t * (b.x - a.x);
        out.y = a.y + t * (b.y - a.y);
        out.z = a.z + t * (b.z - a.z);
        out.w = a.w + t * (b.w - a.w);
        return out;
      };
      Quat.slerp = function slerp(out, a, b, t) {
        var scale0 = 0;
        var scale1 = 0;
        var cosom = a.x * b.x + a.y * b.y + a.z * b.z + a.w * b.w;
        if (cosom < 0) {
          cosom = -cosom;
          b.x = -b.x;
          b.y = -b.y;
          b.z = -b.z;
          b.w = -b.w;
        }
        if (1 - cosom > 1e-6) {
          var omega = Math.acos(cosom);
          var sinom = Math.sin(omega);
          scale0 = Math.sin((1 - t) * omega) / sinom;
          scale1 = Math.sin(t * omega) / sinom;
        } else {
          scale0 = 1 - t;
          scale1 = t;
        }
        out.x = scale0 * a.x + scale1 * b.x;
        out.y = scale0 * a.y + scale1 * b.y;
        out.z = scale0 * a.z + scale1 * b.z;
        out.w = scale0 * a.w + scale1 * b.w;
        return out;
      };
      Quat.sqlerp = function sqlerp(out, a, b, c, d, t) {
        Quat.slerp(qt_1, a, d, t);
        Quat.slerp(qt_2, b, c, t);
        Quat.slerp(out, qt_1, qt_2, 2 * t * (1 - t));
        return out;
      };
      Quat.invert = function invert(out, a) {
        var dot = a.x * a.x + a.y * a.y + a.z * a.z + a.w * a.w;
        var invDot = dot ? 1 / dot : 0;
        out.x = -a.x * invDot;
        out.y = -a.y * invDot;
        out.z = -a.z * invDot;
        out.w = a.w * invDot;
        return out;
      };
      Quat.conjugate = function conjugate(out, a) {
        out.x = -a.x;
        out.y = -a.y;
        out.z = -a.z;
        out.w = a.w;
        return out;
      };
      Quat.len = function len(a) {
        return Math.sqrt(a.x * a.x + a.y * a.y + a.z * a.z + a.w * a.w);
      };
      Quat.lengthSqr = function lengthSqr(a) {
        return a.x * a.x + a.y * a.y + a.z * a.z + a.w * a.w;
      };
      Quat.normalize = function normalize(out, a) {
        var len = a.x * a.x + a.y * a.y + a.z * a.z + a.w * a.w;
        if (len > 0) {
          len = 1 / Math.sqrt(len);
          out.x = a.x * len;
          out.y = a.y * len;
          out.z = a.z * len;
          out.w = a.w * len;
        }
        return out;
      };
      Quat.fromAxes = function fromAxes(out, xAxis, yAxis, zAxis) {
        _mat["default"].set(m3_1, xAxis.x, xAxis.y, xAxis.z, yAxis.x, yAxis.y, yAxis.z, zAxis.x, zAxis.y, zAxis.z);
        return Quat.normalize(out, Quat.fromMat3(out, m3_1));
      };
      Quat.fromViewUp = function fromViewUp(out, view, up) {
        _mat["default"].fromViewUp(m3_1, view, up);
        return Quat.normalize(out, Quat.fromMat3(out, m3_1));
      };
      Quat.fromAxisAngle = function fromAxisAngle(out, axis, rad) {
        rad *= .5;
        var s = Math.sin(rad);
        out.x = s * axis.x;
        out.y = s * axis.y;
        out.z = s * axis.z;
        out.w = Math.cos(rad);
        return out;
      };
      Quat.fromAngleZ = function fromAngleZ(out, z) {
        z *= halfToRad;
        out.x = out.y = 0;
        out.z = Math.sin(z);
        out.w = Math.cos(z);
        return out;
      };
      Quat.fromMat3 = function fromMat3(out, mat) {
        var m = mat.m;
        var m00 = m[0], m10 = m[1], m20 = m[2], m01 = m[3], m11 = m[4], m21 = m[5], m02 = m[6], m12 = m[7], m22 = m[8];
        var trace = m00 + m11 + m22;
        if (trace > 0) {
          var s = .5 / Math.sqrt(trace + 1);
          out.w = .25 / s;
          out.x = (m21 - m12) * s;
          out.y = (m02 - m20) * s;
          out.z = (m10 - m01) * s;
        } else if (m00 > m11 && m00 > m22) {
          var _s = 2 * Math.sqrt(1 + m00 - m11 - m22);
          out.w = (m21 - m12) / _s;
          out.x = .25 * _s;
          out.y = (m01 + m10) / _s;
          out.z = (m02 + m20) / _s;
        } else if (m11 > m22) {
          var _s2 = 2 * Math.sqrt(1 + m11 - m00 - m22);
          out.w = (m02 - m20) / _s2;
          out.x = (m01 + m10) / _s2;
          out.y = .25 * _s2;
          out.z = (m12 + m21) / _s2;
        } else {
          var _s3 = 2 * Math.sqrt(1 + m22 - m00 - m11);
          out.w = (m10 - m01) / _s3;
          out.x = (m02 + m20) / _s3;
          out.y = (m12 + m21) / _s3;
          out.z = .25 * _s3;
        }
        return out;
      };
      Quat.fromEuler = function fromEuler(out, x, y, z) {
        x *= halfToRad;
        y *= halfToRad;
        z *= halfToRad;
        var sx = Math.sin(x);
        var cx = Math.cos(x);
        var sy = Math.sin(y);
        var cy = Math.cos(y);
        var sz = Math.sin(z);
        var cz = Math.cos(z);
        out.x = sx * cy * cz + cx * sy * sz;
        out.y = cx * sy * cz + sx * cy * sz;
        out.z = cx * cy * sz - sx * sy * cz;
        out.w = cx * cy * cz - sx * sy * sz;
        return out;
      };
      Quat.toAxisX = function toAxisX(out, q) {
        var fy = 2 * q.y;
        var fz = 2 * q.z;
        out.x = 1 - fy * q.y - fz * q.z;
        out.y = fy * q.x + fz * q.w;
        out.z = fz * q.x + fy * q.w;
        return out;
      };
      Quat.toAxisY = function toAxisY(out, q) {
        var fx = 2 * q.x;
        var fy = 2 * q.y;
        var fz = 2 * q.z;
        out.x = fy * q.x - fz * q.w;
        out.y = 1 - fx * q.x - fz * q.z;
        out.z = fz * q.y + fx * q.w;
        return out;
      };
      Quat.toAxisZ = function toAxisZ(out, q) {
        var fx = 2 * q.x;
        var fy = 2 * q.y;
        var fz = 2 * q.z;
        out.x = fz * q.x - fy * q.w;
        out.y = fz * q.y - fx * q.w;
        out.z = 1 - fx * q.x - fy * q.y;
        return out;
      };
      Quat.toEuler = function toEuler(out, q, outerZ) {
        var x = q.x, y = q.y, z = q.z, w = q.w;
        var bank = 0;
        var heading = 0;
        var attitude = 0;
        var test = x * y + z * w;
        if (test > .499999) {
          bank = 0;
          heading = (0, _utils.toDegree)(2 * Math.atan2(x, w));
          attitude = 90;
        } else if (test < -.499999) {
          bank = 0;
          heading = -(0, _utils.toDegree)(2 * Math.atan2(x, w));
          attitude = -90;
        } else {
          var sqx = x * x;
          var sqy = y * y;
          var sqz = z * z;
          bank = (0, _utils.toDegree)(Math.atan2(2 * x * w - 2 * y * z, 1 - 2 * sqx - 2 * sqz));
          heading = (0, _utils.toDegree)(Math.atan2(2 * y * w - 2 * x * z, 1 - 2 * sqy - 2 * sqz));
          attitude = (0, _utils.toDegree)(Math.asin(2 * test));
          if (outerZ) {
            bank = -180 * Math.sign(bank + 1e-6) + bank;
            heading = -180 * Math.sign(heading + 1e-6) + heading;
            attitude = 180 * Math.sign(attitude + 1e-6) - attitude;
          }
        }
        out.x = bank;
        out.y = heading;
        out.z = attitude;
        return out;
      };
      Quat.strictEquals = function strictEquals(a, b) {
        return a.x === b.x && a.y === b.y && a.z === b.z && a.w === b.w;
      };
      Quat.equals = function equals(a, b, epsilon) {
        void 0 === epsilon && (epsilon = _utils.EPSILON);
        return Math.abs(a.x - b.x) <= epsilon * Math.max(1, Math.abs(a.x), Math.abs(b.x)) && Math.abs(a.y - b.y) <= epsilon * Math.max(1, Math.abs(a.y), Math.abs(b.y)) && Math.abs(a.z - b.z) <= epsilon * Math.max(1, Math.abs(a.z), Math.abs(b.z)) && Math.abs(a.w - b.w) <= epsilon * Math.max(1, Math.abs(a.w), Math.abs(b.w));
      };
      Quat.toArray = function toArray(out, q, ofs) {
        void 0 === ofs && (ofs = 0);
        out[ofs + 0] = q.x;
        out[ofs + 1] = q.y;
        out[ofs + 2] = q.z;
        out[ofs + 3] = q.w;
        return out;
      };
      Quat.fromArray = function fromArray(out, arr, ofs) {
        void 0 === ofs && (ofs = 0);
        out.x = arr[ofs + 0];
        out.y = arr[ofs + 1];
        out.z = arr[ofs + 2];
        out.w = arr[ofs + 3];
        return out;
      };
      function Quat(x, y, z, w) {
        var _this;
        void 0 === x && (x = 0);
        void 0 === y && (y = 0);
        void 0 === z && (z = 0);
        void 0 === w && (w = 1);
        _this = _ValueType.call(this) || this;
        _this.x = void 0;
        _this.y = void 0;
        _this.z = void 0;
        _this.w = void 0;
        if (x && "object" === typeof x) {
          _this.x = x.x;
          _this.y = x.y;
          _this.z = x.z;
          _this.w = x.w;
        } else {
          _this.x = x;
          _this.y = y;
          _this.z = z;
          _this.w = w;
        }
        return _this;
      }
      _proto.clone = function clone() {
        return new Quat(this.x, this.y, this.z, this.w);
      };
      _proto.set = function set(newValue) {
        this.x = newValue.x;
        this.y = newValue.y;
        this.z = newValue.z;
        this.w = newValue.w;
        return this;
      };
      _proto.equals = function equals(other) {
        return other && this.x === other.x && this.y === other.y && this.z === other.z && this.w === other.w;
      };
      _proto.toEuler = function toEuler(out) {
        return Quat.toEuler(out, this);
      };
      _proto.fromEuler = function fromEuler(euler) {
        return Quat.fromEuler(this, euler.x, euler.y, euler.z);
      };
      _proto.lerp = function lerp(to, ratio, out) {
        out = out || new Quat();
        Quat.slerp(out, this, to, ratio);
        return out;
      };
      _proto.multiply = function multiply(other) {
        return Quat.multiply(this, this, other);
      };
      _proto.rotateAround = function rotateAround(rot, axis, rad, out) {
        out = out || new Quat();
        return Quat.rotateAround(out, rot, axis, rad);
      };
      return Quat;
    })(_valueType["default"]);
    exports["default"] = Quat;
    Quat.mul = Quat.multiply;
    Quat.scale = Quat.multiplyScalar;
    Quat.mag = Quat.len;
    Quat.IDENTITY = Object.freeze(new Quat());
    var qt_1 = new Quat();
    var qt_2 = new Quat();
    var v3_1 = new _vec["default"]();
    var m3_1 = new _mat["default"]();
    var halfToRad = .5 * Math.PI / 180;
    _CCClass["default"].fastDefine("cc.Quat", Quat, {
      x: 0,
      y: 0,
      z: 0,
      w: 1
    });
    cc.quat = function quat(x, y, z, w) {
      return new Quat(x, y, z, w);
    };
    cc.Quat = Quat;
    module.exports = exports["default"];
  }), {
    "../platform/CCClass": 141,
    "./mat3": 226,
    "./utils": 232,
    "./value-type": 233,
    "./vec3": 235
  } ],
  229: [ (function(require, module, exports) {
    "use strict";
    exports.__esModule = true;
    exports["default"] = void 0;
    var _valueType = _interopRequireDefault(require("./value-type"));
    var _CCClass = _interopRequireDefault(require("../platform/CCClass"));
    var _vec = _interopRequireDefault(require("./vec2"));
    var _size = _interopRequireDefault(require("./size"));
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        "value" in descriptor && (descriptor.writable = true);
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      protoProps && _defineProperties(Constructor.prototype, protoProps);
      staticProps && _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    function _inheritsLoose(subClass, superClass) {
      subClass.prototype = Object.create(superClass.prototype);
      subClass.prototype.constructor = subClass;
      subClass.__proto__ = superClass;
    }
    var Rect = (function(_ValueType) {
      _inheritsLoose(Rect, _ValueType);
      Rect.fromMinMax = function fromMinMax(v1, v2) {
        var min_x = Math.min(v1.x, v2.x);
        var min_y = Math.min(v1.y, v2.y);
        var max_x = Math.max(v1.x, v2.x);
        var max_y = Math.max(v1.y, v2.y);
        return new Rect(min_x, min_y, max_x - min_x, max_y - min_y);
      };
      function Rect(x, y, w, h) {
        var _this;
        void 0 === x && (x = 0);
        void 0 === y && (y = 0);
        void 0 === w && (w = 0);
        void 0 === h && (h = 0);
        _this = _ValueType.call(this) || this;
        _this.x = void 0;
        _this.y = void 0;
        _this.width = void 0;
        _this.height = void 0;
        if (x && "object" === typeof x) {
          y = x.y;
          w = x.width;
          h = x.height;
          x = x.x;
        }
        _this.x = x || 0;
        _this.y = y || 0;
        _this.width = w || 0;
        _this.height = h || 0;
        return _this;
      }
      var _proto = Rect.prototype;
      _proto.clone = function clone() {
        return new Rect(this.x, this.y, this.width, this.height);
      };
      _proto.equals = function equals(other) {
        return other && this.x === other.x && this.y === other.y && this.width === other.width && this.height === other.height;
      };
      _proto.lerp = function lerp(to, ratio, out) {
        out = out || new Rect();
        var x = this.x;
        var y = this.y;
        var width = this.width;
        var height = this.height;
        out.x = x + (to.x - x) * ratio;
        out.y = y + (to.y - y) * ratio;
        out.width = width + (to.width - width) * ratio;
        out.height = height + (to.height - height) * ratio;
        return out;
      };
      _proto.set = function set(source) {
        this.x = source.x;
        this.y = source.y;
        this.width = source.width;
        this.height = source.height;
        return this;
      };
      _proto.intersects = function intersects(rect) {
        var maxax = this.x + this.width, maxay = this.y + this.height, maxbx = rect.x + rect.width, maxby = rect.y + rect.height;
        return !(maxax < rect.x || maxbx < this.x || maxay < rect.y || maxby < this.y);
      };
      _proto.intersection = function intersection(out, rectB) {
        var axMin = this.x, ayMin = this.y, axMax = this.x + this.width, ayMax = this.y + this.height;
        var bxMin = rectB.x, byMin = rectB.y, bxMax = rectB.x + rectB.width, byMax = rectB.y + rectB.height;
        out.x = Math.max(axMin, bxMin);
        out.y = Math.max(ayMin, byMin);
        out.width = Math.min(axMax, bxMax) - out.x;
        out.height = Math.min(ayMax, byMax) - out.y;
        return out;
      };
      _proto.contains = function contains(point) {
        return this.x <= point.x && this.x + this.width >= point.x && this.y <= point.y && this.y + this.height >= point.y;
      };
      _proto.containsRect = function containsRect(rect) {
        return this.x <= rect.x && this.x + this.width >= rect.x + rect.width && this.y <= rect.y && this.y + this.height >= rect.y + rect.height;
      };
      _proto.union = function union(out, rectB) {
        var ax = this.x, ay = this.y, aw = this.width, ah = this.height;
        var bx = rectB.x, by = rectB.y, bw = rectB.width, bh = rectB.height;
        out.x = Math.min(ax, bx);
        out.y = Math.min(ay, by);
        out.width = Math.max(ax + aw, bx + bw) - out.x;
        out.height = Math.max(ay + ah, by + bh) - out.y;
        return out;
      };
      _proto.transformMat4 = function transformMat4(out, mat) {
        var ol = this.x;
        var ob = this.y;
        var or = ol + this.width;
        var ot = ob + this.height;
        var matm = mat.m;
        var lbx = matm[0] * ol + matm[4] * ob + matm[12];
        var lby = matm[1] * ol + matm[5] * ob + matm[13];
        var rbx = matm[0] * or + matm[4] * ob + matm[12];
        var rby = matm[1] * or + matm[5] * ob + matm[13];
        var ltx = matm[0] * ol + matm[4] * ot + matm[12];
        var lty = matm[1] * ol + matm[5] * ot + matm[13];
        var rtx = matm[0] * or + matm[4] * ot + matm[12];
        var rty = matm[1] * or + matm[5] * ot + matm[13];
        var minX = Math.min(lbx, rbx, ltx, rtx);
        var maxX = Math.max(lbx, rbx, ltx, rtx);
        var minY = Math.min(lby, rby, lty, rty);
        var maxY = Math.max(lby, rby, lty, rty);
        out.x = minX;
        out.y = minY;
        out.width = maxX - minX;
        out.height = maxY - minY;
        return out;
      };
      _proto.toString = function toString() {
        return "(" + this.x.toFixed(2) + ", " + this.y.toFixed(2) + ", " + this.width.toFixed(2) + ", " + this.height.toFixed(2) + ")";
      };
      _createClass(Rect, [ {
        key: "xMin",
        get: function get() {
          return this.x;
        },
        set: function set(v) {
          this.width += this.x - v;
          this.x = v;
        }
      }, {
        key: "yMin",
        get: function get() {
          return this.y;
        },
        set: function set(v) {
          this.height += this.y - v;
          this.y = v;
        }
      }, {
        key: "xMax",
        get: function get() {
          return this.x + this.width;
        },
        set: function set(value) {
          this.width = value - this.x;
        }
      }, {
        key: "yMax",
        get: function get() {
          return this.y + this.height;
        },
        set: function set(value) {
          this.height = value - this.y;
        }
      }, {
        key: "center",
        get: function get() {
          return new _vec["default"](this.x + .5 * this.width, this.y + .5 * this.height);
        },
        set: function set(value) {
          this.x = value.x - .5 * this.width;
          this.y = value.y - .5 * this.height;
        }
      }, {
        key: "origin",
        get: function get() {
          return new _vec["default"](this.x, this.y);
        },
        set: function set(value) {
          this.x = value.x;
          this.y = value.y;
        }
      }, {
        key: "size",
        get: function get() {
          return new _size["default"](this.width, this.height);
        },
        set: function set(value) {
          this.width = value.width;
          this.height = value.height;
        }
      } ]);
      return Rect;
    })(_valueType["default"]);
    exports["default"] = Rect;
    _CCClass["default"].fastDefine("cc.Rect", Rect, {
      x: 0,
      y: 0,
      width: 0,
      height: 0
    });
    cc.Rect = Rect;
    cc.rect = function rect(x, y, w, h) {
      return new Rect(x, y, w, h);
    };
    module.exports = exports["default"];
  }), {
    "../platform/CCClass": 141,
    "./size": 230,
    "./value-type": 233,
    "./vec2": 234
  } ],
  230: [ (function(require, module, exports) {
    "use strict";
    exports.__esModule = true;
    exports["default"] = void 0;
    var _valueType = _interopRequireDefault(require("./value-type"));
    var _CCClass = _interopRequireDefault(require("../platform/CCClass"));
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        "value" in descriptor && (descriptor.writable = true);
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      protoProps && _defineProperties(Constructor.prototype, protoProps);
      staticProps && _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    function _inheritsLoose(subClass, superClass) {
      subClass.prototype = Object.create(superClass.prototype);
      subClass.prototype.constructor = subClass;
      subClass.__proto__ = superClass;
    }
    var Size = (function(_ValueType) {
      _inheritsLoose(Size, _ValueType);
      _createClass(Size, null, [ {
        key: "ZERO",
        get: function get() {
          return new Size();
        }
      } ]);
      function Size(width, height) {
        var _this;
        void 0 === width && (width = 0);
        void 0 === height && (height = 0);
        _this = _ValueType.call(this) || this;
        _this.width = void 0;
        _this.height = void 0;
        if (width && "object" === typeof width) {
          _this.width = width.width;
          _this.height = width.height;
        } else {
          _this.width = width || 0;
          _this.height = height || 0;
        }
        return _this;
      }
      var _proto = Size.prototype;
      _proto.clone = function clone() {
        return new Size(this.width, this.height);
      };
      _proto.equals = function equals(other) {
        return other && this.width === other.width && this.height === other.height;
      };
      _proto.lerp = function lerp(to, ratio, out) {
        out = out || new Size();
        var width = this.width;
        var height = this.height;
        out.width = width + (to.width - width) * ratio;
        out.height = height + (to.height - height) * ratio;
        return out;
      };
      _proto.set = function set(source) {
        this.width = source.width;
        this.height = source.height;
        return this;
      };
      _proto.toString = function toString() {
        return "(" + this.width.toFixed(2) + ", " + this.height.toFixed(2) + ")";
      };
      return Size;
    })(_valueType["default"]);
    exports["default"] = Size;
    Size.ZERO_R = Size.ZERO;
    _CCClass["default"].fastDefine("cc.Size", Size, {
      width: 0,
      height: 0
    });
    cc.size = function(w, h) {
      return new Size(w, h);
    };
    cc.Size = Size;
    module.exports = exports["default"];
  }), {
    "../platform/CCClass": 141,
    "./value-type": 233
  } ],
  231: [ (function(require, module, exports) {
    "use strict";
    exports.__esModule = true;
    exports["default"] = void 0;
    var _quat = _interopRequireDefault(require("./quat"));
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }
    var tmp_quat = new _quat["default"]();
    var Trs = (function() {
      function Trs() {}
      Trs.toRotation = function toRotation(out, a) {
        out.x = a[3];
        out.y = a[4];
        out.z = a[5];
        out.w = a[6];
        return out;
      };
      Trs.fromRotation = function fromRotation(out, a) {
        out[3] = a.x;
        out[4] = a.y;
        out[5] = a.z;
        out[6] = a.w;
        return out;
      };
      Trs.toEuler = function toEuler(out, a) {
        Trs.toRotation(tmp_quat, a);
        _quat["default"].toEuler(out, tmp_quat);
        return out;
      };
      Trs.fromEuler = function fromEuler(out, a) {
        _quat["default"].fromEuler(tmp_quat, a.x, a.y, a.z);
        Trs.fromRotation(out, tmp_quat);
        return out;
      };
      Trs.fromEulerNumber = function fromEulerNumber(out, x, y, z) {
        _quat["default"].fromEuler(tmp_quat, x, y, z);
        Trs.fromRotation(out, tmp_quat);
        return out;
      };
      Trs.toScale = function toScale(out, a) {
        out.x = a[7];
        out.y = a[8];
        out.z = a[9];
        return out;
      };
      Trs.fromScale = function fromScale(out, a) {
        out[7] = a.x;
        out[8] = a.y;
        out[9] = a.z;
        return out;
      };
      Trs.toPosition = function toPosition(out, a) {
        out.x = a[0];
        out.y = a[1];
        out.z = a[2];
        return out;
      };
      Trs.fromPosition = function fromPosition(out, a) {
        out[0] = a.x;
        out[1] = a.y;
        out[2] = a.z;
        return out;
      };
      Trs.fromAngleZ = function fromAngleZ(out, a) {
        _quat["default"].fromAngleZ(tmp_quat, a);
        Trs.fromRotation(out, tmp_quat);
        return out;
      };
      Trs.toMat4 = function toMat4(out, trs) {
        var x = trs[3], y = trs[4], z = trs[5], w = trs[6];
        var x2 = x + x;
        var y2 = y + y;
        var z2 = z + z;
        var xx = x * x2;
        var xy = x * y2;
        var xz = x * z2;
        var yy = y * y2;
        var yz = y * z2;
        var zz = z * z2;
        var wx = w * x2;
        var wy = w * y2;
        var wz = w * z2;
        var sx = trs[7];
        var sy = trs[8];
        var sz = trs[9];
        var m = out.m;
        m[0] = (1 - (yy + zz)) * sx;
        m[1] = (xy + wz) * sx;
        m[2] = (xz - wy) * sx;
        m[3] = 0;
        m[4] = (xy - wz) * sy;
        m[5] = (1 - (xx + zz)) * sy;
        m[6] = (yz + wx) * sy;
        m[7] = 0;
        m[8] = (xz + wy) * sz;
        m[9] = (yz - wx) * sz;
        m[10] = (1 - (xx + yy)) * sz;
        m[11] = 0;
        m[12] = trs[0];
        m[13] = trs[1];
        m[14] = trs[2];
        m[15] = 1;
        return out;
      };
      return Trs;
    })();
    exports["default"] = Trs;
    cc.Trs = Trs;
    module.exports = exports["default"];
  }), {
    "./quat": 228
  } ],
  232: [ (function(require, module, exports) {
    "use strict";
    exports.__esModule = true;
    exports.equals = equals;
    exports.approx = approx;
    exports.clamp = clamp;
    exports.clamp01 = clamp01;
    exports.lerp = lerp;
    exports.toRadian = toRadian;
    exports.toDegree = toDegree;
    exports.randomRange = randomRange;
    exports.randomRangeInt = randomRangeInt;
    exports.pseudoRandom = pseudoRandom;
    exports.pseudoRandomRange = pseudoRandomRange;
    exports.pseudoRandomRangeInt = pseudoRandomRangeInt;
    exports.nextPow2 = nextPow2;
    exports.repeat = repeat;
    exports.pingPong = pingPong;
    exports.inverseLerp = inverseLerp;
    exports.sign = sign;
    exports.random = exports.FLOAT_BYTES = exports.FLOAT_ARRAY_TYPE = exports.INT_MIN = exports.INT_MAX = exports.INT_BITS = exports.EPSILON = void 0;
    var _d2r = Math.PI / 180;
    var _r2d = 180 / Math.PI;
    var EPSILON = 1e-6;
    exports.EPSILON = EPSILON;
    var INT_BITS = 32;
    exports.INT_BITS = INT_BITS;
    var INT_MAX = 2147483647;
    exports.INT_MAX = INT_MAX;
    var INT_MIN = -1 << INT_BITS - 1;
    exports.INT_MIN = INT_MIN;
    var FLOAT_ARRAY_TYPE = Float64Array;
    exports.FLOAT_ARRAY_TYPE = FLOAT_ARRAY_TYPE;
    var FLOAT_BYTES = 8;
    exports.FLOAT_BYTES = FLOAT_BYTES;
    function equals(a, b) {
      return Math.abs(a - b) <= EPSILON * Math.max(1, Math.abs(a), Math.abs(b));
    }
    function approx(a, b, maxDiff) {
      maxDiff = maxDiff || EPSILON;
      return Math.abs(a - b) <= maxDiff;
    }
    function clamp(val, min, max) {
      return val < min ? min : val > max ? max : val;
    }
    function clamp01(val) {
      return val < 0 ? 0 : val > 1 ? 1 : val;
    }
    function lerp(from, to, ratio) {
      return from + (to - from) * ratio;
    }
    function toRadian(a) {
      return a * _d2r;
    }
    function toDegree(a) {
      return a * _r2d;
    }
    var random = Math.random;
    exports.random = random;
    function randomRange(min, max) {
      return Math.random() * (max - min) + min;
    }
    function randomRangeInt(min, max) {
      return Math.floor(randomRange(min, max));
    }
    function pseudoRandom(seed) {
      seed = (9301 * seed + 49297) % 233280;
      return seed / 233280;
    }
    function pseudoRandomRange(seed, min, max) {
      return pseudoRandom(seed) * (max - min) + min;
    }
    function pseudoRandomRangeInt(seed, min, max) {
      return Math.floor(pseudoRandomRange(seed, min, max));
    }
    function nextPow2(val) {
      --val;
      val |= val >> 1;
      val |= val >> 2;
      val |= val >> 4;
      val |= val >> 8;
      val |= val >> 16;
      ++val;
      return val;
    }
    function repeat(t, length) {
      return t - Math.floor(t / length) * length;
    }
    function pingPong(t, length) {
      t = repeat(t, 2 * length);
      t = length - Math.abs(t - length);
      return t;
    }
    function inverseLerp(from, to, value) {
      return (value - from) / (to - from);
    }
    function sign(v) {
      return (v > 0) - (v < 0);
    }
  }), {} ],
  233: [ (function(require, module, exports) {
    "use strict";
    exports.__esModule = true;
    exports["default"] = void 0;
    var _js = _interopRequireDefault(require("../platform/js"));
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }
    var ValueType = (function() {
      function ValueType() {}
      var _proto = ValueType.prototype;
      _proto.clone = function clone() {
        cc.errorID("0100", _js["default"].getClassName(this) + ".clone");
        return null;
      };
      _proto.equals = function equals(other) {
        cc.errorID("0100", _js["default"].getClassName(this) + ".equals");
        return false;
      };
      _proto.lerp = function lerp(to, ratio) {
        cc.errorID("0100", _js["default"].getClassName(this) + ".lerp");
        return this.clone();
      };
      _proto.set = function set(source) {
        cc.errorID("0100", _js["default"].getClassName(this) + ".set");
      };
      _proto.toString = function toString() {
        return "" + {};
      };
      return ValueType;
    })();
    exports["default"] = ValueType;
    _js["default"].setClassName("cc.ValueType", ValueType);
    cc.ValueType = ValueType;
    module.exports = exports["default"];
  }), {
    "../platform/js": 161
  } ],
  234: [ (function(require, module, exports) {
    "use strict";
    exports.__esModule = true;
    exports["default"] = void 0;
    var _valueType = _interopRequireDefault(require("./value-type"));
    var _CCClass = _interopRequireDefault(require("../platform/CCClass"));
    var _misc = _interopRequireDefault(require("../utils/misc"));
    var _utils = require("./utils");
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        "value" in descriptor && (descriptor.writable = true);
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      protoProps && _defineProperties(Constructor.prototype, protoProps);
      staticProps && _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    function _inheritsLoose(subClass, superClass) {
      subClass.prototype = Object.create(superClass.prototype);
      subClass.prototype.constructor = subClass;
      subClass.__proto__ = superClass;
    }
    var _x = 0;
    var _y = 0;
    var Vec2 = (function(_ValueType) {
      _inheritsLoose(Vec2, _ValueType);
      var _proto = Vec2.prototype;
      _proto.sub = function sub(vector, out) {
        return Vec2.subtract(out || new Vec2(), this, vector);
      };
      _proto.mul = function mul(num, out) {
        return Vec2.multiplyScalar(out || new Vec2(), this, num);
      };
      _proto.div = function div(num, out) {
        return Vec2.multiplyScalar(out || new Vec2(), this, 1 / num);
      };
      _proto.scale = function scale(vector, out) {
        return Vec2.multiply(out || new Vec2(), this, vector);
      };
      _proto.neg = function neg(out) {
        return Vec2.negate(out || new Vec2(), this);
      };
      Vec2.clone = function clone(a) {
        return new Vec2(a.x, a.y);
      };
      Vec2.copy = function copy(out, a) {
        out.x = a.x;
        out.y = a.y;
        return out;
      };
      Vec2.set = function set(out, x, y) {
        out.x = x;
        out.y = y;
        return out;
      };
      Vec2.add = function add(out, a, b) {
        out.x = a.x + b.x;
        out.y = a.y + b.y;
        return out;
      };
      Vec2.subtract = function subtract(out, a, b) {
        out.x = a.x - b.x;
        out.y = a.y - b.y;
        return out;
      };
      Vec2.multiply = function multiply(out, a, b) {
        out.x = a.x * b.x;
        out.y = a.y * b.y;
        return out;
      };
      Vec2.divide = function divide(out, a, b) {
        out.x = a.x / b.x;
        out.y = a.y / b.y;
        return out;
      };
      Vec2.ceil = function ceil(out, a) {
        out.x = Math.ceil(a.x);
        out.y = Math.ceil(a.y);
        return out;
      };
      Vec2.floor = function floor(out, a) {
        out.x = Math.floor(a.x);
        out.y = Math.floor(a.y);
        return out;
      };
      Vec2.min = function min(out, a, b) {
        out.x = Math.min(a.x, b.x);
        out.y = Math.min(a.y, b.y);
        return out;
      };
      Vec2.max = function max(out, a, b) {
        out.x = Math.max(a.x, b.x);
        out.y = Math.max(a.y, b.y);
        return out;
      };
      Vec2.round = function round(out, a) {
        out.x = Math.round(a.x);
        out.y = Math.round(a.y);
        return out;
      };
      Vec2.multiplyScalar = function multiplyScalar(out, a, b) {
        out.x = a.x * b;
        out.y = a.y * b;
        return out;
      };
      Vec2.scaleAndAdd = function scaleAndAdd(out, a, b, scale) {
        out.x = a.x + b.x * scale;
        out.y = a.y + b.y * scale;
        return out;
      };
      Vec2.distance = function distance(a, b) {
        _x = b.x - a.x;
        _y = b.y - a.y;
        return Math.sqrt(_x * _x + _y * _y);
      };
      Vec2.squaredDistance = function squaredDistance(a, b) {
        _x = b.x - a.x;
        _y = b.y - a.y;
        return _x * _x + _y * _y;
      };
      Vec2.len = function len(a) {
        _x = a.x;
        _y = a.y;
        return Math.sqrt(_x * _x + _y * _y);
      };
      Vec2.lengthSqr = function lengthSqr(a) {
        _x = a.x;
        _y = a.y;
        return _x * _x + _y * _y;
      };
      Vec2.negate = function negate(out, a) {
        out.x = -a.x;
        out.y = -a.y;
        return out;
      };
      Vec2.inverse = function inverse(out, a) {
        out.x = 1 / a.x;
        out.y = 1 / a.y;
        return out;
      };
      Vec2.inverseSafe = function inverseSafe(out, a) {
        _x = a.x;
        _y = a.y;
        Math.abs(_x) < _utils.EPSILON ? out.x = 0 : out.x = 1 / _x;
        Math.abs(_y) < _utils.EPSILON ? out.y = 0 : out.y = 1 / _y;
        return out;
      };
      Vec2.normalize = function normalize(out, a) {
        _x = a.x;
        _y = a.y;
        var len = _x * _x + _y * _y;
        if (len > 0) {
          len = 1 / Math.sqrt(len);
          out.x = _x * len;
          out.y = _y * len;
        }
        return out;
      };
      Vec2.dot = function dot(a, b) {
        return a.x * b.x + a.y * b.y;
      };
      Vec2.cross = function cross(out, a, b) {
        out.x = out.y = 0;
        out.z = a.x * b.y - a.y * b.x;
        return out;
      };
      Vec2.lerp = function lerp(out, a, b, t) {
        _x = a.x;
        _y = a.y;
        out.x = _x + t * (b.x - _x);
        out.y = _y + t * (b.y - _y);
        return out;
      };
      Vec2.random = function random(out, scale) {
        scale = scale || 1;
        var r = 2 * (0, _utils.random)() * Math.PI;
        out.x = Math.cos(r) * scale;
        out.y = Math.sin(r) * scale;
        return out;
      };
      Vec2.transformMat3 = function transformMat3(out, a, mat) {
        _x = a.x;
        _y = a.y;
        var m = mat.m;
        out.x = m[0] * _x + m[3] * _y + m[6];
        out.y = m[1] * _x + m[4] * _y + m[7];
        return out;
      };
      Vec2.transformMat4 = function transformMat4(out, a, mat) {
        _x = a.x;
        _y = a.y;
        var m = mat.m;
        out.x = m[0] * _x + m[4] * _y + m[12];
        out.y = m[1] * _x + m[5] * _y + m[13];
        return out;
      };
      Vec2.strictEquals = function strictEquals(a, b) {
        return a.x === b.x && a.y === b.y;
      };
      Vec2.equals = function equals(a, b, epsilon) {
        void 0 === epsilon && (epsilon = _utils.EPSILON);
        return Math.abs(a.x - b.x) <= epsilon * Math.max(1, Math.abs(a.x), Math.abs(b.x)) && Math.abs(a.y - b.y) <= epsilon * Math.max(1, Math.abs(a.y), Math.abs(b.y));
      };
      Vec2.angle = function angle(a, b) {
        Vec2.normalize(v2_1, a);
        Vec2.normalize(v2_2, b);
        var cosine = Vec2.dot(v2_1, v2_2);
        if (cosine > 1) return 0;
        if (cosine < -1) return Math.PI;
        return Math.acos(cosine);
      };
      Vec2.toArray = function toArray(out, v, ofs) {
        void 0 === ofs && (ofs = 0);
        out[ofs + 0] = v.x;
        out[ofs + 1] = v.y;
        return out;
      };
      Vec2.fromArray = function fromArray(out, arr, ofs) {
        void 0 === ofs && (ofs = 0);
        out.x = arr[ofs + 0];
        out.y = arr[ofs + 1];
        return out;
      };
      _createClass(Vec2, null, [ {
        key: "ONE",
        get: function get() {
          return new Vec2(1, 1);
        }
      }, {
        key: "ZERO",
        get: function get() {
          return new Vec2(0, 0);
        }
      }, {
        key: "UP",
        get: function get() {
          return new Vec2(0, 1);
        }
      }, {
        key: "RIGHT",
        get: function get() {
          return new Vec2(1, 0);
        }
      } ]);
      function Vec2(x, y) {
        var _this;
        void 0 === x && (x = 0);
        void 0 === y && (y = 0);
        _this = _ValueType.call(this) || this;
        _this.mag = Vec2.prototype.len;
        _this.magSqr = Vec2.prototype.lengthSqr;
        _this.subSelf = Vec2.prototype.subtract;
        _this.mulSelf = Vec2.prototype.multiplyScalar;
        _this.divSelf = Vec2.prototype.divide;
        _this.scaleSelf = Vec2.prototype.multiply;
        _this.negSelf = Vec2.prototype.negate;
        _this.x = void 0;
        _this.y = void 0;
        _this.z = 0;
        if (x && "object" === typeof x) {
          _this.x = x.x || 0;
          _this.y = x.y || 0;
        } else {
          _this.x = x || 0;
          _this.y = y || 0;
        }
        return _this;
      }
      _proto.clone = function clone() {
        return new Vec2(this.x, this.y);
      };
      _proto.set = function set(newValue) {
        this.x = newValue.x;
        this.y = newValue.y;
        return this;
      };
      _proto.equals = function equals(other) {
        return other && this.x === other.x && this.y === other.y;
      };
      _proto.fuzzyEquals = function fuzzyEquals(other, variance) {
        if (this.x - variance <= other.x && other.x <= this.x + variance && this.y - variance <= other.y && other.y <= this.y + variance) return true;
        return false;
      };
      _proto.toString = function toString() {
        return "(" + this.x.toFixed(2) + ", " + this.y.toFixed(2) + ")";
      };
      _proto.lerp = function lerp(to, ratio, out) {
        out = out || new Vec2();
        var x = this.x;
        var y = this.y;
        out.x = x + (to.x - x) * ratio;
        out.y = y + (to.y - y) * ratio;
        return out;
      };
      _proto.clampf = function clampf(min_inclusive, max_inclusive) {
        this.x = _misc["default"].clampf(this.x, min_inclusive.x, max_inclusive.x);
        this.y = _misc["default"].clampf(this.y, min_inclusive.y, max_inclusive.y);
        return this;
      };
      _proto.add = function add(vector, out) {
        out = out || new Vec2();
        out.x = this.x + vector.x;
        out.y = this.y + vector.y;
        return out;
      };
      _proto.addSelf = function addSelf(vector) {
        this.x += vector.x;
        this.y += vector.y;
        return this;
      };
      _proto.subtract = function subtract(vector) {
        this.x -= vector.x;
        this.y -= vector.y;
        return this;
      };
      _proto.multiplyScalar = function multiplyScalar(num) {
        this.x *= num;
        this.y *= num;
        return this;
      };
      _proto.multiply = function multiply(vector) {
        this.x *= vector.x;
        this.y *= vector.y;
        return this;
      };
      _proto.divide = function divide(num) {
        this.x /= num;
        this.y /= num;
        return this;
      };
      _proto.negate = function negate() {
        this.x = -this.x;
        this.y = -this.y;
        return this;
      };
      _proto.dot = function dot(vector) {
        return this.x * vector.x + this.y * vector.y;
      };
      _proto.cross = function cross(vector) {
        return this.x * vector.y - this.y * vector.x;
      };
      _proto.len = function len() {
        return Math.sqrt(this.x * this.x + this.y * this.y);
      };
      _proto.lengthSqr = function lengthSqr() {
        return this.x * this.x + this.y * this.y;
      };
      _proto.normalizeSelf = function normalizeSelf() {
        var magSqr = this.x * this.x + this.y * this.y;
        if (1 === magSqr) return this;
        if (0 === magSqr) return this;
        var invsqrt = 1 / Math.sqrt(magSqr);
        this.x *= invsqrt;
        this.y *= invsqrt;
        return this;
      };
      _proto.normalize = function normalize(out) {
        out = out || new Vec2();
        out.x = this.x;
        out.y = this.y;
        out.normalizeSelf();
        return out;
      };
      _proto.angle = function angle(vector) {
        var magSqr1 = this.magSqr();
        var magSqr2 = vector.magSqr();
        if (0 === magSqr1 || 0 === magSqr2) {
          console.warn("Can't get angle between zero vector");
          return 0;
        }
        var dot = this.dot(vector);
        var theta = dot / Math.sqrt(magSqr1 * magSqr2);
        theta = _misc["default"].clampf(theta, -1, 1);
        return Math.acos(theta);
      };
      _proto.signAngle = function signAngle(vector) {
        var angle = this.angle(vector);
        return this.cross(vector) < 0 ? -angle : angle;
      };
      _proto.rotate = function rotate(radians, out) {
        out = out || new Vec2();
        out.x = this.x;
        out.y = this.y;
        return out.rotateSelf(radians);
      };
      _proto.rotateSelf = function rotateSelf(radians) {
        var sin = Math.sin(radians);
        var cos = Math.cos(radians);
        var x = this.x;
        this.x = cos * x - sin * this.y;
        this.y = sin * x + cos * this.y;
        return this;
      };
      _proto.project = function project(vector) {
        return vector.multiplyScalar(this.dot(vector) / vector.dot(vector));
      };
      _proto.transformMat4 = function transformMat4(m, out) {
        out = out || new Vec2();
        Vec2.transformMat4(out, this, m);
        return out;
      };
      _proto.maxAxis = function maxAxis() {
        return Math.max(this.x, this.y);
      };
      return Vec2;
    })(_valueType["default"]);
    exports["default"] = Vec2;
    Vec2.sub = Vec2.subtract;
    Vec2.mul = Vec2.multiply;
    Vec2.scale = Vec2.multiplyScalar;
    Vec2.mag = Vec2.len;
    Vec2.squaredMagnitude = Vec2.lengthSqr;
    Vec2.div = Vec2.divide;
    Vec2.ONE_R = Vec2.ONE;
    Vec2.ZERO_R = Vec2.ZERO;
    Vec2.UP_R = Vec2.UP;
    Vec2.RIGHT_R = Vec2.RIGHT;
    var v2_1 = new Vec2();
    var v2_2 = new Vec2();
    _CCClass["default"].fastDefine("cc.Vec2", Vec2, {
      x: 0,
      y: 0
    });
    cc.v2 = function v2(x, y) {
      return new Vec2(x, y);
    };
    cc.Vec2 = Vec2;
    module.exports = exports["default"];
  }), {
    "../platform/CCClass": 141,
    "../utils/misc": 210,
    "./utils": 232,
    "./value-type": 233
  } ],
  235: [ (function(require, module, exports) {
    "use strict";
    exports.__esModule = true;
    exports["default"] = void 0;
    var _valueType = _interopRequireDefault(require("./value-type"));
    var _CCClass = _interopRequireDefault(require("../platform/CCClass"));
    var _misc = _interopRequireDefault(require("../utils/misc"));
    var _vec = _interopRequireDefault(require("./vec2"));
    var _utils = require("./utils");
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        "value" in descriptor && (descriptor.writable = true);
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      protoProps && _defineProperties(Constructor.prototype, protoProps);
      staticProps && _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    function _inheritsLoose(subClass, superClass) {
      subClass.prototype = Object.create(superClass.prototype);
      subClass.prototype.constructor = subClass;
      subClass.__proto__ = superClass;
    }
    var _x = 0;
    var _y = 0;
    var _z = 0;
    var Vec3 = (function(_ValueType) {
      _inheritsLoose(Vec3, _ValueType);
      var _proto = Vec3.prototype;
      _proto.sub = function sub(vector, out) {
        return Vec3.subtract(out || new Vec3(), this, vector);
      };
      _proto.mul = function mul(num, out) {
        return Vec3.multiplyScalar(out || new Vec3(), this, num);
      };
      _proto.div = function div(num, out) {
        return Vec3.multiplyScalar(out || new Vec3(), this, 1 / num);
      };
      _proto.scale = function scale(vector, out) {
        return Vec3.multiply(out || new Vec3(), this, vector);
      };
      _proto.neg = function neg(out) {
        return Vec3.negate(out || new Vec3(), this);
      };
      Vec3.zero = function zero(out) {
        out.x = 0;
        out.y = 0;
        out.z = 0;
        return out;
      };
      Vec3.clone = function clone(a) {
        return new Vec3(a.x, a.y, a.z);
      };
      Vec3.copy = function copy(out, a) {
        out.x = a.x;
        out.y = a.y;
        out.z = a.z;
        return out;
      };
      Vec3.set = function set(out, x, y, z) {
        out.x = x;
        out.y = y;
        out.z = z;
        return out;
      };
      Vec3.add = function add(out, a, b) {
        out.x = a.x + b.x;
        out.y = a.y + b.y;
        out.z = a.z + b.z;
        return out;
      };
      Vec3.subtract = function subtract(out, a, b) {
        out.x = a.x - b.x;
        out.y = a.y - b.y;
        out.z = a.z - b.z;
        return out;
      };
      Vec3.multiply = function multiply(out, a, b) {
        out.x = a.x * b.x;
        out.y = a.y * b.y;
        out.z = a.z * b.z;
        return out;
      };
      Vec3.divide = function divide(out, a, b) {
        out.x = a.x / b.x;
        out.y = a.y / b.y;
        out.z = a.z / b.z;
        return out;
      };
      Vec3.ceil = function ceil(out, a) {
        out.x = Math.ceil(a.x);
        out.y = Math.ceil(a.y);
        out.z = Math.ceil(a.z);
        return out;
      };
      Vec3.floor = function floor(out, a) {
        out.x = Math.floor(a.x);
        out.y = Math.floor(a.y);
        out.z = Math.floor(a.z);
        return out;
      };
      Vec3.min = function min(out, a, b) {
        out.x = Math.min(a.x, b.x);
        out.y = Math.min(a.y, b.y);
        out.z = Math.min(a.z, b.z);
        return out;
      };
      Vec3.max = function max(out, a, b) {
        out.x = Math.max(a.x, b.x);
        out.y = Math.max(a.y, b.y);
        out.z = Math.max(a.z, b.z);
        return out;
      };
      Vec3.round = function round(out, a) {
        out.x = Math.round(a.x);
        out.y = Math.round(a.y);
        out.z = Math.round(a.z);
        return out;
      };
      Vec3.multiplyScalar = function multiplyScalar(out, a, b) {
        out.x = a.x * b;
        out.y = a.y * b;
        out.z = a.z * b;
        return out;
      };
      Vec3.scaleAndAdd = function scaleAndAdd(out, a, b, scale) {
        out.x = a.x + b.x * scale;
        out.y = a.y + b.y * scale;
        out.z = a.z + b.z * scale;
        return out;
      };
      Vec3.distance = function distance(a, b) {
        _x = b.x - a.x;
        _y = b.y - a.y;
        _z = b.z - a.z;
        return Math.sqrt(_x * _x + _y * _y + _z * _z);
      };
      Vec3.squaredDistance = function squaredDistance(a, b) {
        _x = b.x - a.x;
        _y = b.y - a.y;
        _z = b.z - a.z;
        return _x * _x + _y * _y + _z * _z;
      };
      Vec3.len = function len(a) {
        _x = a.x;
        _y = a.y;
        _z = a.z;
        return Math.sqrt(_x * _x + _y * _y + _z * _z);
      };
      Vec3.lengthSqr = function lengthSqr(a) {
        _x = a.x;
        _y = a.y;
        _z = a.z;
        return _x * _x + _y * _y + _z * _z;
      };
      Vec3.negate = function negate(out, a) {
        out.x = -a.x;
        out.y = -a.y;
        out.z = -a.z;
        return out;
      };
      Vec3.inverse = function inverse(out, a) {
        out.x = 1 / a.x;
        out.y = 1 / a.y;
        out.z = 1 / a.z;
        return out;
      };
      Vec3.inverseSafe = function inverseSafe(out, a) {
        _x = a.x;
        _y = a.y;
        _z = a.z;
        Math.abs(_x) < _utils.EPSILON ? out.x = 0 : out.x = 1 / _x;
        Math.abs(_y) < _utils.EPSILON ? out.y = 0 : out.y = 1 / _y;
        Math.abs(_z) < _utils.EPSILON ? out.z = 0 : out.z = 1 / _z;
        return out;
      };
      Vec3.normalize = function normalize(out, a) {
        _x = a.x;
        _y = a.y;
        _z = a.z;
        var len = _x * _x + _y * _y + _z * _z;
        if (len > 0) {
          len = 1 / Math.sqrt(len);
          out.x = _x * len;
          out.y = _y * len;
          out.z = _z * len;
        }
        return out;
      };
      Vec3.dot = function dot(a, b) {
        return a.x * b.x + a.y * b.y + a.z * b.z;
      };
      Vec3.cross = function cross(out, a, b) {
        var ax = a.x, ay = a.y, az = a.z;
        var bx = b.x, by = b.y, bz = b.z;
        out.x = ay * bz - az * by;
        out.y = az * bx - ax * bz;
        out.z = ax * by - ay * bx;
        return out;
      };
      Vec3.lerp = function lerp(out, a, b, t) {
        out.x = a.x + t * (b.x - a.x);
        out.y = a.y + t * (b.y - a.y);
        out.z = a.z + t * (b.z - a.z);
        return out;
      };
      Vec3.random = function random(out, scale) {
        scale = scale || 1;
        var phi = 2 * (0, _utils.random)() * Math.PI;
        var cosTheta = 2 * (0, _utils.random)() - 1;
        var sinTheta = Math.sqrt(1 - cosTheta * cosTheta);
        out.x = sinTheta * Math.cos(phi) * scale;
        out.y = sinTheta * Math.sin(phi) * scale;
        out.z = cosTheta * scale;
        return out;
      };
      Vec3.transformMat4 = function transformMat4(out, a, mat) {
        _x = a.x;
        _y = a.y;
        _z = a.z;
        var m = mat.m;
        var rhw = m[3] * _x + m[7] * _y + m[11] * _z + m[15];
        rhw = rhw ? 1 / rhw : 1;
        out.x = (m[0] * _x + m[4] * _y + m[8] * _z + m[12]) * rhw;
        out.y = (m[1] * _x + m[5] * _y + m[9] * _z + m[13]) * rhw;
        out.z = (m[2] * _x + m[6] * _y + m[10] * _z + m[14]) * rhw;
        return out;
      };
      Vec3.transformMat4Normal = function transformMat4Normal(out, a, mat) {
        _x = a.x;
        _y = a.y;
        _z = a.z;
        var m = mat.m;
        var rhw = m[3] * _x + m[7] * _y + m[11] * _z;
        rhw = rhw ? 1 / rhw : 1;
        out.x = (m[0] * _x + m[4] * _y + m[8] * _z) * rhw;
        out.y = (m[1] * _x + m[5] * _y + m[9] * _z) * rhw;
        out.z = (m[2] * _x + m[6] * _y + m[10] * _z) * rhw;
        return out;
      };
      Vec3.transformMat3 = function transformMat3(out, a, mat) {
        _x = a.x;
        _y = a.y;
        _z = a.z;
        var m = mat.m;
        out.x = _x * m[0] + _y * m[3] + _z * m[6];
        out.y = _x * m[1] + _y * m[4] + _z * m[7];
        out.z = _x * m[2] + _y * m[5] + _z * m[8];
        return out;
      };
      Vec3.transformAffine = function transformAffine(out, v, mat) {
        _x = v.x;
        _y = v.y;
        _z = v.z;
        var m = mat.m;
        out.x = m[0] * _x + m[1] * _y + m[2] * _z + m[3];
        out.y = m[4] * _x + m[5] * _y + m[6] * _z + m[7];
        out.x = m[8] * _x + m[9] * _y + m[10] * _z + m[11];
        return out;
      };
      Vec3.transformQuat = function transformQuat(out, a, q) {
        var ix = q.w * a.x + q.y * a.z - q.z * a.y;
        var iy = q.w * a.y + q.z * a.x - q.x * a.z;
        var iz = q.w * a.z + q.x * a.y - q.y * a.x;
        var iw = -q.x * a.x - q.y * a.y - q.z * a.z;
        out.x = ix * q.w + iw * -q.x + iy * -q.z - iz * -q.y;
        out.y = iy * q.w + iw * -q.y + iz * -q.x - ix * -q.z;
        out.z = iz * q.w + iw * -q.z + ix * -q.y - iy * -q.x;
        return out;
      };
      Vec3.transformRTS = function transformRTS(out, a, r, t, s) {
        var x = a.x * s.x;
        var y = a.y * s.y;
        var z = a.z * s.z;
        var ix = r.w * x + r.y * z - r.z * y;
        var iy = r.w * y + r.z * x - r.x * z;
        var iz = r.w * z + r.x * y - r.y * x;
        var iw = -r.x * x - r.y * y - r.z * z;
        out.x = ix * r.w + iw * -r.x + iy * -r.z - iz * -r.y + t.x;
        out.y = iy * r.w + iw * -r.y + iz * -r.x - ix * -r.z + t.y;
        out.z = iz * r.w + iw * -r.z + ix * -r.y - iy * -r.x + t.z;
        return out;
      };
      Vec3.transformInverseRTS = function transformInverseRTS(out, a, r, t, s) {
        var x = a.x - t.x;
        var y = a.y - t.y;
        var z = a.z - t.z;
        var ix = r.w * x - r.y * z + r.z * y;
        var iy = r.w * y - r.z * x + r.x * z;
        var iz = r.w * z - r.x * y + r.y * x;
        var iw = r.x * x + r.y * y + r.z * z;
        out.x = (ix * r.w + iw * r.x + iy * r.z - iz * r.y) / s.x;
        out.y = (iy * r.w + iw * r.y + iz * r.x - ix * r.z) / s.y;
        out.z = (iz * r.w + iw * r.z + ix * r.y - iy * r.x) / s.z;
        return out;
      };
      Vec3.rotateX = function rotateX(out, v, o, a) {
        _x = v.x - o.x;
        _y = v.y - o.y;
        _z = v.z - o.z;
        var cos = Math.cos(a);
        var sin = Math.sin(a);
        var rx = _x;
        var ry = _y * cos - _z * sin;
        var rz = _y * sin + _z * cos;
        out.x = rx + o.x;
        out.y = ry + o.y;
        out.z = rz + o.z;
        return out;
      };
      Vec3.rotateY = function rotateY(out, v, o, a) {
        _x = v.x - o.x;
        _y = v.y - o.y;
        _z = v.z - o.z;
        var cos = Math.cos(a);
        var sin = Math.sin(a);
        var rx = _z * sin + _x * cos;
        var ry = _y;
        var rz = _z * cos - _x * sin;
        out.x = rx + o.x;
        out.y = ry + o.y;
        out.z = rz + o.z;
        return out;
      };
      Vec3.rotateZ = function rotateZ(out, v, o, a) {
        _x = v.x - o.x;
        _y = v.y - o.y;
        _z = v.z - o.z;
        var cos = Math.cos(a);
        var sin = Math.sin(a);
        var rx = _x * cos - _y * sin;
        var ry = _x * sin + _y * cos;
        var rz = _z;
        out.x = rx + o.x;
        out.y = ry + o.y;
        out.z = rz + o.z;
        return out;
      };
      Vec3.strictEquals = function strictEquals(a, b) {
        return a.x === b.x && a.y === b.y && a.z === b.z;
      };
      Vec3.equals = function equals(a, b, epsilon) {
        void 0 === epsilon && (epsilon = _utils.EPSILON);
        var a0 = a.x, a1 = a.y, a2 = a.z;
        var b0 = b.x, b1 = b.y, b2 = b.z;
        return Math.abs(a0 - b0) <= epsilon * Math.max(1, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= epsilon * Math.max(1, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= epsilon * Math.max(1, Math.abs(a2), Math.abs(b2));
      };
      Vec3.angle = function angle(a, b) {
        Vec3.normalize(v3_1, a);
        Vec3.normalize(v3_2, b);
        var cosine = Vec3.dot(v3_1, v3_2);
        if (cosine > 1) return 0;
        if (cosine < -1) return Math.PI;
        return Math.acos(cosine);
      };
      Vec3.projectOnPlane = function projectOnPlane(out, a, n) {
        return Vec3.subtract(out, a, Vec3.project(out, a, n));
      };
      Vec3.project = function project(out, a, b) {
        var sqrLen = Vec3.lengthSqr(b);
        return sqrLen < 1e-6 ? Vec3.set(out, 0, 0, 0) : Vec3.multiplyScalar(out, b, Vec3.dot(a, b) / sqrLen);
      };
      Vec3.toArray = function toArray(out, v, ofs) {
        void 0 === ofs && (ofs = 0);
        out[ofs + 0] = v.x;
        out[ofs + 1] = v.y;
        out[ofs + 2] = v.z;
        return out;
      };
      Vec3.fromArray = function fromArray(out, arr, ofs) {
        void 0 === ofs && (ofs = 0);
        out.x = arr[ofs + 0];
        out.y = arr[ofs + 1];
        out.z = arr[ofs + 2];
        return out;
      };
      _createClass(Vec3, null, [ {
        key: "ONE",
        get: function get() {
          return new Vec3(1, 1, 1);
        }
      }, {
        key: "ZERO",
        get: function get() {
          return new Vec3();
        }
      }, {
        key: "UP",
        get: function get() {
          return new Vec3(0, 1, 0);
        }
      }, {
        key: "RIGHT",
        get: function get() {
          return new Vec3(1, 0, 0);
        }
      }, {
        key: "FORWARD",
        get: function get() {
          return new Vec3(0, 0, 1);
        }
      } ]);
      function Vec3(x, y, z) {
        var _this;
        void 0 === x && (x = 0);
        void 0 === y && (y = 0);
        void 0 === z && (z = 0);
        _this = _ValueType.call(this) || this;
        _this.mag = Vec3.prototype.len;
        _this.magSqr = Vec3.prototype.lengthSqr;
        _this.subSelf = Vec3.prototype.subtract;
        _this.mulSelf = Vec3.prototype.multiplyScalar;
        _this.divSelf = Vec3.prototype.divide;
        _this.scaleSelf = Vec3.prototype.multiply;
        _this.negSelf = Vec3.prototype.negate;
        _this.x = void 0;
        _this.y = void 0;
        _this.z = void 0;
        _this.angle = _vec["default"].prototype.angle;
        _this.project = _vec["default"].prototype.project;
        if (x && "object" === typeof x) {
          _this.x = x.x;
          _this.y = x.y;
          _this.z = x.z;
        } else {
          _this.x = x;
          _this.y = y;
          _this.z = z;
        }
        return _this;
      }
      _proto.clone = function clone() {
        return new Vec3(this.x, this.y, this.z);
      };
      _proto.set = function set(newValue) {
        this.x = newValue.x;
        this.y = newValue.y;
        this.z = newValue.z;
        return this;
      };
      _proto.equals = function equals(other) {
        return other && this.x === other.x && this.y === other.y && this.z === other.z;
      };
      _proto.fuzzyEquals = function fuzzyEquals(other, variance) {
        if (this.x - variance <= other.x && other.x <= this.x + variance && this.y - variance <= other.y && other.y <= this.y + variance && this.z - variance <= other.z && other.z <= this.z + variance) return true;
        return false;
      };
      _proto.toString = function toString() {
        return "(" + this.x.toFixed(2) + ", " + this.y.toFixed(2) + ", " + this.z.toFixed(2) + ")";
      };
      _proto.lerp = function lerp(to, ratio, out) {
        out = out || new Vec3();
        Vec3.lerp(out, this, to, ratio);
        return out;
      };
      _proto.clampf = function clampf(min_inclusive, max_inclusive) {
        this.x = _misc["default"].clampf(this.x, min_inclusive.x, max_inclusive.x);
        this.y = _misc["default"].clampf(this.y, min_inclusive.y, max_inclusive.y);
        this.z = _misc["default"].clampf(this.z, min_inclusive.z, max_inclusive.z);
        return this;
      };
      _proto.addSelf = function addSelf(vector) {
        this.x += vector.x;
        this.y += vector.y;
        this.z += vector.z;
        return this;
      };
      _proto.add = function add(vector, out) {
        out = out || new Vec3();
        out.x = this.x + vector.x;
        out.y = this.y + vector.y;
        out.z = this.z + vector.z;
        return out;
      };
      _proto.subtract = function subtract(vector) {
        this.x -= vector.x;
        this.y -= vector.y;
        this.z -= vector.z;
        return this;
      };
      _proto.multiplyScalar = function multiplyScalar(num) {
        this.x *= num;
        this.y *= num;
        this.z *= num;
        return this;
      };
      _proto.multiply = function multiply(vector) {
        this.x *= vector.x;
        this.y *= vector.y;
        this.z *= vector.z;
        return this;
      };
      _proto.divide = function divide(num) {
        this.x /= num;
        this.y /= num;
        this.z /= num;
        return this;
      };
      _proto.negate = function negate() {
        this.x = -this.x;
        this.y = -this.y;
        this.z = -this.z;
        return this;
      };
      _proto.dot = function dot(vector) {
        return this.x * vector.x + this.y * vector.y + this.z * vector.z;
      };
      _proto.cross = function cross(vector, out) {
        out = out || new Vec3();
        Vec3.cross(out, this, vector);
        return out;
      };
      _proto.len = function len() {
        return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
      };
      _proto.lengthSqr = function lengthSqr() {
        return this.x * this.x + this.y * this.y + this.z * this.z;
      };
      _proto.normalizeSelf = function normalizeSelf() {
        Vec3.normalize(this, this);
        return this;
      };
      _proto.normalize = function normalize(out) {
        out = out || new Vec3();
        Vec3.normalize(out, this);
        return out;
      };
      _proto.transformMat4 = function transformMat4(m, out) {
        out = out || new Vec3();
        Vec3.transformMat4(out, this, m);
        return out;
      };
      _proto.maxAxis = function maxAxis() {
        return Math.max(this.x, this.y, this.z);
      };
      _proto.signAngle = function signAngle(vector) {
        cc.warnID(1408, "vec3.signAngle", "v2.1", "cc.v2(selfVector).signAngle(vector)");
        var vec1 = new _vec["default"](this.x, this.y);
        var vec2 = new _vec["default"](vector.x, vector.y);
        return vec1.signAngle(vec2);
      };
      _proto.rotate = function rotate(radians, out) {
        cc.warnID(1408, "vec3.rotate", "v2.1", "cc.v2(selfVector).rotate(radians, out)");
        return _vec["default"].prototype.rotate.call(this, radians, out);
      };
      _proto.rotateSelf = function rotateSelf(radians) {
        cc.warnID(1408, "vec3.rotateSelf", "v2.1", "cc.v2(selfVector).rotateSelf(radians)");
        return _vec["default"].prototype.rotateSelf.call(this, radians);
      };
      return Vec3;
    })(_valueType["default"]);
    exports["default"] = Vec3;
    Vec3.sub = Vec3.subtract;
    Vec3.mul = Vec3.multiply;
    Vec3.scale = Vec3.multiplyScalar;
    Vec3.mag = Vec3.len;
    Vec3.squaredMagnitude = Vec3.lengthSqr;
    Vec3.div = Vec3.divide;
    Vec3.ONE_R = Vec3.ONE;
    Vec3.ZERO_R = Vec3.ZERO;
    Vec3.UP_R = Vec3.UP;
    Vec3.RIGHT_R = Vec3.RIGHT;
    Vec3.FRONT_R = Vec3.FORWARD;
    var v3_1 = new Vec3();
    var v3_2 = new Vec3();
    _CCClass["default"].fastDefine("cc.Vec3", Vec3, {
      x: 0,
      y: 0,
      z: 0
    });
    cc.v3 = function v3(x, y, z) {
      return new Vec3(x, y, z);
    };
    cc.Vec3 = Vec3;
    module.exports = exports["default"];
  }), {
    "../platform/CCClass": 141,
    "../utils/misc": 210,
    "./utils": 232,
    "./value-type": 233,
    "./vec2": 234
  } ],
  236: [ (function(require, module, exports) {
    "use strict";
    exports.__esModule = true;
    exports.v4 = v4;
    exports["default"] = void 0;
    var _CCClass = _interopRequireDefault(require("../platform/CCClass"));
    var _valueType = _interopRequireDefault(require("./value-type"));
    var _utils = require("./utils");
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        "value" in descriptor && (descriptor.writable = true);
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      protoProps && _defineProperties(Constructor.prototype, protoProps);
      staticProps && _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    function _inheritsLoose(subClass, superClass) {
      subClass.prototype = Object.create(superClass.prototype);
      subClass.prototype.constructor = subClass;
      subClass.__proto__ = superClass;
    }
    var _x = 0;
    var _y = 0;
    var _z = 0;
    var _w = 0;
    var Vec4 = (function(_ValueType) {
      _inheritsLoose(Vec4, _ValueType);
      var _proto = Vec4.prototype;
      _proto.sub = function sub(vector, out) {
        return Vec4.subtract(out || new Vec4(), this, vector);
      };
      _proto.mul = function mul(num, out) {
        return Vec4.multiplyScalar(out || new Vec4(), this, num);
      };
      _proto.div = function div(num, out) {
        return Vec4.multiplyScalar(out || new Vec4(), this, 1 / num);
      };
      _proto.scale = function scale(vector, out) {
        return Vec4.multiply(out || new Vec4(), this, vector);
      };
      _proto.neg = function neg(out) {
        return Vec4.negate(out || new Vec4(), this);
      };
      Vec4.clone = function clone(a) {
        return new Vec4(a.x, a.y, a.z, a.w);
      };
      Vec4.copy = function copy(out, a) {
        out.x = a.x;
        out.y = a.y;
        out.z = a.z;
        out.w = a.w;
        return out;
      };
      Vec4.set = function set(out, x, y, z, w) {
        out.x = x;
        out.y = y;
        out.z = z;
        out.w = w;
        return out;
      };
      Vec4.add = function add(out, a, b) {
        out.x = a.x + b.x;
        out.y = a.y + b.y;
        out.z = a.z + b.z;
        out.w = a.w + b.w;
        return out;
      };
      Vec4.subtract = function subtract(out, a, b) {
        out.x = a.x - b.x;
        out.y = a.y - b.y;
        out.z = a.z - b.z;
        out.w = a.w - b.w;
        return out;
      };
      Vec4.multiply = function multiply(out, a, b) {
        out.x = a.x * b.x;
        out.y = a.y * b.y;
        out.z = a.z * b.z;
        out.w = a.w * b.w;
        return out;
      };
      Vec4.divide = function divide(out, a, b) {
        out.x = a.x / b.x;
        out.y = a.y / b.y;
        out.z = a.z / b.z;
        out.w = a.w / b.w;
        return out;
      };
      Vec4.ceil = function ceil(out, a) {
        out.x = Math.ceil(a.x);
        out.y = Math.ceil(a.y);
        out.z = Math.ceil(a.z);
        out.w = Math.ceil(a.w);
        return out;
      };
      Vec4.floor = function floor(out, a) {
        out.x = Math.floor(a.x);
        out.y = Math.floor(a.y);
        out.z = Math.floor(a.z);
        out.w = Math.floor(a.w);
        return out;
      };
      Vec4.min = function min(out, a, b) {
        out.x = Math.min(a.x, b.x);
        out.y = Math.min(a.y, b.y);
        out.z = Math.min(a.z, b.z);
        out.w = Math.min(a.w, b.w);
        return out;
      };
      Vec4.max = function max(out, a, b) {
        out.x = Math.max(a.x, b.x);
        out.y = Math.max(a.y, b.y);
        out.z = Math.max(a.z, b.z);
        out.w = Math.max(a.w, b.w);
        return out;
      };
      Vec4.round = function round(out, a) {
        out.x = Math.round(a.x);
        out.y = Math.round(a.y);
        out.z = Math.round(a.z);
        out.w = Math.round(a.w);
        return out;
      };
      Vec4.multiplyScalar = function multiplyScalar(out, a, b) {
        out.x = a.x * b;
        out.y = a.y * b;
        out.z = a.z * b;
        out.w = a.w * b;
        return out;
      };
      Vec4.scaleAndAdd = function scaleAndAdd(out, a, b, scale) {
        out.x = a.x + b.x * scale;
        out.y = a.y + b.y * scale;
        out.z = a.z + b.z * scale;
        out.w = a.w + b.w * scale;
        return out;
      };
      Vec4.distance = function distance(a, b) {
        var x = b.x - a.x;
        var y = b.y - a.y;
        var z = b.z - a.z;
        var w = b.w - a.w;
        return Math.sqrt(x * x + y * y + z * z + w * w);
      };
      Vec4.squaredDistance = function squaredDistance(a, b) {
        var x = b.x - a.x;
        var y = b.y - a.y;
        var z = b.z - a.z;
        var w = b.w - a.w;
        return x * x + y * y + z * z + w * w;
      };
      Vec4.len = function len(a) {
        _x = a.x;
        _y = a.y;
        _z = a.z;
        _w = a.w;
        return Math.sqrt(_x * _x + _y * _y + _z * _z + _w * _w);
      };
      Vec4.lengthSqr = function lengthSqr(a) {
        _x = a.x;
        _y = a.y;
        _z = a.z;
        _w = a.w;
        return _x * _x + _y * _y + _z * _z + _w * _w;
      };
      Vec4.negate = function negate(out, a) {
        out.x = -a.x;
        out.y = -a.y;
        out.z = -a.z;
        out.w = -a.w;
        return out;
      };
      Vec4.inverse = function inverse(out, a) {
        out.x = 1 / a.x;
        out.y = 1 / a.y;
        out.z = 1 / a.z;
        out.w = 1 / a.w;
        return out;
      };
      Vec4.inverseSafe = function inverseSafe(out, a) {
        _x = a.x;
        _y = a.y;
        _z = a.z;
        _w = a.w;
        Math.abs(_x) < _utils.EPSILON ? out.x = 0 : out.x = 1 / _x;
        Math.abs(_y) < _utils.EPSILON ? out.y = 0 : out.y = 1 / _y;
        Math.abs(_z) < _utils.EPSILON ? out.z = 0 : out.z = 1 / _z;
        Math.abs(_w) < _utils.EPSILON ? out.w = 0 : out.w = 1 / _w;
        return out;
      };
      Vec4.normalize = function normalize(out, a) {
        _x = a.x;
        _y = a.y;
        _z = a.z;
        _w = a.w;
        var len = _x * _x + _y * _y + _z * _z + _w * _w;
        if (len > 0) {
          len = 1 / Math.sqrt(len);
          out.x = _x * len;
          out.y = _y * len;
          out.z = _z * len;
          out.w = _w * len;
        }
        return out;
      };
      Vec4.dot = function dot(a, b) {
        return a.x * b.x + a.y * b.y + a.z * b.z + a.w * b.w;
      };
      Vec4.lerp = function lerp(out, a, b, t) {
        out.x = a.x + t * (b.x - a.x);
        out.y = a.y + t * (b.y - a.y);
        out.z = a.z + t * (b.z - a.z);
        out.w = a.w + t * (b.w - a.w);
        return out;
      };
      Vec4.random = function random(out, scale) {
        scale = scale || 1;
        var phi = 2 * (0, _utils.random)() * Math.PI;
        var cosTheta = 2 * (0, _utils.random)() - 1;
        var sinTheta = Math.sqrt(1 - cosTheta * cosTheta);
        out.x = sinTheta * Math.cos(phi) * scale;
        out.y = sinTheta * Math.sin(phi) * scale;
        out.z = cosTheta * scale;
        out.w = 0;
        return out;
      };
      Vec4.transformMat4 = function transformMat4(out, a, mat) {
        _x = a.x;
        _y = a.y;
        _z = a.z;
        _w = a.w;
        var m = mat.m;
        out.x = m[0] * _x + m[4] * _y + m[8] * _z + m[12] * _w;
        out.y = m[1] * _x + m[5] * _y + m[9] * _z + m[13] * _w;
        out.z = m[2] * _x + m[6] * _y + m[10] * _z + m[14] * _w;
        out.w = m[3] * _x + m[7] * _y + m[11] * _z + m[15] * _w;
        return out;
      };
      Vec4.transformAffine = function transformAffine(out, v, mat) {
        _x = v.x;
        _y = v.y;
        _z = v.z;
        _w = v.w;
        var m = mat.m;
        out.x = m[0] * _x + m[1] * _y + m[2] * _z + m[3] * _w;
        out.y = m[4] * _x + m[5] * _y + m[6] * _z + m[7] * _w;
        out.x = m[8] * _x + m[9] * _y + m[10] * _z + m[11] * _w;
        out.w = v.w;
        return out;
      };
      Vec4.transformQuat = function transformQuat(out, a, q) {
        var x = a.x, y = a.y, z = a.z;
        _x = q.x;
        _y = q.y;
        _z = q.z;
        _w = q.w;
        var ix = _w * x + _y * z - _z * y;
        var iy = _w * y + _z * x - _x * z;
        var iz = _w * z + _x * y - _y * x;
        var iw = -_x * x - _y * y - _z * z;
        out.x = ix * _w + iw * -_x + iy * -_z - iz * -_y;
        out.y = iy * _w + iw * -_y + iz * -_x - ix * -_z;
        out.z = iz * _w + iw * -_z + ix * -_y - iy * -_x;
        out.w = a.w;
        return out;
      };
      Vec4.strictEquals = function strictEquals(a, b) {
        return a.x === b.x && a.y === b.y && a.z === b.z && a.w === b.w;
      };
      Vec4.equals = function equals(a, b, epsilon) {
        void 0 === epsilon && (epsilon = _utils.EPSILON);
        return Math.abs(a.x - b.x) <= epsilon * Math.max(1, Math.abs(a.x), Math.abs(b.x)) && Math.abs(a.y - b.y) <= epsilon * Math.max(1, Math.abs(a.y), Math.abs(b.y)) && Math.abs(a.z - b.z) <= epsilon * Math.max(1, Math.abs(a.z), Math.abs(b.z)) && Math.abs(a.w - b.w) <= epsilon * Math.max(1, Math.abs(a.w), Math.abs(b.w));
      };
      Vec4.toArray = function toArray(out, v, ofs) {
        void 0 === ofs && (ofs = 0);
        out[ofs + 0] = v.x;
        out[ofs + 1] = v.y;
        out[ofs + 2] = v.z;
        out[ofs + 3] = v.w;
        return out;
      };
      Vec4.fromArray = function fromArray(out, arr, ofs) {
        void 0 === ofs && (ofs = 0);
        out.x = arr[ofs + 0];
        out.y = arr[ofs + 1];
        out.z = arr[ofs + 2];
        out.w = arr[ofs + 3];
        return out;
      };
      _createClass(Vec4, null, [ {
        key: "ZERO",
        get: function get() {
          return new Vec4(0, 0, 0, 0);
        }
      }, {
        key: "ONE",
        get: function get() {
          return new Vec4(1, 1, 1, 1);
        }
      }, {
        key: "NEG_ONE",
        get: function get() {
          return new Vec4(-1, -1, -1, -1);
        }
      } ]);
      function Vec4(x, y, z, w) {
        var _this;
        void 0 === x && (x = 0);
        void 0 === y && (y = 0);
        void 0 === z && (z = 0);
        void 0 === w && (w = 0);
        _this = _ValueType.call(this) || this;
        _this.mag = Vec4.prototype.len;
        _this.magSqr = Vec4.prototype.lengthSqr;
        _this.subSelf = Vec4.prototype.subtract;
        _this.mulSelf = Vec4.prototype.multiplyScalar;
        _this.divSelf = Vec4.prototype.divide;
        _this.scaleSelf = Vec4.prototype.multiply;
        _this.negSelf = Vec4.prototype.negate;
        _this.x = void 0;
        _this.y = void 0;
        _this.z = void 0;
        _this.w = void 0;
        if (x && "object" === typeof x) {
          _this.x = x.x;
          _this.y = x.y;
          _this.z = x.z;
          _this.w = x.w;
        } else {
          _this.x = x;
          _this.y = y;
          _this.z = z;
          _this.w = w;
        }
        return _this;
      }
      _proto.clone = function clone() {
        return new Vec4(this.x, this.y, this.z, this.w);
      };
      _proto.set = function set(x, y, z, w) {
        if (x && "object" === typeof x) {
          this.x = x.x;
          this.y = x.y;
          this.z = x.z;
          this.w = x.w;
        } else {
          this.x = x || 0;
          this.y = y || 0;
          this.z = z || 0;
          this.w = w || 0;
        }
        return this;
      };
      _proto.equals = function equals(other, epsilon) {
        void 0 === epsilon && (epsilon = _utils.EPSILON);
        return Math.abs(this.x - other.x) <= epsilon * Math.max(1, Math.abs(this.x), Math.abs(other.x)) && Math.abs(this.y - other.y) <= epsilon * Math.max(1, Math.abs(this.y), Math.abs(other.y)) && Math.abs(this.z - other.z) <= epsilon * Math.max(1, Math.abs(this.z), Math.abs(other.z)) && Math.abs(this.w - other.w) <= epsilon * Math.max(1, Math.abs(this.w), Math.abs(other.w));
      };
      _proto.equals4f = function equals4f(x, y, z, w, epsilon) {
        void 0 === epsilon && (epsilon = _utils.EPSILON);
        return Math.abs(this.x - x) <= epsilon * Math.max(1, Math.abs(this.x), Math.abs(x)) && Math.abs(this.y - y) <= epsilon * Math.max(1, Math.abs(this.y), Math.abs(y)) && Math.abs(this.z - z) <= epsilon * Math.max(1, Math.abs(this.z), Math.abs(z)) && Math.abs(this.w - w) <= epsilon * Math.max(1, Math.abs(this.w), Math.abs(w));
      };
      _proto.strictEquals = function strictEquals(other) {
        return this.x === other.x && this.y === other.y && this.z === other.z && this.w === other.w;
      };
      _proto.strictEquals4f = function strictEquals4f(x, y, z, w) {
        return this.x === x && this.y === y && this.z === z && this.w === w;
      };
      _proto.lerp = function lerp(to, ratio) {
        _x = this.x;
        _y = this.y;
        _z = this.z;
        _w = this.w;
        this.x = _x + ratio * (to.x - _x);
        this.y = _y + ratio * (to.y - _y);
        this.z = _z + ratio * (to.z - _z);
        this.w = _w + ratio * (to.w - _w);
        return this;
      };
      _proto.toString = function toString() {
        return "(" + this.x.toFixed(2) + ", " + this.y.toFixed(2) + ", " + this.z.toFixed(2) + ", " + this.w.toFixed(2) + ")";
      };
      _proto.clampf = function clampf(minInclusive, maxInclusive) {
        this.x = (0, _utils.clamp)(this.x, minInclusive.x, maxInclusive.x);
        this.y = (0, _utils.clamp)(this.y, minInclusive.y, maxInclusive.y);
        this.z = (0, _utils.clamp)(this.z, minInclusive.z, maxInclusive.z);
        this.w = (0, _utils.clamp)(this.w, minInclusive.w, maxInclusive.w);
        return this;
      };
      _proto.addSelf = function addSelf(vector) {
        this.x += vector.x;
        this.y += vector.y;
        this.z += vector.z;
        this.w += vector.w;
        return this;
      };
      _proto.add = function add(vector, out) {
        out = out || new Vec4();
        out.x = this.x + vector.x;
        out.y = this.y + vector.y;
        out.z = this.z + vector.z;
        out.w = this.w + vector.w;
        return out;
      };
      _proto.subtract = function subtract(vector, out) {
        out = out || new Vec4();
        out.x = this.x - vector.x;
        out.y = this.y - vector.y;
        out.z = this.z - vector.z;
        out.w = this.w - vector.w;
        return out;
      };
      _proto.multiplyScalar = function multiplyScalar(num) {
        this.x *= num;
        this.y *= num;
        this.z *= num;
        this.w *= num;
        return this;
      };
      _proto.multiply = function multiply(vector) {
        this.x *= vector.x;
        this.y *= vector.y;
        this.z *= vector.z;
        this.w *= vector.w;
        return this;
      };
      _proto.divide = function divide(num) {
        this.x /= num;
        this.y /= num;
        this.z /= num;
        this.w /= num;
        return this;
      };
      _proto.negate = function negate() {
        this.x = -this.x;
        this.y = -this.y;
        this.z = -this.z;
        this.w = -this.w;
        return this;
      };
      _proto.dot = function dot(vector) {
        return this.x * vector.x + this.y * vector.y + this.z * vector.z + this.w * vector.w;
      };
      _proto.cross = function cross(vector, out) {
        out = out || new Vec4();
        var ax = this.x, ay = this.y, az = this.z;
        var bx = vector.x, by = vector.y, bz = vector.z;
        out.x = ay * bz - az * by;
        out.y = az * bx - ax * bz;
        out.z = ax * by - ay * bx;
        return out;
      };
      _proto.len = function len() {
        var x = this.x, y = this.y, z = this.z, w = this.w;
        return Math.sqrt(x * x + y * y + z * z + w * w);
      };
      _proto.lengthSqr = function lengthSqr() {
        var x = this.x, y = this.y, z = this.z, w = this.w;
        return x * x + y * y + z * z + w * w;
      };
      _proto.normalizeSelf = function normalizeSelf() {
        this.normalize(this);
        return this;
      };
      _proto.normalize = function normalize(out) {
        out = out || new Vec4();
        _x = this.x;
        _y = this.y;
        _z = this.z;
        _w = this.w;
        var len = _x * _x + _y * _y + _z * _z + _w * _w;
        if (len > 0) {
          len = 1 / Math.sqrt(len);
          out.x = _x * len;
          out.y = _y * len;
          out.z = _z * len;
          out.w = _w * len;
        }
        return out;
      };
      _proto.transformMat4 = function transformMat4(matrix, out) {
        out = out || new Vec4();
        _x = this.x;
        _y = this.y;
        _z = this.z;
        _w = this.w;
        var m = matrix.m;
        out.x = m[0] * _x + m[4] * _y + m[8] * _z + m[12] * _w;
        out.y = m[1] * _x + m[5] * _y + m[9] * _z + m[13] * _w;
        out.z = m[2] * _x + m[6] * _y + m[10] * _z + m[14] * _w;
        out.w = m[3] * _x + m[7] * _y + m[11] * _z + m[15] * _w;
        return out;
      };
      _proto.maxAxis = function maxAxis() {
        return Math.max(this.x, this.y, this.z, this.w);
      };
      return Vec4;
    })(_valueType["default"]);
    exports["default"] = Vec4;
    Vec4.sub = Vec4.subtract;
    Vec4.mul = Vec4.multiply;
    Vec4.div = Vec4.divide;
    Vec4.scale = Vec4.multiplyScalar;
    Vec4.mag = Vec4.len;
    Vec4.squaredMagnitude = Vec4.lengthSqr;
    Vec4.ZERO_R = Vec4.ZERO;
    Vec4.ONE_R = Vec4.ONE;
    Vec4.NEG_ONE_R = Vec4.NEG_ONE;
    _CCClass["default"].fastDefine("cc.Vec4", Vec4, {
      x: 0,
      y: 0,
      z: 0,
      w: 0
    });
    function v4(x, y, z, w) {
      return new Vec4(x, y, z, w);
    }
    cc.v4 = v4;
    cc.Vec4 = Vec4;
  }), {
    "../platform/CCClass": 141,
    "./utils": 232,
    "./value-type": 233
  } ],
  237: [ (function(require, module, exports) {
    "use strict";
    var js = cc.js;
    true;
    var deprecateEnum = function deprecateEnum(obj, oldPath, newPath, hasTypePrefixBefore) {
      false;
      hasTypePrefixBefore = false !== hasTypePrefixBefore;
      var enumDef = Function("return " + newPath)();
      var entries = cc.Enum.getList(enumDef);
      var delimiter = hasTypePrefixBefore ? "_" : ".";
      for (var i = 0; i < entries.length; i++) {
        var entry = entries[i].name;
        var oldPropName;
        if (hasTypePrefixBefore) {
          var oldTypeName = oldPath.split(".").slice(-1)[0];
          oldPropName = oldTypeName + "_" + entry;
        } else oldPropName = entry;
        js.get(obj, oldPropName, function(entry) {
          cc.errorID(1400, oldPath + delimiter + entry, newPath + "." + entry);
          return enumDef[entry];
        }.bind(null, entry));
      }
    };
    var markAsRemoved = function markAsRemoved(ownerCtor, removedProps, ownerName) {
      if (!ownerCtor) return;
      ownerName = ownerName || js.getClassName(ownerCtor);
      removedProps.forEach((function(prop) {
        function error() {
          cc.errorID(1406, ownerName, prop);
        }
        js.getset(ownerCtor.prototype, prop, error, error);
      }));
    };
    var markAsDeprecated = function markAsDeprecated(ownerCtor, deprecatedProps, ownerName) {
      if (!ownerCtor) return;
      ownerName = ownerName || js.getClassName(ownerCtor);
      var descriptors = Object.getOwnPropertyDescriptors(ownerCtor.prototype);
      deprecatedProps.forEach((function(prop) {
        var deprecatedProp = prop[0];
        var newProp = prop[1];
        var descriptor = descriptors[deprecatedProp];
        js.getset(ownerCtor.prototype, deprecatedProp, (function() {
          cc.warnID(1400, ownerName + "." + deprecatedProp, ownerName + "." + newProp);
          return descriptor.get.call(this);
        }), (function(v) {
          cc.warnID(1400, ownerName + "." + deprecatedProp, ownerName + "." + newProp);
          descriptor.set.call(this, v);
        }));
      }));
    };
    var markAsRemovedInObject = function markAsRemovedInObject(ownerObj, removedProps, ownerName) {
      if (!ownerObj) return;
      removedProps.forEach((function(prop) {
        function error() {
          cc.errorID(1406, ownerName, prop);
        }
        js.getset(ownerObj, prop, error);
      }));
    };
    var provideClearError = function provideClearError(owner, obj, ownerName) {
      if (!owner) return;
      var className = ownerName || cc.js.getClassName(owner);
      var Info = "Sorry, " + className + ".%s is removed, please use %s instead.";
      var _loop = function _loop() {
        function define(prop, getset) {
          function accessor(newProp) {
            cc.error(Info, prop, newProp);
          }
          Array.isArray(getset) || (getset = getset.split(",").map((function(x) {
            return x.trim();
          })));
          try {
            js.getset(owner, prop, accessor.bind(null, getset[0]), getset[1] && accessor.bind(null, getset[1]));
          } catch (e) {}
        }
        getset = obj[prop];
        if ("*" === prop[0]) {
          etProp = prop.slice(1);
          define("g" + etProp, getset);
          define("s" + etProp, getset);
        } else prop.split(",").map((function(x) {
          return x.trim();
        })).forEach((function(x) {
          define(x, getset);
        }));
      };
      for (var prop in obj) {
        var getset;
        var etProp;
        _loop();
      }
    };
    var markFunctionWarning = function markFunctionWarning(ownerCtor, obj, ownerName) {
      if (!ownerCtor) return;
      ownerName = ownerName || js.getClassName(ownerCtor);
      for (var prop in obj) (function() {
        var propName = prop;
        var originFunc = ownerCtor[propName];
        if (!originFunc) return;
        function warn() {
          cc.warn("Sorry, %s.%s is deprecated. Please use %s instead", ownerName, propName, obj[propName]);
          return originFunc.apply(this, arguments);
        }
        ownerCtor[propName] = warn;
      })();
    };
    js.get(cc, "info", (function() {
      cc.errorID(1400, "cc.info", "cc.log");
      return cc.log;
    }));
    js.get(cc, "spriteFrameCache", (function() {
      cc.errorID(1404);
    }));
    js.get(cc, "vmath", (function() {
      cc.warnID(1400, "cc.vmath", "cc.math");
      return cc.math;
    }));
    js.get(cc.math, "vec2", (function() {
      cc.warnID(1400, "cc.vmath.vec2", "cc.Vec2");
      return cc.Vec2;
    }));
    js.get(cc.math, "vec3", (function() {
      cc.warnID(1400, "cc.vmath.vec3", "cc.Vec3");
      return cc.Vec3;
    }));
    js.get(cc.math, "vec4", (function() {
      cc.warnID(1400, "cc.vmath.vec4", "cc.Vec4");
      return cc.Vec4;
    }));
    js.get(cc.math, "mat4", (function() {
      cc.warnID(1400, "cc.vmath.mat4", "cc.Mat4");
      return cc.Mat4;
    }));
    js.get(cc.math, "mat3", (function() {
      cc.warnID(1400, "cc.vmath.mat3", "cc.Mat3");
      return cc.Mat3;
    }));
    js.get(cc.math, "quat", (function() {
      cc.warnID(1400, "cc.vmath.quat", "cc.Quat");
      return cc.Quat;
    }));
    js.get(cc.SpriteFrame.prototype, "_textureLoaded", (function() {
      cc.errorID(1400, "spriteFrame._textureLoaded", "spriteFrame.textureLoaded()");
      return this.textureLoaded();
    }));
    markAsRemoved(cc.SpriteFrame, [ "addLoadedEventListener" ]);
    markFunctionWarning(cc.Sprite.prototype, {
      setState: "cc.Sprite.setMaterial",
      getState: "cc.Sprite.getMaterial"
    }, "cc.Sprite");
    js.get(cc.SpriteFrame.prototype, "clearTexture", (function() {
      cc.errorID(1406, "cc.SpriteFrame", "clearTexture");
      return function() {};
    }));
    js.get(cc, "textureCache", (function() {
      cc.errorID(1406, "cc", "textureCache");
    }));
    var Texture2D = cc.Texture2D;
    js.get(Texture2D.prototype, "releaseTexture", (function() {
      cc.errorID(1400, "texture.releaseTexture()", "texture.destroy()");
      return this.destroy;
    }));
    js.get(Texture2D.prototype, "getName", (function() {
      cc.errorID(1400, "texture.getName()", "texture._glID");
      return function() {
        return this._glID || null;
      };
    }));
    js.get(Texture2D.prototype, "isLoaded", (function() {
      cc.errorID(1400, "texture.isLoaded function", "texture.loaded property");
      return function() {
        return this.loaded;
      };
    }));
    js.get(Texture2D.prototype, "setAntiAliasTexParameters", (function() {
      cc.errorID(1400, "texture.setAntiAliasTexParameters()", "texture.setFilters(cc.Texture2D.Filter.LINEAR, cc.Texture2D.Filter.LINEAR)");
      return function() {
        this.setFilters(Texture2D.Filter.LINEAR, Texture2D.Filter.LINEAR);
      };
    }));
    js.get(Texture2D.prototype, "setAliasTexParameters", (function() {
      cc.errorID(1400, "texture.setAntiAliasTexParameters()", "texture.setFilters(cc.Texture2D.Filter.NEAREST, cc.Texture2D.Filter.NEAREST)");
      return function() {
        this.setFilters(Texture2D.Filter.NEAREST, Texture2D.Filter.NEAREST);
      };
    }));
    markAsRemovedInObject(cc.macro, [ "ENABLE_GL_STATE_CACHE", "FIX_ARTIFACTS_BY_STRECHING_TEXEL" ], "cc.macro");
    provideClearError(cc.macro, {
      PI: "Math.PI",
      PI2: "Math.PI * 2",
      FLT_MAX: "Number.MAX_VALUE",
      FLT_MIN: "Number.MIN_VALUE",
      UINT_MAX: "Number.MAX_SAFE_INTEGER"
    }, "cc.macro");
    markAsRemovedInObject(cc.game, [ "CONFIG_KEY" ], "cc.game");
    markAsRemovedInObject(cc.sys, [ "dumpRoot", "cleanScript", "BROWSER_TYPE_WECHAT_GAME", "BROWSER_TYPE_WECHAT_GAME_SUB", "BROWSER_TYPE_BAIDU_GAME", "BROWSER_TYPE_BAIDU_GAME_SUB", "BROWSER_TYPE_XIAOMI_GAME", "BROWSER_TYPE_ALIPAY_GAME" ], "cc.sys");
    provideClearError(cc.Director, {
      EVENT_PROJECTION_CHANGED: "",
      EVENT_BEFORE_VISIT: "EVENT_AFTER_UPDATE",
      EVENT_AFTER_VISIT: "EVENT_BEFORE_DRAW"
    }, "cc.Director");
    markFunctionWarning(cc.Director.prototype, {
      convertToGL: "cc.view.convertToLocationInView",
      convertToUI: "",
      getWinSize: "cc.winSize",
      getWinSizeInPixels: "cc.winSize",
      getVisibleSize: "cc.view.getVisibleSize",
      getVisibleOrigin: "cc.view.getVisibleOrigin",
      purgeCachedData: "cc.assetManager.releaseAll",
      setDepthTest: "cc.Camera.main.depth",
      setClearColor: "cc.Camera.main.backgroundColor",
      getRunningScene: "cc.director.getScene",
      getAnimationInterval: "cc.game.getFrameRate",
      setAnimationInterval: "cc.game.setFrameRate",
      isDisplayStats: "cc.debug.isDisplayStats",
      setDisplayStats: "cc.debug.setDisplayStats",
      stopAnimation: "cc.game.pause",
      startAnimation: "cc.game.resume"
    }, "cc.Director");
    markAsRemoved(cc.Director, [ "pushScene", "popScene", "popToRootScene", "popToSceneStackLevel", "setProjection", "getProjection" ], "cc.Director");
    provideClearError(cc.Scheduler, {
      scheduleCallbackForTarget: "schedule",
      scheduleUpdateForTarget: "scheduleUpdate",
      unscheduleCallbackForTarget: "unschedule",
      unscheduleUpdateForTarget: "unscheduleUpdate",
      unscheduleAllCallbacksForTarget: "unscheduleAllForTarget",
      unscheduleAllCallbacks: "unscheduleAll",
      unscheduleAllCallbacksWithMinPriority: "unscheduleAllWithMinPriority"
    }, "cc.Scheduler");
    provideClearError(cc.view, {
      adjustViewPort: "adjustViewportMeta",
      setViewPortInPoints: "setViewportInPoints",
      getViewPortRect: "getViewportRect"
    }, "cc.view");
    markAsRemovedInObject(cc.view, [ "isViewReady", "setTargetDensityDPI", "getTargetDensityDPI", "setFrameZoomFactor", "canSetContentScaleFactor", "setContentTranslateLeftTop", "getContentTranslateLeftTop", "setViewName", "getViewName" ], "cc.view");
    markAsRemoved(cc.PhysicsManager, [ "attachDebugDrawToCamera", "detachDebugDrawFromCamera" ]);
    markAsRemoved(cc.CollisionManager, [ "attachDebugDrawToCamera", "detachDebugDrawFromCamera" ]);
    provideClearError(cc._BaseNode.prototype, {
      tag: "name",
      getTag: "name",
      setTag: "name",
      getChildByTag: "getChildByName",
      removeChildByTag: "getChildByName(name).destroy()"
    });
    markAsRemoved(cc.Node, [ "_cascadeColorEnabled", "cascadeColor", "isCascadeColorEnabled", "setCascadeColorEnabled", "_cascadeOpacityEnabled", "cascadeOpacity", "isCascadeOpacityEnabled", "setCascadeOpacityEnabled", "opacityModifyRGB", "isOpacityModifyRGB", "setOpacityModifyRGB", "ignoreAnchor", "isIgnoreAnchorPointForPosition", "ignoreAnchorPointForPosition", "isRunning", "_sgNode" ]);
    markFunctionWarning(cc.Node.prototype, {
      getNodeToParentTransform: "getLocalMatrix",
      getNodeToParentTransformAR: "getLocalMatrix",
      getNodeToWorldTransform: "getWorldMatrix",
      getNodeToWorldTransformAR: "getWorldMatrix",
      getParentToNodeTransform: "getLocalMatrix",
      getWorldToNodeTransform: "getWorldMatrix",
      convertTouchToNodeSpace: "convertToNodeSpaceAR",
      convertTouchToNodeSpaceAR: "convertToNodeSpaceAR",
      convertToWorldSpace: "convertToWorldSpaceAR",
      convertToNodeSpace: "convertToNodeSpaceAR"
    });
    provideClearError(cc.Node.prototype, {
      getRotationX: "rotationX",
      setRotationX: "rotationX",
      getRotationY: "rotationY",
      setRotationY: "rotationY",
      getPositionX: "x",
      setPositionX: "x",
      getPositionY: "y",
      setPositionY: "y",
      getSkewX: "skewX",
      setSkewX: "skewX",
      getSkewY: "skewY",
      setSkewY: "skewY",
      getScaleX: "scaleX",
      setScaleX: "scaleX",
      getScaleY: "scaleY",
      setScaleY: "scaleY",
      getOpacity: "opacity",
      setOpacity: "opacity",
      getColor: "color",
      setColor: "color",
      getLocalZOrder: "zIndex",
      setLocalZOrder: "zIndex"
    });
    provideClearError(cc.Sprite.prototype, {
      setInsetLeft: "cc.SpriteFrame insetLeft",
      setInsetRight: "cc.SpriteFrame insetRight",
      setInsetTop: "cc.SpriteFrame insetTop",
      setInsetBottom: "cc.SpriteFrame insetBottom"
    });
    cc.Material.getInstantiatedBuiltinMaterial = cc.MaterialVariant.createWithBuiltin;
    cc.Material.getInstantiatedMaterial = cc.MaterialVariant.create;
    markFunctionWarning(cc.Material, {
      getInstantiatedBuiltinMaterial: "cc.MaterialVariant.createWithBuiltin",
      getInstantiatedMaterial: "cc.MaterialVariant.create"
    });
    cc.js.getset(cc.RenderComponent.prototype, "sharedMaterials", (function() {
      cc.warnID(1400, "sharedMaterials", "getMaterials");
      return this.materials;
    }), (function(v) {
      cc.warnID(1400, "sharedMaterials", "setMaterial");
      this.materials = v;
    }));
    markFunctionWarning(cc.Camera.prototype, {
      getNodeToCameraTransform: "getWorldToScreenMatrix2D",
      getCameraToWorldPoint: "getScreenToWorldPoint",
      getWorldToCameraPoint: "getWorldToScreenPoint",
      getCameraToWorldMatrix: "getScreenToWorldMatrix2D",
      getWorldToCameraMatrix: "getWorldToScreenMatrix2D"
    });
    markAsRemoved(cc.Camera, [ "addTarget", "removeTarget", "getTargets" ]);
    var ERR = '"%s" is not defined in the Scene, it is only defined in normal nodes.';
    false, Object.defineProperties(cc.Scene.prototype, {
      active: {
        get: function get() {
          cc.error(ERR, "active");
          return true;
        },
        set: function set() {
          cc.error(ERR, "active");
        }
      },
      activeInHierarchy: {
        get: function get() {
          cc.error(ERR, "activeInHierarchy");
          return true;
        }
      },
      getComponent: {
        get: function get() {
          cc.error(ERR, "getComponent");
          return function() {
            return null;
          };
        }
      },
      addComponent: {
        get: function get() {
          cc.error(ERR, "addComponent");
          return function() {
            return null;
          };
        }
      }
    });
    markAsRemovedInObject(cc.dynamicAtlasManager, [ "minFrameSize" ], "cc.dynamicAtlasManager");
    cc.Light && markAsRemovedInObject(cc.Light.prototype, [ "shadowDepthScale" ], "cc.Light.prototype");
    provideClearError(cc, {
      affineTransformMake: "cc.AffineTransform.create",
      affineTransformMakeIdentity: "cc.AffineTransform.identity",
      affineTransformClone: "cc.AffineTransform.clone",
      affineTransformConcat: "cc.AffineTransform.concat",
      affineTransformConcatIn: "cc.AffineTransform.concat",
      affineTransformInvert: "cc.AffineTransform.invert",
      affineTransformInvertIn: "cc.AffineTransform.invert",
      affineTransformInvertOut: "cc.AffineTransform.invert",
      affineTransformEqualToTransform: "cc.AffineTransform.equal",
      pointApplyAffineTransform: "cc.AffineTransform.transformVec2",
      sizeApplyAffineTransform: "cc.AffineTransform.transformSize",
      rectApplyAffineTransform: "cc.AffineTransform.transformRect",
      obbApplyAffineTransform: "cc.AffineTransform.transformObb",
      pointEqualToPoint: "cc.Vec2 equals",
      sizeEqualToSize: "cc.Size equals",
      rectEqualToRect: "rectA.equals(rectB)",
      rectContainsRect: "rectA.containsRect(rectB)",
      rectContainsPoint: "rect.contains(vec2)",
      rectOverlapsRect: "rectA.intersects(rectB)",
      rectIntersectsRect: "rectA.intersects(rectB)",
      rectIntersection: "rectA.intersection(intersection, rectB)",
      rectUnion: "rectA.union(union, rectB)",
      rectGetMaxX: "rect.xMax",
      rectGetMidX: "rect.center.x",
      rectGetMinX: "rect.xMin",
      rectGetMaxY: "rect.yMax",
      rectGetMidY: "rect.center.y",
      rectGetMinY: "rect.yMin",
      colorEqual: "colorA.equals(colorB)",
      hexToColor: "color.fromHEX(hexColor)",
      colorToHex: "color.toHEX()",
      TextAlignment: "cc.macro.TextAlignment",
      VerticalTextAlignment: "cc.macro.VerticalTextAlignment",
      pNeg: "p.neg()",
      pAdd: "p1.add(p2)",
      pSub: "p1.sub(p2)",
      pMult: "p.mul(factor)",
      pMidpoint: "p1.add(p2).mul(0.5)",
      pDot: "p1.dot(p2)",
      pCross: "p1.cross(p2)",
      pPerp: "p.rotate(-90 * Math.PI / 180)",
      pRPerp: "p.rotate(90 * Math.PI / 180)",
      pProject: "p1.project(p2)",
      pLengthSQ: "p.magSqr()",
      pDistanceSQ: "p1.sub(p2).magSqr()",
      pLength: "p.mag()",
      pDistance: "p1.sub(p2).mag()",
      pNormalize: "p.normalize()",
      pForAngle: "cc.v2(Math.cos(a), Math.sin(a))",
      pToAngle: "Math.atan2(v.y, v.x)",
      pZeroIn: "p.x = p.y = 0",
      pIn: "p1.set(p2)",
      pMultIn: "p.mulSelf(factor)",
      pSubIn: "p1.subSelf(p2)",
      pAddIn: "p1.addSelf(p2)",
      pNormalizeIn: "p.normalizeSelf()",
      pSameAs: "p1.equals(p2)",
      pAngle: "v1.angle(v2)",
      pAngleSigned: "v1.signAngle(v2)",
      pRotateByAngle: "p.rotate(radians)",
      pCompMult: "v1.dot(v2)",
      pFuzzyEqual: "v1.fuzzyEquals(v2, tolerance)",
      pLerp: "p.lerp(endPoint, ratio)",
      pClamp: "p.clampf(min_inclusive, max_inclusive)",
      rand: "Math.random() * 0xffffff",
      randomMinus1To1: "(Math.random() - 0.5) * 2",
      container: "cc.game.container",
      _canvas: "cc.game.canvas",
      _renderType: "cc.game.renderType",
      _getError: "cc.debug.getError",
      _initDebugSetting: "cc.debug._resetDebugSetting",
      DebugMode: "cc.debug.DebugMode"
    }, "cc");
    markAsRemovedInObject(cc, [ "blendFuncDisable", "pFromSize", "pCompOp", "pIntersectPoint", "pSegmentIntersect", "pLineIntersect", "obbApplyMatrix", "getImageFormatByData", "initEngine" ], "cc");
    markFunctionWarning(cc, {
      p: "cc.v2"
    }, "cc");
    provideClearError(cc.Rect, {
      contain: "rectA.contains(rectB)",
      transformMat4: "rect.transformMat4(out, mat4)"
    });
    provideClearError(cc.Color, {
      rgb2hsv: "color.toHSV()",
      hsv2rgb: "color.fromHSV(h, s, v)"
    });
    markFunctionWarning(cc.Color, {
      fromHex: "cc.Color.fromHEX"
    });
    js.get(cc, "lerp", (function() {
      cc.errorID(1400, "cc.lerp", "cc.misc.lerp");
      return cc.misc.lerp;
    }));
    js.get(cc, "random0To1", (function() {
      cc.errorID(1400, "cc.random0To1", "Math.random");
      return Math.random;
    }));
    js.get(cc, "degreesToRadians", (function() {
      cc.errorID(1400, "cc.degreesToRadians", "cc.misc.degreesToRadians");
      return cc.misc.degreesToRadians;
    }));
    js.get(cc, "radiansToDegrees", (function() {
      cc.errorID(1400, "cc.radiansToDegrees", "cc.misc.radiansToDegrees");
      return cc.misc.radiansToDegrees;
    }));
    js.get(cc, "clampf", (function() {
      cc.errorID(1400, "cc.clampf", "cc.misc.clampf");
      return cc.misc.clampf;
    }));
    js.get(cc, "clamp01", (function() {
      cc.errorID(1400, "cc.clamp01", "cc.misc.clamp01");
      return cc.misc.clamp01;
    }));
    js.get(cc, "ImageFormat", (function() {
      cc.errorID(1400, "cc.ImageFormat", "cc.macro.ImageFormat");
      return cc.macro.ImageFormat;
    }));
    js.get(cc, "KEY", (function() {
      cc.errorID(1400, "cc.KEY", "cc.macro.KEY");
      return cc.macro.KEY;
    }));
    js.get(cc, "Easing", (function() {
      cc.errorID(1400, "cc.Easing", "cc.easing");
      return cc.easing;
    }));
    js.get(cc, "isChildClassOf", (function() {
      cc.errorID(1400, "cc.isChildClassOf", "cc.js.isChildClassOf");
      return cc.js.isChildClassOf;
    }));
    "undefined" !== typeof dragonBones && js.get(dragonBones.CCFactory, "getFactory", (function() {
      cc.errorID(1400, "dragonBones.CCFactory.getFactory", "dragonBones.CCFactory.getInstance");
      return dragonBones.CCFactory.getInstance;
    }));
    cc.renderer.renderEngine = {
      get gfx() {
        cc.warnID(1400, "cc.renderer.renderEngine.gfx", "cc.gfx");
        return cc.gfx;
      },
      get math() {
        cc.warnID(1400, "cc.renderer.renderEngine.math", "cc.math");
        return cc.vmath;
      },
      get InputAssembler() {
        cc.warnID(1400, "cc.renderer.renderEngine.InputAssembler", "cc.renderer.InputAssembler");
        return cc.renderer.InputAssembler;
      }
    };
    markAsRemovedInObject(cc.audioEngine, [ "getProfile", "preload", "setMaxWebAudioSize" ], "cc.audioEngine");
  }), {} ],
  238: [ (function(require, module, exports) {
    "use strict";
    require("./core/CCGame");
    require("./actions");
  }), {
    "./actions": void 0,
    "./core/CCGame": 15
  } ],
  239: [ (function(require, module, exports) {
    "use strict";
    var Asset = require("../core/assets/CCAsset");
    var CCSpriteFrame = require("../core/assets/CCSpriteFrame");
    var ParticleAsset = cc.Class({
      name: "cc.ParticleAsset",
      extends: Asset,
      properties: {
        spriteFrame: {
          default: null,
          type: CCSpriteFrame
        }
      }
    });
    cc.ParticleAsset = module.exports = ParticleAsset;
  }), {
    "../core/assets/CCAsset": 49,
    "../core/assets/CCSpriteFrame": 61
  } ],
  240: [ (function(require, module, exports) {
    "use strict";
    var enums = {
      USAGE_STATIC: 35044,
      USAGE_DYNAMIC: 35048,
      USAGE_STREAM: 35040,
      INDEX_FMT_UINT8: 5121,
      INDEX_FMT_UINT16: 5123,
      INDEX_FMT_UINT32: 5125,
      ATTR_POSITION: "a_position",
      ATTR_NORMAL: "a_normal",
      ATTR_TANGENT: "a_tangent",
      ATTR_BITANGENT: "a_bitangent",
      ATTR_WEIGHTS: "a_weights",
      ATTR_JOINTS: "a_joints",
      ATTR_COLOR: "a_color",
      ATTR_COLOR0: "a_color0",
      ATTR_COLOR1: "a_color1",
      ATTR_UV: "a_uv",
      ATTR_UV0: "a_uv0",
      ATTR_UV1: "a_uv1",
      ATTR_UV2: "a_uv2",
      ATTR_UV3: "a_uv3",
      ATTR_UV4: "a_uv4",
      ATTR_UV5: "a_uv5",
      ATTR_UV6: "a_uv6",
      ATTR_UV7: "a_uv7",
      ATTR_TYPE_INT8: 5120,
      ATTR_TYPE_UINT8: 5121,
      ATTR_TYPE_INT16: 5122,
      ATTR_TYPE_UINT16: 5123,
      ATTR_TYPE_INT32: 5124,
      ATTR_TYPE_UINT32: 5125,
      ATTR_TYPE_FLOAT32: 5126,
      FILTER_NEAREST: 0,
      FILTER_LINEAR: 1,
      WRAP_REPEAT: 10497,
      WRAP_CLAMP: 33071,
      WRAP_MIRROR: 33648,
      TEXTURE_FMT_RGB_DXT1: 0,
      TEXTURE_FMT_RGBA_DXT1: 1,
      TEXTURE_FMT_RGBA_DXT3: 2,
      TEXTURE_FMT_RGBA_DXT5: 3,
      TEXTURE_FMT_RGB_ETC1: 4,
      TEXTURE_FMT_RGB_PVRTC_2BPPV1: 5,
      TEXTURE_FMT_RGBA_PVRTC_2BPPV1: 6,
      TEXTURE_FMT_RGB_PVRTC_4BPPV1: 7,
      TEXTURE_FMT_RGBA_PVRTC_4BPPV1: 8,
      TEXTURE_FMT_A8: 9,
      TEXTURE_FMT_L8: 10,
      TEXTURE_FMT_L8_A8: 11,
      TEXTURE_FMT_R5_G6_B5: 12,
      TEXTURE_FMT_R5_G5_B5_A1: 13,
      TEXTURE_FMT_R4_G4_B4_A4: 14,
      TEXTURE_FMT_RGB8: 15,
      TEXTURE_FMT_RGBA8: 16,
      TEXTURE_FMT_RGB16F: 17,
      TEXTURE_FMT_RGBA16F: 18,
      TEXTURE_FMT_RGB32F: 19,
      TEXTURE_FMT_RGBA32F: 20,
      TEXTURE_FMT_R32F: 21,
      TEXTURE_FMT_111110F: 22,
      TEXTURE_FMT_SRGB: 23,
      TEXTURE_FMT_SRGBA: 24,
      TEXTURE_FMT_D16: 25,
      TEXTURE_FMT_D32: 26,
      TEXTURE_FMT_D24S8: 27,
      TEXTURE_FMT_RGB_ETC2: 28,
      TEXTURE_FMT_RGBA_ETC2: 29,
      DS_FUNC_NEVER: 512,
      DS_FUNC_LESS: 513,
      DS_FUNC_EQUAL: 514,
      DS_FUNC_LEQUAL: 515,
      DS_FUNC_GREATER: 516,
      DS_FUNC_NOTEQUAL: 517,
      DS_FUNC_GEQUAL: 518,
      DS_FUNC_ALWAYS: 519,
      RB_FMT_RGBA4: 32854,
      RB_FMT_RGB5_A1: 32855,
      RB_FMT_RGB565: 36194,
      RB_FMT_D16: 33189,
      RB_FMT_S8: 36168,
      RB_FMT_D24S8: 34041,
      BLEND_FUNC_ADD: 32774,
      BLEND_FUNC_SUBTRACT: 32778,
      BLEND_FUNC_REVERSE_SUBTRACT: 32779,
      BLEND_ZERO: 0,
      BLEND_ONE: 1,
      BLEND_SRC_COLOR: 768,
      BLEND_ONE_MINUS_SRC_COLOR: 769,
      BLEND_DST_COLOR: 774,
      BLEND_ONE_MINUS_DST_COLOR: 775,
      BLEND_SRC_ALPHA: 770,
      BLEND_ONE_MINUS_SRC_ALPHA: 771,
      BLEND_DST_ALPHA: 772,
      BLEND_ONE_MINUS_DST_ALPHA: 773,
      BLEND_CONSTANT_COLOR: 32769,
      BLEND_ONE_MINUS_CONSTANT_COLOR: 32770,
      BLEND_CONSTANT_ALPHA: 32771,
      BLEND_ONE_MINUS_CONSTANT_ALPHA: 32772,
      BLEND_SRC_ALPHA_SATURATE: 776,
      STENCIL_DISABLE: 0,
      STENCIL_ENABLE: 1,
      STENCIL_INHERIT: 2,
      STENCIL_OP_KEEP: 7680,
      STENCIL_OP_ZERO: 0,
      STENCIL_OP_REPLACE: 7681,
      STENCIL_OP_INCR: 7682,
      STENCIL_OP_INCR_WRAP: 34055,
      STENCIL_OP_DECR: 7683,
      STENCIL_OP_DECR_WRAP: 34056,
      STENCIL_OP_INVERT: 5386,
      CULL_NONE: 0,
      CULL_FRONT: 1028,
      CULL_BACK: 1029,
      CULL_FRONT_AND_BACK: 1032,
      PT_POINTS: 0,
      PT_LINES: 1,
      PT_LINE_LOOP: 2,
      PT_LINE_STRIP: 3,
      PT_TRIANGLES: 4,
      PT_TRIANGLE_STRIP: 5,
      PT_TRIANGLE_FAN: 6
    };
    var RenderQueue = {
      OPAQUE: 0,
      TRANSPARENT: 1,
      OVERLAY: 2
    };
    function murmurhash2_32_gc(str, seed) {
      var l = str.length, h = seed ^ l, i = 0, k;
      while (l >= 4) {
        k = 255 & str.charCodeAt(i) | (255 & str.charCodeAt(++i)) << 8 | (255 & str.charCodeAt(++i)) << 16 | (255 & str.charCodeAt(++i)) << 24;
        k = 1540483477 * (65535 & k) + ((1540483477 * (k >>> 16) & 65535) << 16);
        k ^= k >>> 24;
        k = 1540483477 * (65535 & k) + ((1540483477 * (k >>> 16) & 65535) << 16);
        h = 1540483477 * (65535 & h) + ((1540483477 * (h >>> 16) & 65535) << 16) ^ k;
        l -= 4;
        ++i;
      }
      switch (l) {
       case 3:
        h ^= (255 & str.charCodeAt(i + 2)) << 16;

       case 2:
        h ^= (255 & str.charCodeAt(i + 1)) << 8;

       case 1:
        h ^= 255 & str.charCodeAt(i);
        h = 1540483477 * (65535 & h) + ((1540483477 * (h >>> 16) & 65535) << 16);
      }
      h ^= h >>> 13;
      h = 1540483477 * (65535 & h) + ((1540483477 * (h >>> 16) & 65535) << 16);
      h ^= h >>> 15;
      return h >>> 0;
    }
    var WebGLEXT;
    (function(WebGLEXT) {
      WebGLEXT[WebGLEXT["COMPRESSED_RGB_S3TC_DXT1_EXT"] = 33776] = "COMPRESSED_RGB_S3TC_DXT1_EXT";
      WebGLEXT[WebGLEXT["COMPRESSED_RGBA_S3TC_DXT1_EXT"] = 33777] = "COMPRESSED_RGBA_S3TC_DXT1_EXT";
      WebGLEXT[WebGLEXT["COMPRESSED_RGBA_S3TC_DXT3_EXT"] = 33778] = "COMPRESSED_RGBA_S3TC_DXT3_EXT";
      WebGLEXT[WebGLEXT["COMPRESSED_RGBA_S3TC_DXT5_EXT"] = 33779] = "COMPRESSED_RGBA_S3TC_DXT5_EXT";
      WebGLEXT[WebGLEXT["COMPRESSED_SRGB_S3TC_DXT1_EXT"] = 35916] = "COMPRESSED_SRGB_S3TC_DXT1_EXT";
      WebGLEXT[WebGLEXT["COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT"] = 35917] = "COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT";
      WebGLEXT[WebGLEXT["COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT"] = 35918] = "COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT";
      WebGLEXT[WebGLEXT["COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT"] = 35919] = "COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT";
      WebGLEXT[WebGLEXT["COMPRESSED_RGB_PVRTC_4BPPV1_IMG"] = 35840] = "COMPRESSED_RGB_PVRTC_4BPPV1_IMG";
      WebGLEXT[WebGLEXT["COMPRESSED_RGB_PVRTC_2BPPV1_IMG"] = 35841] = "COMPRESSED_RGB_PVRTC_2BPPV1_IMG";
      WebGLEXT[WebGLEXT["COMPRESSED_RGBA_PVRTC_4BPPV1_IMG"] = 35842] = "COMPRESSED_RGBA_PVRTC_4BPPV1_IMG";
      WebGLEXT[WebGLEXT["COMPRESSED_RGBA_PVRTC_2BPPV1_IMG"] = 35843] = "COMPRESSED_RGBA_PVRTC_2BPPV1_IMG";
      WebGLEXT[WebGLEXT["COMPRESSED_RGB_ETC1_WEBGL"] = 36196] = "COMPRESSED_RGB_ETC1_WEBGL";
    })(WebGLEXT || (WebGLEXT = {}));
    var GFXObjectType;
    (function(GFXObjectType) {
      GFXObjectType[GFXObjectType["UNKNOWN"] = 0] = "UNKNOWN";
      GFXObjectType[GFXObjectType["BUFFER"] = 1] = "BUFFER";
      GFXObjectType[GFXObjectType["TEXTURE"] = 2] = "TEXTURE";
      GFXObjectType[GFXObjectType["TEXTURE_VIEW"] = 3] = "TEXTURE_VIEW";
      GFXObjectType[GFXObjectType["RENDER_PASS"] = 4] = "RENDER_PASS";
      GFXObjectType[GFXObjectType["FRAMEBUFFER"] = 5] = "FRAMEBUFFER";
      GFXObjectType[GFXObjectType["SAMPLER"] = 6] = "SAMPLER";
      GFXObjectType[GFXObjectType["SHADER"] = 7] = "SHADER";
      GFXObjectType[GFXObjectType["PIPELINE_LAYOUT"] = 8] = "PIPELINE_LAYOUT";
      GFXObjectType[GFXObjectType["PIPELINE_STATE"] = 9] = "PIPELINE_STATE";
      GFXObjectType[GFXObjectType["BINDING_LAYOUT"] = 10] = "BINDING_LAYOUT";
      GFXObjectType[GFXObjectType["INPUT_ASSEMBLER"] = 11] = "INPUT_ASSEMBLER";
      GFXObjectType[GFXObjectType["COMMAND_ALLOCATOR"] = 12] = "COMMAND_ALLOCATOR";
      GFXObjectType[GFXObjectType["COMMAND_BUFFER"] = 13] = "COMMAND_BUFFER";
      GFXObjectType[GFXObjectType["QUEUE"] = 14] = "QUEUE";
      GFXObjectType[GFXObjectType["WINDOW"] = 15] = "WINDOW";
    })(GFXObjectType || (GFXObjectType = {}));
    var GFXStatus;
    (function(GFXStatus) {
      GFXStatus[GFXStatus["UNREADY"] = 0] = "UNREADY";
      GFXStatus[GFXStatus["FAILED"] = 1] = "FAILED";
      GFXStatus[GFXStatus["SUCCESS"] = 2] = "SUCCESS";
    })(GFXStatus || (GFXStatus = {}));
    var GFXObject = (function() {
      function GFXObject(gfxType) {
        this._gfxType = GFXObjectType.UNKNOWN;
        this._status = GFXStatus.UNREADY;
        this._gfxType = gfxType;
      }
      Object.defineProperty(GFXObject.prototype, "gfxType", {
        get: function get() {
          return this._gfxType;
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(GFXObject.prototype, "status", {
        get: function get() {
          return this._status;
        },
        enumerable: true,
        configurable: true
      });
      return GFXObject;
    })();
    var GFXAttributeName;
    (function(GFXAttributeName) {
      GFXAttributeName["ATTR_POSITION"] = "a_position";
      GFXAttributeName["ATTR_NORMAL"] = "a_normal";
      GFXAttributeName["ATTR_TANGENT"] = "a_tangent";
      GFXAttributeName["ATTR_BITANGENT"] = "a_bitangent";
      GFXAttributeName["ATTR_WEIGHTS"] = "a_weights";
      GFXAttributeName["ATTR_JOINTS"] = "a_joints";
      GFXAttributeName["ATTR_COLOR"] = "a_color";
      GFXAttributeName["ATTR_COLOR1"] = "a_color1";
      GFXAttributeName["ATTR_COLOR2"] = "a_color2";
      GFXAttributeName["ATTR_TEX_COORD"] = "a_texCoord";
      GFXAttributeName["ATTR_TEX_COORD1"] = "a_texCoord1";
      GFXAttributeName["ATTR_TEX_COORD2"] = "a_texCoord2";
      GFXAttributeName["ATTR_TEX_COORD3"] = "a_texCoord3";
      GFXAttributeName["ATTR_TEX_COORD4"] = "a_texCoord4";
      GFXAttributeName["ATTR_TEX_COORD5"] = "a_texCoord5";
      GFXAttributeName["ATTR_TEX_COORD6"] = "a_texCoord6";
      GFXAttributeName["ATTR_TEX_COORD7"] = "a_texCoord7";
      GFXAttributeName["ATTR_TEX_COORD8"] = "a_texCoord8";
    })(GFXAttributeName || (GFXAttributeName = {}));
    var GFXType;
    (function(GFXType) {
      GFXType[GFXType["UNKNOWN"] = 0] = "UNKNOWN";
      GFXType[GFXType["BOOL"] = 1] = "BOOL";
      GFXType[GFXType["BOOL2"] = 2] = "BOOL2";
      GFXType[GFXType["BOOL3"] = 3] = "BOOL3";
      GFXType[GFXType["BOOL4"] = 4] = "BOOL4";
      GFXType[GFXType["INT"] = 5] = "INT";
      GFXType[GFXType["INT2"] = 6] = "INT2";
      GFXType[GFXType["INT3"] = 7] = "INT3";
      GFXType[GFXType["INT4"] = 8] = "INT4";
      GFXType[GFXType["UINT"] = 9] = "UINT";
      GFXType[GFXType["UINT2"] = 10] = "UINT2";
      GFXType[GFXType["UINT3"] = 11] = "UINT3";
      GFXType[GFXType["UINT4"] = 12] = "UINT4";
      GFXType[GFXType["FLOAT"] = 13] = "FLOAT";
      GFXType[GFXType["FLOAT2"] = 14] = "FLOAT2";
      GFXType[GFXType["FLOAT3"] = 15] = "FLOAT3";
      GFXType[GFXType["FLOAT4"] = 16] = "FLOAT4";
      GFXType[GFXType["COLOR4"] = 17] = "COLOR4";
      GFXType[GFXType["MAT2"] = 18] = "MAT2";
      GFXType[GFXType["MAT2X3"] = 19] = "MAT2X3";
      GFXType[GFXType["MAT2X4"] = 20] = "MAT2X4";
      GFXType[GFXType["MAT3X2"] = 21] = "MAT3X2";
      GFXType[GFXType["MAT3"] = 22] = "MAT3";
      GFXType[GFXType["MAT3X4"] = 23] = "MAT3X4";
      GFXType[GFXType["MAT4X2"] = 24] = "MAT4X2";
      GFXType[GFXType["MAT4X3"] = 25] = "MAT4X3";
      GFXType[GFXType["MAT4"] = 26] = "MAT4";
      GFXType[GFXType["SAMPLER1D"] = 27] = "SAMPLER1D";
      GFXType[GFXType["SAMPLER1D_ARRAY"] = 28] = "SAMPLER1D_ARRAY";
      GFXType[GFXType["SAMPLER2D"] = 29] = "SAMPLER2D";
      GFXType[GFXType["SAMPLER2D_ARRAY"] = 30] = "SAMPLER2D_ARRAY";
      GFXType[GFXType["SAMPLER3D"] = 31] = "SAMPLER3D";
      GFXType[GFXType["SAMPLER_CUBE"] = 32] = "SAMPLER_CUBE";
      GFXType[GFXType["COUNT"] = 33] = "COUNT";
    })(GFXType || (GFXType = {}));
    var GFXFormat;
    (function(GFXFormat) {
      GFXFormat[GFXFormat["UNKNOWN"] = 0] = "UNKNOWN";
      GFXFormat[GFXFormat["A8"] = 1] = "A8";
      GFXFormat[GFXFormat["L8"] = 2] = "L8";
      GFXFormat[GFXFormat["LA8"] = 3] = "LA8";
      GFXFormat[GFXFormat["R8"] = 4] = "R8";
      GFXFormat[GFXFormat["R8SN"] = 5] = "R8SN";
      GFXFormat[GFXFormat["R8UI"] = 6] = "R8UI";
      GFXFormat[GFXFormat["R8I"] = 7] = "R8I";
      GFXFormat[GFXFormat["R16F"] = 8] = "R16F";
      GFXFormat[GFXFormat["R16UI"] = 9] = "R16UI";
      GFXFormat[GFXFormat["R16I"] = 10] = "R16I";
      GFXFormat[GFXFormat["R32F"] = 11] = "R32F";
      GFXFormat[GFXFormat["R32UI"] = 12] = "R32UI";
      GFXFormat[GFXFormat["R32I"] = 13] = "R32I";
      GFXFormat[GFXFormat["RG8"] = 14] = "RG8";
      GFXFormat[GFXFormat["RG8SN"] = 15] = "RG8SN";
      GFXFormat[GFXFormat["RG8UI"] = 16] = "RG8UI";
      GFXFormat[GFXFormat["RG8I"] = 17] = "RG8I";
      GFXFormat[GFXFormat["RG16F"] = 18] = "RG16F";
      GFXFormat[GFXFormat["RG16UI"] = 19] = "RG16UI";
      GFXFormat[GFXFormat["RG16I"] = 20] = "RG16I";
      GFXFormat[GFXFormat["RG32F"] = 21] = "RG32F";
      GFXFormat[GFXFormat["RG32UI"] = 22] = "RG32UI";
      GFXFormat[GFXFormat["RG32I"] = 23] = "RG32I";
      GFXFormat[GFXFormat["RGB8"] = 24] = "RGB8";
      GFXFormat[GFXFormat["SRGB8"] = 25] = "SRGB8";
      GFXFormat[GFXFormat["RGB8SN"] = 26] = "RGB8SN";
      GFXFormat[GFXFormat["RGB8UI"] = 27] = "RGB8UI";
      GFXFormat[GFXFormat["RGB8I"] = 28] = "RGB8I";
      GFXFormat[GFXFormat["RGB16F"] = 29] = "RGB16F";
      GFXFormat[GFXFormat["RGB16UI"] = 30] = "RGB16UI";
      GFXFormat[GFXFormat["RGB16I"] = 31] = "RGB16I";
      GFXFormat[GFXFormat["RGB32F"] = 32] = "RGB32F";
      GFXFormat[GFXFormat["RGB32UI"] = 33] = "RGB32UI";
      GFXFormat[GFXFormat["RGB32I"] = 34] = "RGB32I";
      GFXFormat[GFXFormat["RGBA8"] = 35] = "RGBA8";
      GFXFormat[GFXFormat["SRGB8_A8"] = 36] = "SRGB8_A8";
      GFXFormat[GFXFormat["RGBA8SN"] = 37] = "RGBA8SN";
      GFXFormat[GFXFormat["RGBA8UI"] = 38] = "RGBA8UI";
      GFXFormat[GFXFormat["RGBA8I"] = 39] = "RGBA8I";
      GFXFormat[GFXFormat["RGBA16F"] = 40] = "RGBA16F";
      GFXFormat[GFXFormat["RGBA16UI"] = 41] = "RGBA16UI";
      GFXFormat[GFXFormat["RGBA16I"] = 42] = "RGBA16I";
      GFXFormat[GFXFormat["RGBA32F"] = 43] = "RGBA32F";
      GFXFormat[GFXFormat["RGBA32UI"] = 44] = "RGBA32UI";
      GFXFormat[GFXFormat["RGBA32I"] = 45] = "RGBA32I";
      GFXFormat[GFXFormat["R5G6B5"] = 46] = "R5G6B5";
      GFXFormat[GFXFormat["R11G11B10F"] = 47] = "R11G11B10F";
      GFXFormat[GFXFormat["RGB5A1"] = 48] = "RGB5A1";
      GFXFormat[GFXFormat["RGBA4"] = 49] = "RGBA4";
      GFXFormat[GFXFormat["RGB10A2"] = 50] = "RGB10A2";
      GFXFormat[GFXFormat["RGB10A2UI"] = 51] = "RGB10A2UI";
      GFXFormat[GFXFormat["RGB9E5"] = 52] = "RGB9E5";
      GFXFormat[GFXFormat["D16"] = 53] = "D16";
      GFXFormat[GFXFormat["D16S8"] = 54] = "D16S8";
      GFXFormat[GFXFormat["D24"] = 55] = "D24";
      GFXFormat[GFXFormat["D24S8"] = 56] = "D24S8";
      GFXFormat[GFXFormat["D32F"] = 57] = "D32F";
      GFXFormat[GFXFormat["D32F_S8"] = 58] = "D32F_S8";
      GFXFormat[GFXFormat["BC1"] = 59] = "BC1";
      GFXFormat[GFXFormat["BC1_ALPHA"] = 60] = "BC1_ALPHA";
      GFXFormat[GFXFormat["BC1_SRGB"] = 61] = "BC1_SRGB";
      GFXFormat[GFXFormat["BC1_SRGB_ALPHA"] = 62] = "BC1_SRGB_ALPHA";
      GFXFormat[GFXFormat["BC2"] = 63] = "BC2";
      GFXFormat[GFXFormat["BC2_SRGB"] = 64] = "BC2_SRGB";
      GFXFormat[GFXFormat["BC3"] = 65] = "BC3";
      GFXFormat[GFXFormat["BC3_SRGB"] = 66] = "BC3_SRGB";
      GFXFormat[GFXFormat["BC4"] = 67] = "BC4";
      GFXFormat[GFXFormat["BC4_SNORM"] = 68] = "BC4_SNORM";
      GFXFormat[GFXFormat["BC5"] = 69] = "BC5";
      GFXFormat[GFXFormat["BC5_SNORM"] = 70] = "BC5_SNORM";
      GFXFormat[GFXFormat["BC6H_UF16"] = 71] = "BC6H_UF16";
      GFXFormat[GFXFormat["BC6H_SF16"] = 72] = "BC6H_SF16";
      GFXFormat[GFXFormat["BC7"] = 73] = "BC7";
      GFXFormat[GFXFormat["BC7_SRGB"] = 74] = "BC7_SRGB";
      GFXFormat[GFXFormat["ETC_RGB8"] = 75] = "ETC_RGB8";
      GFXFormat[GFXFormat["ETC2_RGB8"] = 76] = "ETC2_RGB8";
      GFXFormat[GFXFormat["ETC2_SRGB8"] = 77] = "ETC2_SRGB8";
      GFXFormat[GFXFormat["ETC2_RGB8_A1"] = 78] = "ETC2_RGB8_A1";
      GFXFormat[GFXFormat["ETC2_SRGB8_A1"] = 79] = "ETC2_SRGB8_A1";
      GFXFormat[GFXFormat["ETC2_RGBA8"] = 80] = "ETC2_RGBA8";
      GFXFormat[GFXFormat["ETC2_SRGB8_A8"] = 81] = "ETC2_SRGB8_A8";
      GFXFormat[GFXFormat["EAC_R11"] = 82] = "EAC_R11";
      GFXFormat[GFXFormat["EAC_R11SN"] = 83] = "EAC_R11SN";
      GFXFormat[GFXFormat["EAC_RG11"] = 84] = "EAC_RG11";
      GFXFormat[GFXFormat["EAC_RG11SN"] = 85] = "EAC_RG11SN";
      GFXFormat[GFXFormat["PVRTC_RGB2"] = 86] = "PVRTC_RGB2";
      GFXFormat[GFXFormat["PVRTC_RGBA2"] = 87] = "PVRTC_RGBA2";
      GFXFormat[GFXFormat["PVRTC_RGB4"] = 88] = "PVRTC_RGB4";
      GFXFormat[GFXFormat["PVRTC_RGBA4"] = 89] = "PVRTC_RGBA4";
      GFXFormat[GFXFormat["PVRTC2_2BPP"] = 90] = "PVRTC2_2BPP";
      GFXFormat[GFXFormat["PVRTC2_4BPP"] = 91] = "PVRTC2_4BPP";
    })(GFXFormat || (GFXFormat = {}));
    var GFXBufferUsageBit;
    (function(GFXBufferUsageBit) {
      GFXBufferUsageBit[GFXBufferUsageBit["NONE"] = 0] = "NONE";
      GFXBufferUsageBit[GFXBufferUsageBit["TRANSFER_SRC"] = 1] = "TRANSFER_SRC";
      GFXBufferUsageBit[GFXBufferUsageBit["TRANSFER_DST"] = 2] = "TRANSFER_DST";
      GFXBufferUsageBit[GFXBufferUsageBit["INDEX"] = 4] = "INDEX";
      GFXBufferUsageBit[GFXBufferUsageBit["VERTEX"] = 8] = "VERTEX";
      GFXBufferUsageBit[GFXBufferUsageBit["UNIFORM"] = 16] = "UNIFORM";
      GFXBufferUsageBit[GFXBufferUsageBit["STORAGE"] = 32] = "STORAGE";
      GFXBufferUsageBit[GFXBufferUsageBit["INDIRECT"] = 64] = "INDIRECT";
    })(GFXBufferUsageBit || (GFXBufferUsageBit = {}));
    var GFXMemoryUsageBit;
    (function(GFXMemoryUsageBit) {
      GFXMemoryUsageBit[GFXMemoryUsageBit["NONE"] = 0] = "NONE";
      GFXMemoryUsageBit[GFXMemoryUsageBit["DEVICE"] = 1] = "DEVICE";
      GFXMemoryUsageBit[GFXMemoryUsageBit["HOST"] = 2] = "HOST";
    })(GFXMemoryUsageBit || (GFXMemoryUsageBit = {}));
    var GFXBufferAccessBit;
    (function(GFXBufferAccessBit) {
      GFXBufferAccessBit[GFXBufferAccessBit["NONE"] = 0] = "NONE";
      GFXBufferAccessBit[GFXBufferAccessBit["READ"] = 1] = "READ";
      GFXBufferAccessBit[GFXBufferAccessBit["WRITE"] = 2] = "WRITE";
    })(GFXBufferAccessBit || (GFXBufferAccessBit = {}));
    var GFXPrimitiveMode;
    (function(GFXPrimitiveMode) {
      GFXPrimitiveMode[GFXPrimitiveMode["POINT_LIST"] = 0] = "POINT_LIST";
      GFXPrimitiveMode[GFXPrimitiveMode["LINE_LIST"] = 1] = "LINE_LIST";
      GFXPrimitiveMode[GFXPrimitiveMode["LINE_STRIP"] = 2] = "LINE_STRIP";
      GFXPrimitiveMode[GFXPrimitiveMode["LINE_LOOP"] = 3] = "LINE_LOOP";
      GFXPrimitiveMode[GFXPrimitiveMode["LINE_LIST_ADJACENCY"] = 4] = "LINE_LIST_ADJACENCY";
      GFXPrimitiveMode[GFXPrimitiveMode["LINE_STRIP_ADJACENCY"] = 5] = "LINE_STRIP_ADJACENCY";
      GFXPrimitiveMode[GFXPrimitiveMode["ISO_LINE_LIST"] = 6] = "ISO_LINE_LIST";
      GFXPrimitiveMode[GFXPrimitiveMode["TRIANGLE_LIST"] = 7] = "TRIANGLE_LIST";
      GFXPrimitiveMode[GFXPrimitiveMode["TRIANGLE_STRIP"] = 8] = "TRIANGLE_STRIP";
      GFXPrimitiveMode[GFXPrimitiveMode["TRIANGLE_FAN"] = 9] = "TRIANGLE_FAN";
      GFXPrimitiveMode[GFXPrimitiveMode["TRIANGLE_LIST_ADJACENCY"] = 10] = "TRIANGLE_LIST_ADJACENCY";
      GFXPrimitiveMode[GFXPrimitiveMode["TRIANGLE_STRIP_ADJACENCY"] = 11] = "TRIANGLE_STRIP_ADJACENCY";
      GFXPrimitiveMode[GFXPrimitiveMode["TRIANGLE_PATCH_ADJACENCY"] = 12] = "TRIANGLE_PATCH_ADJACENCY";
      GFXPrimitiveMode[GFXPrimitiveMode["QUAD_PATCH_LIST"] = 13] = "QUAD_PATCH_LIST";
    })(GFXPrimitiveMode || (GFXPrimitiveMode = {}));
    var GFXPolygonMode;
    (function(GFXPolygonMode) {
      GFXPolygonMode[GFXPolygonMode["FILL"] = 0] = "FILL";
      GFXPolygonMode[GFXPolygonMode["POINT"] = 1] = "POINT";
      GFXPolygonMode[GFXPolygonMode["LINE"] = 2] = "LINE";
    })(GFXPolygonMode || (GFXPolygonMode = {}));
    var GFXShadeModel;
    (function(GFXShadeModel) {
      GFXShadeModel[GFXShadeModel["GOURAND"] = 0] = "GOURAND";
      GFXShadeModel[GFXShadeModel["FLAT"] = 1] = "FLAT";
    })(GFXShadeModel || (GFXShadeModel = {}));
    var GFXCullMode;
    (function(GFXCullMode) {
      GFXCullMode[GFXCullMode["NONE"] = 0] = "NONE";
      GFXCullMode[GFXCullMode["FRONT"] = 1] = "FRONT";
      GFXCullMode[GFXCullMode["BACK"] = 2] = "BACK";
    })(GFXCullMode || (GFXCullMode = {}));
    var GFXComparisonFunc;
    (function(GFXComparisonFunc) {
      GFXComparisonFunc[GFXComparisonFunc["NEVER"] = 0] = "NEVER";
      GFXComparisonFunc[GFXComparisonFunc["LESS"] = 1] = "LESS";
      GFXComparisonFunc[GFXComparisonFunc["EQUAL"] = 2] = "EQUAL";
      GFXComparisonFunc[GFXComparisonFunc["LESS_EQUAL"] = 3] = "LESS_EQUAL";
      GFXComparisonFunc[GFXComparisonFunc["GREATER"] = 4] = "GREATER";
      GFXComparisonFunc[GFXComparisonFunc["NOT_EQUAL"] = 5] = "NOT_EQUAL";
      GFXComparisonFunc[GFXComparisonFunc["GREATER_EQUAL"] = 6] = "GREATER_EQUAL";
      GFXComparisonFunc[GFXComparisonFunc["ALWAYS"] = 7] = "ALWAYS";
    })(GFXComparisonFunc || (GFXComparisonFunc = {}));
    var GFXStencilOp;
    (function(GFXStencilOp) {
      GFXStencilOp[GFXStencilOp["ZERO"] = 0] = "ZERO";
      GFXStencilOp[GFXStencilOp["KEEP"] = 1] = "KEEP";
      GFXStencilOp[GFXStencilOp["REPLACE"] = 2] = "REPLACE";
      GFXStencilOp[GFXStencilOp["INCR"] = 3] = "INCR";
      GFXStencilOp[GFXStencilOp["DECR"] = 4] = "DECR";
      GFXStencilOp[GFXStencilOp["INVERT"] = 5] = "INVERT";
      GFXStencilOp[GFXStencilOp["INCR_WRAP"] = 6] = "INCR_WRAP";
      GFXStencilOp[GFXStencilOp["DECR_WRAP"] = 7] = "DECR_WRAP";
    })(GFXStencilOp || (GFXStencilOp = {}));
    var GFXBlendOp;
    (function(GFXBlendOp) {
      GFXBlendOp[GFXBlendOp["ADD"] = 0] = "ADD";
      GFXBlendOp[GFXBlendOp["SUB"] = 1] = "SUB";
      GFXBlendOp[GFXBlendOp["REV_SUB"] = 2] = "REV_SUB";
      GFXBlendOp[GFXBlendOp["MIN"] = 3] = "MIN";
      GFXBlendOp[GFXBlendOp["MAX"] = 4] = "MAX";
    })(GFXBlendOp || (GFXBlendOp = {}));
    var GFXBlendFactor;
    (function(GFXBlendFactor) {
      GFXBlendFactor[GFXBlendFactor["ZERO"] = 0] = "ZERO";
      GFXBlendFactor[GFXBlendFactor["ONE"] = 1] = "ONE";
      GFXBlendFactor[GFXBlendFactor["SRC_ALPHA"] = 2] = "SRC_ALPHA";
      GFXBlendFactor[GFXBlendFactor["DST_ALPHA"] = 3] = "DST_ALPHA";
      GFXBlendFactor[GFXBlendFactor["ONE_MINUS_SRC_ALPHA"] = 4] = "ONE_MINUS_SRC_ALPHA";
      GFXBlendFactor[GFXBlendFactor["ONE_MINUS_DST_ALPHA"] = 5] = "ONE_MINUS_DST_ALPHA";
      GFXBlendFactor[GFXBlendFactor["SRC_COLOR"] = 6] = "SRC_COLOR";
      GFXBlendFactor[GFXBlendFactor["DST_COLOR"] = 7] = "DST_COLOR";
      GFXBlendFactor[GFXBlendFactor["ONE_MINUS_SRC_COLOR"] = 8] = "ONE_MINUS_SRC_COLOR";
      GFXBlendFactor[GFXBlendFactor["ONE_MINUS_DST_COLOR"] = 9] = "ONE_MINUS_DST_COLOR";
      GFXBlendFactor[GFXBlendFactor["SRC_ALPHA_SATURATE"] = 10] = "SRC_ALPHA_SATURATE";
      GFXBlendFactor[GFXBlendFactor["CONSTANT_COLOR"] = 11] = "CONSTANT_COLOR";
      GFXBlendFactor[GFXBlendFactor["ONE_MINUS_CONSTANT_COLOR"] = 12] = "ONE_MINUS_CONSTANT_COLOR";
      GFXBlendFactor[GFXBlendFactor["CONSTANT_ALPHA"] = 13] = "CONSTANT_ALPHA";
      GFXBlendFactor[GFXBlendFactor["ONE_MINUS_CONSTANT_ALPHA"] = 14] = "ONE_MINUS_CONSTANT_ALPHA";
    })(GFXBlendFactor || (GFXBlendFactor = {}));
    var GFXColorMask;
    (function(GFXColorMask) {
      GFXColorMask[GFXColorMask["NONE"] = 0] = "NONE";
      GFXColorMask[GFXColorMask["R"] = 1] = "R";
      GFXColorMask[GFXColorMask["G"] = 2] = "G";
      GFXColorMask[GFXColorMask["B"] = 4] = "B";
      GFXColorMask[GFXColorMask["A"] = 8] = "A";
      GFXColorMask[GFXColorMask["ALL"] = 15] = "ALL";
    })(GFXColorMask || (GFXColorMask = {}));
    var GFXFilter;
    (function(GFXFilter) {
      GFXFilter[GFXFilter["NONE"] = 0] = "NONE";
      GFXFilter[GFXFilter["POINT"] = 1] = "POINT";
      GFXFilter[GFXFilter["LINEAR"] = 2] = "LINEAR";
      GFXFilter[GFXFilter["ANISOTROPIC"] = 3] = "ANISOTROPIC";
    })(GFXFilter || (GFXFilter = {}));
    var GFXAddress;
    (function(GFXAddress) {
      GFXAddress[GFXAddress["WRAP"] = 0] = "WRAP";
      GFXAddress[GFXAddress["MIRROR"] = 1] = "MIRROR";
      GFXAddress[GFXAddress["CLAMP"] = 2] = "CLAMP";
      GFXAddress[GFXAddress["BORDER"] = 3] = "BORDER";
    })(GFXAddress || (GFXAddress = {}));
    var GFXTextureType;
    (function(GFXTextureType) {
      GFXTextureType[GFXTextureType["TEX1D"] = 0] = "TEX1D";
      GFXTextureType[GFXTextureType["TEX2D"] = 1] = "TEX2D";
      GFXTextureType[GFXTextureType["TEX3D"] = 2] = "TEX3D";
    })(GFXTextureType || (GFXTextureType = {}));
    var GFXTextureUsageBit;
    (function(GFXTextureUsageBit) {
      GFXTextureUsageBit[GFXTextureUsageBit["NONE"] = 0] = "NONE";
      GFXTextureUsageBit[GFXTextureUsageBit["TRANSFER_SRC"] = 1] = "TRANSFER_SRC";
      GFXTextureUsageBit[GFXTextureUsageBit["TRANSFER_DST"] = 2] = "TRANSFER_DST";
      GFXTextureUsageBit[GFXTextureUsageBit["SAMPLED"] = 4] = "SAMPLED";
      GFXTextureUsageBit[GFXTextureUsageBit["STORAGE"] = 8] = "STORAGE";
      GFXTextureUsageBit[GFXTextureUsageBit["COLOR_ATTACHMENT"] = 16] = "COLOR_ATTACHMENT";
      GFXTextureUsageBit[GFXTextureUsageBit["DEPTH_STENCIL_ATTACHMENT"] = 32] = "DEPTH_STENCIL_ATTACHMENT";
      GFXTextureUsageBit[GFXTextureUsageBit["TRANSIENT_ATTACHMENT"] = 64] = "TRANSIENT_ATTACHMENT";
      GFXTextureUsageBit[GFXTextureUsageBit["INPUT_ATTACHMENT"] = 128] = "INPUT_ATTACHMENT";
    })(GFXTextureUsageBit || (GFXTextureUsageBit = {}));
    var GFXSampleCount;
    (function(GFXSampleCount) {
      GFXSampleCount[GFXSampleCount["X1"] = 0] = "X1";
      GFXSampleCount[GFXSampleCount["X2"] = 1] = "X2";
      GFXSampleCount[GFXSampleCount["X4"] = 2] = "X4";
      GFXSampleCount[GFXSampleCount["X8"] = 3] = "X8";
      GFXSampleCount[GFXSampleCount["X16"] = 4] = "X16";
      GFXSampleCount[GFXSampleCount["X32"] = 5] = "X32";
      GFXSampleCount[GFXSampleCount["X64"] = 6] = "X64";
    })(GFXSampleCount || (GFXSampleCount = {}));
    var GFXTextureFlagBit;
    (function(GFXTextureFlagBit) {
      GFXTextureFlagBit[GFXTextureFlagBit["NONE"] = 0] = "NONE";
      GFXTextureFlagBit[GFXTextureFlagBit["GEN_MIPMAP"] = 1] = "GEN_MIPMAP";
      GFXTextureFlagBit[GFXTextureFlagBit["CUBEMAP"] = 2] = "CUBEMAP";
      GFXTextureFlagBit[GFXTextureFlagBit["BAKUP_BUFFER"] = 4] = "BAKUP_BUFFER";
    })(GFXTextureFlagBit || (GFXTextureFlagBit = {}));
    var GFXTextureViewType;
    (function(GFXTextureViewType) {
      GFXTextureViewType[GFXTextureViewType["TV1D"] = 0] = "TV1D";
      GFXTextureViewType[GFXTextureViewType["TV2D"] = 1] = "TV2D";
      GFXTextureViewType[GFXTextureViewType["TV3D"] = 2] = "TV3D";
      GFXTextureViewType[GFXTextureViewType["CUBE"] = 3] = "CUBE";
      GFXTextureViewType[GFXTextureViewType["TV1D_ARRAY"] = 4] = "TV1D_ARRAY";
      GFXTextureViewType[GFXTextureViewType["TV2D_ARRAY"] = 5] = "TV2D_ARRAY";
    })(GFXTextureViewType || (GFXTextureViewType = {}));
    var GFXShaderType;
    (function(GFXShaderType) {
      GFXShaderType[GFXShaderType["VERTEX"] = 0] = "VERTEX";
      GFXShaderType[GFXShaderType["HULL"] = 1] = "HULL";
      GFXShaderType[GFXShaderType["DOMAIN"] = 2] = "DOMAIN";
      GFXShaderType[GFXShaderType["GEOMETRY"] = 3] = "GEOMETRY";
      GFXShaderType[GFXShaderType["FRAGMENT"] = 4] = "FRAGMENT";
      GFXShaderType[GFXShaderType["COMPUTE"] = 5] = "COMPUTE";
      GFXShaderType[GFXShaderType["COUNT"] = 6] = "COUNT";
    })(GFXShaderType || (GFXShaderType = {}));
    var GFXBindingType;
    (function(GFXBindingType) {
      GFXBindingType[GFXBindingType["UNKNOWN"] = 0] = "UNKNOWN";
      GFXBindingType[GFXBindingType["UNIFORM_BUFFER"] = 1] = "UNIFORM_BUFFER";
      GFXBindingType[GFXBindingType["SAMPLER"] = 2] = "SAMPLER";
      GFXBindingType[GFXBindingType["STORAGE_BUFFER"] = 3] = "STORAGE_BUFFER";
    })(GFXBindingType || (GFXBindingType = {}));
    var GFXCommandBufferType;
    (function(GFXCommandBufferType) {
      GFXCommandBufferType[GFXCommandBufferType["PRIMARY"] = 0] = "PRIMARY";
      GFXCommandBufferType[GFXCommandBufferType["SECONDARY"] = 1] = "SECONDARY";
    })(GFXCommandBufferType || (GFXCommandBufferType = {}));
    var GFXLoadOp;
    (function(GFXLoadOp) {
      GFXLoadOp[GFXLoadOp["LOAD"] = 0] = "LOAD";
      GFXLoadOp[GFXLoadOp["CLEAR"] = 1] = "CLEAR";
      GFXLoadOp[GFXLoadOp["DISCARD"] = 2] = "DISCARD";
    })(GFXLoadOp || (GFXLoadOp = {}));
    var GFXStoreOp;
    (function(GFXStoreOp) {
      GFXStoreOp[GFXStoreOp["STORE"] = 0] = "STORE";
      GFXStoreOp[GFXStoreOp["DISCARD"] = 1] = "DISCARD";
    })(GFXStoreOp || (GFXStoreOp = {}));
    var GFXTextureLayout;
    (function(GFXTextureLayout) {
      GFXTextureLayout[GFXTextureLayout["UNDEFINED"] = 0] = "UNDEFINED";
      GFXTextureLayout[GFXTextureLayout["GENERAL"] = 1] = "GENERAL";
      GFXTextureLayout[GFXTextureLayout["COLOR_ATTACHMENT_OPTIMAL"] = 2] = "COLOR_ATTACHMENT_OPTIMAL";
      GFXTextureLayout[GFXTextureLayout["DEPTH_STENCIL_ATTACHMENT_OPTIMAL"] = 3] = "DEPTH_STENCIL_ATTACHMENT_OPTIMAL";
      GFXTextureLayout[GFXTextureLayout["DEPTH_STENCIL_READONLY_OPTIMAL"] = 4] = "DEPTH_STENCIL_READONLY_OPTIMAL";
      GFXTextureLayout[GFXTextureLayout["SHADER_READONLY_OPTIMAL"] = 5] = "SHADER_READONLY_OPTIMAL";
      GFXTextureLayout[GFXTextureLayout["TRANSFER_SRC_OPTIMAL"] = 6] = "TRANSFER_SRC_OPTIMAL";
      GFXTextureLayout[GFXTextureLayout["TRANSFER_DST_OPTIMAL"] = 7] = "TRANSFER_DST_OPTIMAL";
      GFXTextureLayout[GFXTextureLayout["PREINITIALIZED"] = 8] = "PREINITIALIZED";
      GFXTextureLayout[GFXTextureLayout["PRESENT_SRC"] = 9] = "PRESENT_SRC";
    })(GFXTextureLayout || (GFXTextureLayout = {}));
    var GFXPipelineBindPoint;
    (function(GFXPipelineBindPoint) {
      GFXPipelineBindPoint[GFXPipelineBindPoint["GRAPHICS"] = 0] = "GRAPHICS";
      GFXPipelineBindPoint[GFXPipelineBindPoint["COMPUTE"] = 1] = "COMPUTE";
      GFXPipelineBindPoint[GFXPipelineBindPoint["RAY_TRACING"] = 2] = "RAY_TRACING";
    })(GFXPipelineBindPoint || (GFXPipelineBindPoint = {}));
    var GFXDynamicState;
    (function(GFXDynamicState) {
      GFXDynamicState[GFXDynamicState["VIEWPORT"] = 0] = "VIEWPORT";
      GFXDynamicState[GFXDynamicState["SCISSOR"] = 1] = "SCISSOR";
      GFXDynamicState[GFXDynamicState["LINE_WIDTH"] = 2] = "LINE_WIDTH";
      GFXDynamicState[GFXDynamicState["DEPTH_BIAS"] = 3] = "DEPTH_BIAS";
      GFXDynamicState[GFXDynamicState["BLEND_CONSTANTS"] = 4] = "BLEND_CONSTANTS";
      GFXDynamicState[GFXDynamicState["DEPTH_BOUNDS"] = 5] = "DEPTH_BOUNDS";
      GFXDynamicState[GFXDynamicState["STENCIL_WRITE_MASK"] = 6] = "STENCIL_WRITE_MASK";
      GFXDynamicState[GFXDynamicState["STENCIL_COMPARE_MASK"] = 7] = "STENCIL_COMPARE_MASK";
    })(GFXDynamicState || (GFXDynamicState = {}));
    var GFXStencilFace;
    (function(GFXStencilFace) {
      GFXStencilFace[GFXStencilFace["FRONT"] = 0] = "FRONT";
      GFXStencilFace[GFXStencilFace["BACK"] = 1] = "BACK";
      GFXStencilFace[GFXStencilFace["ALL"] = 2] = "ALL";
    })(GFXStencilFace || (GFXStencilFace = {}));
    var GFXQueueType;
    (function(GFXQueueType) {
      GFXQueueType[GFXQueueType["GRAPHICS"] = 0] = "GRAPHICS";
      GFXQueueType[GFXQueueType["COMPUTE"] = 1] = "COMPUTE";
      GFXQueueType[GFXQueueType["TRANSFER"] = 2] = "TRANSFER";
    })(GFXQueueType || (GFXQueueType = {}));
    var GFXClearFlag;
    (function(GFXClearFlag) {
      GFXClearFlag[GFXClearFlag["NONE"] = 0] = "NONE";
      GFXClearFlag[GFXClearFlag["COLOR"] = 1] = "COLOR";
      GFXClearFlag[GFXClearFlag["DEPTH"] = 2] = "DEPTH";
      GFXClearFlag[GFXClearFlag["STENCIL"] = 4] = "STENCIL";
      GFXClearFlag[GFXClearFlag["DEPTH_STENCIL"] = 6] = "DEPTH_STENCIL";
      GFXClearFlag[GFXClearFlag["ALL"] = 7] = "ALL";
    })(GFXClearFlag || (GFXClearFlag = {}));
    function GFXGetTypeSize(type) {
      switch (type) {
       case GFXType.BOOL:
       case GFXType.INT:
       case GFXType.UINT:
       case GFXType.FLOAT:
        return 4;

       case GFXType.BOOL2:
       case GFXType.INT2:
       case GFXType.UINT2:
       case GFXType.FLOAT2:
        return 8;

       case GFXType.BOOL3:
       case GFXType.INT3:
       case GFXType.UINT3:
       case GFXType.FLOAT3:
        return 12;

       case GFXType.BOOL4:
       case GFXType.INT4:
       case GFXType.UINT4:
       case GFXType.FLOAT4:
       case GFXType.MAT2:
        return 16;

       case GFXType.MAT2X3:
        return 24;

       case GFXType.MAT2X4:
        return 32;

       case GFXType.MAT3X2:
        return 24;

       case GFXType.MAT3:
        return 36;

       case GFXType.MAT3X4:
        return 48;

       case GFXType.MAT4X2:
       case GFXType.MAT4X2:
        return 32;

       case GFXType.MAT4:
        return 64;

       case GFXType.SAMPLER1D:
       case GFXType.SAMPLER1D_ARRAY:
       case GFXType.SAMPLER2D:
       case GFXType.SAMPLER2D_ARRAY:
       case GFXType.SAMPLER3D:
       case GFXType.SAMPLER_CUBE:
        return 4;

       default:
        return 0;
      }
    }
    var RenderPassStage;
    (function(RenderPassStage) {
      RenderPassStage[RenderPassStage["DEFAULT"] = 100] = "DEFAULT";
    })(RenderPassStage || (RenderPassStage = {}));
    var RenderPriority;
    (function(RenderPriority) {
      RenderPriority[RenderPriority["MIN"] = 0] = "MIN";
      RenderPriority[RenderPriority["MAX"] = 255] = "MAX";
      RenderPriority[RenderPriority["DEFAULT"] = 128] = "DEFAULT";
    })(RenderPriority || (RenderPriority = {}));
    var MAX_BINDING_SUPPORTED = 24;
    var UniformBinding;
    (function(UniformBinding) {
      UniformBinding[UniformBinding["UBO_GLOBAL"] = MAX_BINDING_SUPPORTED - 1] = "UBO_GLOBAL";
      UniformBinding[UniformBinding["UBO_SHADOW"] = MAX_BINDING_SUPPORTED - 2] = "UBO_SHADOW";
      UniformBinding[UniformBinding["UBO_LOCAL"] = MAX_BINDING_SUPPORTED - 3] = "UBO_LOCAL";
      UniformBinding[UniformBinding["UBO_FORWARD_LIGHTS"] = MAX_BINDING_SUPPORTED - 4] = "UBO_FORWARD_LIGHTS";
      UniformBinding[UniformBinding["UBO_SKINNING"] = MAX_BINDING_SUPPORTED - 5] = "UBO_SKINNING";
      UniformBinding[UniformBinding["UBO_SKINNING_TEXTURE"] = MAX_BINDING_SUPPORTED - 6] = "UBO_SKINNING_TEXTURE";
      UniformBinding[UniformBinding["UBO_UI"] = MAX_BINDING_SUPPORTED - 7] = "UBO_UI";
      UniformBinding[UniformBinding["SAMPLER_JOINTS"] = MAX_BINDING_SUPPORTED + 1] = "SAMPLER_JOINTS";
      UniformBinding[UniformBinding["SAMPLER_ENVIRONMENT"] = MAX_BINDING_SUPPORTED + 2] = "SAMPLER_ENVIRONMENT";
      UniformBinding[UniformBinding["CUSTUM_UBO_BINDING_END_POINT"] = MAX_BINDING_SUPPORTED - 7] = "CUSTUM_UBO_BINDING_END_POINT";
      UniformBinding[UniformBinding["CUSTOM_SAMPLER_BINDING_START_POINT"] = MAX_BINDING_SUPPORTED + 6] = "CUSTOM_SAMPLER_BINDING_START_POINT";
    })(UniformBinding || (UniformBinding = {}));
    var _a, _b;
    var SamplerInfoIndex;
    (function(SamplerInfoIndex) {
      SamplerInfoIndex[SamplerInfoIndex["minFilter"] = 0] = "minFilter";
      SamplerInfoIndex[SamplerInfoIndex["magFilter"] = 1] = "magFilter";
      SamplerInfoIndex[SamplerInfoIndex["mipFilter"] = 2] = "mipFilter";
      SamplerInfoIndex[SamplerInfoIndex["addressU"] = 3] = "addressU";
      SamplerInfoIndex[SamplerInfoIndex["addressV"] = 4] = "addressV";
      SamplerInfoIndex[SamplerInfoIndex["addressW"] = 5] = "addressW";
      SamplerInfoIndex[SamplerInfoIndex["maxAnisotropy"] = 6] = "maxAnisotropy";
      SamplerInfoIndex[SamplerInfoIndex["cmpFunc"] = 7] = "cmpFunc";
      SamplerInfoIndex[SamplerInfoIndex["minLOD"] = 8] = "minLOD";
      SamplerInfoIndex[SamplerInfoIndex["maxLOD"] = 9] = "maxLOD";
      SamplerInfoIndex[SamplerInfoIndex["mipLODBias"] = 10] = "mipLODBias";
      SamplerInfoIndex[SamplerInfoIndex["borderColor"] = 11] = "borderColor";
      SamplerInfoIndex[SamplerInfoIndex["total"] = 15] = "total";
    })(SamplerInfoIndex || (SamplerInfoIndex = {}));
    var typeMap = {};
    typeMap[typeMap["bool"] = GFXType.BOOL] = "bool";
    typeMap[typeMap["int"] = GFXType.INT] = "int";
    typeMap[typeMap["ivec2"] = GFXType.INT2] = "ivec2invTypeParams";
    typeMap[typeMap["ivec3"] = GFXType.INT3] = "ivec3";
    typeMap[typeMap["ivec4"] = GFXType.INT4] = "ivec4";
    typeMap[typeMap["float"] = GFXType.FLOAT] = "float";
    typeMap[typeMap["vec2"] = GFXType.FLOAT2] = "vec2";
    typeMap[typeMap["vec3"] = GFXType.FLOAT3] = "vec3";
    typeMap[typeMap["vec4"] = GFXType.FLOAT4] = "vec4";
    typeMap[typeMap["mat2"] = GFXType.MAT2] = "mat2";
    typeMap[typeMap["mat3"] = GFXType.MAT3] = "mat3";
    typeMap[typeMap["mat4"] = GFXType.MAT4] = "mat4";
    typeMap[typeMap["sampler2D"] = GFXType.SAMPLER2D] = "sampler2D";
    typeMap[typeMap["samplerCube"] = GFXType.SAMPLER_CUBE] = "samplerCube";
    var sizeMap = (_a = {}, _a[GFXType.BOOL] = 4, _a[GFXType.INT] = 4, _a[GFXType.INT2] = 8, 
    _a[GFXType.INT3] = 12, _a[GFXType.INT4] = 16, _a[GFXType.FLOAT] = 4, _a[GFXType.FLOAT2] = 8, 
    _a[GFXType.FLOAT3] = 12, _a[GFXType.FLOAT4] = 16, _a[GFXType.MAT2] = 16, _a[GFXType.MAT3] = 36, 
    _a[GFXType.MAT4] = 64, _a[GFXType.SAMPLER2D] = 4, _a[GFXType.SAMPLER_CUBE] = 4, 
    _a);
    var formatMap = (_b = {}, _b[GFXType.BOOL] = GFXFormat.R32I, _b[GFXType.INT] = GFXFormat.R32I, 
    _b[GFXType.INT2] = GFXFormat.RG32I, _b[GFXType.INT3] = GFXFormat.RGB32I, _b[GFXType.INT4] = GFXFormat.RGBA32I, 
    _b[GFXType.FLOAT] = GFXFormat.R32F, _b[GFXType.FLOAT2] = GFXFormat.RG32F, _b[GFXType.FLOAT3] = GFXFormat.RGB32F, 
    _b[GFXType.FLOAT4] = GFXFormat.RGBA32F, _b);
    var passParams = {
      BACK: enums.CULL_BACK,
      FRONT: enums.CULL_FRONT,
      NONE: enums.CULL_NONE,
      ADD: enums.BLEND_FUNC_ADD,
      SUB: enums.BLEND_FUNC_SUBTRACT,
      REV_SUB: enums.BLEND_FUNC_REVERSE_SUBTRACT,
      ZERO: enums.BLEND_ZERO,
      ONE: enums.BLEND_ONE,
      SRC_COLOR: enums.BLEND_SRC_COLOR,
      ONE_MINUS_SRC_COLOR: enums.BLEND_ONE_MINUS_SRC_COLOR,
      DST_COLOR: enums.BLEND_DST_COLOR,
      ONE_MINUS_DST_COLOR: enums.BLEND_ONE_MINUS_DST_COLOR,
      SRC_ALPHA: enums.BLEND_SRC_ALPHA,
      ONE_MINUS_SRC_ALPHA: enums.BLEND_ONE_MINUS_SRC_ALPHA,
      DST_ALPHA: enums.BLEND_DST_ALPHA,
      ONE_MINUS_DST_ALPHA: enums.BLEND_ONE_MINUS_DST_ALPHA,
      CONSTANT_COLOR: enums.BLEND_CONSTANT_COLOR,
      ONE_MINUS_CONSTANT_COLOR: enums.BLEND_ONE_MINUS_CONSTANT_COLOR,
      CONSTANT_ALPHA: enums.BLEND_CONSTANT_ALPHA,
      ONE_MINUS_CONSTANT_ALPHA: enums.BLEND_ONE_MINUS_CONSTANT_ALPHA,
      SRC_ALPHA_SATURATE: enums.BLEND_SRC_ALPHA_SATURATE,
      NEVER: enums.DS_FUNC_NEVER,
      LESS: enums.DS_FUNC_LESS,
      EQUAL: enums.DS_FUNC_EQUAL,
      LEQUAL: enums.DS_FUNC_LEQUAL,
      GREATER: enums.DS_FUNC_GREATER,
      NOTEQUAL: enums.DS_FUNC_NOTEQUAL,
      GEQUAL: enums.DS_FUNC_GEQUAL,
      ALWAYS: enums.DS_FUNC_ALWAYS,
      KEEP: enums.STENCIL_OP_KEEP,
      REPLACE: enums.STENCIL_OP_REPLACE,
      INCR: enums.STENCIL_OP_INCR,
      INCR_WRAP: enums.STENCIL_OP_INCR_WRAP,
      DECR: enums.STENCIL_OP_DECR,
      DECR_WRAP: enums.STENCIL_OP_DECR_WRAP,
      INVERT: enums.STENCIL_OP_INVERT
    };
    Object.assign(passParams, RenderPassStage);
    var effectStructure = {
      $techniques: [ {
        $passes: [ {
          depthStencilState: {},
          rasterizerState: {},
          blendState: {
            targets: [ {} ]
          },
          properties: {
            any: {
              sampler: {},
              inspector: {}
            }
          }
        } ]
      } ]
    };
    var mappings = {
      murmurhash2_32_gc: murmurhash2_32_gc,
      SamplerInfoIndex: SamplerInfoIndex,
      effectStructure: effectStructure,
      typeMap: typeMap,
      sizeMap: sizeMap,
      formatMap: formatMap,
      passParams: passParams,
      RenderQueue: RenderQueue,
      RenderPriority: RenderPriority,
      GFXGetTypeSize: GFXGetTypeSize,
      UniformBinding: UniformBinding
    };
    module.exports = mappings;
  }), {} ],
  241: [ (function(require, module, exports) {
    "use strict";
    exports.__esModule = true;
    exports["default"] = void 0;
    var _memop = require("../memop");
    var _enums = _interopRequireDefault(require("../enums"));
    var _valueTypes = require("../../core/value-types");
    var _programLib = _interopRequireDefault(require("./program-lib"));
    var _view = _interopRequireDefault(require("./view"));
    var _gfx = _interopRequireDefault(require("../gfx"));
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }
    var _m4_tmp = new _valueTypes.Mat4();
    var _stageInfos = new _memop.RecyclePool(function() {
      return {
        stage: null,
        items: null
      };
    }, 8);
    var _float2_pool = new _memop.RecyclePool(function() {
      return new Float32Array(2);
    }, 8);
    var _float3_pool = new _memop.RecyclePool(function() {
      return new Float32Array(3);
    }, 8);
    var _float4_pool = new _memop.RecyclePool(function() {
      return new Float32Array(4);
    }, 8);
    var _float9_pool = new _memop.RecyclePool(function() {
      return new Float32Array(9);
    }, 8);
    var _float16_pool = new _memop.RecyclePool(function() {
      return new Float32Array(16);
    }, 8);
    var _float64_pool = new _memop.RecyclePool(function() {
      return new Float32Array(64);
    }, 8);
    var _int2_pool = new _memop.RecyclePool(function() {
      return new Int32Array(2);
    }, 8);
    var _int3_pool = new _memop.RecyclePool(function() {
      return new Int32Array(3);
    }, 8);
    var _int4_pool = new _memop.RecyclePool(function() {
      return new Int32Array(4);
    }, 8);
    var _int64_pool = new _memop.RecyclePool(function() {
      return new Int32Array(64);
    }, 8);
    var Base = (function() {
      function Base(device, opts) {
        var _this$_type2defaultVa;
        this._device = device;
        this._programLib = new _programLib["default"](device);
        this._opts = opts;
        this._type2defaultValue = (_this$_type2defaultVa = {}, _this$_type2defaultVa[_enums["default"].PARAM_INT] = 0, 
        _this$_type2defaultVa[_enums["default"].PARAM_INT2] = new _valueTypes.Vec2(0, 0), 
        _this$_type2defaultVa[_enums["default"].PARAM_INT3] = new _valueTypes.Vec3(0, 0, 0), 
        _this$_type2defaultVa[_enums["default"].PARAM_INT4] = new _valueTypes.Vec4(0, 0, 0, 0), 
        _this$_type2defaultVa[_enums["default"].PARAM_FLOAT] = 0, _this$_type2defaultVa[_enums["default"].PARAM_FLOAT2] = new _valueTypes.Vec2(0, 0), 
        _this$_type2defaultVa[_enums["default"].PARAM_FLOAT3] = new _valueTypes.Vec3(0, 0, 0), 
        _this$_type2defaultVa[_enums["default"].PARAM_FLOAT4] = new _valueTypes.Vec4(0, 0, 0, 0), 
        _this$_type2defaultVa[_enums["default"].PARAM_COLOR4] = new _valueTypes.Color(0, 0, 0, 1), 
        _this$_type2defaultVa[_enums["default"].PARAM_MAT3] = new _valueTypes.Mat3(), _this$_type2defaultVa[_enums["default"].PARAM_MAT4] = new _valueTypes.Mat4(), 
        _this$_type2defaultVa[_enums["default"].PARAM_TEXTURE_2D] = opts.defaultTexture, 
        _this$_type2defaultVa[_enums["default"].PARAM_TEXTURE_CUBE] = opts.defaultTextureCube, 
        _this$_type2defaultVa);
        this._stage2fn = {};
        this._usedTextureUnits = 0;
        this._viewPools = new _memop.RecyclePool(function() {
          return new _view["default"]();
        }, 8);
        this._drawItemsPools = new _memop.RecyclePool(function() {
          return {
            model: null,
            node: null,
            ia: null,
            effect: null,
            defines: null,
            uniforms: null
          };
        }, 100);
        this._stageItemsPools = new _memop.RecyclePool(function() {
          return new _memop.RecyclePool(function() {
            return {
              model: null,
              node: null,
              ia: null,
              effect: null,
              defines: null,
              passes: [],
              sortKey: -1,
              uniforms: null
            };
          }, 100);
        }, 16);
      }
      var _proto = Base.prototype;
      _proto._resetTextuerUnit = function _resetTextuerUnit() {
        this._usedTextureUnits = 0;
      };
      _proto._allocTextureUnit = function _allocTextureUnit() {
        var device = this._device;
        var unit = this._usedTextureUnits;
        unit >= device._caps.maxTextureUnits && console.warn("Trying to use " + unit + " texture units while this GPU supports only " + device._caps.maxTextureUnits);
        this._usedTextureUnits += 1;
        return unit;
      };
      _proto._registerStage = function _registerStage(name, fn) {
        this._stage2fn[name] = fn;
      };
      _proto.clear = function clear() {
        this._programLib.clear();
        this.reset();
      };
      _proto.reset = function reset() {
        this._viewPools.reset();
        this._stageItemsPools.reset();
      };
      _proto._requestView = function _requestView() {
        return this._viewPools.add();
      };
      _proto._render = function _render(view, scene) {
        var device = this._device;
        device.setFrameBuffer(view._framebuffer);
        device.setViewport(view._rect.x, view._rect.y, view._rect.w, view._rect.h);
        var clearOpts = {};
        view._clearFlags & _enums["default"].CLEAR_COLOR && (clearOpts.color = _valueTypes.Vec4.toArray([], view._color));
        view._clearFlags & _enums["default"].CLEAR_DEPTH && (clearOpts.depth = view._depth);
        view._clearFlags & _enums["default"].CLEAR_STENCIL && (clearOpts.stencil = view._stencil);
        device.clear(clearOpts);
        this._drawItemsPools.reset();
        for (var i = 0; i < scene._models.length; ++i) {
          var model = scene._models.data[i];
          if (0 === (model._cullingMask & view._cullingMask)) continue;
          var drawItem = this._drawItemsPools.add();
          model.extractDrawItem(drawItem);
        }
        _stageInfos.reset();
        for (var _i = 0; _i < view._stages.length; ++_i) {
          var stage = view._stages[_i];
          var stageItems = this._stageItemsPools.add();
          stageItems.reset();
          for (var j = 0; j < this._drawItemsPools.length; ++j) {
            var _drawItem = this._drawItemsPools.data[j];
            var passes = _drawItem.effect.stagePasses[stage];
            if (!passes || 0 === passes.length) continue;
            var stageItem = stageItems.add();
            stageItem.passes = passes;
            stageItem.model = _drawItem.model;
            stageItem.node = _drawItem.node;
            stageItem.ia = _drawItem.ia;
            stageItem.effect = _drawItem.effect;
            stageItem.defines = _drawItem.defines;
            stageItem.sortKey = -1;
            stageItem.uniforms = _drawItem.uniforms;
          }
          var stageInfo = _stageInfos.add();
          stageInfo.stage = stage;
          stageInfo.items = stageItems;
        }
        for (var _i2 = 0; _i2 < _stageInfos.length; ++_i2) {
          var info = _stageInfos.data[_i2];
          var fn = this._stage2fn[info.stage];
          fn(view, info.items);
        }
      };
      _proto._setProperty = function _setProperty(prop) {
        var device = this._device;
        var param = prop.value;
        void 0 === param && (param = prop.val);
        void 0 === param && (param = this._type2defaultValue[prop.type]);
        if (void 0 === param) {
          console.warn("Failed to set technique property " + prop.name + ", value not found.");
          return;
        }
        if (prop.type === _enums["default"].PARAM_TEXTURE_2D || prop.type === _enums["default"].PARAM_TEXTURE_CUBE) if (Array.isArray(param)) {
          if (param.length > prop.count) {
            console.error("Failed to set property [" + prop.name + "] : The length of texture array [" + param.length + "] is bigger than [" + prop.count + "].");
            return;
          }
          var slots = _int64_pool.add();
          for (var index = 0; index < param.length; ++index) slots[index] = this._allocTextureUnit();
          device.setTextureArray(prop.name, param, slots);
        } else device.setTexture(prop.name, param, this._allocTextureUnit()); else prop.directly ? device.setUniformDirectly(prop.name, param) : device.setUniform(prop.name, param);
      };
      _proto._draw = function _draw(item) {
        var device = this._device;
        var programLib = this._programLib;
        var node = item.node, ia = item.ia, passes = item.passes, effect = item.effect;
        _float2_pool.reset();
        _float3_pool.reset();
        _float4_pool.reset();
        _float9_pool.reset();
        _float16_pool.reset();
        _float64_pool.reset();
        _int2_pool.reset();
        _int3_pool.reset();
        _int4_pool.reset();
        _int64_pool.reset();
        node.getWorldMatrix(_m4_tmp);
        device.setUniform("cc_matWorld", _valueTypes.Mat4.toArray(_float16_pool.add(), _m4_tmp));
        _valueTypes.Mat4.invert(_m4_tmp, _m4_tmp);
        _valueTypes.Mat4.transpose(_m4_tmp, _m4_tmp);
        device.setUniform("cc_matWorldIT", _valueTypes.Mat4.toArray(_float16_pool.add(), _m4_tmp));
        var defines = this._defines;
        for (var i = 0; i < passes.length; ++i) {
          var pass = passes[i];
          var count = ia.count;
          ia._vertexBuffer && device.setVertexBuffer(0, ia._vertexBuffer);
          ia._indexBuffer && device.setIndexBuffer(ia._indexBuffer);
          device.setPrimitiveType(ia._primitiveType);
          Object.setPrototypeOf(defines, pass._defines);
          var program = programLib.getProgram(pass._programName, defines, effect.name);
          device.setProgram(program);
          var uniforms = program._uniforms;
          var variants = pass._properties;
          for (var j = 0; j < uniforms.length; j++) {
            var prop = variants[uniforms[j].name];
            void 0 !== prop && this._setProperty(prop);
          }
          device.setCullMode(pass._cullMode);
          if (pass._blend) {
            device.enableBlend();
            device.setBlendFuncSep(pass._blendSrc, pass._blendDst, pass._blendSrcAlpha, pass._blendDstAlpha);
            device.setBlendEqSep(pass._blendEq, pass._blendAlphaEq);
            device.setBlendColor32(pass._blendColor);
          }
          if (pass._depthTest) {
            device.enableDepthTest();
            device.setDepthFunc(pass._depthFunc);
          }
          pass._depthWrite && device.enableDepthWrite();
          device.setStencilTest(pass._stencilTest);
          if (pass._stencilTest === _gfx["default"].STENCIL_ENABLE) {
            device.setStencilFuncFront(pass._stencilFuncFront, pass._stencilRefFront, pass._stencilMaskFront);
            device.setStencilOpFront(pass._stencilFailOpFront, pass._stencilZFailOpFront, pass._stencilZPassOpFront, pass._stencilWriteMaskFront);
            device.setStencilFuncBack(pass._stencilFuncBack, pass._stencilRefBack, pass._stencilMaskBack);
            device.setStencilOpBack(pass._stencilFailOpBack, pass._stencilZFailOpBack, pass._stencilZPassOpBack, pass._stencilWriteMaskBack);
          }
          device.draw(ia._start, count);
          this._resetTextuerUnit();
        }
      };
      return Base;
    })();
    exports["default"] = Base;
    module.exports = exports["default"];
  }), {
    "../../core/value-types": 225,
    "../enums": 247,
    "../gfx": 252,
    "../memop": 264,
    "./program-lib": 244,
    "./view": 246
  } ],
  242: [ (function(require, module, exports) {
    "use strict";
    exports.__esModule = true;
    exports["default"] = void 0;
    var _gfx = _interopRequireDefault(require("../gfx"));
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        "value" in descriptor && (descriptor.writable = true);
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      protoProps && _defineProperties(Constructor.prototype, protoProps);
      staticProps && _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    var InputAssembler = (function() {
      function InputAssembler(vb, ib, pt) {
        void 0 === pt && (pt = _gfx["default"].PT_TRIANGLES);
        this._vertexBuffer = vb;
        this._indexBuffer = ib;
        this._primitiveType = pt;
        this._start = 0;
        this._count = -1;
      }
      _createClass(InputAssembler, [ {
        key: "count",
        get: function get() {
          if (-1 !== this._count) return this._count;
          if (this._indexBuffer) return this._indexBuffer.count;
          if (this._vertexBuffer) return this._vertexBuffer.count;
          return 0;
        }
      } ]);
      return InputAssembler;
    })();
    exports["default"] = InputAssembler;
    module.exports = exports["default"];
  }), {
    "../gfx": 252
  } ],
  243: [ (function(require, module, exports) {
    "use strict";
    exports.__esModule = true;
    exports["default"] = void 0;
    var _gfx = _interopRequireDefault(require("../gfx"));
    var _enums = _interopRequireDefault(require("../enums"));
    var _valueType = _interopRequireDefault(require("../../core/value-types/value-type"));
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }
    var Pass = (function() {
      function Pass(name, detailName, programName, stage, properties, defines) {
        void 0 === properties && (properties = {});
        void 0 === defines && (defines = {});
        this._name = name;
        this._detailName = detailName;
        this._programName = programName;
        this._stage = stage;
        this._properties = properties;
        this._defines = defines;
        this._cullMode = _gfx["default"].CULL_BACK;
        this._blend = false;
        this._blendEq = _gfx["default"].BLEND_FUNC_ADD;
        this._blendAlphaEq = _gfx["default"].BLEND_FUNC_ADD;
        this._blendSrc = _gfx["default"].BLEND_SRC_ALPHA;
        this._blendDst = _gfx["default"].BLEND_ONE_MINUS_SRC_ALPHA;
        this._blendSrcAlpha = _gfx["default"].BLEND_SRC_ALPHA;
        this._blendDstAlpha = _gfx["default"].BLEND_ONE_MINUS_SRC_ALPHA;
        this._blendColor = 4294967295;
        this._depthTest = false;
        this._depthWrite = false;
        this._depthFunc = _gfx["default"].DS_FUNC_LESS, this._stencilTest = _gfx["default"].STENCIL_INHERIT;
        this._stencilFuncFront = _gfx["default"].DS_FUNC_ALWAYS;
        this._stencilRefFront = 0;
        this._stencilMaskFront = 255;
        this._stencilFailOpFront = _gfx["default"].STENCIL_OP_KEEP;
        this._stencilZFailOpFront = _gfx["default"].STENCIL_OP_KEEP;
        this._stencilZPassOpFront = _gfx["default"].STENCIL_OP_KEEP;
        this._stencilWriteMaskFront = 255;
        this._stencilFuncBack = _gfx["default"].DS_FUNC_ALWAYS;
        this._stencilRefBack = 0;
        this._stencilMaskBack = 255;
        this._stencilFailOpBack = _gfx["default"].STENCIL_OP_KEEP;
        this._stencilZFailOpBack = _gfx["default"].STENCIL_OP_KEEP;
        this._stencilZPassOpBack = _gfx["default"].STENCIL_OP_KEEP;
        this._stencilWriteMaskBack = 255;
      }
      var _proto = Pass.prototype;
      _proto.setCullMode = function setCullMode(cullMode) {
        void 0 === cullMode && (cullMode = _gfx["default"].CULL_BACK);
        this._cullMode = cullMode;
      };
      _proto.setBlend = function setBlend(enabled, blendEq, blendSrc, blendDst, blendAlphaEq, blendSrcAlpha, blendDstAlpha, blendColor) {
        void 0 === enabled && (enabled = false);
        void 0 === blendEq && (blendEq = _gfx["default"].BLEND_FUNC_ADD);
        void 0 === blendSrc && (blendSrc = _gfx["default"].BLEND_SRC_ALPHA);
        void 0 === blendDst && (blendDst = _gfx["default"].BLEND_ONE_MINUS_SRC_ALPHA);
        void 0 === blendAlphaEq && (blendAlphaEq = _gfx["default"].BLEND_FUNC_ADD);
        void 0 === blendSrcAlpha && (blendSrcAlpha = _gfx["default"].BLEND_SRC_ALPHA);
        void 0 === blendDstAlpha && (blendDstAlpha = _gfx["default"].BLEND_ONE_MINUS_SRC_ALPHA);
        void 0 === blendColor && (blendColor = 4294967295);
        this._blend = enabled;
        this._blendEq = blendEq;
        this._blendSrc = blendSrc;
        this._blendDst = blendDst;
        this._blendAlphaEq = blendAlphaEq;
        this._blendSrcAlpha = blendSrcAlpha;
        this._blendDstAlpha = blendDstAlpha;
        this._blendColor = blendColor;
      };
      _proto.setDepth = function setDepth(depthTest, depthWrite, depthFunc) {
        void 0 === depthTest && (depthTest = false);
        void 0 === depthWrite && (depthWrite = false);
        void 0 === depthFunc && (depthFunc = _gfx["default"].DS_FUNC_LESS);
        this._depthTest = depthTest;
        this._depthWrite = depthWrite;
        this._depthFunc = depthFunc;
      };
      _proto.setStencilFront = function setStencilFront(enabled, stencilFunc, stencilRef, stencilMask, stencilFailOp, stencilZFailOp, stencilZPassOp, stencilWriteMask) {
        void 0 === enabled && (enabled = _gfx["default"].STENCIL_INHERIT);
        void 0 === stencilFunc && (stencilFunc = _gfx["default"].DS_FUNC_ALWAYS);
        void 0 === stencilRef && (stencilRef = 0);
        void 0 === stencilMask && (stencilMask = 255);
        void 0 === stencilFailOp && (stencilFailOp = _gfx["default"].STENCIL_OP_KEEP);
        void 0 === stencilZFailOp && (stencilZFailOp = _gfx["default"].STENCIL_OP_KEEP);
        void 0 === stencilZPassOp && (stencilZPassOp = _gfx["default"].STENCIL_OP_KEEP);
        void 0 === stencilWriteMask && (stencilWriteMask = 255);
        this._stencilTest = enabled;
        this._stencilFuncFront = stencilFunc;
        this._stencilRefFront = stencilRef;
        this._stencilMaskFront = stencilMask;
        this._stencilFailOpFront = stencilFailOp;
        this._stencilZFailOpFront = stencilZFailOp;
        this._stencilZPassOpFront = stencilZPassOp;
        this._stencilWriteMaskFront = stencilWriteMask;
      };
      _proto.setStencilEnabled = function setStencilEnabled(stencilTest) {
        void 0 === stencilTest && (stencilTest = _gfx["default"].STENCIL_INHERIT);
        this._stencilTest = stencilTest;
      };
      _proto.setStencilBack = function setStencilBack(stencilTest, stencilFunc, stencilRef, stencilMask, stencilFailOp, stencilZFailOp, stencilZPassOp, stencilWriteMask) {
        void 0 === stencilTest && (stencilTest = _gfx["default"].STENCIL_INHERIT);
        void 0 === stencilFunc && (stencilFunc = _gfx["default"].DS_FUNC_ALWAYS);
        void 0 === stencilRef && (stencilRef = 0);
        void 0 === stencilMask && (stencilMask = 255);
        void 0 === stencilFailOp && (stencilFailOp = _gfx["default"].STENCIL_OP_KEEP);
        void 0 === stencilZFailOp && (stencilZFailOp = _gfx["default"].STENCIL_OP_KEEP);
        void 0 === stencilZPassOp && (stencilZPassOp = _gfx["default"].STENCIL_OP_KEEP);
        void 0 === stencilWriteMask && (stencilWriteMask = 255);
        this._stencilTest = stencilTest;
        this._stencilFuncBack = stencilFunc;
        this._stencilRefBack = stencilRef;
        this._stencilMaskBack = stencilMask;
        this._stencilFailOpBack = stencilFailOp;
        this._stencilZFailOpBack = stencilZFailOp;
        this._stencilZPassOpBack = stencilZPassOp;
        this._stencilWriteMaskBack = stencilWriteMask;
      };
      _proto.setStage = function setStage(stage) {
        this._stage = stage;
      };
      _proto.setProperties = function setProperties(properties) {
        this._properties = properties;
      };
      _proto.getProperty = function getProperty(name) {
        if (!this._properties[name]) return;
        return this._properties[name].value;
      };
      _proto.setProperty = function setProperty(name, value, directly) {
        var prop = this._properties[name];
        if (!prop) return false;
        prop.directly = directly;
        if (Array.isArray(value)) {
          var array = prop.value;
          if (array.length !== value.length) {
            cc.warnID(9105, this._name, name);
            return;
          }
          for (var i = 0; i < value.length; i++) array[i] = value[i];
        } else if (value && !ArrayBuffer.isView(value)) if (prop.type === _enums["default"].PARAM_TEXTURE_2D) prop.value = value.getImpl(); else if (value instanceof _valueType["default"]) value.constructor.toArray(prop.value, value); else {
          "object" === typeof value && cc.warnID(9106, this._name, name);
          prop.value = value;
        } else prop.value = value;
        return true;
      };
      _proto.getDefine = function getDefine(name) {
        return this._defines[name];
      };
      _proto.define = function define(name, value, force) {
        if (!force) {
          var def = this._defines[name];
          if (void 0 === def) return false;
        }
        this._defines[name] = value;
        return true;
      };
      _proto.clone = function clone() {
        var pass = new Pass(this._programName);
        Object.assign(pass, this);
        var newProperties = {};
        var properties = this._properties;
        for (var name in properties) {
          var prop = properties[name];
          var newProp = newProperties[name] = {};
          var value = prop.value;
          Array.isArray(value) ? newProp.value = value.concat() : ArrayBuffer.isView(value) ? newProp.value = new value.__proto__.constructor(value) : newProp.value = value;
          for (var _name in prop) {
            if ("value" === _name) continue;
            newProp[_name] = prop[_name];
          }
        }
        pass._properties = newProperties;
        pass._defines = Object.assign({}, this._defines);
        return pass;
      };
      return Pass;
    })();
    exports["default"] = Pass;
    module.exports = exports["default"];
  }), {
    "../../core/value-types/value-type": 233,
    "../enums": 247,
    "../gfx": 252
  } ],
  244: [ (function(require, module, exports) {
    "use strict";
    exports.__esModule = true;
    exports["default"] = void 0;
    var _gfx = _interopRequireDefault(require("../gfx"));
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }
    var _shdID = 0;
    function _generateDefines(tmpDefines, defines) {
      var results = [];
      for (var i = 0; i < tmpDefines.length; i++) {
        var name = tmpDefines[i].name;
        var value = defines[name];
        "number" !== typeof value && (value = value ? 1 : 0);
        results.push("#define " + name + " " + value);
      }
      return results.join("\n") + "\n";
    }
    function _replaceMacroNums(string, tmpDefines, defines) {
      var tmp = string;
      for (var i = 0; i < tmpDefines.length; i++) {
        var name = tmpDefines[i].name;
        var value = defines[name];
        if (Number.isInteger(value)) {
          var reg = new RegExp(name, "g");
          tmp = tmp.replace(reg, value);
        }
      }
      return tmp;
    }
    function _unrollLoops(string) {
      var pattern = /#pragma for (\w+) in range\(\s*(\d+)\s*,\s*(\d+)\s*\)([\s\S]+?)#pragma endFor/g;
      function replace(match, index, begin, end, snippet) {
        var unroll = "";
        var parsedBegin = parseInt(begin);
        var parsedEnd = parseInt(end);
        (parsedBegin.isNaN || parsedEnd.isNaN) && console.error("Unroll For Loops Error: begin and end of range must be an int num.");
        for (var i = parsedBegin; i < parsedEnd; ++i) unroll += snippet.replace(new RegExp("{" + index + "}", "g"), i);
        return unroll;
      }
      return string.replace(pattern, replace);
    }
    function _replaceHighp(string) {
      return string.replace(/\bhighp\b/g, "mediump");
    }
    var ProgramLib = (function() {
      function ProgramLib(device) {
        this._device = device;
        this._templates = {};
        this._cache = {};
        this._checkPrecision();
      }
      var _proto = ProgramLib.prototype;
      _proto.clear = function clear() {
        this._templates = {};
        this._cache = {};
      };
      _proto.define = function define(prog) {
        var name = prog.name, defines = prog.defines, glsl1 = prog.glsl1;
        var _ref = glsl1 || prog, vert = _ref.vert, frag = _ref.frag;
        if (this._templates[name]) return;
        var id = ++_shdID;
        var offset = 0;
        for (var i = 0; i < defines.length; ++i) {
          var def = defines[i];
          var cnt = 1;
          if ("number" === def.type) {
            var range = def.range || [];
            def.min = range[0] || 0;
            def.max = range[1] || 4;
            cnt = Math.ceil(Math.log2(def.max - def.min));
            def._map = function(value) {
              return value - this.min << this._offset;
            }.bind(def);
          } else def._map = function(value) {
            if (value) return 1 << this._offset;
            return 0;
          }.bind(def);
          def._offset = offset;
          offset += cnt;
        }
        var uniforms = prog.uniforms || [];
        if (prog.samplers) for (var _i = 0; _i < prog.samplers.length; _i++) uniforms.push(prog.samplers[_i]);
        if (prog.blocks) for (var _i2 = 0; _i2 < prog.blocks.length; _i2++) {
          var _defines = prog.blocks[_i2].defines;
          var members = prog.blocks[_i2].members;
          for (var j = 0; j < members.length; j++) uniforms.push({
            defines: _defines,
            name: members[j].name,
            type: members[j].type
          });
        }
        this._templates[name] = {
          id: id,
          name: name,
          vert: vert,
          frag: frag,
          defines: defines,
          attributes: prog.attributes,
          uniforms: uniforms,
          extensions: prog.extensions
        };
      };
      _proto.getTemplate = function getTemplate(name) {
        return this._templates[name];
      };
      _proto.hasProgram = function hasProgram(name) {
        return void 0 !== this._templates[name];
      };
      _proto.getKey = function getKey(name, defines) {
        var tmpl = this._templates[name];
        var key = 0;
        for (var i = 0; i < tmpl.defines.length; ++i) {
          var tmplDefs = tmpl.defines[i];
          var value = defines[tmplDefs.name];
          if (void 0 === value) continue;
          key |= tmplDefs._map(value);
        }
        return tmpl.id + ":" + key;
      };
      _proto.getProgram = function getProgram(name, defines, errPrefix) {
        var key = this.getKey(name, defines);
        var program = this._cache[key];
        if (program) return program;
        var tmpl = this._templates[name];
        var customDef = _generateDefines(tmpl.defines, defines);
        var vert = _replaceMacroNums(tmpl.vert, tmpl.defines, defines);
        vert = customDef + _unrollLoops(vert);
        this._highpSupported || (vert = _replaceHighp(vert));
        var frag = _replaceMacroNums(tmpl.frag, tmpl.defines, defines);
        frag = customDef + _unrollLoops(frag);
        this._highpSupported || (frag = _replaceHighp(frag));
        program = new _gfx["default"].Program(this._device, {
          vert: vert,
          frag: frag
        });
        var errors = program.link();
        if (errors) {
          var vertLines = vert.split("\n");
          var fragLines = frag.split("\n");
          var defineLength = tmpl.defines.length;
          errors.forEach((function(err) {
            var line = err.line - 1;
            var originLine = err.line - defineLength;
            var lines = "vs" === err.type ? vertLines : fragLines;
            var source = lines[line];
            var info = err.info || "Failed to compile " + err.type + " " + err.fileID + " (ln " + originLine + "): \n " + err.message + ": \n  " + source;
            cc.error(errPrefix + " : " + info);
          }));
        }
        this._cache[key] = program;
        return program;
      };
      _proto._checkPrecision = function _checkPrecision() {
        var gl = this._device._gl;
        var highpSupported = false;
        if (gl.getShaderPrecisionFormat) {
          var vertHighp = gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.HIGH_FLOAT);
          var fragHighp = gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.HIGH_FLOAT);
          highpSupported = vertHighp && vertHighp.precision > 0 && fragHighp && fragHighp.precision > 0;
        }
        highpSupported || cc.warnID(9102);
        this._highpSupported = highpSupported;
      };
      return ProgramLib;
    })();
    exports["default"] = ProgramLib;
    module.exports = exports["default"];
  }), {
    "../gfx": 252
  } ],
  245: [ (function(require, module, exports) {
    "use strict";
    exports.__esModule = true;
    exports["default"] = void 0;
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        "value" in descriptor && (descriptor.writable = true);
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      protoProps && _defineProperties(Constructor.prototype, protoProps);
      staticProps && _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    var Technique = (function() {
      function Technique(name, passes) {
        this._name = name;
        this._passes = passes;
      }
      var _proto = Technique.prototype;
      _proto.clone = function clone() {
        var passes = [];
        for (var i = 0; i < this._passes.length; i++) passes.push(this._passes[i].clone());
        return new Technique(this._name, passes);
      };
      _createClass(Technique, [ {
        key: "name",
        get: function get() {
          return this._name;
        }
      }, {
        key: "passes",
        get: function get() {
          return this._passes;
        }
      } ]);
      return Technique;
    })();
    exports["default"] = Technique;
    module.exports = exports["default"];
  }), {} ],
  246: [ (function(require, module, exports) {
    "use strict";
    exports.__esModule = true;
    exports["default"] = void 0;
    var _valueTypes = require("../../core/value-types");
    var _enums = _interopRequireDefault(require("../enums"));
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }
    var _m4_tmp = new _valueTypes.Mat4();
    var _genID = 0;
    var View = (function() {
      function View() {
        this._id = _genID++;
        this._priority = 0;
        this._rect = {
          x: 0,
          y: 0,
          w: 1,
          h: 1
        };
        this._color = new _valueTypes.Vec4(.3, .3, .3, 1);
        this._depth = 1;
        this._stencil = 0;
        this._clearFlags = _enums["default"].CLEAR_COLOR | _enums["default"].CLEAR_DEPTH;
        this._clearModel = null;
        this._matView = cc.mat4();
        this._matViewInv = cc.mat4();
        this._matProj = cc.mat4();
        this._matViewProj = cc.mat4();
        this._matInvViewProj = cc.mat4();
        this._stages = [];
        this._cullingByID = false;
        this._framebuffer = null;
        this._shadowLight = null;
        this._cullingMask = 4294967295;
      }
      var _proto = View.prototype;
      _proto.getForward = function getForward(out) {
        var m = this._matView.m;
        return _valueTypes.Vec3.set(out, -m[2], -m[6], -m[10]);
      };
      _proto.getPosition = function getPosition(out) {
        _valueTypes.Mat4.invert(_m4_tmp, this._matView);
        return _valueTypes.Mat4.getTranslation(out, _m4_tmp);
      };
      return View;
    })();
    exports["default"] = View;
    module.exports = exports["default"];
  }), {
    "../../core/value-types": 225,
    "../enums": 247
  } ],
  247: [ (function(require, module, exports) {
    "use strict";
    exports.__esModule = true;
    exports["default"] = void 0;
    var _mappings = require("./build/mappings");
    var _default = {
      PROJ_PERSPECTIVE: 0,
      PROJ_ORTHO: 1,
      LIGHT_DIRECTIONAL: 0,
      LIGHT_POINT: 1,
      LIGHT_SPOT: 2,
      LIGHT_AMBIENT: 3,
      SHADOW_NONE: 0,
      SHADOW_HARD: 1,
      SHADOW_SOFT: 2,
      PARAM_INT: _mappings.typeMap["int"],
      PARAM_INT2: _mappings.typeMap.ivec2,
      PARAM_INT3: _mappings.typeMap.ivec3,
      PARAM_INT4: _mappings.typeMap.ivec4,
      PARAM_FLOAT: _mappings.typeMap["float"],
      PARAM_FLOAT2: _mappings.typeMap.vec2,
      PARAM_FLOAT3: _mappings.typeMap.vec3,
      PARAM_FLOAT4: _mappings.typeMap.vec4,
      PARAM_MAT2: _mappings.typeMap.mat2,
      PARAM_MAT3: _mappings.typeMap.mat3,
      PARAM_MAT4: _mappings.typeMap.mat4,
      PARAM_TEXTURE_2D: _mappings.typeMap.sampler2D,
      PARAM_TEXTURE_CUBE: _mappings.typeMap.samplerCube,
      CLEAR_COLOR: 1,
      CLEAR_DEPTH: 2,
      CLEAR_STENCIL: 4,
      CLEAR_SKYBOX: 8,
      BUFFER_VIEW_INT8: 0,
      BUFFER_VIEW_UINT8: 1,
      BUFFER_VIEW_INT16: 2,
      BUFFER_VIEW_UINT16: 3,
      BUFFER_VIEW_INT32: 4,
      BUFFER_VIEW_UINT32: 5,
      BUFFER_VIEW_FLOAT32: 6
    };
    exports["default"] = _default;
    module.exports = exports["default"];
  }), {
    "./build/mappings": 240
  } ],
  248: [ (function(require, module, exports) {
    "use strict";
    exports.__esModule = true;
    exports["default"] = void 0;
    var _state = _interopRequireDefault(require("./state"));
    var _enums = require("./enums");
    var _texture2d = _interopRequireDefault(require("./texture-2d"));
    var _textureCube = _interopRequireDefault(require("./texture-cube"));
    var _type2uniformCommit2, _type2uniformArrayCom;
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        "value" in descriptor && (descriptor.writable = true);
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      protoProps && _defineProperties(Constructor.prototype, protoProps);
      staticProps && _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    var GL_INT = 5124;
    var GL_FLOAT = 5126;
    var GL_FLOAT_VEC2 = 35664;
    var GL_FLOAT_VEC3 = 35665;
    var GL_FLOAT_VEC4 = 35666;
    var GL_INT_VEC2 = 35667;
    var GL_INT_VEC3 = 35668;
    var GL_INT_VEC4 = 35669;
    var GL_BOOL = 35670;
    var GL_BOOL_VEC2 = 35671;
    var GL_BOOL_VEC3 = 35672;
    var GL_BOOL_VEC4 = 35673;
    var GL_FLOAT_MAT2 = 35674;
    var GL_FLOAT_MAT3 = 35675;
    var GL_FLOAT_MAT4 = 35676;
    var GL_SAMPLER_2D = 35678;
    var GL_SAMPLER_CUBE = 35680;
    var _type2uniformCommit = (_type2uniformCommit2 = {}, _type2uniformCommit2[GL_INT] = function(gl, id, value) {
      gl.uniform1i(id, value);
    }, _type2uniformCommit2[GL_FLOAT] = function(gl, id, value) {
      gl.uniform1f(id, value);
    }, _type2uniformCommit2[GL_FLOAT_VEC2] = function(gl, id, value) {
      gl.uniform2fv(id, value);
    }, _type2uniformCommit2[GL_FLOAT_VEC3] = function(gl, id, value) {
      gl.uniform3fv(id, value);
    }, _type2uniformCommit2[GL_FLOAT_VEC4] = function(gl, id, value) {
      gl.uniform4fv(id, value);
    }, _type2uniformCommit2[GL_INT_VEC2] = function(gl, id, value) {
      gl.uniform2iv(id, value);
    }, _type2uniformCommit2[GL_INT_VEC3] = function(gl, id, value) {
      gl.uniform3iv(id, value);
    }, _type2uniformCommit2[GL_INT_VEC4] = function(gl, id, value) {
      gl.uniform4iv(id, value);
    }, _type2uniformCommit2[GL_BOOL] = function(gl, id, value) {
      gl.uniform1i(id, value);
    }, _type2uniformCommit2[GL_BOOL_VEC2] = function(gl, id, value) {
      gl.uniform2iv(id, value);
    }, _type2uniformCommit2[GL_BOOL_VEC3] = function(gl, id, value) {
      gl.uniform3iv(id, value);
    }, _type2uniformCommit2[GL_BOOL_VEC4] = function(gl, id, value) {
      gl.uniform4iv(id, value);
    }, _type2uniformCommit2[GL_FLOAT_MAT2] = function(gl, id, value) {
      gl.uniformMatrix2fv(id, false, value);
    }, _type2uniformCommit2[GL_FLOAT_MAT3] = function(gl, id, value) {
      gl.uniformMatrix3fv(id, false, value);
    }, _type2uniformCommit2[GL_FLOAT_MAT4] = function(gl, id, value) {
      gl.uniformMatrix4fv(id, false, value);
    }, _type2uniformCommit2[GL_SAMPLER_2D] = function(gl, id, value) {
      gl.uniform1i(id, value);
    }, _type2uniformCommit2[GL_SAMPLER_CUBE] = function(gl, id, value) {
      gl.uniform1i(id, value);
    }, _type2uniformCommit2);
    var _type2uniformArrayCommit = (_type2uniformArrayCom = {}, _type2uniformArrayCom[GL_INT] = function(gl, id, value) {
      gl.uniform1iv(id, value);
    }, _type2uniformArrayCom[GL_FLOAT] = function(gl, id, value) {
      gl.uniform1fv(id, value);
    }, _type2uniformArrayCom[GL_FLOAT_VEC2] = function(gl, id, value) {
      gl.uniform2fv(id, value);
    }, _type2uniformArrayCom[GL_FLOAT_VEC3] = function(gl, id, value) {
      gl.uniform3fv(id, value);
    }, _type2uniformArrayCom[GL_FLOAT_VEC4] = function(gl, id, value) {
      gl.uniform4fv(id, value);
    }, _type2uniformArrayCom[GL_INT_VEC2] = function(gl, id, value) {
      gl.uniform2iv(id, value);
    }, _type2uniformArrayCom[GL_INT_VEC3] = function(gl, id, value) {
      gl.uniform3iv(id, value);
    }, _type2uniformArrayCom[GL_INT_VEC4] = function(gl, id, value) {
      gl.uniform4iv(id, value);
    }, _type2uniformArrayCom[GL_BOOL] = function(gl, id, value) {
      gl.uniform1iv(id, value);
    }, _type2uniformArrayCom[GL_BOOL_VEC2] = function(gl, id, value) {
      gl.uniform2iv(id, value);
    }, _type2uniformArrayCom[GL_BOOL_VEC3] = function(gl, id, value) {
      gl.uniform3iv(id, value);
    }, _type2uniformArrayCom[GL_BOOL_VEC4] = function(gl, id, value) {
      gl.uniform4iv(id, value);
    }, _type2uniformArrayCom[GL_FLOAT_MAT2] = function(gl, id, value) {
      gl.uniformMatrix2fv(id, false, value);
    }, _type2uniformArrayCom[GL_FLOAT_MAT3] = function(gl, id, value) {
      gl.uniformMatrix3fv(id, false, value);
    }, _type2uniformArrayCom[GL_FLOAT_MAT4] = function(gl, id, value) {
      gl.uniformMatrix4fv(id, false, value);
    }, _type2uniformArrayCom[GL_SAMPLER_2D] = function(gl, id, value) {
      gl.uniform1iv(id, value);
    }, _type2uniformArrayCom[GL_SAMPLER_CUBE] = function(gl, id, value) {
      gl.uniform1iv(id, value);
    }, _type2uniformArrayCom);
    function _commitBlendStates(gl, cur, next) {
      if (cur.blend !== next.blend) {
        if (!next.blend) {
          gl.disable(gl.BLEND);
          return;
        }
        gl.enable(gl.BLEND);
        next.blendSrc !== _enums.enums.BLEND_CONSTANT_COLOR && next.blendSrc !== _enums.enums.BLEND_ONE_MINUS_CONSTANT_COLOR && next.blendDst !== _enums.enums.BLEND_CONSTANT_COLOR && next.blendDst !== _enums.enums.BLEND_ONE_MINUS_CONSTANT_COLOR || gl.blendColor((next.blendColor >> 24) / 255, (next.blendColor >> 16 & 255) / 255, (next.blendColor >> 8 & 255) / 255, (255 & next.blendColor) / 255);
        if (next.blendSep) {
          gl.blendFuncSeparate(next.blendSrc, next.blendDst, next.blendSrcAlpha, next.blendDstAlpha);
          gl.blendEquationSeparate(next.blendEq, next.blendAlphaEq);
        } else {
          gl.blendFunc(next.blendSrc, next.blendDst);
          gl.blendEquation(next.blendEq);
        }
        return;
      }
      if (false === next.blend) return;
      cur.blendColor !== next.blendColor && gl.blendColor((next.blendColor >> 24) / 255, (next.blendColor >> 16 & 255) / 255, (next.blendColor >> 8 & 255) / 255, (255 & next.blendColor) / 255);
      if (cur.blendSep !== next.blendSep) {
        if (next.blendSep) {
          gl.blendFuncSeparate(next.blendSrc, next.blendDst, next.blendSrcAlpha, next.blendDstAlpha);
          gl.blendEquationSeparate(next.blendEq, next.blendAlphaEq);
        } else {
          gl.blendFunc(next.blendSrc, next.blendDst);
          gl.blendEquation(next.blendEq);
        }
        return;
      }
      if (next.blendSep) {
        cur.blendSrc === next.blendSrc && cur.blendDst === next.blendDst && cur.blendSrcAlpha === next.blendSrcAlpha && cur.blendDstAlpha === next.blendDstAlpha || gl.blendFuncSeparate(next.blendSrc, next.blendDst, next.blendSrcAlpha, next.blendDstAlpha);
        cur.blendEq === next.blendEq && cur.blendAlphaEq === next.blendAlphaEq || gl.blendEquationSeparate(next.blendEq, next.blendAlphaEq);
      } else {
        cur.blendSrc === next.blendSrc && cur.blendDst === next.blendDst || gl.blendFunc(next.blendSrc, next.blendDst);
        cur.blendEq !== next.blendEq && gl.blendEquation(next.blendEq);
      }
    }
    function _commitDepthStates(gl, cur, next) {
      if (cur.depthTest !== next.depthTest) {
        if (!next.depthTest) {
          gl.disable(gl.DEPTH_TEST);
          return;
        }
        gl.enable(gl.DEPTH_TEST);
        gl.depthFunc(next.depthFunc);
        gl.depthMask(next.depthWrite);
        return;
      }
      cur.depthWrite !== next.depthWrite && gl.depthMask(next.depthWrite);
      if (false === next.depthTest) {
        if (next.depthWrite) {
          next.depthTest = true;
          next.depthFunc = _enums.enums.DS_FUNC_ALWAYS;
          gl.enable(gl.DEPTH_TEST);
          gl.depthFunc(next.depthFunc);
        }
        return;
      }
      cur.depthFunc !== next.depthFunc && gl.depthFunc(next.depthFunc);
    }
    function _commitStencilStates(gl, cur, next) {
      if (next.stencilTest === _enums.enums.STENCIL_INHERIT) return;
      if (next.stencilTest !== cur.stencilTest) {
        if (next.stencilTest === _enums.enums.STENCIL_DISABLE) {
          gl.disable(gl.STENCIL_TEST);
          return;
        }
        gl.enable(gl.STENCIL_TEST);
        if (next.stencilSep) {
          gl.stencilFuncSeparate(gl.FRONT, next.stencilFuncFront, next.stencilRefFront, next.stencilMaskFront);
          gl.stencilMaskSeparate(gl.FRONT, next.stencilWriteMaskFront);
          gl.stencilOpSeparate(gl.FRONT, next.stencilFailOpFront, next.stencilZFailOpFront, next.stencilZPassOpFront);
          gl.stencilFuncSeparate(gl.BACK, next.stencilFuncBack, next.stencilRefBack, next.stencilMaskBack);
          gl.stencilMaskSeparate(gl.BACK, next.stencilWriteMaskBack);
          gl.stencilOpSeparate(gl.BACK, next.stencilFailOpBack, next.stencilZFailOpBack, next.stencilZPassOpBack);
        } else {
          gl.stencilFunc(next.stencilFuncFront, next.stencilRefFront, next.stencilMaskFront);
          gl.stencilMask(next.stencilWriteMaskFront);
          gl.stencilOp(next.stencilFailOpFront, next.stencilZFailOpFront, next.stencilZPassOpFront);
        }
        return;
      }
      if (next.stencilTest === _enums.enums.STENCIL_DISABLE) return;
      if (cur.stencilSep !== next.stencilSep) {
        if (next.stencilSep) {
          gl.stencilFuncSeparate(gl.FRONT, next.stencilFuncFront, next.stencilRefFront, next.stencilMaskFront);
          gl.stencilMaskSeparate(gl.FRONT, next.stencilWriteMaskFront);
          gl.stencilOpSeparate(gl.FRONT, next.stencilFailOpFront, next.stencilZFailOpFront, next.stencilZPassOpFront);
          gl.stencilFuncSeparate(gl.BACK, next.stencilFuncBack, next.stencilRefBack, next.stencilMaskBack);
          gl.stencilMaskSeparate(gl.BACK, next.stencilWriteMaskBack);
          gl.stencilOpSeparate(gl.BACK, next.stencilFailOpBack, next.stencilZFailOpBack, next.stencilZPassOpBack);
        } else {
          gl.stencilFunc(next.stencilFuncFront, next.stencilRefFront, next.stencilMaskFront);
          gl.stencilMask(next.stencilWriteMaskFront);
          gl.stencilOp(next.stencilFailOpFront, next.stencilZFailOpFront, next.stencilZPassOpFront);
        }
        return;
      }
      if (next.stencilSep) {
        cur.stencilFuncFront === next.stencilFuncFront && cur.stencilRefFront === next.stencilRefFront && cur.stencilMaskFront === next.stencilMaskFront || gl.stencilFuncSeparate(gl.FRONT, next.stencilFuncFront, next.stencilRefFront, next.stencilMaskFront);
        cur.stencilWriteMaskFront !== next.stencilWriteMaskFront && gl.stencilMaskSeparate(gl.FRONT, next.stencilWriteMaskFront);
        cur.stencilFailOpFront === next.stencilFailOpFront && cur.stencilZFailOpFront === next.stencilZFailOpFront && cur.stencilZPassOpFront === next.stencilZPassOpFront || gl.stencilOpSeparate(gl.FRONT, next.stencilFailOpFront, next.stencilZFailOpFront, next.stencilZPassOpFront);
        cur.stencilFuncBack === next.stencilFuncBack && cur.stencilRefBack === next.stencilRefBack && cur.stencilMaskBack === next.stencilMaskBack || gl.stencilFuncSeparate(gl.BACK, next.stencilFuncBack, next.stencilRefBack, next.stencilMaskBack);
        cur.stencilWriteMaskBack !== next.stencilWriteMaskBack && gl.stencilMaskSeparate(gl.BACK, next.stencilWriteMaskBack);
        cur.stencilFailOpBack === next.stencilFailOpBack && cur.stencilZFailOpBack === next.stencilZFailOpBack && cur.stencilZPassOpBack === next.stencilZPassOpBack || gl.stencilOpSeparate(gl.BACK, next.stencilFailOpBack, next.stencilZFailOpBack, next.stencilZPassOpBack);
      } else {
        cur.stencilFuncFront === next.stencilFuncFront && cur.stencilRefFront === next.stencilRefFront && cur.stencilMaskFront === next.stencilMaskFront || gl.stencilFunc(next.stencilFuncFront, next.stencilRefFront, next.stencilMaskFront);
        cur.stencilWriteMaskFront !== next.stencilWriteMaskFront && gl.stencilMask(next.stencilWriteMaskFront);
        cur.stencilFailOpFront === next.stencilFailOpFront && cur.stencilZFailOpFront === next.stencilZFailOpFront && cur.stencilZPassOpFront === next.stencilZPassOpFront || gl.stencilOp(next.stencilFailOpFront, next.stencilZFailOpFront, next.stencilZPassOpFront);
      }
    }
    function _commitCullMode(gl, cur, next) {
      if (cur.cullMode === next.cullMode) return;
      if (next.cullMode === _enums.enums.CULL_NONE) {
        gl.disable(gl.CULL_FACE);
        return;
      }
      gl.enable(gl.CULL_FACE);
      gl.cullFace(next.cullMode);
    }
    function _commitVertexBuffers(device, gl, cur, next) {
      var attrsDirty = false;
      if (-1 === next.maxStream) return;
      if (cur.maxStream !== next.maxStream) attrsDirty = true; else if (cur.program !== next.program) attrsDirty = true; else for (var i = 0; i < next.maxStream + 1; ++i) if (cur.vertexBuffers[i] !== next.vertexBuffers[i] || cur.vertexBufferOffsets[i] !== next.vertexBufferOffsets[i]) {
        attrsDirty = true;
        break;
      }
      if (attrsDirty) {
        for (var _i = 0; _i < device._caps.maxVertexAttribs; ++_i) device._newAttributes[_i] = 0;
        for (var _i2 = 0; _i2 < next.maxStream + 1; ++_i2) {
          var vb = next.vertexBuffers[_i2];
          var vbOffset = next.vertexBufferOffsets[_i2];
          if (!vb || -1 === vb._glID) continue;
          gl.bindBuffer(gl.ARRAY_BUFFER, vb._glID);
          for (var j = 0; j < next.program._attributes.length; ++j) {
            var attr = next.program._attributes[j];
            var el = vb._format.element(attr.name);
            if (!el) {
              console.warn("Can not find vertex attribute: " + attr.name);
              continue;
            }
            if (0 === device._enabledAttributes[attr.location]) {
              gl.enableVertexAttribArray(attr.location);
              device._enabledAttributes[attr.location] = 1;
            }
            device._newAttributes[attr.location] = 1;
            gl.vertexAttribPointer(attr.location, el.num, el.type, el.normalize, el.stride, el.offset + vbOffset * el.stride);
          }
        }
        for (var _i3 = 0; _i3 < device._caps.maxVertexAttribs; ++_i3) if (device._enabledAttributes[_i3] !== device._newAttributes[_i3]) {
          gl.disableVertexAttribArray(_i3);
          device._enabledAttributes[_i3] = 0;
        }
      }
    }
    function _commitTextures(gl, cur, next) {
      for (var i = 0; i < next.maxTextureSlot + 1; ++i) if (cur.textureUnits[i] !== next.textureUnits[i]) {
        var texture = next.textureUnits[i];
        if (texture && -1 !== texture._glID) {
          gl.activeTexture(gl.TEXTURE0 + i);
          gl.bindTexture(texture._target, texture._glID);
        }
      }
    }
    function _attach(gl, location, attachment, face) {
      void 0 === face && (face = 0);
      attachment instanceof _texture2d["default"] ? gl.framebufferTexture2D(gl.FRAMEBUFFER, location, gl.TEXTURE_2D, attachment._glID, 0) : attachment instanceof _textureCube["default"] ? gl.framebufferTexture2D(gl.FRAMEBUFFER, location, gl.TEXTURE_CUBE_MAP_POSITIVE_X + face, attachment._glID, 0) : gl.framebufferRenderbuffer(gl.FRAMEBUFFER, location, gl.RENDERBUFFER, attachment._glID);
    }
    var Device = (function() {
      _createClass(Device, [ {
        key: "caps",
        get: function get() {
          return this._caps;
        }
      } ]);
      function Device(canvasEL, opts) {
        var gl;
        opts = opts || {};
        void 0 === opts.alpha && (opts.alpha = false);
        void 0 === opts.stencil && (opts.stencil = true);
        void 0 === opts.depth && (opts.depth = true);
        void 0 === opts.antialias && (opts.antialias = false);
        void 0 === opts.preserveDrawingBuffer && (opts.preserveDrawingBuffer = false);
        try {
          gl = canvasEL.getContext("webgl", opts) || canvasEL.getContext("experimental-webgl", opts) || canvasEL.getContext("webkit-3d", opts) || canvasEL.getContext("moz-webgl", opts);
        } catch (err) {
          console.error(err);
          return;
        }
        gl || console.error("This device does not support webgl");
        this._gl = gl;
        this._extensions = {};
        this._caps = {};
        this._stats = {
          texture: 0,
          vb: 0,
          ib: 0,
          drawcalls: 0
        };
        this._initExtensions([ "EXT_texture_filter_anisotropic", "EXT_shader_texture_lod", "OES_standard_derivatives", "OES_texture_float", "OES_texture_float_linear", "OES_texture_half_float", "OES_texture_half_float_linear", "OES_vertex_array_object", "WEBGL_compressed_texture_atc", "WEBGL_compressed_texture_etc", "WEBGL_compressed_texture_etc1", "WEBGL_compressed_texture_pvrtc", "WEBGL_compressed_texture_s3tc", "WEBGL_depth_texture", "WEBGL_draw_buffers" ]);
        this._initCaps();
        this._initStates();
        _state["default"].initDefault(this);
        this._current = new _state["default"](this);
        this._next = new _state["default"](this);
        this._uniforms = {};
        this._vx = this._vy = this._vw = this._vh = 0;
        this._sx = this._sy = this._sw = this._sh = 0;
        this._framebuffer = null;
        this._enabledAttributes = new Array(this._caps.maxVertexAttribs);
        this._newAttributes = new Array(this._caps.maxVertexAttribs);
        for (var i = 0; i < this._caps.maxVertexAttribs; ++i) {
          this._enabledAttributes[i] = 0;
          this._newAttributes[i] = 0;
        }
      }
      var _proto = Device.prototype;
      _proto._initExtensions = function _initExtensions(extensions) {
        var gl = this._gl;
        for (var i = 0; i < extensions.length; ++i) {
          var name = extensions[i];
          var vendorPrefixes = [ "", "WEBKIT_", "MOZ_" ];
          for (var j = 0; j < vendorPrefixes.length; j++) try {
            var ext = gl.getExtension(vendorPrefixes[j] + name);
            if (ext) {
              this._extensions[name] = ext;
              break;
            }
          } catch (e) {
            console.error(e);
          }
        }
      };
      _proto._initCaps = function _initCaps() {
        var gl = this._gl;
        var extDrawBuffers = this.ext("WEBGL_draw_buffers");
        this._caps.maxVertexStreams = 4;
        this._caps.maxVertexTextures = gl.getParameter(gl.MAX_VERTEX_TEXTURE_IMAGE_UNITS);
        this._caps.maxFragUniforms = gl.getParameter(gl.MAX_FRAGMENT_UNIFORM_VECTORS);
        this._caps.maxTextureUnits = gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS);
        this._caps.maxVertexAttribs = gl.getParameter(gl.MAX_VERTEX_ATTRIBS);
        this._caps.maxTextureSize = gl.getParameter(gl.MAX_TEXTURE_SIZE);
        this._caps.maxDrawBuffers = extDrawBuffers ? gl.getParameter(extDrawBuffers.MAX_DRAW_BUFFERS_WEBGL) : 1;
        this._caps.maxColorAttachments = extDrawBuffers ? gl.getParameter(extDrawBuffers.MAX_COLOR_ATTACHMENTS_WEBGL) : 1;
      };
      _proto._initStates = function _initStates() {
        var gl = this._gl;
        gl.disable(gl.BLEND);
        gl.blendFunc(gl.ONE, gl.ZERO);
        gl.blendEquation(gl.FUNC_ADD);
        gl.blendColor(1, 1, 1, 1);
        gl.colorMask(true, true, true, true);
        gl.enable(gl.CULL_FACE);
        gl.cullFace(gl.BACK);
        gl.disable(gl.DEPTH_TEST);
        gl.depthFunc(gl.LESS);
        gl.depthMask(false);
        gl.disable(gl.POLYGON_OFFSET_FILL);
        gl.depthRange(0, 1);
        gl.disable(gl.STENCIL_TEST);
        gl.stencilFunc(gl.ALWAYS, 0, 255);
        gl.stencilMask(255);
        gl.stencilOp(gl.KEEP, gl.KEEP, gl.KEEP);
        gl.clearDepth(1);
        gl.clearColor(0, 0, 0, 0);
        gl.clearStencil(0);
        gl.disable(gl.SCISSOR_TEST);
      };
      _proto._restoreTexture = function _restoreTexture(unit) {
        var gl = this._gl;
        var texture = this._current.textureUnits[unit];
        texture && -1 !== texture._glID ? gl.bindTexture(texture._target, texture._glID) : gl.bindTexture(gl.TEXTURE_2D, null);
      };
      _proto._restoreIndexBuffer = function _restoreIndexBuffer() {
        var gl = this._gl;
        var ib = this._current.indexBuffer;
        ib && -1 !== ib._glID ? gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, ib._glID) : gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);
      };
      _proto.ext = function ext(name) {
        return this._extensions[name];
      };
      _proto.allowFloatTexture = function allowFloatTexture() {
        return null != this.ext("OES_texture_float");
      };
      _proto.setFrameBuffer = function setFrameBuffer(fb) {
        if (this._framebuffer === fb) return;
        this._framebuffer = fb;
        var gl = this._gl;
        if (!fb) {
          gl.bindFramebuffer(gl.FRAMEBUFFER, null);
          return;
        }
        gl.bindFramebuffer(gl.FRAMEBUFFER, fb._glID);
        var numColors = fb._colors.length;
        for (var i = 0; i < numColors; ++i) {
          var colorBuffer = fb._colors[i];
          _attach(gl, gl.COLOR_ATTACHMENT0 + i, colorBuffer);
        }
        for (var _i4 = numColors; _i4 < this._caps.maxColorAttachments; ++_i4) gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0 + _i4, gl.TEXTURE_2D, null, 0);
        fb._depth && _attach(gl, gl.DEPTH_ATTACHMENT, fb._depth);
        fb._stencil && _attach(gl, gl.STENCIL_ATTACHMENT, fb._stencil);
        fb._depthStencil && _attach(gl, gl.DEPTH_STENCIL_ATTACHMENT, fb._depthStencil);
      };
      _proto.setViewport = function setViewport(x, y, w, h) {
        if (this._vx !== x || this._vy !== y || this._vw !== w || this._vh !== h) {
          this._gl.viewport(x, y, w, h);
          this._vx = x;
          this._vy = y;
          this._vw = w;
          this._vh = h;
        }
      };
      _proto.setScissor = function setScissor(x, y, w, h) {
        if (this._sx !== x || this._sy !== y || this._sw !== w || this._sh !== h) {
          this._gl.scissor(x, y, w, h);
          this._sx = x;
          this._sy = y;
          this._sw = w;
          this._sh = h;
        }
      };
      _proto.clear = function clear(opts) {
        if (void 0 === opts.color && void 0 === opts.depth && void 0 === opts.stencil) return;
        var gl = this._gl;
        var flags = 0;
        if (void 0 !== opts.color) {
          flags |= gl.COLOR_BUFFER_BIT;
          gl.clearColor(opts.color[0], opts.color[1], opts.color[2], opts.color[3]);
        }
        if (void 0 !== opts.depth) {
          flags |= gl.DEPTH_BUFFER_BIT;
          gl.clearDepth(opts.depth);
          gl.enable(gl.DEPTH_TEST);
          gl.depthMask(true);
          gl.depthFunc(gl.ALWAYS);
        }
        if (void 0 !== opts.stencil) {
          flags |= gl.STENCIL_BUFFER_BIT;
          gl.clearStencil(opts.stencil);
        }
        gl.clear(flags);
        if (void 0 !== opts.depth) if (false === this._current.depthTest) gl.disable(gl.DEPTH_TEST); else {
          false === this._current.depthWrite && gl.depthMask(false);
          this._current.depthFunc !== _enums.enums.DS_FUNC_ALWAYS && gl.depthFunc(this._current.depthFunc);
        }
      };
      _proto.enableBlend = function enableBlend() {
        this._next.blend = true;
      };
      _proto.enableDepthTest = function enableDepthTest() {
        this._next.depthTest = true;
      };
      _proto.enableDepthWrite = function enableDepthWrite() {
        this._next.depthWrite = true;
      };
      _proto.setStencilTest = function setStencilTest(stencilTest) {
        this._next.stencilTest = stencilTest;
      };
      _proto.setStencilFunc = function setStencilFunc(func, ref, mask) {
        this._next.stencilSep = false;
        this._next.stencilFuncFront = this._next.stencilFuncBack = func;
        this._next.stencilRefFront = this._next.stencilRefBack = ref;
        this._next.stencilMaskFront = this._next.stencilMaskBack = mask;
      };
      _proto.setStencilFuncFront = function setStencilFuncFront(func, ref, mask) {
        this._next.stencilSep = true;
        this._next.stencilFuncFront = func;
        this._next.stencilRefFront = ref;
        this._next.stencilMaskFront = mask;
      };
      _proto.setStencilFuncBack = function setStencilFuncBack(func, ref, mask) {
        this._next.stencilSep = true;
        this._next.stencilFuncBack = func;
        this._next.stencilRefBack = ref;
        this._next.stencilMaskBack = mask;
      };
      _proto.setStencilOp = function setStencilOp(failOp, zFailOp, zPassOp, writeMask) {
        this._next.stencilFailOpFront = this._next.stencilFailOpBack = failOp;
        this._next.stencilZFailOpFront = this._next.stencilZFailOpBack = zFailOp;
        this._next.stencilZPassOpFront = this._next.stencilZPassOpBack = zPassOp;
        this._next.stencilWriteMaskFront = this._next.stencilWriteMaskBack = writeMask;
      };
      _proto.setStencilOpFront = function setStencilOpFront(failOp, zFailOp, zPassOp, writeMask) {
        this._next.stencilSep = true;
        this._next.stencilFailOpFront = failOp;
        this._next.stencilZFailOpFront = zFailOp;
        this._next.stencilZPassOpFront = zPassOp;
        this._next.stencilWriteMaskFront = writeMask;
      };
      _proto.setStencilOpBack = function setStencilOpBack(failOp, zFailOp, zPassOp, writeMask) {
        this._next.stencilSep = true;
        this._next.stencilFailOpBack = failOp;
        this._next.stencilZFailOpBack = zFailOp;
        this._next.stencilZPassOpBack = zPassOp;
        this._next.stencilWriteMaskBack = writeMask;
      };
      _proto.setDepthFunc = function setDepthFunc(depthFunc) {
        this._next.depthFunc = depthFunc;
      };
      _proto.setBlendColor32 = function setBlendColor32(rgba) {
        this._next.blendColor = rgba;
      };
      _proto.setBlendColor = function setBlendColor(r, g, b, a) {
        this._next.blendColor = (255 * r << 24 | 255 * g << 16 | 255 * b << 8 | 255 * a) >>> 0;
      };
      _proto.setBlendFunc = function setBlendFunc(src, dst) {
        this._next.blendSep = false;
        this._next.blendSrc = src;
        this._next.blendDst = dst;
      };
      _proto.setBlendFuncSep = function setBlendFuncSep(src, dst, srcAlpha, dstAlpha) {
        this._next.blendSep = true;
        this._next.blendSrc = src;
        this._next.blendDst = dst;
        this._next.blendSrcAlpha = srcAlpha;
        this._next.blendDstAlpha = dstAlpha;
      };
      _proto.setBlendEq = function setBlendEq(eq) {
        this._next.blendSep = false;
        this._next.blendEq = eq;
      };
      _proto.setBlendEqSep = function setBlendEqSep(eq, alphaEq) {
        this._next.blendSep = true;
        this._next.blendEq = eq;
        this._next.blendAlphaEq = alphaEq;
      };
      _proto.setCullMode = function setCullMode(mode) {
        this._next.cullMode = mode;
      };
      _proto.setVertexBuffer = function setVertexBuffer(stream, buffer, start) {
        void 0 === start && (start = 0);
        this._next.vertexBuffers[stream] = buffer;
        this._next.vertexBufferOffsets[stream] = start;
        this._next.maxStream < stream && (this._next.maxStream = stream);
      };
      _proto.setIndexBuffer = function setIndexBuffer(buffer) {
        this._next.indexBuffer = buffer;
      };
      _proto.setProgram = function setProgram(program) {
        this._next.program = program;
      };
      _proto.setTexture = function setTexture(name, texture, slot) {
        if (slot >= this._caps.maxTextureUnits) {
          console.warn("Can not set texture " + name + " at stage " + slot + ", max texture exceed: " + this._caps.maxTextureUnits);
          return;
        }
        this._next.textureUnits[slot] = texture;
        this.setUniform(name, slot);
        this._next.maxTextureSlot < slot && (this._next.maxTextureSlot = slot);
      };
      _proto.setTextureArray = function setTextureArray(name, textures, slots) {
        var len = textures.length;
        if (len >= this._caps.maxTextureUnits) {
          console.warn("Can not set " + len + " textures for " + name + ", max texture exceed: " + this._caps.maxTextureUnits);
          return;
        }
        for (var i = 0; i < len; ++i) {
          var slot = slots[i];
          this._next.textureUnits[slot] = textures[i];
          this._next.maxTextureSlot < slot && (this._next.maxTextureSlot = slot);
        }
        this.setUniform(name, slots);
      };
      _proto.setUniform = function setUniform(name, value) {
        var uniform = this._uniforms[name];
        var sameType = false;
        var isArray = false, isFloat32Array = false, isInt32Array = false;
        do {
          if (!uniform) break;
          isFloat32Array = Array.isArray(value) || value instanceof Float32Array;
          isInt32Array = value instanceof Int32Array;
          isArray = isFloat32Array || isInt32Array;
          if (uniform.isArray !== isArray) break;
          if (uniform.isArray && uniform.value.length !== value.length) break;
          sameType = true;
        } while (false);
        if (sameType) {
          var oldValue = uniform.value;
          var dirty = false;
          if (uniform.isArray) {
            for (var i = 0, l = oldValue.length; i < l; i++) if (oldValue[i] !== value[i]) {
              dirty = true;
              oldValue[i] = value[i];
            }
          } else if (oldValue !== value) {
            dirty = true;
            uniform.value = value;
          }
          dirty && (uniform.dirty = true);
        } else {
          var newValue = value;
          isFloat32Array ? newValue = new Float32Array(value) : isInt32Array && (newValue = new Int32Array(value));
          uniform = {
            dirty: true,
            value: newValue,
            isArray: isArray
          };
        }
        this._uniforms[name] = uniform;
      };
      _proto.setUniformDirectly = function setUniformDirectly(name, value) {
        var uniform = this._uniforms[name];
        uniform || (this._uniforms[name] = uniform = {});
        uniform.dirty = true;
        uniform.value = value;
      };
      _proto.setPrimitiveType = function setPrimitiveType(type) {
        this._next.primitiveType = type;
      };
      _proto.resetDrawCalls = function resetDrawCalls() {
        this._stats.drawcalls = 0;
      };
      _proto.getDrawCalls = function getDrawCalls() {
        return this._stats.drawcalls;
      };
      _proto.draw = function draw(base, count) {
        var gl = this._gl;
        var cur = this._current;
        var next = this._next;
        _commitBlendStates(gl, cur, next);
        _commitDepthStates(gl, cur, next);
        _commitStencilStates(gl, cur, next);
        _commitCullMode(gl, cur, next);
        _commitVertexBuffers(this, gl, cur, next);
        cur.indexBuffer !== next.indexBuffer && gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, next.indexBuffer && -1 !== next.indexBuffer._glID ? next.indexBuffer._glID : null);
        var programDirty = false;
        if (cur.program !== next.program) {
          next.program._linked ? gl.useProgram(next.program._glID) : console.warn("Failed to use program: has not linked yet.");
          programDirty = true;
        }
        _commitTextures(gl, cur, next);
        for (var i = 0; i < next.program._uniforms.length; ++i) {
          var uniformInfo = next.program._uniforms[i];
          var uniform = this._uniforms[uniformInfo.name];
          if (!uniform) continue;
          if (!programDirty && !uniform.dirty) continue;
          uniform.dirty = false;
          var commitFunc = void 0 === uniformInfo.size ? _type2uniformCommit[uniformInfo.type] : _type2uniformArrayCommit[uniformInfo.type];
          if (!commitFunc) {
            console.warn("Can not find commit function for uniform " + uniformInfo.name);
            continue;
          }
          commitFunc(gl, uniformInfo.location, uniform.value);
        }
        if (count) {
          next.indexBuffer ? gl.drawElements(this._next.primitiveType, count, next.indexBuffer._format, base * next.indexBuffer._bytesPerIndex) : gl.drawArrays(this._next.primitiveType, base, count);
          this._stats.drawcalls++;
        }
        cur.set(next);
        next.reset();
      };
      return Device;
    })();
    exports["default"] = Device;
    module.exports = exports["default"];
  }), {
    "./enums": 249,
    "./state": 256,
    "./texture-2d": 257,
    "./texture-cube": 258
  } ],
  249: [ (function(require, module, exports) {
    "use strict";
    exports.__esModule = true;
    exports.attrTypeBytes = attrTypeBytes;
    exports.glFilter = glFilter;
    exports.glTextureFmt = glTextureFmt;
    exports.enums = void 0;
    var GL_NEAREST = 9728;
    var GL_LINEAR = 9729;
    var GL_NEAREST_MIPMAP_NEAREST = 9984;
    var GL_LINEAR_MIPMAP_NEAREST = 9985;
    var GL_NEAREST_MIPMAP_LINEAR = 9986;
    var GL_LINEAR_MIPMAP_LINEAR = 9987;
    var GL_UNSIGNED_BYTE = 5121;
    var GL_UNSIGNED_SHORT = 5123;
    var GL_UNSIGNED_INT = 5125;
    var GL_FLOAT = 5126;
    var GL_UNSIGNED_SHORT_5_6_5 = 33635;
    var GL_UNSIGNED_SHORT_4_4_4_4 = 32819;
    var GL_UNSIGNED_SHORT_5_5_5_1 = 32820;
    var GL_HALF_FLOAT_OES = 36193;
    var GL_DEPTH_COMPONENT = 6402;
    var GL_ALPHA = 6406;
    var GL_RGB = 6407;
    var GL_RGBA = 6408;
    var GL_LUMINANCE = 6409;
    var GL_LUMINANCE_ALPHA = 6410;
    var GL_COMPRESSED_RGB_S3TC_DXT1_EXT = 33776;
    var GL_COMPRESSED_RGBA_S3TC_DXT1_EXT = 33777;
    var GL_COMPRESSED_RGBA_S3TC_DXT3_EXT = 33778;
    var GL_COMPRESSED_RGBA_S3TC_DXT5_EXT = 33779;
    var GL_COMPRESSED_RGB_PVRTC_4BPPV1_IMG = 35840;
    var GL_COMPRESSED_RGB_PVRTC_2BPPV1_IMG = 35841;
    var GL_COMPRESSED_RGBA_PVRTC_4BPPV1_IMG = 35842;
    var GL_COMPRESSED_RGBA_PVRTC_2BPPV1_IMG = 35843;
    var GL_COMPRESSED_RGB_ETC1_WEBGL = 36196;
    var GL_COMPRESSED_RGB8_ETC2 = 37492;
    var GL_COMPRESSED_RGBA8_ETC2_EAC = 37496;
    var _filterGL = [ [ GL_NEAREST, GL_NEAREST_MIPMAP_NEAREST, GL_NEAREST_MIPMAP_LINEAR ], [ GL_LINEAR, GL_LINEAR_MIPMAP_NEAREST, GL_LINEAR_MIPMAP_LINEAR ] ];
    var _textureFmtGL = [ {
      format: GL_RGB,
      internalFormat: GL_COMPRESSED_RGB_S3TC_DXT1_EXT,
      pixelType: null
    }, {
      format: GL_RGBA,
      internalFormat: GL_COMPRESSED_RGBA_S3TC_DXT1_EXT,
      pixelType: null
    }, {
      format: GL_RGBA,
      internalFormat: GL_COMPRESSED_RGBA_S3TC_DXT3_EXT,
      pixelType: null
    }, {
      format: GL_RGBA,
      internalFormat: GL_COMPRESSED_RGBA_S3TC_DXT5_EXT,
      pixelType: null
    }, {
      format: GL_RGB,
      internalFormat: GL_COMPRESSED_RGB_ETC1_WEBGL,
      pixelType: null
    }, {
      format: GL_RGB,
      internalFormat: GL_COMPRESSED_RGB_PVRTC_2BPPV1_IMG,
      pixelType: null
    }, {
      format: GL_RGBA,
      internalFormat: GL_COMPRESSED_RGBA_PVRTC_2BPPV1_IMG,
      pixelType: null
    }, {
      format: GL_RGB,
      internalFormat: GL_COMPRESSED_RGB_PVRTC_4BPPV1_IMG,
      pixelType: null
    }, {
      format: GL_RGBA,
      internalFormat: GL_COMPRESSED_RGBA_PVRTC_4BPPV1_IMG,
      pixelType: null
    }, {
      format: GL_ALPHA,
      internalFormat: GL_ALPHA,
      pixelType: GL_UNSIGNED_BYTE
    }, {
      format: GL_LUMINANCE,
      internalFormat: GL_LUMINANCE,
      pixelType: GL_UNSIGNED_BYTE
    }, {
      format: GL_LUMINANCE_ALPHA,
      internalFormat: GL_LUMINANCE_ALPHA,
      pixelType: GL_UNSIGNED_BYTE
    }, {
      format: GL_RGB,
      internalFormat: GL_RGB,
      pixelType: GL_UNSIGNED_SHORT_5_6_5
    }, {
      format: GL_RGBA,
      internalFormat: GL_RGBA,
      pixelType: GL_UNSIGNED_SHORT_5_5_5_1
    }, {
      format: GL_RGBA,
      internalFormat: GL_RGBA,
      pixelType: GL_UNSIGNED_SHORT_4_4_4_4
    }, {
      format: GL_RGB,
      internalFormat: GL_RGB,
      pixelType: GL_UNSIGNED_BYTE
    }, {
      format: GL_RGBA,
      internalFormat: GL_RGBA,
      pixelType: GL_UNSIGNED_BYTE
    }, {
      format: GL_RGB,
      internalFormat: GL_RGB,
      pixelType: GL_HALF_FLOAT_OES
    }, {
      format: GL_RGBA,
      internalFormat: GL_RGBA,
      pixelType: GL_HALF_FLOAT_OES
    }, {
      format: GL_RGB,
      internalFormat: GL_RGB,
      pixelType: GL_FLOAT
    }, {
      format: GL_RGBA,
      internalFormat: GL_RGBA,
      pixelType: GL_FLOAT
    }, {
      format: null,
      internalFormat: null,
      pixelType: null
    }, {
      format: null,
      internalFormat: null,
      pixelType: null
    }, {
      format: null,
      internalFormat: null,
      pixelType: null
    }, {
      format: null,
      internalFormat: null,
      pixelType: null
    }, {
      format: GL_DEPTH_COMPONENT,
      internalFormat: GL_DEPTH_COMPONENT,
      pixelType: GL_UNSIGNED_SHORT
    }, {
      format: GL_DEPTH_COMPONENT,
      internalFormat: GL_DEPTH_COMPONENT,
      pixelType: GL_UNSIGNED_INT
    }, {
      format: GL_DEPTH_COMPONENT,
      internalFormat: GL_DEPTH_COMPONENT,
      pixelType: GL_UNSIGNED_INT
    }, {
      format: GL_RGB,
      internalFormat: GL_COMPRESSED_RGB8_ETC2,
      pixelType: null
    }, {
      format: GL_RGBA,
      internalFormat: GL_COMPRESSED_RGBA8_ETC2_EAC,
      pixelType: null
    } ];
    var enums = {
      USAGE_STATIC: 35044,
      USAGE_DYNAMIC: 35048,
      USAGE_STREAM: 35040,
      INDEX_FMT_UINT8: 5121,
      INDEX_FMT_UINT16: 5123,
      INDEX_FMT_UINT32: 5125,
      ATTR_POSITION: "a_position",
      ATTR_NORMAL: "a_normal",
      ATTR_TANGENT: "a_tangent",
      ATTR_BITANGENT: "a_bitangent",
      ATTR_WEIGHTS: "a_weights",
      ATTR_JOINTS: "a_joints",
      ATTR_COLOR: "a_color",
      ATTR_COLOR0: "a_color0",
      ATTR_COLOR1: "a_color1",
      ATTR_UV: "a_uv",
      ATTR_UV0: "a_uv0",
      ATTR_UV1: "a_uv1",
      ATTR_UV2: "a_uv2",
      ATTR_UV3: "a_uv3",
      ATTR_UV4: "a_uv4",
      ATTR_UV5: "a_uv5",
      ATTR_UV6: "a_uv6",
      ATTR_UV7: "a_uv7",
      ATTR_TEX_COORD: "a_texCoord",
      ATTR_TEX_COORD1: "a_texCoord1",
      ATTR_TEX_COORD2: "a_texCoord2",
      ATTR_TEX_COORD3: "a_texCoord3",
      ATTR_TEX_COORD4: "a_texCoord4",
      ATTR_TEX_COORD5: "a_texCoord5",
      ATTR_TEX_COORD6: "a_texCoord6",
      ATTR_TEX_COORD7: "a_texCoord7",
      ATTR_TEX_COORD8: "a_texCoord8",
      ATTR_TYPE_INT8: 5120,
      ATTR_TYPE_UINT8: 5121,
      ATTR_TYPE_INT16: 5122,
      ATTR_TYPE_UINT16: 5123,
      ATTR_TYPE_INT32: 5124,
      ATTR_TYPE_UINT32: 5125,
      ATTR_TYPE_FLOAT32: 5126,
      FILTER_NEAREST: 0,
      FILTER_LINEAR: 1,
      WRAP_REPEAT: 10497,
      WRAP_CLAMP: 33071,
      WRAP_MIRROR: 33648,
      TEXTURE_FMT_RGB_DXT1: 0,
      TEXTURE_FMT_RGBA_DXT1: 1,
      TEXTURE_FMT_RGBA_DXT3: 2,
      TEXTURE_FMT_RGBA_DXT5: 3,
      TEXTURE_FMT_RGB_ETC1: 4,
      TEXTURE_FMT_RGB_PVRTC_2BPPV1: 5,
      TEXTURE_FMT_RGBA_PVRTC_2BPPV1: 6,
      TEXTURE_FMT_RGB_PVRTC_4BPPV1: 7,
      TEXTURE_FMT_RGBA_PVRTC_4BPPV1: 8,
      TEXTURE_FMT_A8: 9,
      TEXTURE_FMT_L8: 10,
      TEXTURE_FMT_L8_A8: 11,
      TEXTURE_FMT_R5_G6_B5: 12,
      TEXTURE_FMT_R5_G5_B5_A1: 13,
      TEXTURE_FMT_R4_G4_B4_A4: 14,
      TEXTURE_FMT_RGB8: 15,
      TEXTURE_FMT_RGBA8: 16,
      TEXTURE_FMT_RGB16F: 17,
      TEXTURE_FMT_RGBA16F: 18,
      TEXTURE_FMT_RGB32F: 19,
      TEXTURE_FMT_RGBA32F: 20,
      TEXTURE_FMT_R32F: 21,
      TEXTURE_FMT_111110F: 22,
      TEXTURE_FMT_SRGB: 23,
      TEXTURE_FMT_SRGBA: 24,
      TEXTURE_FMT_D16: 25,
      TEXTURE_FMT_D32: 26,
      TEXTURE_FMT_D24S8: 27,
      TEXTURE_FMT_RGB_ETC2: 28,
      TEXTURE_FMT_RGBA_ETC2: 29,
      DS_FUNC_NEVER: 512,
      DS_FUNC_LESS: 513,
      DS_FUNC_EQUAL: 514,
      DS_FUNC_LEQUAL: 515,
      DS_FUNC_GREATER: 516,
      DS_FUNC_NOTEQUAL: 517,
      DS_FUNC_GEQUAL: 518,
      DS_FUNC_ALWAYS: 519,
      RB_FMT_RGBA4: 32854,
      RB_FMT_RGB5_A1: 32855,
      RB_FMT_RGB565: 36194,
      RB_FMT_D16: 33189,
      RB_FMT_S8: 36168,
      RB_FMT_D24S8: 34041,
      BLEND_FUNC_ADD: 32774,
      BLEND_FUNC_SUBTRACT: 32778,
      BLEND_FUNC_REVERSE_SUBTRACT: 32779,
      BLEND_ZERO: 0,
      BLEND_ONE: 1,
      BLEND_SRC_COLOR: 768,
      BLEND_ONE_MINUS_SRC_COLOR: 769,
      BLEND_DST_COLOR: 774,
      BLEND_ONE_MINUS_DST_COLOR: 775,
      BLEND_SRC_ALPHA: 770,
      BLEND_ONE_MINUS_SRC_ALPHA: 771,
      BLEND_DST_ALPHA: 772,
      BLEND_ONE_MINUS_DST_ALPHA: 773,
      BLEND_CONSTANT_COLOR: 32769,
      BLEND_ONE_MINUS_CONSTANT_COLOR: 32770,
      BLEND_CONSTANT_ALPHA: 32771,
      BLEND_ONE_MINUS_CONSTANT_ALPHA: 32772,
      BLEND_SRC_ALPHA_SATURATE: 776,
      STENCIL_DISABLE: 0,
      STENCIL_ENABLE: 1,
      STENCIL_INHERIT: 2,
      STENCIL_OP_KEEP: 7680,
      STENCIL_OP_ZERO: 0,
      STENCIL_OP_REPLACE: 7681,
      STENCIL_OP_INCR: 7682,
      STENCIL_OP_INCR_WRAP: 34055,
      STENCIL_OP_DECR: 7683,
      STENCIL_OP_DECR_WRAP: 34056,
      STENCIL_OP_INVERT: 5386,
      CULL_NONE: 0,
      CULL_FRONT: 1028,
      CULL_BACK: 1029,
      CULL_FRONT_AND_BACK: 1032,
      PT_POINTS: 0,
      PT_LINES: 1,
      PT_LINE_LOOP: 2,
      PT_LINE_STRIP: 3,
      PT_TRIANGLES: 4,
      PT_TRIANGLE_STRIP: 5,
      PT_TRIANGLE_FAN: 6
    };
    exports.enums = enums;
    function attrTypeBytes(attrType) {
      if (attrType === enums.ATTR_TYPE_INT8) return 1;
      if (attrType === enums.ATTR_TYPE_UINT8) return 1;
      if (attrType === enums.ATTR_TYPE_INT16) return 2;
      if (attrType === enums.ATTR_TYPE_UINT16) return 2;
      if (attrType === enums.ATTR_TYPE_INT32) return 4;
      if (attrType === enums.ATTR_TYPE_UINT32) return 4;
      if (attrType === enums.ATTR_TYPE_FLOAT32) return 4;
      console.warn("Unknown ATTR_TYPE: " + attrType);
      return 0;
    }
    function glFilter(gl, filter, mipFilter) {
      void 0 === mipFilter && (mipFilter = -1);
      var result = _filterGL[filter][mipFilter + 1];
      if (void 0 === result) {
        console.warn("Unknown FILTER: " + filter);
        return -1 === mipFilter ? gl.LINEAR : gl.LINEAR_MIPMAP_LINEAR;
      }
      return result;
    }
    function glTextureFmt(fmt) {
      var result = _textureFmtGL[fmt];
      if (void 0 === result) {
        console.warn("Unknown TEXTURE_FMT: " + fmt);
        return _textureFmtGL[enums.TEXTURE_FMT_RGBA8];
      }
      return result;
    }
  }), {} ],
  250: [ (function(require, module, exports) {
    "use strict";
    exports.__esModule = true;
    exports["default"] = void 0;
    var FrameBuffer = (function() {
      function FrameBuffer(device, width, height, options) {
        this._device = device;
        this._width = width;
        this._height = height;
        this._colors = options.colors || [];
        this._depth = options.depth || null;
        this._stencil = options.stencil || null;
        this._depthStencil = options.depthStencil || null;
        this._glID = device._gl.createFramebuffer();
      }
      var _proto = FrameBuffer.prototype;
      _proto.destroy = function destroy() {
        if (null === this._glID) {
          console.error("The frame-buffer already destroyed");
          return;
        }
        var gl = this._device._gl;
        gl.deleteFramebuffer(this._glID);
        this._glID = null;
      };
      _proto.getHandle = function getHandle() {
        return this._glID;
      };
      return FrameBuffer;
    })();
    exports["default"] = FrameBuffer;
    module.exports = exports["default"];
  }), {} ],
  251: [ (function(require, module, exports) {
    "use strict";
    exports.__esModule = true;
    exports["default"] = void 0;
    var _enums = require("./enums");
    var _BYTES_PER_INDEX;
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        "value" in descriptor && (descriptor.writable = true);
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      protoProps && _defineProperties(Constructor.prototype, protoProps);
      staticProps && _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    var BYTES_PER_INDEX = (_BYTES_PER_INDEX = {}, _BYTES_PER_INDEX[_enums.enums.INDEX_FMT_UINT8] = 1, 
    _BYTES_PER_INDEX[_enums.enums.INDEX_FMT_UINT16] = 2, _BYTES_PER_INDEX[_enums.enums.INDEX_FMT_UINT32] = 4, 
    _BYTES_PER_INDEX);
    var IndexBuffer = (function() {
      function IndexBuffer(device, format, usage, data) {
        this._device = device;
        this._format = format;
        this._usage = usage;
        this._bytesPerIndex = BYTES_PER_INDEX[format];
        this._bytes = data.byteLength;
        this._numIndices = this._bytes / this._bytesPerIndex;
        this._needExpandDataStore = true;
        this._glID = device._gl.createBuffer();
        this.update(0, data);
        device._stats.ib += this._bytes;
      }
      var _proto = IndexBuffer.prototype;
      _proto.destroy = function destroy() {
        if (-1 === this._glID) {
          console.error("The buffer already destroyed");
          return;
        }
        var gl = this._device._gl;
        gl.deleteBuffer(this._glID);
        this._device._stats.ib -= this.bytes;
        this._glID = -1;
      };
      _proto.update = function update(byteOffset, data) {
        if (-1 === this._glID) {
          console.error("The buffer is destroyed");
          return;
        }
        if (0 === data.byteLength) return;
        if (byteOffset + data.byteLength > this._bytes) {
          if (byteOffset) {
            console.error("Failed to update data, bytes exceed.");
            return;
          }
          this._needExpandDataStore = true;
          this._bytes = byteOffset + data.byteLength;
          this._numIndices = this._bytes / this._bytesPerIndex;
        }
        var gl = this._device._gl;
        var glUsage = this._usage;
        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this._glID);
        if (this._needExpandDataStore) {
          gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, data, glUsage);
          this._needExpandDataStore = false;
        } else gl.bufferSubData(gl.ELEMENT_ARRAY_BUFFER, byteOffset, data);
        this._device._restoreIndexBuffer();
      };
      _proto.setUsage = function setUsage(usage) {
        this._usage = usage;
      };
      _createClass(IndexBuffer, [ {
        key: "count",
        get: function get() {
          return this._numIndices;
        }
      } ]);
      return IndexBuffer;
    })();
    IndexBuffer.BYTES_PER_INDEX = BYTES_PER_INDEX;
    var _default = IndexBuffer;
    exports["default"] = _default;
    module.exports = exports["default"];
  }), {
    "./enums": 249
  } ],
  252: [ (function(require, module, exports) {
    "use strict";
    exports.__esModule = true;
    exports["default"] = void 0;
    var _enums = require("./enums");
    var gfx = null;
    false;
    var VertexFormat = require("./vertex-format");
    var IndexBuffer = require("./index-buffer");
    var VertexBuffer = require("./vertex-buffer");
    var Program = require("./program");
    var Texture = require("./texture");
    var Texture2D = require("./texture-2d");
    var TextureCube = require("./texture-cube");
    var RenderBuffer = require("./render-buffer");
    var FrameBuffer = require("./frame-buffer");
    var Device = require("./device");
    gfx = {
      VertexFormat: VertexFormat,
      IndexBuffer: IndexBuffer,
      VertexBuffer: VertexBuffer,
      Program: Program,
      Texture: Texture,
      Texture2D: Texture2D,
      TextureCube: TextureCube,
      RenderBuffer: RenderBuffer,
      FrameBuffer: FrameBuffer,
      Device: Device,
      attrTypeBytes: _enums.attrTypeBytes,
      glFilter: _enums.glFilter,
      glTextureFmt: _enums.glTextureFmt
    };
    Object.assign(gfx, _enums.enums);
    var _default = gfx;
    exports["default"] = _default;
    cc.gfx = gfx;
    module.exports = exports["default"];
  }), {
    "./device": 248,
    "./enums": 249,
    "./frame-buffer": 250,
    "./index-buffer": 251,
    "./program": 254,
    "./render-buffer": 255,
    "./texture": 259,
    "./texture-2d": 257,
    "./texture-cube": 258,
    "./vertex-buffer": 260,
    "./vertex-format": 261
  } ],
  253: [ (function(require, module, exports) {
    "use strict";
    exports.__esModule = true;
    exports.isPow2 = isPow2;
    function isPow2(v) {
      return !(v & v - 1) && !!v;
    }
  }), {} ],
  254: [ (function(require, module, exports) {
    "use strict";
    exports.__esModule = true;
    exports["default"] = void 0;
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        "value" in descriptor && (descriptor.writable = true);
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      protoProps && _defineProperties(Constructor.prototype, protoProps);
      staticProps && _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    var _genID = 0;
    function _parseError(out, type, errorLog) {
      errorLog.split("\n").forEach((function(msg) {
        if (msg.length < 5) return;
        var parts = /^ERROR:\s+(\d+):(\d+):\s*(.*)$/.exec(msg);
        parts ? out.push({
          type: type,
          fileID: 0 | parts[1],
          line: 0 | parts[2],
          message: parts[3].trim()
        }) : msg.length > 0 && out.push({
          type: type,
          fileID: -1,
          line: 0,
          message: msg
        });
      }));
    }
    var Program = (function() {
      function Program(device, options) {
        this._device = device;
        this._attributes = [];
        this._uniforms = [];
        this._samplers = [];
        this._errors = [];
        this._linked = false;
        this._vertSource = options.vert;
        this._fragSource = options.frag;
        this._glID = null;
        this._id = _genID++;
      }
      var _proto = Program.prototype;
      _proto.link = function link() {
        if (this._linked) return;
        var gl = this._device._gl;
        var vertShader = _createShader(gl, gl.VERTEX_SHADER, this._vertSource);
        var fragShader = _createShader(gl, gl.FRAGMENT_SHADER, this._fragSource);
        var program = gl.createProgram();
        gl.attachShader(program, vertShader);
        gl.attachShader(program, fragShader);
        gl.linkProgram(program);
        var failed = false;
        var errors = this._errors;
        if (!gl.getShaderParameter(vertShader, gl.COMPILE_STATUS)) {
          _parseError(errors, "vs", gl.getShaderInfoLog(vertShader));
          failed = true;
        }
        if (!gl.getShaderParameter(fragShader, gl.COMPILE_STATUS)) {
          _parseError(errors, "fs", gl.getShaderInfoLog(fragShader));
          failed = true;
        }
        gl.deleteShader(vertShader);
        gl.deleteShader(fragShader);
        if (failed) return errors;
        if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {
          errors.push({
            info: "Failed to link shader program: " + gl.getProgramInfoLog(program)
          });
          return errors;
        }
        this._glID = program;
        var numAttributes = gl.getProgramParameter(program, gl.ACTIVE_ATTRIBUTES);
        for (var i = 0; i < numAttributes; ++i) {
          var info = gl.getActiveAttrib(program, i);
          var location = gl.getAttribLocation(program, info.name);
          this._attributes.push({
            name: info.name,
            location: location,
            type: info.type
          });
        }
        var numUniforms = gl.getProgramParameter(program, gl.ACTIVE_UNIFORMS);
        for (var _i = 0; _i < numUniforms; ++_i) {
          var _info = gl.getActiveUniform(program, _i);
          var name = _info.name;
          var _location = gl.getUniformLocation(program, name);
          var isArray = "[0]" === name.substr(name.length - 3);
          isArray && (name = name.substr(0, name.length - 3));
          var uniform = {
            name: name,
            location: _location,
            type: _info.type,
            size: isArray ? _info.size : void 0
          };
          this._uniforms.push(uniform);
        }
        this._linked = true;
      };
      _proto.destroy = function destroy() {
        var gl = this._device._gl;
        gl.deleteProgram(this._glID);
        this._linked = false;
        this._glID = null;
        this._attributes = [];
        this._uniforms = [];
        this._samplers = [];
      };
      _createClass(Program, [ {
        key: "id",
        get: function get() {
          return this._id;
        }
      } ]);
      return Program;
    })();
    exports["default"] = Program;
    function _createShader(gl, type, src) {
      var shader = gl.createShader(type);
      gl.shaderSource(shader, src);
      gl.compileShader(shader);
      return shader;
    }
    module.exports = exports["default"];
  }), {} ],
  255: [ (function(require, module, exports) {
    "use strict";
    exports.__esModule = true;
    exports["default"] = void 0;
    var RenderBuffer = (function() {
      function RenderBuffer(device, format, width, height) {
        this._device = device;
        this._format = format;
        this._glID = device._gl.createRenderbuffer();
        this.update(width, height);
      }
      var _proto = RenderBuffer.prototype;
      _proto.update = function update(width, height) {
        this._width = width;
        this._height = height;
        var gl = this._device._gl;
        gl.bindRenderbuffer(gl.RENDERBUFFER, this._glID);
        gl.renderbufferStorage(gl.RENDERBUFFER, this._format, width, height);
        gl.bindRenderbuffer(gl.RENDERBUFFER, null);
      };
      _proto.destroy = function destroy() {
        if (null === this._glID) {
          console.error("The render-buffer already destroyed");
          return;
        }
        var gl = this._device._gl;
        gl.bindRenderbuffer(gl.RENDERBUFFER, null);
        gl.deleteRenderbuffer(this._glID);
        this._glID = null;
      };
      return RenderBuffer;
    })();
    exports["default"] = RenderBuffer;
    module.exports = exports["default"];
  }), {} ],
  256: [ (function(require, module, exports) {
    "use strict";
    exports.__esModule = true;
    exports["default"] = void 0;
    var _enums = require("./enums");
    var _default = {
      blend: false,
      blendSep: false,
      blendColor: 4294967295,
      blendEq: _enums.enums.BLEND_FUNC_ADD,
      blendAlphaEq: _enums.enums.BLEND_FUNC_ADD,
      blendSrc: _enums.enums.BLEND_ONE,
      blendDst: _enums.enums.BLEND_ZERO,
      blendSrcAlpha: _enums.enums.BLEND_ONE,
      blendDstAlpha: _enums.enums.BLEND_ZERO,
      depthTest: false,
      depthWrite: false,
      depthFunc: _enums.enums.DS_FUNC_LESS,
      stencilTest: false,
      stencilSep: false,
      stencilFuncFront: _enums.enums.DS_FUNC_ALWAYS,
      stencilRefFront: 0,
      stencilMaskFront: 255,
      stencilFailOpFront: _enums.enums.STENCIL_OP_KEEP,
      stencilZFailOpFront: _enums.enums.STENCIL_OP_KEEP,
      stencilZPassOpFront: _enums.enums.STENCIL_OP_KEEP,
      stencilWriteMaskFront: 255,
      stencilFuncBack: _enums.enums.DS_FUNC_ALWAYS,
      stencilRefBack: 0,
      stencilMaskBack: 255,
      stencilFailOpBack: _enums.enums.STENCIL_OP_KEEP,
      stencilZFailOpBack: _enums.enums.STENCIL_OP_KEEP,
      stencilZPassOpBack: _enums.enums.STENCIL_OP_KEEP,
      stencilWriteMaskBack: 255,
      cullMode: _enums.enums.CULL_BACK,
      primitiveType: _enums.enums.PT_TRIANGLES,
      maxStream: -1,
      vertexBuffers: [],
      vertexBufferOffsets: [],
      indexBuffer: null,
      maxTextureSlot: -1,
      textureUnits: [],
      program: null
    };
    var State = (function() {
      function State(device) {
        this.vertexBuffers = new Array(device._caps.maxVertexStreams);
        this.vertexBufferOffsets = new Array(device._caps.maxVertexStreams);
        this.textureUnits = new Array(device._caps.maxTextureUnits);
        this.set(_default);
      }
      State.initDefault = function initDefault(device) {
        _default.vertexBuffers = new Array(device._caps.maxVertexStreams);
        _default.vertexBufferOffsets = new Array(device._caps.maxVertexStreams);
        _default.textureUnits = new Array(device._caps.maxTextureUnits);
      };
      var _proto = State.prototype;
      _proto.reset = function reset() {
        this.set(_default);
      };
      _proto.set = function set(cpy) {
        this.blend = cpy.blend;
        this.blendSep = cpy.blendSep;
        this.blendColor = cpy.blendColor;
        this.blendEq = cpy.blendEq;
        this.blendAlphaEq = cpy.blendAlphaEq;
        this.blendSrc = cpy.blendSrc;
        this.blendDst = cpy.blendDst;
        this.blendSrcAlpha = cpy.blendSrcAlpha;
        this.blendDstAlpha = cpy.blendDstAlpha;
        this.depthTest = cpy.depthTest;
        this.depthWrite = cpy.depthWrite;
        this.depthFunc = cpy.depthFunc;
        this.stencilTest = cpy.stencilTest;
        this.stencilSep = cpy.stencilSep;
        this.stencilFuncFront = cpy.stencilFuncFront;
        this.stencilRefFront = cpy.stencilRefFront;
        this.stencilMaskFront = cpy.stencilMaskFront;
        this.stencilFailOpFront = cpy.stencilFailOpFront;
        this.stencilZFailOpFront = cpy.stencilZFailOpFront;
        this.stencilZPassOpFront = cpy.stencilZPassOpFront;
        this.stencilWriteMaskFront = cpy.stencilWriteMaskFront;
        this.stencilFuncBack = cpy.stencilFuncBack;
        this.stencilRefBack = cpy.stencilRefBack;
        this.stencilMaskBack = cpy.stencilMaskBack;
        this.stencilFailOpBack = cpy.stencilFailOpBack;
        this.stencilZFailOpBack = cpy.stencilZFailOpBack;
        this.stencilZPassOpBack = cpy.stencilZPassOpBack;
        this.stencilWriteMaskBack = cpy.stencilWriteMaskBack;
        this.cullMode = cpy.cullMode;
        this.primitiveType = cpy.primitiveType;
        this.maxStream = cpy.maxStream;
        for (var i = 0; i < cpy.vertexBuffers.length; ++i) this.vertexBuffers[i] = cpy.vertexBuffers[i];
        for (var _i = 0; _i < cpy.vertexBufferOffsets.length; ++_i) this.vertexBufferOffsets[_i] = cpy.vertexBufferOffsets[_i];
        this.indexBuffer = cpy.indexBuffer;
        this.maxTextureSlot = cpy.maxTextureSlot;
        for (var _i2 = 0; _i2 < cpy.textureUnits.length; ++_i2) this.textureUnits[_i2] = cpy.textureUnits[_i2];
        this.program = cpy.program;
      };
      return State;
    })();
    exports["default"] = State;
    module.exports = exports["default"];
  }), {
    "./enums": 249
  } ],
  257: [ (function(require, module, exports) {
    "use strict";
    exports.__esModule = true;
    exports["default"] = void 0;
    var _texture = _interopRequireDefault(require("./texture"));
    var _enums = require("./enums");
    var _misc = require("./misc");
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }
    function _inheritsLoose(subClass, superClass) {
      subClass.prototype = Object.create(superClass.prototype);
      subClass.prototype.constructor = subClass;
      subClass.__proto__ = superClass;
    }
    var Texture2D = (function(_Texture) {
      _inheritsLoose(Texture2D, _Texture);
      function Texture2D(device, options) {
        var _this;
        _this = _Texture.call(this, device) || this;
        var gl = _this._device._gl;
        _this._target = gl.TEXTURE_2D;
        _this._glID = gl.createTexture();
        options.images = options.images || [ null ];
        _this.update(options);
        return _this;
      }
      var _proto = Texture2D.prototype;
      _proto.update = function update(options) {
        var gl = this._device._gl;
        var genMipmaps = this._genMipmap;
        if (options) {
          void 0 !== options.width && (this._width = options.width);
          void 0 !== options.height && (this._height = options.height);
          void 0 !== options.anisotropy && (this._anisotropy = options.anisotropy);
          void 0 !== options.minFilter && (this._minFilter = options.minFilter);
          void 0 !== options.magFilter && (this._magFilter = options.magFilter);
          void 0 !== options.mipFilter && (this._mipFilter = options.mipFilter);
          void 0 !== options.wrapS && (this._wrapS = options.wrapS);
          void 0 !== options.wrapT && (this._wrapT = options.wrapT);
          if (void 0 !== options.format) {
            this._format = options.format;
            this._compressed = this._format >= _enums.enums.TEXTURE_FMT_RGB_DXT1 && this._format <= _enums.enums.TEXTURE_FMT_RGBA_PVRTC_4BPPV1 || this._format >= _enums.enums.TEXTURE_FMT_RGB_ETC2 && this._format <= _enums.enums.TEXTURE_FMT_RGBA_ETC2;
          }
          if (void 0 !== options.genMipmaps) {
            this._genMipmap = options.genMipmaps;
            genMipmaps = options.genMipmaps;
          }
          var maxSize = this._device.caps.maxTextureSize || Number.MAX_VALUE;
          var textureMaxSize = Math.max(options.width || 0, options.height || 0);
          maxSize < textureMaxSize && console.warn("The current texture size " + textureMaxSize + " exceeds the maximum size [" + maxSize + "] supported on the device.");
          if (void 0 !== options.images && options.images.length > 1) {
            genMipmaps = false;
            var maxLength = options.width > options.height ? options.width : options.height;
            maxLength >> options.images.length - 1 !== 1 && console.error("texture-2d mipmap is invalid, should have a 1x1 mipmap.");
          }
        }
        var pot = (0, _misc.isPow2)(this._width) && (0, _misc.isPow2)(this._height);
        pot || (genMipmaps = false);
        gl.activeTexture(gl.TEXTURE0);
        gl.bindTexture(gl.TEXTURE_2D, this._glID);
        if (void 0 !== options.images && options.images.length > 0) {
          this._setMipmap(options.images, options.flipY, options.premultiplyAlpha);
          options.images.length > 1 && (this._genMipmap = true);
        }
        if (genMipmaps) {
          gl.hint(gl.GENERATE_MIPMAP_HINT, gl.NICEST);
          gl.generateMipmap(gl.TEXTURE_2D);
          this._genMipmap = true;
        }
        this._setTexInfo();
        this._device._restoreTexture(0);
      };
      _proto.updateSubImage = function updateSubImage(options) {
        var gl = this._device._gl;
        var glFmt = (0, _enums.glTextureFmt)(this._format);
        gl.activeTexture(gl.TEXTURE0);
        gl.bindTexture(gl.TEXTURE_2D, this._glID);
        this._setSubImage(glFmt, options);
        this._device._restoreTexture(0);
      };
      _proto.updateImage = function updateImage(options) {
        var gl = this._device._gl;
        var glFmt = (0, _enums.glTextureFmt)(this._format);
        gl.activeTexture(gl.TEXTURE0);
        gl.bindTexture(gl.TEXTURE_2D, this._glID);
        this._setImage(glFmt, options);
        this._device._restoreTexture(0);
      };
      _proto._setSubImage = function _setSubImage(glFmt, options) {
        var gl = this._device._gl;
        var flipY = options.flipY;
        var premultiplyAlpha = options.premultiplyAlpha;
        var img = options.image;
        if (!img || ArrayBuffer.isView(img) || img instanceof ArrayBuffer) {
          void 0 === flipY ? gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, false) : gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, flipY);
          void 0 === premultiplyAlpha ? gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, false) : gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, premultiplyAlpha);
          this._compressed ? gl.compressedTexSubImage2D(gl.TEXTURE_2D, options.level, options.x, options.y, options.width, options.height, glFmt.format, img) : gl.texSubImage2D(gl.TEXTURE_2D, options.level, options.x, options.y, options.width, options.height, glFmt.format, glFmt.pixelType, img);
        } else {
          void 0 === flipY ? gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, true) : gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, flipY);
          void 0 === premultiplyAlpha ? gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, false) : gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, premultiplyAlpha);
          gl.texSubImage2D(gl.TEXTURE_2D, options.level, options.x, options.y, glFmt.format, glFmt.pixelType, img);
        }
      };
      _proto._setImage = function _setImage(glFmt, options) {
        var gl = this._device._gl;
        var flipY = options.flipY;
        var premultiplyAlpha = options.premultiplyAlpha;
        var img = options.image;
        if (!img || ArrayBuffer.isView(img) || img instanceof ArrayBuffer) {
          void 0 === flipY ? gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, false) : gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, flipY);
          void 0 === premultiplyAlpha ? gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, false) : gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, premultiplyAlpha);
          this._compressed ? gl.compressedTexImage2D(gl.TEXTURE_2D, options.level, glFmt.internalFormat, options.width, options.height, 0, img) : gl.texImage2D(gl.TEXTURE_2D, options.level, glFmt.internalFormat, options.width, options.height, 0, glFmt.format, glFmt.pixelType, img);
        } else {
          void 0 === flipY ? gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, true) : gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, flipY);
          void 0 === premultiplyAlpha ? gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, false) : gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, premultiplyAlpha);
          gl.texImage2D(gl.TEXTURE_2D, options.level, glFmt.internalFormat, glFmt.format, glFmt.pixelType, img);
        }
      };
      _proto._setMipmap = function _setMipmap(images, flipY, premultiplyAlpha) {
        var glFmt = (0, _enums.glTextureFmt)(this._format);
        var options = {
          width: this._width,
          height: this._height,
          flipY: flipY,
          premultiplyAlpha: premultiplyAlpha,
          level: 0,
          image: null
        };
        for (var i = 0; i < images.length; ++i) {
          options.level = i;
          options.width = this._width >> i;
          options.height = this._height >> i;
          options.image = images[i];
          this._setImage(glFmt, options);
        }
      };
      _proto._setTexInfo = function _setTexInfo() {
        var gl = this._device._gl;
        var pot = (0, _misc.isPow2)(this._width) && (0, _misc.isPow2)(this._height);
        if (!pot && (this._wrapS !== _enums.enums.WRAP_CLAMP || this._wrapT !== _enums.enums.WRAP_CLAMP)) {
          console.warn("WebGL1 doesn't support all wrap modes with NPOT textures");
          this._wrapS = _enums.enums.WRAP_CLAMP;
          this._wrapT = _enums.enums.WRAP_CLAMP;
        }
        var mipFilter = this._genMipmap ? this._mipFilter : -1;
        if (!pot && -1 !== mipFilter) {
          console.warn("NPOT textures do not support mipmap filter");
          mipFilter = -1;
        }
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, (0, _enums.glFilter)(gl, this._minFilter, mipFilter));
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, (0, _enums.glFilter)(gl, this._magFilter, -1));
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, this._wrapS);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, this._wrapT);
        var ext = this._device.ext("EXT_texture_filter_anisotropic");
        ext && gl.texParameteri(gl.TEXTURE_2D, ext.TEXTURE_MAX_ANISOTROPY_EXT, this._anisotropy);
      };
      return Texture2D;
    })(_texture["default"]);
    exports["default"] = Texture2D;
    module.exports = exports["default"];
  }), {
    "./enums": 249,
    "./misc": 253,
    "./texture": 259
  } ],
  258: [ (function(require, module, exports) {
    "use strict";
    exports.__esModule = true;
    exports["default"] = void 0;
    var _texture = _interopRequireDefault(require("./texture"));
    var _enums = require("./enums");
    var _misc = require("./misc");
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }
    function _inheritsLoose(subClass, superClass) {
      subClass.prototype = Object.create(superClass.prototype);
      subClass.prototype.constructor = subClass;
      subClass.__proto__ = superClass;
    }
    var TextureCube = (function(_Texture) {
      _inheritsLoose(TextureCube, _Texture);
      function TextureCube(device, options) {
        var _this;
        _this = _Texture.call(this, device) || this;
        var gl = _this._device._gl;
        _this._target = gl.TEXTURE_CUBE_MAP;
        _this._glID = gl.createTexture();
        _this.update(options);
        return _this;
      }
      var _proto = TextureCube.prototype;
      _proto.update = function update(options) {
        var gl = this._device._gl;
        var genMipmaps = this._genMipmaps;
        if (options) {
          void 0 !== options.width && (this._width = options.width);
          void 0 !== options.height && (this._height = options.height);
          void 0 !== options.anisotropy && (this._anisotropy = options.anisotropy);
          void 0 !== options.minFilter && (this._minFilter = options.minFilter);
          void 0 !== options.magFilter && (this._magFilter = options.magFilter);
          void 0 !== options.mipFilter && (this._mipFilter = options.mipFilter);
          void 0 !== options.wrapS && (this._wrapS = options.wrapS);
          void 0 !== options.wrapT && (this._wrapT = options.wrapT);
          if (void 0 !== options.format) {
            this._format = options.format;
            this._compressed = this._format >= _enums.enums.TEXTURE_FMT_RGB_DXT1 && this._format <= _enums.enums.TEXTURE_FMT_RGBA_PVRTC_4BPPV1 || this._format >= _enums.enums.TEXTURE_FMT_RGB_ETC2 && this._format <= _enums.enums.TEXTURE_FMT_RGBA_ETC2;
          }
          if (void 0 !== options.genMipmaps) {
            this._genMipmaps = options.genMipmaps;
            genMipmaps = options.genMipmaps;
          }
          if (void 0 !== options.images && options.images.length > 1) {
            genMipmaps = false;
            options.width !== options.height && console.warn("texture-cube width and height should be identical.");
            options.width >> options.images.length - 1 !== 1 && console.error("texture-cube mipmap is invalid. please set mipmap as 1x1, 2x2, 4x4 ... nxn");
          }
        }
        var pot = (0, _misc.isPow2)(this._width) && (0, _misc.isPow2)(this._height);
        pot || (genMipmaps = false);
        gl.activeTexture(gl.TEXTURE0);
        gl.bindTexture(gl.TEXTURE_CUBE_MAP, this._glID);
        if (void 0 !== options.images && options.images.length > 0) {
          this._setMipmap(options.images, options.flipY, options.premultiplyAlpha);
          options.images.length > 1 && (this._genMipmaps = true);
        }
        if (genMipmaps) {
          gl.hint(gl.GENERATE_MIPMAP_HINT, gl.NICEST);
          gl.generateMipmap(gl.TEXTURE_CUBE_MAP);
          this._genMipmaps = true;
        }
        this._setTexInfo();
        this._device._restoreTexture(0);
      };
      _proto.updateSubImage = function updateSubImage(options) {
        var gl = this._device._gl;
        var glFmt = (0, _enums.glTextureFmt)(this._format);
        gl.activeTexture(gl.TEXTURE0);
        gl.bindTexture(gl.TEXTURE_CUBE_MAP, this._glID);
        this._setSubImage(glFmt, options);
        this._device._restoreTexture(0);
      };
      _proto.updateImage = function updateImage(options) {
        var gl = this._device._gl;
        var glFmt = (0, _enums.glTextureFmt)(this._format);
        gl.activeTexture(gl.TEXTURE0);
        gl.bindTexture(gl.TEXTURE_CUBE_MAP, this._glID);
        this._setImage(glFmt, options);
        this._device._restoreTexture(0);
      };
      _proto._setSubImage = function _setSubImage(glFmt, options) {
        var gl = this._device._gl;
        var flipY = options.flipY;
        var premultiplyAlpha = options.premultiplyAlpha;
        var faceIndex = options.faceIndex;
        var img = options.image;
        void 0 === flipY ? gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, false) : gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, flipY);
        void 0 === premultiplyAlpha ? gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, false) : gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, premultiplyAlpha);
        !img || ArrayBuffer.isView(img) || img instanceof ArrayBuffer ? this._compressed ? gl.compressedTexSubImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_X + faceIndex, options.level, options.x, options.y, options.width, options.height, glFmt.format, img) : gl.texSubImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_X + faceIndex, options.level, options.x, options.y, options.width, options.height, glFmt.format, glFmt.pixelType, img) : gl.texSubImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_X + faceIndex, options.level, options.x, options.y, glFmt.format, glFmt.pixelType, img);
      };
      _proto._setImage = function _setImage(glFmt, options) {
        var gl = this._device._gl;
        var flipY = options.flipY;
        var premultiplyAlpha = options.premultiplyAlpha;
        var faceIndex = options.faceIndex;
        var img = options.image;
        void 0 === flipY ? gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, false) : gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, flipY);
        void 0 === premultiplyAlpha ? gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, false) : gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, premultiplyAlpha);
        !img || ArrayBuffer.isView(img) || img instanceof ArrayBuffer ? this._compressed ? gl.compressedTexImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_X + faceIndex, options.level, glFmt.internalFormat, options.width, options.height, 0, img) : gl.texImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_X + faceIndex, options.level, glFmt.internalFormat, options.width, options.height, 0, glFmt.format, glFmt.pixelType, img) : gl.texImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_X + faceIndex, options.level, glFmt.internalFormat, glFmt.format, glFmt.pixelType, img);
      };
      _proto._setMipmap = function _setMipmap(images, flipY, premultiplyAlpha) {
        var glFmt = (0, _enums.glTextureFmt)(this._format);
        var options = {
          width: this._width,
          height: this._height,
          faceIndex: 0,
          flipY: flipY,
          premultiplyAlpha: premultiplyAlpha,
          level: 0,
          image: null
        };
        for (var i = 0; i < images.length; ++i) {
          var levelImages = images[i];
          options.level = i;
          options.width = this._width >> i;
          options.height = this._height >> i;
          for (var face = 0; face < 6; ++face) {
            options.faceIndex = face;
            options.image = levelImages[face];
            this._setImage(glFmt, options);
          }
        }
      };
      _proto._setTexInfo = function _setTexInfo() {
        var gl = this._device._gl;
        var pot = (0, _misc.isPow2)(this._width) && (0, _misc.isPow2)(this._height);
        if (!pot && (this._wrapS !== _enums.enums.WRAP_CLAMP || this._wrapT !== _enums.enums.WRAP_CLAMP)) {
          console.warn("WebGL1 doesn't support all wrap modes with NPOT textures");
          this._wrapS = _enums.enums.WRAP_CLAMP;
          this._wrapT = _enums.enums.WRAP_CLAMP;
        }
        var mipFilter = this._genMipmaps ? this._mipFilter : -1;
        if (!pot && -1 !== mipFilter) {
          console.warn("NPOT textures do not support mipmap filter");
          mipFilter = -1;
        }
        gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_MIN_FILTER, (0, _enums.glFilter)(gl, this._minFilter, mipFilter));
        gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_MAG_FILTER, (0, _enums.glFilter)(gl, this._magFilter, -1));
        gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_WRAP_S, this._wrapS);
        gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_WRAP_T, this._wrapT);
        var ext = this._device.ext("EXT_texture_filter_anisotropic");
        ext && gl.texParameteri(gl.TEXTURE_CUBE_MAP, ext.TEXTURE_MAX_ANISOTROPY_EXT, this._anisotropy);
      };
      return TextureCube;
    })(_texture["default"]);
    exports["default"] = TextureCube;
    module.exports = exports["default"];
  }), {
    "./enums": 249,
    "./misc": 253,
    "./texture": 259
  } ],
  259: [ (function(require, module, exports) {
    "use strict";
    exports.__esModule = true;
    exports["default"] = void 0;
    var _enums = require("./enums");
    var _nullWebGLTexture = null;
    var _textureID = 0;
    var Texture = (function() {
      function Texture(device) {
        this._device = device;
        this._width = 4;
        this._height = 4;
        this._genMipmaps = false;
        this._compressed = false;
        this._anisotropy = 1;
        this._minFilter = _enums.enums.FILTER_LINEAR;
        this._magFilter = _enums.enums.FILTER_LINEAR;
        this._mipFilter = _enums.enums.FILTER_LINEAR;
        this._wrapS = _enums.enums.WRAP_REPEAT;
        this._wrapT = _enums.enums.WRAP_REPEAT;
        this._format = _enums.enums.TEXTURE_FMT_RGBA8;
        this._target = -1;
        this._id = _textureID++;
      }
      var _proto = Texture.prototype;
      _proto.destroy = function destroy() {
        if (this._glID === _nullWebGLTexture) {
          console.error("The texture already destroyed");
          return;
        }
        var gl = this._device._gl;
        gl.deleteTexture(this._glID);
        this._device._stats.tex -= this.bytes;
        this._glID = _nullWebGLTexture;
      };
      return Texture;
    })();
    exports["default"] = Texture;
    module.exports = exports["default"];
  }), {
    "./enums": 249
  } ],
  260: [ (function(require, module, exports) {
    "use strict";
    exports.__esModule = true;
    exports["default"] = void 0;
    var _enums = require("./enums");
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        "value" in descriptor && (descriptor.writable = true);
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      protoProps && _defineProperties(Constructor.prototype, protoProps);
      staticProps && _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    var VertexBuffer = (function() {
      function VertexBuffer(device, format, usage, data) {
        this._device = device;
        this._format = format;
        this._usage = usage;
        this._bytesPerVertex = this._format._bytes;
        this._bytes = data.byteLength;
        this._numVertices = this._bytes / this._bytesPerVertex;
        this._needExpandDataStore = true;
        this._glID = device._gl.createBuffer();
        this.update(0, data);
        device._stats.vb += this._bytes;
      }
      var _proto = VertexBuffer.prototype;
      _proto.destroy = function destroy() {
        if (-1 === this._glID) {
          console.error("The buffer already destroyed");
          return;
        }
        var gl = this._device._gl;
        gl.deleteBuffer(this._glID);
        this._device._stats.vb -= this.bytes;
        this._glID = -1;
      };
      _proto.update = function update(byteOffset, data) {
        if (-1 === this._glID) {
          console.error("The buffer is destroyed");
          return;
        }
        if (0 === data.byteLength) return;
        if (byteOffset + data.byteLength > this._bytes) {
          if (byteOffset) {
            console.error("Failed to update data, bytes exceed.");
            return;
          }
          this._needExpandDataStore = true;
          this._bytes = byteOffset + data.byteLength;
          this._numVertices = this._bytes / this._bytesPerVertex;
        }
        var gl = this._device._gl;
        var glUsage = this._usage;
        gl.bindBuffer(gl.ARRAY_BUFFER, this._glID);
        if (this._needExpandDataStore) {
          gl.bufferData(gl.ARRAY_BUFFER, data, glUsage);
          this._needExpandDataStore = false;
        } else gl.bufferSubData(gl.ARRAY_BUFFER, byteOffset, data);
        gl.bindBuffer(gl.ARRAY_BUFFER, null);
      };
      _proto.getFormat = function getFormat(name) {
        return this._format.element(name);
      };
      _proto.setUsage = function setUsage(usage) {
        this._usage = usage;
      };
      _createClass(VertexBuffer, [ {
        key: "count",
        get: function get() {
          return this._numVertices;
        }
      } ]);
      return VertexBuffer;
    })();
    var _default = VertexBuffer;
    exports["default"] = _default;
    module.exports = exports["default"];
  }), {
    "./enums": 249
  } ],
  261: [ (function(require, module, exports) {
    "use strict";
    exports.__esModule = true;
    exports["default"] = void 0;
    var _enums = require("./enums");
    var _murmurhash2_gc = _interopRequireDefault(require("../murmurhash2_gc"));
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }
    var VertexFormat = (function() {
      function VertexFormat(infos) {
        this._attr2el = {};
        this._elements = [];
        this._bytes = 0;
        var hash = "";
        for (var i = 0, len = infos.length; i < len; ++i) {
          var info = infos[i];
          var el = {
            name: info.name,
            offset: this._bytes,
            stride: 0,
            stream: -1,
            type: info.type,
            num: info.num,
            normalize: void 0 !== info.normalize && info.normalize,
            bytes: info.num * (0, _enums.attrTypeBytes)(info.type)
          };
          this._attr2el[el.name] = el;
          this._elements.push(el);
          this._bytes += el.bytes;
          hash += el.name + ":" + el.num + ":" + el.type + ":" + el.normalize;
        }
        for (var _i = 0, _len = this._elements.length; _i < _len; ++_i) {
          var _el = this._elements[_i];
          _el.stride = this._bytes;
        }
        this._hash = (0, _murmurhash2_gc["default"])(hash, 666);
      }
      var _proto = VertexFormat.prototype;
      _proto.element = function element(attrName) {
        return this._attr2el[attrName];
      };
      _proto.getHash = function getHash() {
        return this._hash;
      };
      return VertexFormat;
    })();
    exports["default"] = VertexFormat;
    module.exports = exports["default"];
  }), {
    "../murmurhash2_gc": 270,
    "./enums": 249
  } ],
  262: [ (function(require, module, exports) {
    "use strict";
    exports.__esModule = true;
    exports["default"] = void 0;
    var CircularPool = (function() {
      function CircularPool(fn, size) {
        this._cursor = 0;
        this._data = new Array(size);
        for (var i = 0; i < size; ++i) this._data[i] = fn();
      }
      var _proto = CircularPool.prototype;
      _proto.request = function request() {
        var item = this._data[this._cursor];
        this._cursor = (this._cursor + 1) % this._data.length;
        return item;
      };
      return CircularPool;
    })();
    exports["default"] = CircularPool;
    module.exports = exports["default"];
  }), {} ],
  263: [ (function(require, module, exports) {
    "use strict";
    exports.__esModule = true;
    exports["default"] = void 0;
    var _timsort = _interopRequireDefault(require("./timsort"));
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        "value" in descriptor && (descriptor.writable = true);
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      protoProps && _defineProperties(Constructor.prototype, protoProps);
      staticProps && _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    var FixedArray = (function() {
      function FixedArray(size) {
        this._count = 0;
        this._data = new Array(size);
      }
      var _proto = FixedArray.prototype;
      _proto._resize = function _resize(size) {
        if (size > this._data.length) for (var i = this._data.length; i < size; ++i) this._data[i] = void 0;
      };
      _proto.reset = function reset() {
        for (var i = 0; i < this._count; ++i) this._data[i] = void 0;
        this._count = 0;
      };
      _proto.push = function push(val) {
        this._count >= this._data.length && this._resize(2 * this._data.length);
        this._data[this._count] = val;
        ++this._count;
      };
      _proto.pop = function pop() {
        --this._count;
        this._count < 0 && (this._count = 0);
        var ret = this._data[this._count];
        this._data[this._count] = void 0;
        return ret;
      };
      _proto.fastRemove = function fastRemove(idx) {
        if (idx >= this._count || idx < 0) return;
        var last = this._count - 1;
        this._data[idx] = this._data[last];
        this._data[last] = void 0;
        this._count -= 1;
      };
      _proto.indexOf = function indexOf(val) {
        return this._data.indexOf(val);
      };
      _proto.sort = function sort(cmp) {
        return (0, _timsort["default"])(this._data, 0, this._count, cmp);
      };
      _createClass(FixedArray, [ {
        key: "length",
        get: function get() {
          return this._count;
        }
      }, {
        key: "data",
        get: function get() {
          return this._data;
        }
      } ]);
      return FixedArray;
    })();
    exports["default"] = FixedArray;
    module.exports = exports["default"];
  }), {
    "./timsort": 268
  } ],
  264: [ (function(require, module, exports) {
    "use strict";
    exports.__esModule = true;
    exports.TypedArrayPool = exports.RecyclePool = exports.Pool = exports.LinkedArray = exports.FixedArray = exports.CircularPool = void 0;
    var _circularPool = _interopRequireDefault(require("./circular-pool"));
    exports.CircularPool = _circularPool["default"];
    var _fixedArray = _interopRequireDefault(require("./fixed-array"));
    exports.FixedArray = _fixedArray["default"];
    var _linkedArray = _interopRequireDefault(require("./linked-array"));
    exports.LinkedArray = _linkedArray["default"];
    var _pool = _interopRequireDefault(require("./pool"));
    exports.Pool = _pool["default"];
    var _recyclePool = _interopRequireDefault(require("./recycle-pool"));
    exports.RecyclePool = _recyclePool["default"];
    var _typedArrayPool = _interopRequireDefault(require("./typed-array-pool"));
    exports.TypedArrayPool = _typedArrayPool["default"];
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }
  }), {
    "./circular-pool": 262,
    "./fixed-array": 263,
    "./linked-array": 265,
    "./pool": 266,
    "./recycle-pool": 267,
    "./typed-array-pool": 269
  } ],
  265: [ (function(require, module, exports) {
    "use strict";
    exports.__esModule = true;
    exports["default"] = void 0;
    var _pool = _interopRequireDefault(require("./pool"));
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        "value" in descriptor && (descriptor.writable = true);
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      protoProps && _defineProperties(Constructor.prototype, protoProps);
      staticProps && _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    var LinkedArray = (function() {
      function LinkedArray(fn, size) {
        this._fn = fn;
        this._count = 0;
        this._head = null;
        this._tail = null;
        this._pool = new _pool["default"](fn, size);
      }
      var _proto = LinkedArray.prototype;
      _proto.add = function add() {
        var node = this._pool.alloc();
        if (this._tail) {
          this._tail._next = node;
          node._prev = this._tail;
        } else this._head = node;
        this._tail = node;
        this._count += 1;
        return node;
      };
      _proto.remove = function remove(node) {
        node._prev ? node._prev._next = node._next : this._head = node._next;
        node._next ? node._next._prev = node._prev : this._tail = node._prev;
        node._next = null;
        node._prev = null;
        this._pool.free(node);
        this._count -= 1;
      };
      _proto.forEach = function forEach(fn, binder) {
        var cursor = this._head;
        if (!cursor) return;
        binder && (fn = fn.bind(binder));
        var idx = 0;
        var next = cursor;
        while (cursor) {
          next = cursor._next;
          fn(cursor, idx, this);
          cursor = next;
          ++idx;
        }
      };
      _createClass(LinkedArray, [ {
        key: "head",
        get: function get() {
          return this._head;
        }
      }, {
        key: "tail",
        get: function get() {
          return this._tail;
        }
      }, {
        key: "length",
        get: function get() {
          return this._count;
        }
      } ]);
      return LinkedArray;
    })();
    exports["default"] = LinkedArray;
    module.exports = exports["default"];
  }), {
    "./pool": 266
  } ],
  266: [ (function(require, module, exports) {
    "use strict";
    exports.__esModule = true;
    exports["default"] = void 0;
    var Pool = (function() {
      function Pool(fn, size) {
        this._fn = fn;
        this._idx = size - 1;
        this._frees = new Array(size);
        for (var i = 0; i < size; ++i) this._frees[i] = fn();
      }
      var _proto = Pool.prototype;
      _proto._expand = function _expand(size) {
        var old = this._frees;
        this._frees = new Array(size);
        var len = size - old.length;
        for (var i = 0; i < len; ++i) this._frees[i] = this._fn();
        for (var _i = len, j = 0; _i < size; ++_i, ++j) this._frees[_i] = old[j];
        this._idx += len;
      };
      _proto.alloc = function alloc() {
        this._idx < 0 && this._expand(Math.round(1.2 * this._frees.length) + 1);
        var ret = this._frees[this._idx];
        this._frees[this._idx] = null;
        --this._idx;
        return ret;
      };
      _proto.free = function free(obj) {
        ++this._idx;
        this._frees[this._idx] = obj;
      };
      _proto.clear = function clear(fn) {
        for (var i = 0; i <= this._idx; i++) fn && fn(this._frees[i]);
        this._frees.length = 0;
        this._idx = -1;
      };
      return Pool;
    })();
    exports["default"] = Pool;
    module.exports = exports["default"];
  }), {} ],
  267: [ (function(require, module, exports) {
    "use strict";
    exports.__esModule = true;
    exports["default"] = void 0;
    var _timsort = _interopRequireDefault(require("./timsort"));
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        "value" in descriptor && (descriptor.writable = true);
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      protoProps && _defineProperties(Constructor.prototype, protoProps);
      staticProps && _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    var RecyclePool = (function() {
      function RecyclePool(fn, size) {
        this._fn = fn;
        this._count = 0;
        this._data = new Array(size);
        for (var i = 0; i < size; ++i) this._data[i] = fn();
      }
      var _proto = RecyclePool.prototype;
      _proto.reset = function reset() {
        this._count = 0;
      };
      _proto.resize = function resize(size) {
        if (size > this._data.length) for (var i = this._data.length; i < size; ++i) this._data[i] = this._fn();
      };
      _proto.add = function add() {
        this._count >= this._data.length && this.resize(2 * this._data.length);
        return this._data[this._count++];
      };
      _proto.remove = function remove(idx) {
        if (idx >= this._count) return;
        var last = this._count - 1;
        var tmp = this._data[idx];
        this._data[idx] = this._data[last];
        this._data[last] = tmp;
        this._count -= 1;
      };
      _proto.sort = function sort(cmp) {
        return (0, _timsort["default"])(this._data, 0, this._count, cmp);
      };
      _createClass(RecyclePool, [ {
        key: "length",
        get: function get() {
          return this._count;
        }
      }, {
        key: "data",
        get: function get() {
          return this._data;
        }
      } ]);
      return RecyclePool;
    })();
    exports["default"] = RecyclePool;
    cc.RecyclePool = RecyclePool;
    module.exports = exports["default"];
  }), {
    "./timsort": 268
  } ],
  268: [ (function(require, module, exports) {
    "use strict";
    exports.__esModule = true;
    exports["default"] = _default;
    var DEFAULT_MIN_MERGE = 32;
    var DEFAULT_MIN_GALLOPING = 7;
    var DEFAULT_TMP_STORAGE_LENGTH = 256;
    var POWERS_OF_TEN = [ 1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9 ];
    function log10(x) {
      if (x < 1e5) {
        if (x < 100) return x < 10 ? 0 : 1;
        if (x < 1e4) return x < 1e3 ? 2 : 3;
        return 4;
      }
      if (x < 1e7) return x < 1e6 ? 5 : 6;
      if (x < 1e9) return x < 1e8 ? 7 : 8;
      return 9;
    }
    function alphabeticalCompare(a, b) {
      if (a === b) return 0;
      if (~~a === a && ~~b === b) {
        if (0 === a || 0 === b) return a < b ? -1 : 1;
        if (a < 0 || b < 0) {
          if (b >= 0) return -1;
          if (a >= 0) return 1;
          a = -a;
          b = -b;
        }
        var al = log10(a);
        var bl = log10(b);
        var t = 0;
        if (al < bl) {
          a *= POWERS_OF_TEN[bl - al - 1];
          b /= 10;
          t = -1;
        } else if (al > bl) {
          b *= POWERS_OF_TEN[al - bl - 1];
          a /= 10;
          t = 1;
        }
        if (a === b) return t;
        return a < b ? -1 : 1;
      }
      var aStr = String(a);
      var bStr = String(b);
      if (aStr === bStr) return 0;
      return aStr < bStr ? -1 : 1;
    }
    function minRunLength(n) {
      var r = 0;
      while (n >= DEFAULT_MIN_MERGE) {
        r |= 1 & n;
        n >>= 1;
      }
      return n + r;
    }
    function makeAscendingRun(array, lo, hi, compare) {
      var runHi = lo + 1;
      if (runHi === hi) return 1;
      if (compare(array[runHi++], array[lo]) < 0) {
        while (runHi < hi && compare(array[runHi], array[runHi - 1]) < 0) runHi++;
        reverseRun(array, lo, runHi);
      } else while (runHi < hi && compare(array[runHi], array[runHi - 1]) >= 0) runHi++;
      return runHi - lo;
    }
    function reverseRun(array, lo, hi) {
      hi--;
      while (lo < hi) {
        var t = array[lo];
        array[lo++] = array[hi];
        array[hi--] = t;
      }
    }
    function binaryInsertionSort(array, lo, hi, start, compare) {
      start === lo && start++;
      for (;start < hi; start++) {
        var pivot = array[start];
        var left = lo;
        var right = start;
        while (left < right) {
          var mid = left + right >>> 1;
          compare(pivot, array[mid]) < 0 ? right = mid : left = mid + 1;
        }
        var n = start - left;
        switch (n) {
         case 3:
          array[left + 3] = array[left + 2];

         case 2:
          array[left + 2] = array[left + 1];

         case 1:
          array[left + 1] = array[left];
          break;

         default:
          while (n > 0) {
            array[left + n] = array[left + n - 1];
            n--;
          }
        }
        array[left] = pivot;
      }
    }
    function gallopLeft(value, array, start, length, hint, compare) {
      var lastOffset = 0;
      var maxOffset = 0;
      var offset = 1;
      if (compare(value, array[start + hint]) > 0) {
        maxOffset = length - hint;
        while (offset < maxOffset && compare(value, array[start + hint + offset]) > 0) {
          lastOffset = offset;
          offset = 1 + (offset << 1);
          offset <= 0 && (offset = maxOffset);
        }
        offset > maxOffset && (offset = maxOffset);
        lastOffset += hint;
        offset += hint;
      } else {
        maxOffset = hint + 1;
        while (offset < maxOffset && compare(value, array[start + hint - offset]) <= 0) {
          lastOffset = offset;
          offset = 1 + (offset << 1);
          offset <= 0 && (offset = maxOffset);
        }
        offset > maxOffset && (offset = maxOffset);
        var tmp = lastOffset;
        lastOffset = hint - offset;
        offset = hint - tmp;
      }
      lastOffset++;
      while (lastOffset < offset) {
        var m = lastOffset + (offset - lastOffset >>> 1);
        compare(value, array[start + m]) > 0 ? lastOffset = m + 1 : offset = m;
      }
      return offset;
    }
    function gallopRight(value, array, start, length, hint, compare) {
      var lastOffset = 0;
      var maxOffset = 0;
      var offset = 1;
      if (compare(value, array[start + hint]) < 0) {
        maxOffset = hint + 1;
        while (offset < maxOffset && compare(value, array[start + hint - offset]) < 0) {
          lastOffset = offset;
          offset = 1 + (offset << 1);
          offset <= 0 && (offset = maxOffset);
        }
        offset > maxOffset && (offset = maxOffset);
        var tmp = lastOffset;
        lastOffset = hint - offset;
        offset = hint - tmp;
      } else {
        maxOffset = length - hint;
        while (offset < maxOffset && compare(value, array[start + hint + offset]) >= 0) {
          lastOffset = offset;
          offset = 1 + (offset << 1);
          offset <= 0 && (offset = maxOffset);
        }
        offset > maxOffset && (offset = maxOffset);
        lastOffset += hint;
        offset += hint;
      }
      lastOffset++;
      while (lastOffset < offset) {
        var m = lastOffset + (offset - lastOffset >>> 1);
        compare(value, array[start + m]) < 0 ? offset = m : lastOffset = m + 1;
      }
      return offset;
    }
    var TimSort = (function() {
      function TimSort(array, compare) {
        this.array = array;
        this.compare = compare;
        this.minGallop = DEFAULT_MIN_GALLOPING;
        this.length = array.length;
        this.tmpStorageLength = DEFAULT_TMP_STORAGE_LENGTH;
        this.length < 2 * DEFAULT_TMP_STORAGE_LENGTH && (this.tmpStorageLength = this.length >>> 1);
        this.tmp = new Array(this.tmpStorageLength);
        this.stackLength = this.length < 120 ? 5 : this.length < 1542 ? 10 : this.length < 119151 ? 19 : 40;
        this.runStart = new Array(this.stackLength);
        this.runLength = new Array(this.stackLength);
        this.stackSize = 0;
      }
      var _proto = TimSort.prototype;
      _proto.pushRun = function pushRun(runStart, runLength) {
        this.runStart[this.stackSize] = runStart;
        this.runLength[this.stackSize] = runLength;
        this.stackSize += 1;
      };
      _proto.mergeRuns = function mergeRuns() {
        while (this.stackSize > 1) {
          var n = this.stackSize - 2;
          if (n >= 1 && this.runLength[n - 1] <= this.runLength[n] + this.runLength[n + 1] || n >= 2 && this.runLength[n - 2] <= this.runLength[n] + this.runLength[n - 1]) this.runLength[n - 1] < this.runLength[n + 1] && n--; else if (this.runLength[n] > this.runLength[n + 1]) break;
          this.mergeAt(n);
        }
      };
      _proto.forceMergeRuns = function forceMergeRuns() {
        while (this.stackSize > 1) {
          var n = this.stackSize - 2;
          n > 0 && this.runLength[n - 1] < this.runLength[n + 1] && n--;
          this.mergeAt(n);
        }
      };
      _proto.mergeAt = function mergeAt(i) {
        var compare = this.compare;
        var array = this.array;
        var start1 = this.runStart[i];
        var length1 = this.runLength[i];
        var start2 = this.runStart[i + 1];
        var length2 = this.runLength[i + 1];
        this.runLength[i] = length1 + length2;
        if (i === this.stackSize - 3) {
          this.runStart[i + 1] = this.runStart[i + 2];
          this.runLength[i + 1] = this.runLength[i + 2];
        }
        this.stackSize--;
        var k = gallopRight(array[start2], array, start1, length1, 0, compare);
        start1 += k;
        length1 -= k;
        if (0 === length1) return;
        length2 = gallopLeft(array[start1 + length1 - 1], array, start2, length2, length2 - 1, compare);
        if (0 === length2) return;
        length1 <= length2 ? this.mergeLow(start1, length1, start2, length2) : this.mergeHigh(start1, length1, start2, length2);
      };
      _proto.mergeLow = function mergeLow(start1, length1, start2, length2) {
        var compare = this.compare;
        var array = this.array;
        var tmp = this.tmp;
        var i = 0;
        for (i = 0; i < length1; i++) tmp[i] = array[start1 + i];
        var cursor1 = 0;
        var cursor2 = start2;
        var dest = start1;
        array[dest++] = array[cursor2++];
        if (0 === --length2) {
          for (i = 0; i < length1; i++) array[dest + i] = tmp[cursor1 + i];
          return;
        }
        if (1 === length1) {
          for (i = 0; i < length2; i++) array[dest + i] = array[cursor2 + i];
          array[dest + length2] = tmp[cursor1];
          return;
        }
        var minGallop = this.minGallop;
        while (true) {
          var count1 = 0;
          var count2 = 0;
          var exit = false;
          do {
            if (compare(array[cursor2], tmp[cursor1]) < 0) {
              array[dest++] = array[cursor2++];
              count2++;
              count1 = 0;
              if (0 === --length2) {
                exit = true;
                break;
              }
            } else {
              array[dest++] = tmp[cursor1++];
              count1++;
              count2 = 0;
              if (1 === --length1) {
                exit = true;
                break;
              }
            }
          } while ((count1 | count2) < minGallop);
          if (exit) break;
          do {
            count1 = gallopRight(array[cursor2], tmp, cursor1, length1, 0, compare);
            if (0 !== count1) {
              for (i = 0; i < count1; i++) array[dest + i] = tmp[cursor1 + i];
              dest += count1;
              cursor1 += count1;
              length1 -= count1;
              if (length1 <= 1) {
                exit = true;
                break;
              }
            }
            array[dest++] = array[cursor2++];
            if (0 === --length2) {
              exit = true;
              break;
            }
            count2 = gallopLeft(tmp[cursor1], array, cursor2, length2, 0, compare);
            if (0 !== count2) {
              for (i = 0; i < count2; i++) array[dest + i] = array[cursor2 + i];
              dest += count2;
              cursor2 += count2;
              length2 -= count2;
              if (0 === length2) {
                exit = true;
                break;
              }
            }
            array[dest++] = tmp[cursor1++];
            if (1 === --length1) {
              exit = true;
              break;
            }
            minGallop--;
          } while (count1 >= DEFAULT_MIN_GALLOPING || count2 >= DEFAULT_MIN_GALLOPING);
          if (exit) break;
          minGallop < 0 && (minGallop = 0);
          minGallop += 2;
        }
        this.minGallop = minGallop;
        minGallop < 1 && (this.minGallop = 1);
        if (1 === length1) {
          for (i = 0; i < length2; i++) array[dest + i] = array[cursor2 + i];
          array[dest + length2] = tmp[cursor1];
        } else {
          if (0 === length1) throw new Error("mergeLow preconditions were not respected");
          for (i = 0; i < length1; i++) array[dest + i] = tmp[cursor1 + i];
        }
      };
      _proto.mergeHigh = function mergeHigh(start1, length1, start2, length2) {
        var compare = this.compare;
        var array = this.array;
        var tmp = this.tmp;
        var i = 0;
        for (i = 0; i < length2; i++) tmp[i] = array[start2 + i];
        var cursor1 = start1 + length1 - 1;
        var cursor2 = length2 - 1;
        var dest = start2 + length2 - 1;
        var customCursor = 0;
        var customDest = 0;
        array[dest--] = array[cursor1--];
        if (0 === --length1) {
          customCursor = dest - (length2 - 1);
          for (i = 0; i < length2; i++) array[customCursor + i] = tmp[i];
          return;
        }
        if (1 === length2) {
          dest -= length1;
          cursor1 -= length1;
          customDest = dest + 1;
          customCursor = cursor1 + 1;
          for (i = length1 - 1; i >= 0; i--) array[customDest + i] = array[customCursor + i];
          array[dest] = tmp[cursor2];
          return;
        }
        var minGallop = this.minGallop;
        while (true) {
          var count1 = 0;
          var count2 = 0;
          var exit = false;
          do {
            if (compare(tmp[cursor2], array[cursor1]) < 0) {
              array[dest--] = array[cursor1--];
              count1++;
              count2 = 0;
              if (0 === --length1) {
                exit = true;
                break;
              }
            } else {
              array[dest--] = tmp[cursor2--];
              count2++;
              count1 = 0;
              if (1 === --length2) {
                exit = true;
                break;
              }
            }
          } while ((count1 | count2) < minGallop);
          if (exit) break;
          do {
            count1 = length1 - gallopRight(tmp[cursor2], array, start1, length1, length1 - 1, compare);
            if (0 !== count1) {
              dest -= count1;
              cursor1 -= count1;
              length1 -= count1;
              customDest = dest + 1;
              customCursor = cursor1 + 1;
              for (i = count1 - 1; i >= 0; i--) array[customDest + i] = array[customCursor + i];
              if (0 === length1) {
                exit = true;
                break;
              }
            }
            array[dest--] = tmp[cursor2--];
            if (1 === --length2) {
              exit = true;
              break;
            }
            count2 = length2 - gallopLeft(array[cursor1], tmp, 0, length2, length2 - 1, compare);
            if (0 !== count2) {
              dest -= count2;
              cursor2 -= count2;
              length2 -= count2;
              customDest = dest + 1;
              customCursor = cursor2 + 1;
              for (i = 0; i < count2; i++) array[customDest + i] = tmp[customCursor + i];
              if (length2 <= 1) {
                exit = true;
                break;
              }
            }
            array[dest--] = array[cursor1--];
            if (0 === --length1) {
              exit = true;
              break;
            }
            minGallop--;
          } while (count1 >= DEFAULT_MIN_GALLOPING || count2 >= DEFAULT_MIN_GALLOPING);
          if (exit) break;
          minGallop < 0 && (minGallop = 0);
          minGallop += 2;
        }
        this.minGallop = minGallop;
        minGallop < 1 && (this.minGallop = 1);
        if (1 === length2) {
          dest -= length1;
          cursor1 -= length1;
          customDest = dest + 1;
          customCursor = cursor1 + 1;
          for (i = length1 - 1; i >= 0; i--) array[customDest + i] = array[customCursor + i];
          array[dest] = tmp[cursor2];
        } else {
          if (0 === length2) throw new Error("mergeHigh preconditions were not respected");
          customCursor = dest - (length2 - 1);
          for (i = 0; i < length2; i++) array[customCursor + i] = tmp[i];
        }
      };
      return TimSort;
    })();
    function _default(array, lo, hi, compare) {
      if (!Array.isArray(array)) throw new TypeError("Can only sort arrays");
      void 0 === lo && (lo = 0);
      void 0 === hi && (hi = array.length);
      void 0 === compare && (compare = alphabeticalCompare);
      var remaining = hi - lo;
      if (remaining < 2) return;
      var runLength = 0;
      if (remaining < DEFAULT_MIN_MERGE) {
        runLength = makeAscendingRun(array, lo, hi, compare);
        binaryInsertionSort(array, lo, hi, lo + runLength, compare);
        return;
      }
      var ts = new TimSort(array, compare);
      var minRun = minRunLength(remaining);
      do {
        runLength = makeAscendingRun(array, lo, hi, compare);
        if (runLength < minRun) {
          var force = remaining;
          force > minRun && (force = minRun);
          binaryInsertionSort(array, lo, lo + force, lo + runLength, compare);
          runLength = force;
        }
        ts.pushRun(lo, runLength);
        ts.mergeRuns();
        remaining -= runLength;
        lo += runLength;
      } while (0 !== remaining);
      ts.forceMergeRuns();
    }
    module.exports = exports["default"];
  }), {} ],
  269: [ (function(require, module, exports) {
    "use strict";
    exports.__esModule = true;
    exports["default"] = void 0;
    var _bufferPools = Array(8);
    for (var i = 0; i < 8; ++i) _bufferPools[i] = [];
    function _nextPow16(v) {
      for (var _i = 16; _i <= 1 << 28; _i *= 16) if (v <= _i) return _i;
      return 0;
    }
    function _log2(v) {
      var r, shift;
      r = (v > 65535) << 4;
      v >>>= r;
      shift = (v > 255) << 3;
      v >>>= shift;
      r |= shift;
      shift = (v > 15) << 2;
      v >>>= shift;
      r |= shift;
      shift = (v > 3) << 1;
      v >>>= shift;
      r |= shift;
      return r | v >> 1;
    }
    function _alloc(n) {
      var sz = _nextPow16(n);
      var bin = _bufferPools[_log2(sz) >> 2];
      if (bin.length > 0) return bin.pop();
      return new ArrayBuffer(sz);
    }
    function _free(buf) {
      _bufferPools[_log2(buf.byteLength) >> 2].push(buf);
    }
    var _default = {
      alloc_int8: function alloc_int8(n) {
        var result = new Int8Array(_alloc(n), 0, n);
        if (result.length !== n) return result.subarray(0, n);
        return result;
      },
      alloc_uint8: function alloc_uint8(n) {
        var result = new Uint8Array(_alloc(n), 0, n);
        if (result.length !== n) return result.subarray(0, n);
        return result;
      },
      alloc_int16: function alloc_int16(n) {
        var result = new Int16Array(_alloc(2 * n), 0, n);
        if (result.length !== n) return result.subarray(0, n);
        return result;
      },
      alloc_uint16: function alloc_uint16(n) {
        var result = new Uint16Array(_alloc(2 * n), 0, n);
        if (result.length !== n) return result.subarray(0, n);
        return result;
      },
      alloc_int32: function alloc_int32(n) {
        var result = new Int32Array(_alloc(4 * n), 0, n);
        if (result.length !== n) return result.subarray(0, n);
        return result;
      },
      alloc_uint32: function alloc_uint32(n) {
        var result = new Uint32Array(_alloc(4 * n), 0, n);
        if (result.length !== n) return result.subarray(0, n);
        return result;
      },
      alloc_float32: function alloc_float32(n) {
        var result = new Float32Array(_alloc(4 * n), 0, n);
        if (result.length !== n) return result.subarray(0, n);
        return result;
      },
      alloc_float64: function alloc_float64(n) {
        var result = new Float64Array(_alloc(8 * n), 0, n);
        if (result.length !== n) return result.subarray(0, n);
        return result;
      },
      alloc_dataview: function alloc_dataview(n) {
        var result = new DataView(_alloc(n), 0, n);
        if (result.length !== n) return result.subarray(0, n);
        return result;
      },
      free: function free(array) {
        _free(array.buffer);
      },
      reset: function reset() {
        var _bufferPools = Array(8);
        for (var _i2 = 0; _i2 < 8; ++_i2) _bufferPools[_i2] = [];
      }
    };
    exports["default"] = _default;
    module.exports = exports["default"];
  }), {} ],
  270: [ (function(require, module, exports) {
    "use strict";
    exports.__esModule = true;
    exports["default"] = murmurhash2_32_gc;
    function murmurhash2_32_gc(str, seed) {
      var l = str.length, h = seed ^ l, i = 0, k;
      while (l >= 4) {
        k = 255 & str.charCodeAt(i) | (255 & str.charCodeAt(++i)) << 8 | (255 & str.charCodeAt(++i)) << 16 | (255 & str.charCodeAt(++i)) << 24;
        k = 1540483477 * (65535 & k) + ((1540483477 * (k >>> 16) & 65535) << 16);
        k ^= k >>> 24;
        k = 1540483477 * (65535 & k) + ((1540483477 * (k >>> 16) & 65535) << 16);
        h = 1540483477 * (65535 & h) + ((1540483477 * (h >>> 16) & 65535) << 16) ^ k;
        l -= 4;
        ++i;
      }
      switch (l) {
       case 3:
        h ^= (255 & str.charCodeAt(i + 2)) << 16;

       case 2:
        h ^= (255 & str.charCodeAt(i + 1)) << 8;

       case 1:
        h ^= 255 & str.charCodeAt(i);
        h = 1540483477 * (65535 & h) + ((1540483477 * (h >>> 16) & 65535) << 16);
      }
      h ^= h >>> 13;
      h = 1540483477 * (65535 & h) + ((1540483477 * (h >>> 16) & 65535) << 16);
      h ^= h >>> 15;
      return h >>> 0;
    }
    module.exports = exports["default"];
  }), {} ],
  271: [ (function(require, module, exports) {
    "use strict";
    exports.__esModule = true;
    exports["default"] = void 0;
    var _valueTypes = require("../../core/value-types");
    var _baseRenderer = _interopRequireDefault(require("../core/base-renderer"));
    var _enums = _interopRequireDefault(require("../enums"));
    var _memop = require("../memop");
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }
    function _assertThisInitialized(self) {
      if (void 0 === self) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      return self;
    }
    function _inheritsLoose(subClass, superClass) {
      subClass.prototype = Object.create(superClass.prototype);
      subClass.prototype.constructor = subClass;
      subClass.__proto__ = superClass;
    }
    var _a16_view = new Float32Array(16);
    var _a16_view_inv = new Float32Array(16);
    var _a16_proj = new Float32Array(16);
    var _a16_viewProj = new Float32Array(16);
    var _a4_camPos = new Float32Array(4);
    var _a64_shadow_lightViewProj = new Float32Array(64);
    var _a16_shadow_lightViewProjs = [];
    var _a4_shadow_info = new Float32Array(4);
    var _camPos = new _valueTypes.Vec4(0, 0, 0, 0);
    var _camFwd = new _valueTypes.Vec3(0, 0, 0);
    var _v3_tmp1 = new _valueTypes.Vec3(0, 0, 0);
    var CC_MAX_LIGHTS = 4;
    var CC_MAX_SHADOW_LIGHTS = 2;
    var _float16_pool = new _memop.RecyclePool(function() {
      return new Float32Array(16);
    }, 8);
    function sortView(a, b) {
      return a._priority - b._priority;
    }
    var ForwardRenderer = (function(_BaseRenderer) {
      _inheritsLoose(ForwardRenderer, _BaseRenderer);
      function ForwardRenderer(device, builtin) {
        var _this;
        _this = _BaseRenderer.call(this, device, builtin) || this;
        _this._time = new Float32Array(4);
        _this._lights = [];
        _this._shadowLights = [];
        _this._numLights = 0;
        _this._defines = {};
        _this._registerStage("shadowcast", _this._shadowStage.bind(_assertThisInitialized(_this)));
        _this._registerStage("opaque", _this._opaqueStage.bind(_assertThisInitialized(_this)));
        _this._registerStage("transparent", _this._transparentStage.bind(_assertThisInitialized(_this)));
        return _this;
      }
      var _proto = ForwardRenderer.prototype;
      _proto.reset = function reset() {
        _float16_pool.reset();
        _BaseRenderer.prototype.reset.call(this);
      };
      _proto.render = function render(scene, dt) {
        this.reset();
        true;
        if (dt) {
          this._time[0] += dt;
          this._time[1] = dt;
          this._time[2]++;
        }
        this._device.setUniform("cc_time", this._time);
        this._updateLights(scene);
        var canvas = this._device._gl.canvas;
        for (var i = 0; i < scene._cameras.length; ++i) {
          var view = this._requestView();
          var width = canvas.width;
          var height = canvas.height;
          var camera = scene._cameras.data[i];
          camera.extractView(view, width, height);
        }
        this._viewPools.sort(sortView);
        for (var _i = 0; _i < this._viewPools.length; ++_i) {
          var _view = this._viewPools.data[_i];
          this._render(_view, scene);
        }
      };
      _proto.renderCamera = function renderCamera(camera, scene) {
        this.reset();
        this._updateLights(scene);
        var canvas = this._device._gl.canvas;
        var width = canvas.width;
        var height = canvas.height;
        var view = this._requestView();
        camera.extractView(view, width, height);
        this._viewPools.sort(sortView);
        for (var i = 0; i < this._viewPools.length; ++i) {
          var _view2 = this._viewPools.data[i];
          this._render(_view2, scene);
        }
      };
      _proto._updateLights = function _updateLights(scene) {
        this._lights.length = 0;
        this._shadowLights.length = 0;
        var lights = scene._lights;
        for (var i = 0; i < lights.length; ++i) {
          var light = lights.data[i];
          light.update(this._device);
          if (light.shadowType !== _enums["default"].SHADOW_NONE) {
            this._shadowLights.length < CC_MAX_SHADOW_LIGHTS && this._shadowLights.splice(0, 0, light);
            var view = this._requestView();
            light.extractView(view, [ "shadowcast" ]);
            this._lights.splice(0, 0, light);
          } else this._lights.push(light);
        }
        this._updateLightDefines();
        this._numLights = lights._count;
      };
      _proto._updateLightDefines = function _updateLightDefines() {
        var defines = this._defines;
        for (var i = 0; i < this._lights.length; ++i) {
          var light = this._lights[i];
          defines["CC_LIGHT_" + i + "_TYPE"] = light._type;
          defines["CC_SHADOW_" + i + "_TYPE"] = light._shadowType;
        }
        defines.CC_NUM_LIGHTS = Math.min(CC_MAX_LIGHTS, this._lights.length);
        defines.CC_NUM_SHADOW_LIGHTS = Math.min(CC_MAX_LIGHTS, this._shadowLights.length);
      };
      _proto._submitLightsUniforms = function _submitLightsUniforms() {
        var device = this._device;
        if (this._lights.length > 0) {
          var positionAndRanges = _float16_pool.add();
          var directions = _float16_pool.add();
          var colors = _float16_pool.add();
          var lightNum = Math.min(CC_MAX_LIGHTS, this._lights.length);
          for (var i = 0; i < lightNum; ++i) {
            var light = this._lights[i];
            var index = 4 * i;
            colors.set(light._colorUniform, index);
            directions.set(light._directionUniform, index);
            positionAndRanges.set(light._positionUniform, index);
            positionAndRanges[index + 3] = light._range;
            if (light._type === _enums["default"].LIGHT_SPOT) {
              directions[index + 3] = light._spotUniform[0];
              colors[index + 3] = light._spotUniform[1];
            } else {
              directions[index + 3] = 0;
              colors[index + 3] = 0;
            }
          }
          device.setUniform("cc_lightDirection", directions);
          device.setUniform("cc_lightColor", colors);
          device.setUniform("cc_lightPositionAndRange", positionAndRanges);
        }
      };
      _proto._submitShadowStageUniforms = function _submitShadowStageUniforms(view) {
        var light = view._shadowLight;
        var shadowInfo = _a4_shadow_info;
        shadowInfo[0] = light.shadowMinDepth;
        shadowInfo[1] = light.shadowMaxDepth;
        shadowInfo[2] = light.shadowDepthScale;
        shadowInfo[3] = light.shadowDarkness;
        this._device.setUniform("cc_shadow_map_lightViewProjMatrix", _valueTypes.Mat4.toArray(_a16_viewProj, view._matViewProj));
        this._device.setUniform("cc_shadow_map_info", shadowInfo);
        this._device.setUniform("cc_shadow_map_bias", light.shadowBias);
        this._defines.CC_SHADOW_TYPE = light._shadowType;
      };
      _proto._submitOtherStagesUniforms = function _submitOtherStagesUniforms() {
        var shadowInfo = _float16_pool.add();
        for (var i = 0; i < this._shadowLights.length; ++i) {
          var light = this._shadowLights[i];
          var view = _a16_shadow_lightViewProjs[i];
          view || (view = _a16_shadow_lightViewProjs[i] = new Float32Array(_a64_shadow_lightViewProj.buffer, 64 * i, 16));
          _valueTypes.Mat4.toArray(view, light.viewProjMatrix);
          var index = 4 * i;
          shadowInfo[index] = light.shadowMinDepth;
          shadowInfo[index + 1] = light.shadowMaxDepth;
          shadowInfo[index + 2] = light._shadowResolution;
          shadowInfo[index + 3] = light.shadowDarkness;
        }
        this._device.setUniform("cc_shadow_lightViewProjMatrix", _a64_shadow_lightViewProj);
        this._device.setUniform("cc_shadow_info", shadowInfo);
      };
      _proto._sortItems = function _sortItems(items) {
        items.sort((function(a, b) {
          if (a.passes.length !== b.passes.length) return a.passes.length - b.passes.length;
          return a.sortKey - b.sortKey;
        }));
      };
      _proto._shadowStage = function _shadowStage(view, items) {
        this._submitShadowStageUniforms(view);
        for (var i = 0; i < items.length; ++i) {
          var item = items.data[i];
          item.effect.getDefine("CC_CASTING_SHADOW") && this._draw(item);
        }
      };
      _proto._drawItems = function _drawItems(view, items) {
        var shadowLights = this._shadowLights;
        if (0 === shadowLights.length && 0 === this._numLights) for (var i = 0; i < items.length; ++i) {
          var item = items.data[i];
          this._draw(item);
        } else for (var _i2 = 0; _i2 < items.length; ++_i2) {
          var _item = items.data[_i2];
          for (var shadowIdx = 0; shadowIdx < shadowLights.length; ++shadowIdx) this._device.setTexture("cc_shadow_map_" + shadowIdx, shadowLights[shadowIdx].shadowMap, this._allocTextureUnit());
          this._draw(_item);
        }
      };
      _proto._opaqueStage = function _opaqueStage(view, items) {
        view.getPosition(_camPos);
        this._device.setUniform("cc_matView", _valueTypes.Mat4.toArray(_a16_view, view._matView));
        this._device.setUniform("cc_matViewInv", _valueTypes.Mat4.toArray(_a16_view_inv, view._matViewInv));
        this._device.setUniform("cc_matProj", _valueTypes.Mat4.toArray(_a16_proj, view._matProj));
        this._device.setUniform("cc_matViewProj", _valueTypes.Mat4.toArray(_a16_viewProj, view._matViewProj));
        this._device.setUniform("cc_cameraPos", _valueTypes.Vec4.toArray(_a4_camPos, _camPos));
        this._submitLightsUniforms();
        this._submitOtherStagesUniforms();
        this._drawItems(view, items);
      };
      _proto._transparentStage = function _transparentStage(view, items) {
        view.getPosition(_camPos);
        view.getForward(_camFwd);
        this._device.setUniform("cc_matView", _valueTypes.Mat4.toArray(_a16_view, view._matView));
        this._device.setUniform("cc_matViewInv", _valueTypes.Mat4.toArray(_a16_view_inv, view._matViewInv));
        this._device.setUniform("cc_matProj", _valueTypes.Mat4.toArray(_a16_proj, view._matProj));
        this._device.setUniform("cc_matViewProj", _valueTypes.Mat4.toArray(_a16_viewProj, view._matViewProj));
        this._device.setUniform("cc_cameraPos", _valueTypes.Vec4.toArray(_a4_camPos, _camPos));
        this._submitLightsUniforms();
        this._submitOtherStagesUniforms();
        for (var i = 0; i < items.length; ++i) {
          var item = items.data[i];
          item.node.getWorldPosition(_v3_tmp1);
          _valueTypes.Vec3.sub(_v3_tmp1, _v3_tmp1, _camPos);
          item.sortKey = -_valueTypes.Vec3.dot(_v3_tmp1, _camFwd);
        }
        this._sortItems(items);
        this._drawItems(view, items);
      };
      return ForwardRenderer;
    })(_baseRenderer["default"]);
    exports["default"] = ForwardRenderer;
    module.exports = exports["default"];
  }), {
    "../../core/value-types": 225,
    "../core/base-renderer": 241,
    "../enums": 247,
    "../memop": 264
  } ],
  272: [ (function(require, module, exports) {
    "use strict";
    exports.__esModule = true;
    exports["default"] = void 0;
    var _valueTypes = require("../../core/value-types");
    var _geomUtils = require("../../core/geom-utils");
    var _enums = _interopRequireDefault(require("../enums"));
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        "value" in descriptor && (descriptor.writable = true);
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      protoProps && _defineProperties(Constructor.prototype, protoProps);
      staticProps && _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    var _tmp_mat4 = new _valueTypes.Mat4();
    var _matView = new _valueTypes.Mat4();
    var _matViewInv = new _valueTypes.Mat4();
    var _matProj = new _valueTypes.Mat4();
    var _matViewProj = new _valueTypes.Mat4();
    var _matInvViewProj = new _valueTypes.Mat4();
    var _tmp_v3 = new _valueTypes.Vec3();
    var _tmp2_v3 = new _valueTypes.Vec3();
    var Camera = (function() {
      function Camera() {
        this._poolID = -1;
        this._node = null;
        this._projection = _enums["default"].PROJ_PERSPECTIVE;
        this._priority = 0;
        this._color = new _valueTypes.Vec4(.2, .3, .47, 1);
        this._depth = 1;
        this._stencil = 0;
        this._clearFlags = _enums["default"].CLEAR_COLOR | _enums["default"].CLEAR_DEPTH;
        this._clearModel = null;
        this._stages = [];
        this._framebuffer = null;
        this._near = .01;
        this._far = 1e3;
        this._fov = Math.PI / 4;
        this._rect = {
          x: 0,
          y: 0,
          w: 1,
          h: 1
        };
        this._orthoHeight = 10;
        this._cullingMask = 4294967295;
      }
      var _proto = Camera.prototype;
      _proto.setCullingMask = function setCullingMask(mask) {
        this._cullingMask = mask;
      };
      _proto.getNode = function getNode() {
        return this._node;
      };
      _proto.setNode = function setNode(node) {
        this._node = node;
      };
      _proto.getType = function getType() {
        return this._projection;
      };
      _proto.setType = function setType(type) {
        this._projection = type;
      };
      _proto.getPriority = function getPriority() {
        return this._priority;
      };
      _proto.setPriority = function setPriority(priority) {
        this._priority = priority;
      };
      _proto.getOrthoHeight = function getOrthoHeight() {
        return this._orthoHeight;
      };
      _proto.setOrthoHeight = function setOrthoHeight(val) {
        this._orthoHeight = val;
      };
      _proto.getFov = function getFov() {
        return this._fov;
      };
      _proto.setFov = function setFov(fov) {
        this._fov = fov;
      };
      _proto.getNear = function getNear() {
        return this._near;
      };
      _proto.setNear = function setNear(near) {
        this._near = near;
      };
      _proto.getFar = function getFar() {
        return this._far;
      };
      _proto.setFar = function setFar(far) {
        this._far = far;
      };
      _proto.getColor = function getColor(out) {
        return _valueTypes.Vec4.copy(out, this._color);
      };
      _proto.setColor = function setColor(r, g, b, a) {
        _valueTypes.Vec4.set(this._color, r, g, b, a);
      };
      _proto.getDepth = function getDepth() {
        return this._depth;
      };
      _proto.setDepth = function setDepth(depth) {
        this._depth = depth;
      };
      _proto.getStencil = function getStencil() {
        return this._stencil;
      };
      _proto.setStencil = function setStencil(stencil) {
        this._stencil = stencil;
      };
      _proto.getClearFlags = function getClearFlags() {
        return this._clearFlags;
      };
      _proto.setClearFlags = function setClearFlags(flags) {
        this._clearFlags = flags;
      };
      _proto.getRect = function getRect(out) {
        out.x = this._rect.x;
        out.y = this._rect.y;
        out.w = this._rect.w;
        out.h = this._rect.h;
        return out;
      };
      _proto.setRect = function setRect(x, y, w, h) {
        this._rect.x = x;
        this._rect.y = y;
        this._rect.w = w;
        this._rect.h = h;
      };
      _proto.getStages = function getStages() {
        return this._stages;
      };
      _proto.setStages = function setStages(stages) {
        this._stages = stages;
      };
      _proto.getFramebuffer = function getFramebuffer() {
        return this._framebuffer;
      };
      _proto.setFrameBuffer = function setFrameBuffer(framebuffer) {
        this._framebuffer = framebuffer;
      };
      _proto._calcMatrices = function _calcMatrices(width, height) {
        this._node.getWorldRT(_matViewInv);
        _valueTypes.Mat4.invert(_matView, _matViewInv);
        var aspect = width / height;
        if (this._projection === _enums["default"].PROJ_PERSPECTIVE) _valueTypes.Mat4.perspective(_matProj, this._fov, aspect, this._near, this._far); else {
          var x = this._orthoHeight * aspect;
          var y = this._orthoHeight;
          _valueTypes.Mat4.ortho(_matProj, -x, x, -y, y, this._near, this._far);
        }
        _valueTypes.Mat4.mul(_matViewProj, _matProj, _matView);
        _valueTypes.Mat4.invert(_matInvViewProj, _matViewProj);
      };
      _proto.extractView = function extractView(out, width, height) {
        if (this._framebuffer) {
          width = this._framebuffer._width;
          height = this._framebuffer._height;
        }
        out._priority = this._priority;
        out._rect.x = this._rect.x * width;
        out._rect.y = this._rect.y * height;
        out._rect.w = this._rect.w * width;
        out._rect.h = this._rect.h * height;
        this.getColor(out._color);
        out._depth = this._depth;
        out._stencil = this._stencil;
        out._clearFlags = this._clearFlags;
        out._clearModel = this._clearModel;
        out._stages = this._stages;
        out._framebuffer = this._framebuffer;
        this._calcMatrices(width, height);
        _valueTypes.Mat4.copy(out._matView, _matView);
        _valueTypes.Mat4.copy(out._matViewInv, _matViewInv);
        _valueTypes.Mat4.copy(out._matProj, _matProj);
        _valueTypes.Mat4.copy(out._matViewProj, _matViewProj);
        _valueTypes.Mat4.copy(out._matInvViewProj, _matInvViewProj);
        out._cullingMask = this._cullingMask;
      };
      _proto.screenPointToRay = function screenPointToRay(x, y, width, height, out) {
        if (!cc.geomUtils) return out;
        out = out || new _geomUtils.Ray();
        this._calcMatrices(width, height);
        var cx = this._rect.x * width;
        var cy = this._rect.y * height;
        var cw = this._rect.w * width;
        var ch = this._rect.h * height;
        _valueTypes.Vec3.set(_tmp2_v3, (x - cx) / cw * 2 - 1, (y - cy) / ch * 2 - 1, 1);
        _valueTypes.Vec3.transformMat4(_tmp2_v3, _tmp2_v3, _matInvViewProj);
        if (this._projection === _enums["default"].PROJ_PERSPECTIVE) this._node.getWorldPosition(_tmp_v3); else {
          _valueTypes.Vec3.set(_tmp_v3, (x - cx) / cw * 2 - 1, (y - cy) / ch * 2 - 1, -1);
          _valueTypes.Vec3.transformMat4(_tmp_v3, _tmp_v3, _matInvViewProj);
        }
        return _geomUtils.Ray.fromPoints(out, _tmp_v3, _tmp2_v3);
      };
      _proto.screenToWorld = function screenToWorld(out, screenPos, width, height) {
        this._calcMatrices(width, height);
        var cx = this._rect.x * width;
        var cy = this._rect.y * height;
        var cw = this._rect.w * width;
        var ch = this._rect.h * height;
        if (this._projection === _enums["default"].PROJ_PERSPECTIVE) {
          _valueTypes.Vec3.set(out, (screenPos.x - cx) / cw * 2 - 1, (screenPos.y - cy) / ch * 2 - 1, .9999);
          _valueTypes.Vec3.transformMat4(out, out, _matInvViewProj);
          this._node.getWorldPosition(_tmp_v3);
          _valueTypes.Vec3.lerp(out, _tmp_v3, out, (0, _valueTypes.lerp)(this._near / this._far, 1, screenPos.z));
        } else {
          _valueTypes.Vec3.set(out, (screenPos.x - cx) / cw * 2 - 1, (screenPos.y - cy) / ch * 2 - 1, 2 * screenPos.z - 1);
          _valueTypes.Vec3.transformMat4(out, out, _matInvViewProj);
        }
        return out;
      };
      _proto.worldToScreen = function worldToScreen(out, worldPos, width, height) {
        this._calcMatrices(width, height);
        var cx = this._rect.x * width;
        var cy = this._rect.y * height;
        var cw = this._rect.w * width;
        var ch = this._rect.h * height;
        _valueTypes.Vec3.transformMat4(out, worldPos, _matViewProj);
        out.x = cx + .5 * (out.x + 1) * cw;
        out.y = cy + .5 * (out.y + 1) * ch;
        out.z = .5 * out.z + .5;
        return out;
      };
      _proto.worldMatrixToScreen = function worldMatrixToScreen(out, worldMatrix, width, height) {
        this._calcMatrices(width, height);
        _valueTypes.Mat4.mul(out, _matViewProj, worldMatrix);
        var halfWidth = width / 2;
        var halfHeight = height / 2;
        _valueTypes.Mat4.identity(_tmp_mat4);
        _valueTypes.Mat4.transform(_tmp_mat4, _tmp_mat4, _valueTypes.Vec3.set(_tmp_v3, halfWidth, halfHeight, 0));
        _valueTypes.Mat4.scale(_tmp_mat4, _tmp_mat4, _valueTypes.Vec3.set(_tmp_v3, halfWidth, halfHeight, 1));
        _valueTypes.Mat4.mul(out, _tmp_mat4, out);
        return out;
      };
      _createClass(Camera, [ {
        key: "cullingMask",
        get: function get() {
          return this._cullingMask;
        },
        set: function set(mask) {
          this._cullingMask = mask;
        }
      } ]);
      return Camera;
    })();
    exports["default"] = Camera;
    module.exports = exports["default"];
  }), {
    "../../core/geom-utils": void 0,
    "../../core/value-types": 225,
    "../enums": 247
  } ],
  273: [ (function(require, module, exports) {
    "use strict";
    exports.__esModule = true;
    exports["default"] = void 0;
    var Model = (function() {
      function Model() {
        this._type = "default";
        this._poolID = -1;
        this._node = null;
        this._inputAssembler = null;
        this._effect = null;
        this._viewID = -1;
        this._cameraID = -1;
        this._userKey = -1;
        this._castShadow = false;
        this._boundingShape = null;
      }
      var _proto = Model.prototype;
      _proto.setNode = function setNode(node) {
        this._node = node;
      };
      _proto.setInputAssembler = function setInputAssembler(ia) {
        this._inputAssembler = ia;
      };
      _proto.setEffect = function setEffect(effect) {
        this._effect = effect;
      };
      _proto.setUserKey = function setUserKey(key) {
        this._userKey = key;
      };
      _proto.extractDrawItem = function extractDrawItem(out) {
        out.model = this;
        out.node = this._node;
        out.ia = this._inputAssembler;
        out.effect = this._effect;
      };
      return Model;
    })();
    exports["default"] = Model;
    module.exports = exports["default"];
  }), {} ],
  274: [ (function(require, module, exports) {
    "use strict";
    exports.__esModule = true;
    exports["default"] = void 0;
    var _memop = require("../memop");
    var Scene = (function() {
      function Scene(app) {
        this._lights = new _memop.FixedArray(16);
        this._models = new _memop.FixedArray(16);
        this._cameras = new _memop.FixedArray(16);
        this._debugCamera = null;
        this._app = app;
        this._views = [];
      }
      var _proto = Scene.prototype;
      _proto._add = function _add(pool, item) {
        if (-1 !== item._poolID) return;
        pool.push(item);
        item._poolID = pool.length - 1;
      };
      _proto._remove = function _remove(pool, item) {
        if (-1 === item._poolID) return;
        pool.data[pool.length - 1]._poolID = item._poolID;
        pool.fastRemove(item._poolID);
        item._poolID = -1;
      };
      _proto.reset = function reset() {
        for (var i = 0; i < this._models.length; ++i) {
          var model = this._models.data[i];
          model._viewID = -1;
        }
      };
      _proto.setDebugCamera = function setDebugCamera(cam) {
        this._debugCamera = cam;
      };
      _proto.getCameraCount = function getCameraCount() {
        return this._cameras.length;
      };
      _proto.getCamera = function getCamera(idx) {
        return this._cameras.data[idx];
      };
      _proto.addCamera = function addCamera(camera) {
        this._add(this._cameras, camera);
      };
      _proto.removeCamera = function removeCamera(camera) {
        this._remove(this._cameras, camera);
      };
      _proto.getModelCount = function getModelCount() {
        return this._models.length;
      };
      _proto.getModel = function getModel(idx) {
        return this._models.data[idx];
      };
      _proto.addModel = function addModel(model) {
        this._add(this._models, model);
      };
      _proto.removeModel = function removeModel(model) {
        this._remove(this._models, model);
      };
      _proto.getLightCount = function getLightCount() {
        return this._lights.length;
      };
      _proto.getLight = function getLight(idx) {
        return this._lights.data[idx];
      };
      _proto.addLight = function addLight(light) {
        this._add(this._lights, light);
      };
      _proto.removeLight = function removeLight(light) {
        this._remove(this._lights, light);
      };
      _proto.addView = function addView(view) {
        -1 === this._views.indexOf(view) && this._views.push(view);
      };
      _proto.removeView = function removeView(view) {
        var idx = this._views.indexOf(view);
        -1 !== idx && this._views.splice(idx, 1);
      };
      return Scene;
    })();
    var _default = Scene;
    exports["default"] = _default;
    module.exports = exports["default"];
  }), {
    "../memop": 264
  } ],
  275: [ (function(require, module, exports) {
    "use strict";
    exports.__esModule = true;
    exports.getInspectorProps = getInspectorProps;
    exports.getClassName = exports.getInstanceCtor = exports.getInstanceType = exports.enums2default = exports.ctor2enums = void 0;
    var _enums = _interopRequireDefault(require("./enums"));
    var _valueTypes = require("../core/value-types");
    var _CCTexture2D = _interopRequireDefault(require("../core/assets/CCTexture2D"));
    var _ctor2default, _enums2ctor, _ctor2enums, _enums2default;
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }
    var gfxTexture2D = null, gfxTextureCube = null;
    false;
    gfxTexture2D = require("./gfx/texture-2d");
    var CCObject = cc.Object;
    var ctor2default = (_ctor2default = {}, _ctor2default[Boolean] = function(v) {
      return v || false;
    }, _ctor2default[Number] = function(v) {
      return v ? ArrayBuffer.isView(v) ? v[0] : v : 0;
    }, _ctor2default[_valueTypes.Vec2] = function(v) {
      return v ? cc.v2(v[0], v[1]) : cc.v2();
    }, _ctor2default[_valueTypes.Vec3] = function(v) {
      return v ? cc.v3(v[0], v[1], v[2]) : cc.v3();
    }, _ctor2default[_valueTypes.Vec4] = function(v) {
      return v ? cc.v4(v[0], v[1], v[2], v[3]) : cc.v4();
    }, _ctor2default[_valueTypes.Color] = function(v) {
      return v ? cc.color(255 * v[0], 255 * v[1], 255 * v[2], 255 * (v[3] || 1)) : cc.color();
    }, _ctor2default[_valueTypes.Mat4] = function(v) {
      return v ? cc.mat4(v[0], v[1], v[2], v[3], v[4], v[5], v[6], v[7], v[8], v[9], v[10], v[11], v[12], v[13], v[14], v[15]) : cc.mat4();
    }, _ctor2default[_CCTexture2D["default"]] = function() {
      return null;
    }, _ctor2default[CCObject] = function() {
      return null;
    }, _ctor2default);
    var enums2ctor = (_enums2ctor = {}, _enums2ctor[_enums["default"].PARAM_INT] = Number, 
    _enums2ctor[_enums["default"].PARAM_INT2] = _valueTypes.Vec2, _enums2ctor[_enums["default"].PARAM_INT3] = _valueTypes.Vec3, 
    _enums2ctor[_enums["default"].PARAM_INT4] = _valueTypes.Vec4, _enums2ctor[_enums["default"].PARAM_FLOAT] = Number, 
    _enums2ctor[_enums["default"].PARAM_FLOAT2] = _valueTypes.Vec2, _enums2ctor[_enums["default"].PARAM_FLOAT3] = _valueTypes.Vec3, 
    _enums2ctor[_enums["default"].PARAM_FLOAT4] = _valueTypes.Vec4, _enums2ctor[_enums["default"].PARAM_MAT4] = _valueTypes.Mat4, 
    _enums2ctor[_enums["default"].PARAM_TEXTURE_2D] = _CCTexture2D["default"], _enums2ctor.color = _valueTypes.Color, 
    _enums2ctor.number = Number, _enums2ctor["boolean"] = Boolean, _enums2ctor["default"] = CCObject, 
    _enums2ctor);
    var ctor2enums = (_ctor2enums = {}, _ctor2enums[Number] = _enums["default"].PARAM_FLOAT, 
    _ctor2enums[_valueTypes.Vec2] = _enums["default"].PARAM_FLOAT2, _ctor2enums[_valueTypes.Vec3] = _enums["default"].PARAM_FLOAT3, 
    _ctor2enums[_valueTypes.Vec4] = _enums["default"].PARAM_FLOAT4, _ctor2enums[_valueTypes.Color] = _enums["default"].PARAM_COLOR3, 
    _ctor2enums[_valueTypes.Color] = _enums["default"].PARAM_COLOR4, _ctor2enums[_valueTypes.Mat4] = _enums["default"].PARAM_MAT4, 
    _ctor2enums[_CCTexture2D["default"]] = _enums["default"].PARAM_TEXTURE_2D, _ctor2enums[gfxTexture2D] = _enums["default"].PARAM_TEXTURE_2D, 
    _ctor2enums);
    exports.ctor2enums = ctor2enums;
    var enums2default = (_enums2default = {}, _enums2default[_enums["default"].PARAM_INT] = new Uint32Array([ 0 ]), 
    _enums2default[_enums["default"].PARAM_INT2] = new Uint32Array([ 0, 0 ]), _enums2default[_enums["default"].PARAM_INT3] = new Uint32Array([ 0, 0, 0 ]), 
    _enums2default[_enums["default"].PARAM_INT4] = new Uint32Array([ 0, 0, 0, 0 ]), 
    _enums2default[_enums["default"].PARAM_FLOAT] = new Float32Array([ 0 ]), _enums2default[_enums["default"].PARAM_FLOAT2] = new Float32Array([ 0, 0 ]), 
    _enums2default[_enums["default"].PARAM_FLOAT3] = new Float32Array([ 0, 0, 0 ]), 
    _enums2default[_enums["default"].PARAM_FLOAT4] = new Float32Array([ 0, 0, 0, 0 ]), 
    _enums2default[_enums["default"].PARAM_MAT4] = cc.mat4().m, _enums2default[_enums["default"].PARAM_TEXTURE_2D] = null, 
    _enums2default.number = 0, _enums2default["boolean"] = false, _enums2default);
    exports.enums2default = enums2default;
    var getInstanceType = function getInstanceType(t) {
      return enums2ctor[t] || enums2ctor["default"];
    };
    exports.getInstanceType = getInstanceType;
    var getInstanceCtor = function getInstanceCtor(t) {
      return ctor2default[getInstanceType(t)];
    };
    exports.getInstanceCtor = getInstanceCtor;
    var getClassName = function getClassName(t) {
      return cc.js.getClassName(getInstanceType(t));
    };
    exports.getClassName = getClassName;
    var className2InspectorName = {
      Number: "number",
      Boolean: "boolean"
    };
    function getInspectorProps(prop) {
      var editor = {
        type: prop.type
      };
      Object.assign(editor, prop.editor || prop.inspector);
      editor.defines = prop.defines;
      editor.value = getInstanceCtor(editor.type)(prop.value);
      prop.range && (editor.range = prop.range);
      var className = getClassName(editor.type);
      editor.typeName = className2InspectorName[className] || className;
      editor.valueCtor = enums2ctor[editor.type];
      if ("cc.Texture2D" == editor.typeName) {
        editor.typeName = "cc.Asset";
        editor.assetType = "cc.Texture2D";
      }
      return editor;
    }
  }), {
    "../core/assets/CCTexture2D": 64,
    "../core/value-types": 225,
    "./enums": 247,
    "./gfx/texture-2d": 257
  } ],
  276: [ (function(require, module, exports) {
    "use strict";
    var TiledMapAsset = cc.Class({
      name: "cc.TiledMapAsset",
      extends: cc.Asset,
      properties: {
        tmxXmlStr: "",
        textures: {
          default: [],
          type: [ cc.Texture2D ]
        },
        textureNames: [ cc.String ],
        textureSizes: {
          default: [],
          type: [ cc.Size ]
        },
        imageLayerTextures: {
          default: [],
          type: [ cc.Texture2D ]
        },
        imageLayerTextureNames: [ cc.String ],
        tsxFiles: [ cc.TextAsset ],
        tsxFileNames: [ cc.String ]
      },
      statics: {
        preventDeferredLoadDependents: true
      },
      createNode: false
    });
    cc.TiledMapAsset = TiledMapAsset;
    module.exports = TiledMapAsset;
  }), {} ],
  277: [ (function(require, module, exports) {
    "use strict";
    require("./cocos2d/core");
    require("./cocos2d/animation");
    false;
    require("./cocos2d/particle");
    require("./cocos2d/tilemap");
    require("./cocos2d/videoplayer/CCVideoPlayer");
    require("./cocos2d/webview/CCWebView");
    require("./cocos2d/core/components/CCStudioComponent");
    require("./extensions/ccpool/CCNodePool");
    require("./cocos2d/actions");
    require("./extensions/spine");
    require("./extensions/dragonbones");
    true;
    require("./cocos2d/deprecated");
  }), {
    "./cocos2d/actions": void 0,
    "./cocos2d/animation": 9,
    "./cocos2d/core": 113,
    "./cocos2d/core/components/CCStudioComponent": void 0,
    "./cocos2d/deprecated": 237,
    "./cocos2d/particle": void 0,
    "./cocos2d/particle/CCParticleAsset": 239,
    "./cocos2d/tilemap": void 0,
    "./cocos2d/tilemap/CCTiledMapAsset": 276,
    "./cocos2d/videoplayer/CCVideoPlayer": void 0,
    "./cocos2d/webview/CCWebView": void 0,
    "./extensions/ccpool/CCNodePool": void 0,
    "./extensions/dragonbones": void 0,
    "./extensions/spine": void 0
  } ],
  278: [ (function(require, module, exports) {
    "use strict";
    (function(global, factory) {
      "object" === typeof exports && "undefined" !== typeof module ? factory(exports) : "function" === typeof define && define.amd ? define([ "exports" ], factory) : factory(global.box2d = {});
    })(void 0, (function(exports) {
      function b2Assert(condition) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) args[_i - 1] = arguments[_i];
        if (!condition) throw new (Error.bind.apply(Error, [ void 0 ].concat(args)))();
      }
      function b2Maybe(value, def) {
        return void 0 !== value ? value : def;
      }
      var b2_maxFloat = 1e37;
      var b2_epsilon = 1e-5;
      var b2_epsilon_sq = b2_epsilon * b2_epsilon;
      var b2_pi = 3.14159265359;
      var b2_maxManifoldPoints = 2;
      var b2_maxPolygonVertices = 8;
      var b2_aabbExtension = .1;
      var b2_aabbMultiplier = 2;
      var b2_linearSlop = .008;
      var b2_angularSlop = 2 / 180 * b2_pi;
      var b2_polygonRadius = 2 * b2_linearSlop;
      var b2_maxSubSteps = 8;
      var b2_maxTOIContacts = 32;
      var b2_velocityThreshold = 1;
      var b2_maxLinearCorrection = .2;
      var b2_maxAngularCorrection = 8 / 180 * b2_pi;
      var b2_maxTranslation = 2;
      var b2_maxTranslationSquared = b2_maxTranslation * b2_maxTranslation;
      var b2_maxRotation = .5 * b2_pi;
      var b2_maxRotationSquared = b2_maxRotation * b2_maxRotation;
      var b2_baumgarte = .2;
      var b2_toiBaumgarte = .75;
      var b2_invalidParticleIndex = -1;
      var b2_maxParticleIndex = 2147483647;
      var b2_particleStride = .75;
      var b2_minParticleWeight = 1;
      var b2_maxParticlePressure = .25;
      var b2_maxParticleForce = .5;
      var b2_maxTriadDistance = 2;
      var b2_maxTriadDistanceSquared = b2_maxTriadDistance * b2_maxTriadDistance;
      var b2_minParticleSystemBufferCapacity = 256;
      var b2_barrierCollisionTime = 2.5;
      var b2_timeToSleep = .5;
      var b2_linearSleepTolerance = .01;
      var b2_angularSleepTolerance = 2 / 180 * b2_pi;
      function b2Alloc(size) {
        return null;
      }
      function b2Free(mem) {}
      function b2Log(message) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) args[_i - 1] = arguments[_i];
      }
      var b2Version = (function() {
        function b2Version(major, minor, revision) {
          void 0 === major && (major = 0);
          void 0 === minor && (minor = 0);
          void 0 === revision && (revision = 0);
          this.major = 0;
          this.minor = 0;
          this.revision = 0;
          this.major = major;
          this.minor = minor;
          this.revision = revision;
        }
        b2Version.prototype.toString = function() {
          return this.major + "." + this.minor + "." + this.revision;
        };
        return b2Version;
      })();
      var b2_version = new b2Version(2, 3, 2);
      var b2_branch = "master";
      var b2_commit = "fbf51801d80fc389d43dc46524520e89043b6faf";
      function b2ParseInt(v) {
        return parseInt(v, 10);
      }
      function b2ParseUInt(v) {
        return Math.abs(parseInt(v, 10));
      }
      function b2MakeArray(length, init) {
        var a = [];
        for (var i = 0; i < length; ++i) a.push(init(i));
        return a;
      }
      function b2MakeNullArray(length) {
        var a = [];
        for (var i = 0; i < length; ++i) a.push(null);
        return a;
      }
      function b2MakeNumberArray(length, init) {
        void 0 === init && (init = 0);
        var a = [];
        for (var i = 0; i < length; ++i) a.push(init);
        return a;
      }
      var b2_pi_over_180 = b2_pi / 180;
      var b2_180_over_pi = 180 / b2_pi;
      var b2_two_pi = 2 * b2_pi;
      var b2Abs = Math.abs;
      var b2Min = Math.min;
      var b2Max = Math.max;
      function b2Clamp(a, lo, hi) {
        return a < lo ? lo : a > hi ? hi : a;
      }
      function b2Swap(a, b) {
        var tmp = a[0];
        a[0] = b[0];
        b[0] = tmp;
      }
      var b2IsValid = isFinite;
      function b2Sq(n) {
        return n * n;
      }
      function b2InvSqrt(n) {
        return 1 / Math.sqrt(n);
      }
      var b2Sqrt = Math.sqrt;
      var b2Pow = Math.pow;
      function b2DegToRad(degrees) {
        return degrees * b2_pi_over_180;
      }
      function b2RadToDeg(radians) {
        return radians * b2_180_over_pi;
      }
      var b2Cos = Math.cos;
      var b2Sin = Math.sin;
      var b2Acos = Math.acos;
      var b2Asin = Math.asin;
      var b2Atan2 = Math.atan2;
      function b2NextPowerOfTwo(x) {
        x |= x >> 1 & 2147483647;
        x |= x >> 2 & 1073741823;
        x |= x >> 4 & 268435455;
        x |= x >> 8 & 16777215;
        x |= x >> 16 & 65535;
        return x + 1;
      }
      function b2IsPowerOfTwo(x) {
        return x > 0 && 0 === (x & x - 1);
      }
      function b2Random() {
        return 2 * Math.random() - 1;
      }
      function b2RandomRange(lo, hi) {
        return (hi - lo) * Math.random() + lo;
      }
      var b2Vec2 = (function() {
        function b2Vec2(x, y) {
          void 0 === x && (x = 0);
          void 0 === y && (y = 0);
          this.x = x;
          this.y = y;
        }
        b2Vec2.prototype.Clone = function() {
          return new b2Vec2(this.x, this.y);
        };
        b2Vec2.prototype.SetZero = function() {
          this.x = 0;
          this.y = 0;
          return this;
        };
        b2Vec2.prototype.Set = function(x, y) {
          this.x = x;
          this.y = y;
          return this;
        };
        b2Vec2.prototype.Copy = function(other) {
          this.x = other.x;
          this.y = other.y;
          return this;
        };
        b2Vec2.prototype.SelfAdd = function(v) {
          this.x += v.x;
          this.y += v.y;
          return this;
        };
        b2Vec2.prototype.SelfAddXY = function(x, y) {
          this.x += x;
          this.y += y;
          return this;
        };
        b2Vec2.prototype.SelfSub = function(v) {
          this.x -= v.x;
          this.y -= v.y;
          return this;
        };
        b2Vec2.prototype.SelfSubXY = function(x, y) {
          this.x -= x;
          this.y -= y;
          return this;
        };
        b2Vec2.prototype.SelfMul = function(s) {
          this.x *= s;
          this.y *= s;
          return this;
        };
        b2Vec2.prototype.SelfMulAdd = function(s, v) {
          this.x += s * v.x;
          this.y += s * v.y;
          return this;
        };
        b2Vec2.prototype.SelfMulSub = function(s, v) {
          this.x -= s * v.x;
          this.y -= s * v.y;
          return this;
        };
        b2Vec2.prototype.Dot = function(v) {
          return this.x * v.x + this.y * v.y;
        };
        b2Vec2.prototype.Cross = function(v) {
          return this.x * v.y - this.y * v.x;
        };
        b2Vec2.prototype.Length = function() {
          var x = this.x, y = this.y;
          return Math.sqrt(x * x + y * y);
        };
        b2Vec2.prototype.LengthSquared = function() {
          var x = this.x, y = this.y;
          return x * x + y * y;
        };
        b2Vec2.prototype.Normalize = function() {
          var length = this.Length();
          if (length >= b2_epsilon) {
            var inv_length = 1 / length;
            this.x *= inv_length;
            this.y *= inv_length;
          }
          return length;
        };
        b2Vec2.prototype.SelfNormalize = function() {
          var length = this.Length();
          if (length >= b2_epsilon) {
            var inv_length = 1 / length;
            this.x *= inv_length;
            this.y *= inv_length;
          }
          return this;
        };
        b2Vec2.prototype.SelfRotate = function(radians) {
          var c = Math.cos(radians);
          var s = Math.sin(radians);
          var x = this.x;
          this.x = c * x - s * this.y;
          this.y = s * x + c * this.y;
          return this;
        };
        b2Vec2.prototype.IsValid = function() {
          return isFinite(this.x) && isFinite(this.y);
        };
        b2Vec2.prototype.SelfCrossVS = function(s) {
          var x = this.x;
          this.x = s * this.y;
          this.y = -s * x;
          return this;
        };
        b2Vec2.prototype.SelfCrossSV = function(s) {
          var x = this.x;
          this.x = -s * this.y;
          this.y = s * x;
          return this;
        };
        b2Vec2.prototype.SelfMinV = function(v) {
          this.x = b2Min(this.x, v.x);
          this.y = b2Min(this.y, v.y);
          return this;
        };
        b2Vec2.prototype.SelfMaxV = function(v) {
          this.x = b2Max(this.x, v.x);
          this.y = b2Max(this.y, v.y);
          return this;
        };
        b2Vec2.prototype.SelfAbs = function() {
          this.x = b2Abs(this.x);
          this.y = b2Abs(this.y);
          return this;
        };
        b2Vec2.prototype.SelfNeg = function() {
          this.x = -this.x;
          this.y = -this.y;
          return this;
        };
        b2Vec2.prototype.SelfSkew = function() {
          var x = this.x;
          this.x = -this.y;
          this.y = x;
          return this;
        };
        b2Vec2.MakeArray = function(length) {
          return b2MakeArray(length, (function(i) {
            return new b2Vec2();
          }));
        };
        b2Vec2.AbsV = function(v, out) {
          out.x = b2Abs(v.x);
          out.y = b2Abs(v.y);
          return out;
        };
        b2Vec2.MinV = function(a, b, out) {
          out.x = b2Min(a.x, b.x);
          out.y = b2Min(a.y, b.y);
          return out;
        };
        b2Vec2.MaxV = function(a, b, out) {
          out.x = b2Max(a.x, b.x);
          out.y = b2Max(a.y, b.y);
          return out;
        };
        b2Vec2.ClampV = function(v, lo, hi, out) {
          out.x = b2Clamp(v.x, lo.x, hi.x);
          out.y = b2Clamp(v.y, lo.y, hi.y);
          return out;
        };
        b2Vec2.RotateV = function(v, radians, out) {
          var v_x = v.x, v_y = v.y;
          var c = Math.cos(radians);
          var s = Math.sin(radians);
          out.x = c * v_x - s * v_y;
          out.y = s * v_x + c * v_y;
          return out;
        };
        b2Vec2.DotVV = function(a, b) {
          return a.x * b.x + a.y * b.y;
        };
        b2Vec2.CrossVV = function(a, b) {
          return a.x * b.y - a.y * b.x;
        };
        b2Vec2.CrossVS = function(v, s, out) {
          var v_x = v.x;
          out.x = s * v.y;
          out.y = -s * v_x;
          return out;
        };
        b2Vec2.CrossVOne = function(v, out) {
          var v_x = v.x;
          out.x = v.y;
          out.y = -v_x;
          return out;
        };
        b2Vec2.CrossSV = function(s, v, out) {
          var v_x = v.x;
          out.x = -s * v.y;
          out.y = s * v_x;
          return out;
        };
        b2Vec2.CrossOneV = function(v, out) {
          var v_x = v.x;
          out.x = -v.y;
          out.y = v_x;
          return out;
        };
        b2Vec2.AddVV = function(a, b, out) {
          out.x = a.x + b.x;
          out.y = a.y + b.y;
          return out;
        };
        b2Vec2.SubVV = function(a, b, out) {
          out.x = a.x - b.x;
          out.y = a.y - b.y;
          return out;
        };
        b2Vec2.MulSV = function(s, v, out) {
          out.x = v.x * s;
          out.y = v.y * s;
          return out;
        };
        b2Vec2.MulVS = function(v, s, out) {
          out.x = v.x * s;
          out.y = v.y * s;
          return out;
        };
        b2Vec2.AddVMulSV = function(a, s, b, out) {
          out.x = a.x + s * b.x;
          out.y = a.y + s * b.y;
          return out;
        };
        b2Vec2.SubVMulSV = function(a, s, b, out) {
          out.x = a.x - s * b.x;
          out.y = a.y - s * b.y;
          return out;
        };
        b2Vec2.AddVCrossSV = function(a, s, v, out) {
          var v_x = v.x;
          out.x = a.x - s * v.y;
          out.y = a.y + s * v_x;
          return out;
        };
        b2Vec2.MidVV = function(a, b, out) {
          out.x = .5 * (a.x + b.x);
          out.y = .5 * (a.y + b.y);
          return out;
        };
        b2Vec2.ExtVV = function(a, b, out) {
          out.x = .5 * (b.x - a.x);
          out.y = .5 * (b.y - a.y);
          return out;
        };
        b2Vec2.IsEqualToV = function(a, b) {
          return a.x === b.x && a.y === b.y;
        };
        b2Vec2.DistanceVV = function(a, b) {
          var c_x = a.x - b.x;
          var c_y = a.y - b.y;
          return Math.sqrt(c_x * c_x + c_y * c_y);
        };
        b2Vec2.DistanceSquaredVV = function(a, b) {
          var c_x = a.x - b.x;
          var c_y = a.y - b.y;
          return c_x * c_x + c_y * c_y;
        };
        b2Vec2.NegV = function(v, out) {
          out.x = -v.x;
          out.y = -v.y;
          return out;
        };
        b2Vec2.ZERO = new b2Vec2(0, 0);
        b2Vec2.UNITX = new b2Vec2(1, 0);
        b2Vec2.UNITY = new b2Vec2(0, 1);
        b2Vec2.s_t0 = new b2Vec2();
        b2Vec2.s_t1 = new b2Vec2();
        b2Vec2.s_t2 = new b2Vec2();
        b2Vec2.s_t3 = new b2Vec2();
        return b2Vec2;
      })();
      var b2Vec2_zero = new b2Vec2(0, 0);
      var b2Vec3 = (function() {
        function b2Vec3(x, y, z) {
          void 0 === x && (x = 0);
          void 0 === y && (y = 0);
          void 0 === z && (z = 0);
          this.x = x;
          this.y = y;
          this.z = z;
        }
        b2Vec3.prototype.Clone = function() {
          return new b2Vec3(this.x, this.y, this.z);
        };
        b2Vec3.prototype.SetZero = function() {
          this.x = 0;
          this.y = 0;
          this.z = 0;
          return this;
        };
        b2Vec3.prototype.SetXYZ = function(x, y, z) {
          this.x = x;
          this.y = y;
          this.z = z;
          return this;
        };
        b2Vec3.prototype.Copy = function(other) {
          this.x = other.x;
          this.y = other.y;
          this.z = other.z;
          return this;
        };
        b2Vec3.prototype.SelfNeg = function() {
          this.x = -this.x;
          this.y = -this.y;
          this.z = -this.z;
          return this;
        };
        b2Vec3.prototype.SelfAdd = function(v) {
          this.x += v.x;
          this.y += v.y;
          this.z += v.z;
          return this;
        };
        b2Vec3.prototype.SelfAddXYZ = function(x, y, z) {
          this.x += x;
          this.y += y;
          this.z += z;
          return this;
        };
        b2Vec3.prototype.SelfSub = function(v) {
          this.x -= v.x;
          this.y -= v.y;
          this.z -= v.z;
          return this;
        };
        b2Vec3.prototype.SelfSubXYZ = function(x, y, z) {
          this.x -= x;
          this.y -= y;
          this.z -= z;
          return this;
        };
        b2Vec3.prototype.SelfMul = function(s) {
          this.x *= s;
          this.y *= s;
          this.z *= s;
          return this;
        };
        b2Vec3.DotV3V3 = function(a, b) {
          return a.x * b.x + a.y * b.y + a.z * b.z;
        };
        b2Vec3.CrossV3V3 = function(a, b, out) {
          var a_x = a.x, a_y = a.y, a_z = a.z;
          var b_x = b.x, b_y = b.y, b_z = b.z;
          out.x = a_y * b_z - a_z * b_y;
          out.y = a_z * b_x - a_x * b_z;
          out.z = a_x * b_y - a_y * b_x;
          return out;
        };
        b2Vec3.ZERO = new b2Vec3(0, 0, 0);
        b2Vec3.s_t0 = new b2Vec3();
        return b2Vec3;
      })();
      var b2Mat22 = (function() {
        function b2Mat22() {
          this.ex = new b2Vec2(1, 0);
          this.ey = new b2Vec2(0, 1);
        }
        b2Mat22.prototype.Clone = function() {
          return new b2Mat22().Copy(this);
        };
        b2Mat22.FromVV = function(c1, c2) {
          return new b2Mat22().SetVV(c1, c2);
        };
        b2Mat22.FromSSSS = function(r1c1, r1c2, r2c1, r2c2) {
          return new b2Mat22().SetSSSS(r1c1, r1c2, r2c1, r2c2);
        };
        b2Mat22.FromAngle = function(radians) {
          return new b2Mat22().SetAngle(radians);
        };
        b2Mat22.prototype.SetSSSS = function(r1c1, r1c2, r2c1, r2c2) {
          this.ex.Set(r1c1, r2c1);
          this.ey.Set(r1c2, r2c2);
          return this;
        };
        b2Mat22.prototype.SetVV = function(c1, c2) {
          this.ex.Copy(c1);
          this.ey.Copy(c2);
          return this;
        };
        b2Mat22.prototype.SetAngle = function(radians) {
          var c = Math.cos(radians);
          var s = Math.sin(radians);
          this.ex.Set(c, s);
          this.ey.Set(-s, c);
          return this;
        };
        b2Mat22.prototype.Copy = function(other) {
          this.ex.Copy(other.ex);
          this.ey.Copy(other.ey);
          return this;
        };
        b2Mat22.prototype.SetIdentity = function() {
          this.ex.Set(1, 0);
          this.ey.Set(0, 1);
          return this;
        };
        b2Mat22.prototype.SetZero = function() {
          this.ex.SetZero();
          this.ey.SetZero();
          return this;
        };
        b2Mat22.prototype.GetAngle = function() {
          return Math.atan2(this.ex.y, this.ex.x);
        };
        b2Mat22.prototype.GetInverse = function(out) {
          var a = this.ex.x;
          var b = this.ey.x;
          var c = this.ex.y;
          var d = this.ey.y;
          var det = a * d - b * c;
          0 !== det && (det = 1 / det);
          out.ex.x = det * d;
          out.ey.x = -det * b;
          out.ex.y = -det * c;
          out.ey.y = det * a;
          return out;
        };
        b2Mat22.prototype.Solve = function(b_x, b_y, out) {
          var a11 = this.ex.x, a12 = this.ey.x;
          var a21 = this.ex.y, a22 = this.ey.y;
          var det = a11 * a22 - a12 * a21;
          0 !== det && (det = 1 / det);
          out.x = det * (a22 * b_x - a12 * b_y);
          out.y = det * (a11 * b_y - a21 * b_x);
          return out;
        };
        b2Mat22.prototype.SelfAbs = function() {
          this.ex.SelfAbs();
          this.ey.SelfAbs();
          return this;
        };
        b2Mat22.prototype.SelfInv = function() {
          this.GetInverse(this);
          return this;
        };
        b2Mat22.prototype.SelfAddM = function(M) {
          this.ex.SelfAdd(M.ex);
          this.ey.SelfAdd(M.ey);
          return this;
        };
        b2Mat22.prototype.SelfSubM = function(M) {
          this.ex.SelfSub(M.ex);
          this.ey.SelfSub(M.ey);
          return this;
        };
        b2Mat22.AbsM = function(M, out) {
          var M_ex = M.ex, M_ey = M.ey;
          out.ex.x = b2Abs(M_ex.x);
          out.ex.y = b2Abs(M_ex.y);
          out.ey.x = b2Abs(M_ey.x);
          out.ey.y = b2Abs(M_ey.y);
          return out;
        };
        b2Mat22.MulMV = function(M, v, out) {
          var M_ex = M.ex, M_ey = M.ey;
          var v_x = v.x, v_y = v.y;
          out.x = M_ex.x * v_x + M_ey.x * v_y;
          out.y = M_ex.y * v_x + M_ey.y * v_y;
          return out;
        };
        b2Mat22.MulTMV = function(M, v, out) {
          var M_ex = M.ex, M_ey = M.ey;
          var v_x = v.x, v_y = v.y;
          out.x = M_ex.x * v_x + M_ex.y * v_y;
          out.y = M_ey.x * v_x + M_ey.y * v_y;
          return out;
        };
        b2Mat22.AddMM = function(A, B, out) {
          var A_ex = A.ex, A_ey = A.ey;
          var B_ex = B.ex, B_ey = B.ey;
          out.ex.x = A_ex.x + B_ex.x;
          out.ex.y = A_ex.y + B_ex.y;
          out.ey.x = A_ey.x + B_ey.x;
          out.ey.y = A_ey.y + B_ey.y;
          return out;
        };
        b2Mat22.MulMM = function(A, B, out) {
          var A_ex_x = A.ex.x, A_ex_y = A.ex.y;
          var A_ey_x = A.ey.x, A_ey_y = A.ey.y;
          var B_ex_x = B.ex.x, B_ex_y = B.ex.y;
          var B_ey_x = B.ey.x, B_ey_y = B.ey.y;
          out.ex.x = A_ex_x * B_ex_x + A_ey_x * B_ex_y;
          out.ex.y = A_ex_y * B_ex_x + A_ey_y * B_ex_y;
          out.ey.x = A_ex_x * B_ey_x + A_ey_x * B_ey_y;
          out.ey.y = A_ex_y * B_ey_x + A_ey_y * B_ey_y;
          return out;
        };
        b2Mat22.MulTMM = function(A, B, out) {
          var A_ex_x = A.ex.x, A_ex_y = A.ex.y;
          var A_ey_x = A.ey.x, A_ey_y = A.ey.y;
          var B_ex_x = B.ex.x, B_ex_y = B.ex.y;
          var B_ey_x = B.ey.x, B_ey_y = B.ey.y;
          out.ex.x = A_ex_x * B_ex_x + A_ex_y * B_ex_y;
          out.ex.y = A_ey_x * B_ex_x + A_ey_y * B_ex_y;
          out.ey.x = A_ex_x * B_ey_x + A_ex_y * B_ey_y;
          out.ey.y = A_ey_x * B_ey_x + A_ey_y * B_ey_y;
          return out;
        };
        b2Mat22.IDENTITY = new b2Mat22();
        return b2Mat22;
      })();
      var b2Mat33 = (function() {
        function b2Mat33() {
          this.ex = new b2Vec3(1, 0, 0);
          this.ey = new b2Vec3(0, 1, 0);
          this.ez = new b2Vec3(0, 0, 1);
        }
        b2Mat33.prototype.Clone = function() {
          return new b2Mat33().Copy(this);
        };
        b2Mat33.prototype.SetVVV = function(c1, c2, c3) {
          this.ex.Copy(c1);
          this.ey.Copy(c2);
          this.ez.Copy(c3);
          return this;
        };
        b2Mat33.prototype.Copy = function(other) {
          this.ex.Copy(other.ex);
          this.ey.Copy(other.ey);
          this.ez.Copy(other.ez);
          return this;
        };
        b2Mat33.prototype.SetIdentity = function() {
          this.ex.SetXYZ(1, 0, 0);
          this.ey.SetXYZ(0, 1, 0);
          this.ez.SetXYZ(0, 0, 1);
          return this;
        };
        b2Mat33.prototype.SetZero = function() {
          this.ex.SetZero();
          this.ey.SetZero();
          this.ez.SetZero();
          return this;
        };
        b2Mat33.prototype.SelfAddM = function(M) {
          this.ex.SelfAdd(M.ex);
          this.ey.SelfAdd(M.ey);
          this.ez.SelfAdd(M.ez);
          return this;
        };
        b2Mat33.prototype.Solve33 = function(b_x, b_y, b_z, out) {
          var a11 = this.ex.x, a21 = this.ex.y, a31 = this.ex.z;
          var a12 = this.ey.x, a22 = this.ey.y, a32 = this.ey.z;
          var a13 = this.ez.x, a23 = this.ez.y, a33 = this.ez.z;
          var det = a11 * (a22 * a33 - a32 * a23) + a21 * (a32 * a13 - a12 * a33) + a31 * (a12 * a23 - a22 * a13);
          0 !== det && (det = 1 / det);
          out.x = det * (b_x * (a22 * a33 - a32 * a23) + b_y * (a32 * a13 - a12 * a33) + b_z * (a12 * a23 - a22 * a13));
          out.y = det * (a11 * (b_y * a33 - b_z * a23) + a21 * (b_z * a13 - b_x * a33) + a31 * (b_x * a23 - b_y * a13));
          out.z = det * (a11 * (a22 * b_z - a32 * b_y) + a21 * (a32 * b_x - a12 * b_z) + a31 * (a12 * b_y - a22 * b_x));
          return out;
        };
        b2Mat33.prototype.Solve22 = function(b_x, b_y, out) {
          var a11 = this.ex.x, a12 = this.ey.x;
          var a21 = this.ex.y, a22 = this.ey.y;
          var det = a11 * a22 - a12 * a21;
          0 !== det && (det = 1 / det);
          out.x = det * (a22 * b_x - a12 * b_y);
          out.y = det * (a11 * b_y - a21 * b_x);
          return out;
        };
        b2Mat33.prototype.GetInverse22 = function(M) {
          var a = this.ex.x, b = this.ey.x, c = this.ex.y, d = this.ey.y;
          var det = a * d - b * c;
          0 !== det && (det = 1 / det);
          M.ex.x = det * d;
          M.ey.x = -det * b;
          M.ex.z = 0;
          M.ex.y = -det * c;
          M.ey.y = det * a;
          M.ey.z = 0;
          M.ez.x = 0;
          M.ez.y = 0;
          M.ez.z = 0;
        };
        b2Mat33.prototype.GetSymInverse33 = function(M) {
          var det = b2Vec3.DotV3V3(this.ex, b2Vec3.CrossV3V3(this.ey, this.ez, b2Vec3.s_t0));
          0 !== det && (det = 1 / det);
          var a11 = this.ex.x, a12 = this.ey.x, a13 = this.ez.x;
          var a22 = this.ey.y, a23 = this.ez.y;
          var a33 = this.ez.z;
          M.ex.x = det * (a22 * a33 - a23 * a23);
          M.ex.y = det * (a13 * a23 - a12 * a33);
          M.ex.z = det * (a12 * a23 - a13 * a22);
          M.ey.x = M.ex.y;
          M.ey.y = det * (a11 * a33 - a13 * a13);
          M.ey.z = det * (a13 * a12 - a11 * a23);
          M.ez.x = M.ex.z;
          M.ez.y = M.ey.z;
          M.ez.z = det * (a11 * a22 - a12 * a12);
        };
        b2Mat33.MulM33V3 = function(A, v, out) {
          var v_x = v.x, v_y = v.y, v_z = v.z;
          out.x = A.ex.x * v_x + A.ey.x * v_y + A.ez.x * v_z;
          out.y = A.ex.y * v_x + A.ey.y * v_y + A.ez.y * v_z;
          out.z = A.ex.z * v_x + A.ey.z * v_y + A.ez.z * v_z;
          return out;
        };
        b2Mat33.MulM33XYZ = function(A, x, y, z, out) {
          out.x = A.ex.x * x + A.ey.x * y + A.ez.x * z;
          out.y = A.ex.y * x + A.ey.y * y + A.ez.y * z;
          out.z = A.ex.z * x + A.ey.z * y + A.ez.z * z;
          return out;
        };
        b2Mat33.MulM33V2 = function(A, v, out) {
          var v_x = v.x, v_y = v.y;
          out.x = A.ex.x * v_x + A.ey.x * v_y;
          out.y = A.ex.y * v_x + A.ey.y * v_y;
          return out;
        };
        b2Mat33.MulM33XY = function(A, x, y, out) {
          out.x = A.ex.x * x + A.ey.x * y;
          out.y = A.ex.y * x + A.ey.y * y;
          return out;
        };
        b2Mat33.IDENTITY = new b2Mat33();
        return b2Mat33;
      })();
      var b2Rot = (function() {
        function b2Rot(angle) {
          void 0 === angle && (angle = 0);
          this.s = 0;
          this.c = 1;
          if (angle) {
            this.s = Math.sin(angle);
            this.c = Math.cos(angle);
          }
        }
        b2Rot.prototype.Clone = function() {
          return new b2Rot().Copy(this);
        };
        b2Rot.prototype.Copy = function(other) {
          this.s = other.s;
          this.c = other.c;
          return this;
        };
        b2Rot.prototype.SetAngle = function(angle) {
          this.s = Math.sin(angle);
          this.c = Math.cos(angle);
          return this;
        };
        b2Rot.prototype.SetIdentity = function() {
          this.s = 0;
          this.c = 1;
          return this;
        };
        b2Rot.prototype.GetAngle = function() {
          return Math.atan2(this.s, this.c);
        };
        b2Rot.prototype.GetXAxis = function(out) {
          out.x = this.c;
          out.y = this.s;
          return out;
        };
        b2Rot.prototype.GetYAxis = function(out) {
          out.x = -this.s;
          out.y = this.c;
          return out;
        };
        b2Rot.MulRR = function(q, r, out) {
          var q_c = q.c, q_s = q.s;
          var r_c = r.c, r_s = r.s;
          out.s = q_s * r_c + q_c * r_s;
          out.c = q_c * r_c - q_s * r_s;
          return out;
        };
        b2Rot.MulTRR = function(q, r, out) {
          var q_c = q.c, q_s = q.s;
          var r_c = r.c, r_s = r.s;
          out.s = q_c * r_s - q_s * r_c;
          out.c = q_c * r_c + q_s * r_s;
          return out;
        };
        b2Rot.MulRV = function(q, v, out) {
          var q_c = q.c, q_s = q.s;
          var v_x = v.x, v_y = v.y;
          out.x = q_c * v_x - q_s * v_y;
          out.y = q_s * v_x + q_c * v_y;
          return out;
        };
        b2Rot.MulTRV = function(q, v, out) {
          var q_c = q.c, q_s = q.s;
          var v_x = v.x, v_y = v.y;
          out.x = q_c * v_x + q_s * v_y;
          out.y = -q_s * v_x + q_c * v_y;
          return out;
        };
        b2Rot.IDENTITY = new b2Rot();
        return b2Rot;
      })();
      var b2Transform = (function() {
        function b2Transform() {
          this.p = new b2Vec2();
          this.q = new b2Rot();
        }
        b2Transform.prototype.Clone = function() {
          return new b2Transform().Copy(this);
        };
        b2Transform.prototype.Copy = function(other) {
          this.p.Copy(other.p);
          this.q.Copy(other.q);
          return this;
        };
        b2Transform.prototype.SetIdentity = function() {
          this.p.SetZero();
          this.q.SetIdentity();
          return this;
        };
        b2Transform.prototype.SetPositionRotation = function(position, q) {
          this.p.Copy(position);
          this.q.Copy(q);
          return this;
        };
        b2Transform.prototype.SetPositionAngle = function(pos, a) {
          this.p.Copy(pos);
          this.q.SetAngle(a);
          return this;
        };
        b2Transform.prototype.SetPosition = function(position) {
          this.p.Copy(position);
          return this;
        };
        b2Transform.prototype.SetPositionXY = function(x, y) {
          this.p.Set(x, y);
          return this;
        };
        b2Transform.prototype.SetRotation = function(rotation) {
          this.q.Copy(rotation);
          return this;
        };
        b2Transform.prototype.SetRotationAngle = function(radians) {
          this.q.SetAngle(radians);
          return this;
        };
        b2Transform.prototype.GetPosition = function() {
          return this.p;
        };
        b2Transform.prototype.GetRotation = function() {
          return this.q;
        };
        b2Transform.prototype.GetRotationAngle = function() {
          return this.q.GetAngle();
        };
        b2Transform.prototype.GetAngle = function() {
          return this.q.GetAngle();
        };
        b2Transform.MulXV = function(T, v, out) {
          var T_q_c = T.q.c, T_q_s = T.q.s;
          var v_x = v.x, v_y = v.y;
          out.x = T_q_c * v_x - T_q_s * v_y + T.p.x;
          out.y = T_q_s * v_x + T_q_c * v_y + T.p.y;
          return out;
        };
        b2Transform.MulTXV = function(T, v, out) {
          var T_q_c = T.q.c, T_q_s = T.q.s;
          var p_x = v.x - T.p.x;
          var p_y = v.y - T.p.y;
          out.x = T_q_c * p_x + T_q_s * p_y;
          out.y = -T_q_s * p_x + T_q_c * p_y;
          return out;
        };
        b2Transform.MulXX = function(A, B, out) {
          b2Rot.MulRR(A.q, B.q, out.q);
          b2Vec2.AddVV(b2Rot.MulRV(A.q, B.p, out.p), A.p, out.p);
          return out;
        };
        b2Transform.MulTXX = function(A, B, out) {
          b2Rot.MulTRR(A.q, B.q, out.q);
          b2Rot.MulTRV(A.q, b2Vec2.SubVV(B.p, A.p, out.p), out.p);
          return out;
        };
        b2Transform.IDENTITY = new b2Transform();
        return b2Transform;
      })();
      var b2Sweep = (function() {
        function b2Sweep() {
          this.localCenter = new b2Vec2();
          this.c0 = new b2Vec2();
          this.c = new b2Vec2();
          this.a0 = 0;
          this.a = 0;
          this.alpha0 = 0;
        }
        b2Sweep.prototype.Clone = function() {
          return new b2Sweep().Copy(this);
        };
        b2Sweep.prototype.Copy = function(other) {
          this.localCenter.Copy(other.localCenter);
          this.c0.Copy(other.c0);
          this.c.Copy(other.c);
          this.a0 = other.a0;
          this.a = other.a;
          this.alpha0 = other.alpha0;
          return this;
        };
        b2Sweep.prototype.GetTransform = function(xf, beta) {
          var one_minus_beta = 1 - beta;
          xf.p.x = one_minus_beta * this.c0.x + beta * this.c.x;
          xf.p.y = one_minus_beta * this.c0.y + beta * this.c.y;
          var angle = one_minus_beta * this.a0 + beta * this.a;
          xf.q.SetAngle(angle);
          xf.p.SelfSub(b2Rot.MulRV(xf.q, this.localCenter, b2Vec2.s_t0));
          return xf;
        };
        b2Sweep.prototype.Advance = function(alpha) {
          var beta = (alpha - this.alpha0) / (1 - this.alpha0);
          var one_minus_beta = 1 - beta;
          this.c0.x = one_minus_beta * this.c0.x + beta * this.c.x;
          this.c0.y = one_minus_beta * this.c0.y + beta * this.c.y;
          this.a0 = one_minus_beta * this.a0 + beta * this.a;
          this.alpha0 = alpha;
        };
        b2Sweep.prototype.Normalize = function() {
          var d = b2_two_pi * Math.floor(this.a0 / b2_two_pi);
          this.a0 -= d;
          this.a -= d;
        };
        return b2Sweep;
      })();
      var b2Color = (function() {
        function b2Color(rr, gg, bb, aa) {
          void 0 === rr && (rr = .5);
          void 0 === gg && (gg = .5);
          void 0 === bb && (bb = .5);
          void 0 === aa && (aa = 1);
          this.r = rr;
          this.g = gg;
          this.b = bb;
          this.a = aa;
        }
        b2Color.prototype.Clone = function() {
          return new b2Color().Copy(this);
        };
        b2Color.prototype.Copy = function(other) {
          this.r = other.r;
          this.g = other.g;
          this.b = other.b;
          this.a = other.a;
          return this;
        };
        b2Color.prototype.IsEqual = function(color) {
          return this.r === color.r && this.g === color.g && this.b === color.b && this.a === color.a;
        };
        b2Color.prototype.IsZero = function() {
          return 0 === this.r && 0 === this.g && 0 === this.b && 0 === this.a;
        };
        b2Color.prototype.Set = function(r, g, b, a) {
          void 0 === a && (a = this.a);
          this.SetRGBA(r, g, b, a);
        };
        b2Color.prototype.SetByteRGB = function(r, g, b) {
          this.r = r / 255;
          this.g = g / 255;
          this.b = b / 255;
          return this;
        };
        b2Color.prototype.SetByteRGBA = function(r, g, b, a) {
          this.r = r / 255;
          this.g = g / 255;
          this.b = b / 255;
          this.a = a / 255;
          return this;
        };
        b2Color.prototype.SetRGB = function(rr, gg, bb) {
          this.r = rr;
          this.g = gg;
          this.b = bb;
          return this;
        };
        b2Color.prototype.SetRGBA = function(rr, gg, bb, aa) {
          this.r = rr;
          this.g = gg;
          this.b = bb;
          this.a = aa;
          return this;
        };
        b2Color.prototype.SelfAdd = function(color) {
          this.r += color.r;
          this.g += color.g;
          this.b += color.b;
          this.a += color.a;
          return this;
        };
        b2Color.prototype.Add = function(color, out) {
          out.r = this.r + color.r;
          out.g = this.g + color.g;
          out.b = this.b + color.b;
          out.a = this.a + color.a;
          return out;
        };
        b2Color.prototype.SelfSub = function(color) {
          this.r -= color.r;
          this.g -= color.g;
          this.b -= color.b;
          this.a -= color.a;
          return this;
        };
        b2Color.prototype.Sub = function(color, out) {
          out.r = this.r - color.r;
          out.g = this.g - color.g;
          out.b = this.b - color.b;
          out.a = this.a - color.a;
          return out;
        };
        b2Color.prototype.SelfMul = function(s) {
          this.r *= s;
          this.g *= s;
          this.b *= s;
          this.a *= s;
          return this;
        };
        b2Color.prototype.Mul = function(s, out) {
          out.r = this.r * s;
          out.g = this.g * s;
          out.b = this.b * s;
          out.a = this.a * s;
          return out;
        };
        b2Color.prototype.Mix = function(mixColor, strength) {
          b2Color.MixColors(this, mixColor, strength);
        };
        b2Color.MixColors = function(colorA, colorB, strength) {
          var dr = strength * (colorB.r - colorA.r);
          var dg = strength * (colorB.g - colorA.g);
          var db = strength * (colorB.b - colorA.b);
          var da = strength * (colorB.a - colorA.a);
          colorA.r += dr;
          colorA.g += dg;
          colorA.b += db;
          colorA.a += da;
          colorB.r -= dr;
          colorB.g -= dg;
          colorB.b -= db;
          colorB.a -= da;
        };
        b2Color.prototype.MakeStyleString = function(alpha) {
          void 0 === alpha && (alpha = this.a);
          return b2Color.MakeStyleString(this.r, this.g, this.b, alpha);
        };
        b2Color.MakeStyleString = function(r, g, b, a) {
          void 0 === a && (a = 1);
          r *= 255;
          g *= 255;
          b *= 255;
          return a < 1 ? "rgba(" + r + "," + g + "," + b + "," + a + ")" : "rgb(" + r + "," + g + "," + b + ")";
        };
        b2Color.ZERO = new b2Color(0, 0, 0, 0);
        b2Color.RED = new b2Color(1, 0, 0);
        b2Color.GREEN = new b2Color(0, 1, 0);
        b2Color.BLUE = new b2Color(0, 0, 1);
        return b2Color;
      })();
      (function(b2DrawFlags) {
        b2DrawFlags[b2DrawFlags["e_none"] = 0] = "e_none";
        b2DrawFlags[b2DrawFlags["e_shapeBit"] = 1] = "e_shapeBit";
        b2DrawFlags[b2DrawFlags["e_jointBit"] = 2] = "e_jointBit";
        b2DrawFlags[b2DrawFlags["e_aabbBit"] = 4] = "e_aabbBit";
        b2DrawFlags[b2DrawFlags["e_pairBit"] = 8] = "e_pairBit";
        b2DrawFlags[b2DrawFlags["e_centerOfMassBit"] = 16] = "e_centerOfMassBit";
        b2DrawFlags[b2DrawFlags["e_particleBit"] = 32] = "e_particleBit";
        b2DrawFlags[b2DrawFlags["e_controllerBit"] = 64] = "e_controllerBit";
        b2DrawFlags[b2DrawFlags["e_all"] = 63] = "e_all";
      })(exports.b2DrawFlags || (exports.b2DrawFlags = {}));
      var b2Draw = (function() {
        function b2Draw() {
          this.m_drawFlags = 0;
        }
        b2Draw.prototype.SetFlags = function(flags) {
          this.m_drawFlags = flags;
        };
        b2Draw.prototype.GetFlags = function() {
          return this.m_drawFlags;
        };
        b2Draw.prototype.AppendFlags = function(flags) {
          this.m_drawFlags |= flags;
        };
        b2Draw.prototype.ClearFlags = function(flags) {
          this.m_drawFlags &= ~flags;
        };
        return b2Draw;
      })();
      var b2Timer = (function() {
        function b2Timer() {
          this.m_start = Date.now();
        }
        b2Timer.prototype.Reset = function() {
          this.m_start = Date.now();
          return this;
        };
        b2Timer.prototype.GetMilliseconds = function() {
          return Date.now() - this.m_start;
        };
        return b2Timer;
      })();
      var b2Counter = (function() {
        function b2Counter() {
          this.m_count = 0;
          this.m_min_count = 0;
          this.m_max_count = 0;
        }
        b2Counter.prototype.GetCount = function() {
          return this.m_count;
        };
        b2Counter.prototype.GetMinCount = function() {
          return this.m_min_count;
        };
        b2Counter.prototype.GetMaxCount = function() {
          return this.m_max_count;
        };
        b2Counter.prototype.ResetCount = function() {
          var count = this.m_count;
          this.m_count = 0;
          return count;
        };
        b2Counter.prototype.ResetMinCount = function() {
          this.m_min_count = 0;
        };
        b2Counter.prototype.ResetMaxCount = function() {
          this.m_max_count = 0;
        };
        b2Counter.prototype.Increment = function() {
          this.m_count++;
          this.m_max_count < this.m_count && (this.m_max_count = this.m_count);
        };
        b2Counter.prototype.Decrement = function() {
          this.m_count--;
          this.m_min_count > this.m_count && (this.m_min_count = this.m_count);
        };
        return b2Counter;
      })();
      var b2GrowableStack = (function() {
        function b2GrowableStack(N) {
          this.m_stack = [];
          this.m_count = 0;
          this.m_stack = b2MakeArray(N, (function(index) {
            return null;
          }));
          this.m_count = 0;
        }
        b2GrowableStack.prototype.Reset = function() {
          this.m_count = 0;
          return this;
        };
        b2GrowableStack.prototype.Push = function(element) {
          this.m_stack[this.m_count] = element;
          this.m_count++;
        };
        b2GrowableStack.prototype.Pop = function() {
          this.m_count--;
          var element = this.m_stack[this.m_count];
          this.m_stack[this.m_count] = null;
          if (null === element) throw new Error();
          return element;
        };
        b2GrowableStack.prototype.GetCount = function() {
          return this.m_count;
        };
        return b2GrowableStack;
      })();
      var b2BlockAllocator = (function() {
        function b2BlockAllocator() {}
        return b2BlockAllocator;
      })();
      var b2StackAllocator = (function() {
        function b2StackAllocator() {}
        return b2StackAllocator;
      })();
      var b2DistanceProxy = (function() {
        function b2DistanceProxy() {
          this.m_buffer = b2Vec2.MakeArray(2);
          this.m_vertices = this.m_buffer;
          this.m_count = 0;
          this.m_radius = 0;
        }
        b2DistanceProxy.prototype.Copy = function(other) {
          if (other.m_vertices === other.m_buffer) {
            this.m_vertices = this.m_buffer;
            this.m_buffer[0].Copy(other.m_buffer[0]);
            this.m_buffer[1].Copy(other.m_buffer[1]);
          } else this.m_vertices = other.m_vertices;
          this.m_count = other.m_count;
          this.m_radius = other.m_radius;
          return this;
        };
        b2DistanceProxy.prototype.Reset = function() {
          this.m_vertices = this.m_buffer;
          this.m_count = 0;
          this.m_radius = 0;
          return this;
        };
        b2DistanceProxy.prototype.SetShape = function(shape, index) {
          shape.SetupDistanceProxy(this, index);
        };
        b2DistanceProxy.prototype.SetVerticesRadius = function(vertices, count, radius) {
          this.m_vertices = vertices;
          this.m_count = count;
          this.m_radius = radius;
        };
        b2DistanceProxy.prototype.GetSupport = function(d) {
          var bestIndex = 0;
          var bestValue = b2Vec2.DotVV(this.m_vertices[0], d);
          for (var i = 1; i < this.m_count; ++i) {
            var value = b2Vec2.DotVV(this.m_vertices[i], d);
            if (value > bestValue) {
              bestIndex = i;
              bestValue = value;
            }
          }
          return bestIndex;
        };
        b2DistanceProxy.prototype.GetSupportVertex = function(d) {
          var bestIndex = 0;
          var bestValue = b2Vec2.DotVV(this.m_vertices[0], d);
          for (var i = 1; i < this.m_count; ++i) {
            var value = b2Vec2.DotVV(this.m_vertices[i], d);
            if (value > bestValue) {
              bestIndex = i;
              bestValue = value;
            }
          }
          return this.m_vertices[bestIndex];
        };
        b2DistanceProxy.prototype.GetVertexCount = function() {
          return this.m_count;
        };
        b2DistanceProxy.prototype.GetVertex = function(index) {
          return this.m_vertices[index];
        };
        return b2DistanceProxy;
      })();
      var b2SimplexCache = (function() {
        function b2SimplexCache() {
          this.metric = 0;
          this.count = 0;
          this.indexA = [ 0, 0, 0 ];
          this.indexB = [ 0, 0, 0 ];
        }
        b2SimplexCache.prototype.Reset = function() {
          this.metric = 0;
          this.count = 0;
          return this;
        };
        return b2SimplexCache;
      })();
      var b2DistanceInput = (function() {
        function b2DistanceInput() {
          this.proxyA = new b2DistanceProxy();
          this.proxyB = new b2DistanceProxy();
          this.transformA = new b2Transform();
          this.transformB = new b2Transform();
          this.useRadii = false;
        }
        b2DistanceInput.prototype.Reset = function() {
          this.proxyA.Reset();
          this.proxyB.Reset();
          this.transformA.SetIdentity();
          this.transformB.SetIdentity();
          this.useRadii = false;
          return this;
        };
        return b2DistanceInput;
      })();
      var b2DistanceOutput = (function() {
        function b2DistanceOutput() {
          this.pointA = new b2Vec2();
          this.pointB = new b2Vec2();
          this.distance = 0;
          this.iterations = 0;
        }
        b2DistanceOutput.prototype.Reset = function() {
          this.pointA.SetZero();
          this.pointB.SetZero();
          this.distance = 0;
          this.iterations = 0;
          return this;
        };
        return b2DistanceOutput;
      })();
      var b2ShapeCastInput = (function() {
        function b2ShapeCastInput() {
          this.proxyA = new b2DistanceProxy();
          this.proxyB = new b2DistanceProxy();
          this.transformA = new b2Transform();
          this.transformB = new b2Transform();
          this.translationB = new b2Vec2();
        }
        return b2ShapeCastInput;
      })();
      var b2ShapeCastOutput = (function() {
        function b2ShapeCastOutput() {
          this.point = new b2Vec2();
          this.normal = new b2Vec2();
          this.lambda = 0;
          this.iterations = 0;
        }
        return b2ShapeCastOutput;
      })();
      exports.b2_gjkCalls = 0;
      exports.b2_gjkIters = 0;
      exports.b2_gjkMaxIters = 0;
      function b2_gjk_reset() {
        exports.b2_gjkCalls = 0;
        exports.b2_gjkIters = 0;
        exports.b2_gjkMaxIters = 0;
      }
      var b2SimplexVertex = (function() {
        function b2SimplexVertex() {
          this.wA = new b2Vec2();
          this.wB = new b2Vec2();
          this.w = new b2Vec2();
          this.a = 0;
          this.indexA = 0;
          this.indexB = 0;
        }
        b2SimplexVertex.prototype.Copy = function(other) {
          this.wA.Copy(other.wA);
          this.wB.Copy(other.wB);
          this.w.Copy(other.w);
          this.a = other.a;
          this.indexA = other.indexA;
          this.indexB = other.indexB;
          return this;
        };
        return b2SimplexVertex;
      })();
      var b2Simplex = (function() {
        function b2Simplex() {
          this.m_v1 = new b2SimplexVertex();
          this.m_v2 = new b2SimplexVertex();
          this.m_v3 = new b2SimplexVertex();
          this.m_vertices = [];
          this.m_count = 0;
          this.m_vertices[0] = this.m_v1;
          this.m_vertices[1] = this.m_v2;
          this.m_vertices[2] = this.m_v3;
        }
        b2Simplex.prototype.ReadCache = function(cache, proxyA, transformA, proxyB, transformB) {
          this.m_count = cache.count;
          var vertices = this.m_vertices;
          for (var i = 0; i < this.m_count; ++i) {
            var v = vertices[i];
            v.indexA = cache.indexA[i];
            v.indexB = cache.indexB[i];
            var wALocal = proxyA.GetVertex(v.indexA);
            var wBLocal = proxyB.GetVertex(v.indexB);
            b2Transform.MulXV(transformA, wALocal, v.wA);
            b2Transform.MulXV(transformB, wBLocal, v.wB);
            b2Vec2.SubVV(v.wB, v.wA, v.w);
            v.a = 0;
          }
          if (this.m_count > 1) {
            var metric1 = cache.metric;
            var metric2 = this.GetMetric();
            (metric2 < .5 * metric1 || 2 * metric1 < metric2 || metric2 < b2_epsilon) && (this.m_count = 0);
          }
          if (0 === this.m_count) {
            var v = vertices[0];
            v.indexA = 0;
            v.indexB = 0;
            var wALocal = proxyA.GetVertex(0);
            var wBLocal = proxyB.GetVertex(0);
            b2Transform.MulXV(transformA, wALocal, v.wA);
            b2Transform.MulXV(transformB, wBLocal, v.wB);
            b2Vec2.SubVV(v.wB, v.wA, v.w);
            v.a = 1;
            this.m_count = 1;
          }
        };
        b2Simplex.prototype.WriteCache = function(cache) {
          cache.metric = this.GetMetric();
          cache.count = this.m_count;
          var vertices = this.m_vertices;
          for (var i = 0; i < this.m_count; ++i) {
            cache.indexA[i] = vertices[i].indexA;
            cache.indexB[i] = vertices[i].indexB;
          }
        };
        b2Simplex.prototype.GetSearchDirection = function(out) {
          switch (this.m_count) {
           case 1:
            return b2Vec2.NegV(this.m_v1.w, out);

           case 2:
            var e12 = b2Vec2.SubVV(this.m_v2.w, this.m_v1.w, out);
            var sgn = b2Vec2.CrossVV(e12, b2Vec2.NegV(this.m_v1.w, b2Vec2.s_t0));
            return sgn > 0 ? b2Vec2.CrossOneV(e12, out) : b2Vec2.CrossVOne(e12, out);

           default:
            return out.SetZero();
          }
        };
        b2Simplex.prototype.GetClosestPoint = function(out) {
          switch (this.m_count) {
           case 0:
            return out.SetZero();

           case 1:
            return out.Copy(this.m_v1.w);

           case 2:
            return out.Set(this.m_v1.a * this.m_v1.w.x + this.m_v2.a * this.m_v2.w.x, this.m_v1.a * this.m_v1.w.y + this.m_v2.a * this.m_v2.w.y);

           case 3:
           default:
            return out.SetZero();
          }
        };
        b2Simplex.prototype.GetWitnessPoints = function(pA, pB) {
          switch (this.m_count) {
           case 0:
            break;

           case 1:
            pA.Copy(this.m_v1.wA);
            pB.Copy(this.m_v1.wB);
            break;

           case 2:
            pA.x = this.m_v1.a * this.m_v1.wA.x + this.m_v2.a * this.m_v2.wA.x;
            pA.y = this.m_v1.a * this.m_v1.wA.y + this.m_v2.a * this.m_v2.wA.y;
            pB.x = this.m_v1.a * this.m_v1.wB.x + this.m_v2.a * this.m_v2.wB.x;
            pB.y = this.m_v1.a * this.m_v1.wB.y + this.m_v2.a * this.m_v2.wB.y;
            break;

           case 3:
            pB.x = pA.x = this.m_v1.a * this.m_v1.wA.x + this.m_v2.a * this.m_v2.wA.x + this.m_v3.a * this.m_v3.wA.x;
            pB.y = pA.y = this.m_v1.a * this.m_v1.wA.y + this.m_v2.a * this.m_v2.wA.y + this.m_v3.a * this.m_v3.wA.y;
          }
        };
        b2Simplex.prototype.GetMetric = function() {
          switch (this.m_count) {
           case 0:
           case 1:
            return 0;

           case 2:
            return b2Vec2.DistanceVV(this.m_v1.w, this.m_v2.w);

           case 3:
            return b2Vec2.CrossVV(b2Vec2.SubVV(this.m_v2.w, this.m_v1.w, b2Vec2.s_t0), b2Vec2.SubVV(this.m_v3.w, this.m_v1.w, b2Vec2.s_t1));

           default:
            return 0;
          }
        };
        b2Simplex.prototype.Solve2 = function() {
          var w1 = this.m_v1.w;
          var w2 = this.m_v2.w;
          var e12 = b2Vec2.SubVV(w2, w1, b2Simplex.s_e12);
          var d12_2 = -b2Vec2.DotVV(w1, e12);
          if (d12_2 <= 0) {
            this.m_v1.a = 1;
            this.m_count = 1;
            return;
          }
          var d12_1 = b2Vec2.DotVV(w2, e12);
          if (d12_1 <= 0) {
            this.m_v2.a = 1;
            this.m_count = 1;
            this.m_v1.Copy(this.m_v2);
            return;
          }
          var inv_d12 = 1 / (d12_1 + d12_2);
          this.m_v1.a = d12_1 * inv_d12;
          this.m_v2.a = d12_2 * inv_d12;
          this.m_count = 2;
        };
        b2Simplex.prototype.Solve3 = function() {
          var w1 = this.m_v1.w;
          var w2 = this.m_v2.w;
          var w3 = this.m_v3.w;
          var e12 = b2Vec2.SubVV(w2, w1, b2Simplex.s_e12);
          var w1e12 = b2Vec2.DotVV(w1, e12);
          var w2e12 = b2Vec2.DotVV(w2, e12);
          var d12_1 = w2e12;
          var d12_2 = -w1e12;
          var e13 = b2Vec2.SubVV(w3, w1, b2Simplex.s_e13);
          var w1e13 = b2Vec2.DotVV(w1, e13);
          var w3e13 = b2Vec2.DotVV(w3, e13);
          var d13_1 = w3e13;
          var d13_2 = -w1e13;
          var e23 = b2Vec2.SubVV(w3, w2, b2Simplex.s_e23);
          var w2e23 = b2Vec2.DotVV(w2, e23);
          var w3e23 = b2Vec2.DotVV(w3, e23);
          var d23_1 = w3e23;
          var d23_2 = -w2e23;
          var n123 = b2Vec2.CrossVV(e12, e13);
          var d123_1 = n123 * b2Vec2.CrossVV(w2, w3);
          var d123_2 = n123 * b2Vec2.CrossVV(w3, w1);
          var d123_3 = n123 * b2Vec2.CrossVV(w1, w2);
          if (d12_2 <= 0 && d13_2 <= 0) {
            this.m_v1.a = 1;
            this.m_count = 1;
            return;
          }
          if (d12_1 > 0 && d12_2 > 0 && d123_3 <= 0) {
            var inv_d12 = 1 / (d12_1 + d12_2);
            this.m_v1.a = d12_1 * inv_d12;
            this.m_v2.a = d12_2 * inv_d12;
            this.m_count = 2;
            return;
          }
          if (d13_1 > 0 && d13_2 > 0 && d123_2 <= 0) {
            var inv_d13 = 1 / (d13_1 + d13_2);
            this.m_v1.a = d13_1 * inv_d13;
            this.m_v3.a = d13_2 * inv_d13;
            this.m_count = 2;
            this.m_v2.Copy(this.m_v3);
            return;
          }
          if (d12_1 <= 0 && d23_2 <= 0) {
            this.m_v2.a = 1;
            this.m_count = 1;
            this.m_v1.Copy(this.m_v2);
            return;
          }
          if (d13_1 <= 0 && d23_1 <= 0) {
            this.m_v3.a = 1;
            this.m_count = 1;
            this.m_v1.Copy(this.m_v3);
            return;
          }
          if (d23_1 > 0 && d23_2 > 0 && d123_1 <= 0) {
            var inv_d23 = 1 / (d23_1 + d23_2);
            this.m_v2.a = d23_1 * inv_d23;
            this.m_v3.a = d23_2 * inv_d23;
            this.m_count = 2;
            this.m_v1.Copy(this.m_v3);
            return;
          }
          var inv_d123 = 1 / (d123_1 + d123_2 + d123_3);
          this.m_v1.a = d123_1 * inv_d123;
          this.m_v2.a = d123_2 * inv_d123;
          this.m_v3.a = d123_3 * inv_d123;
          this.m_count = 3;
        };
        b2Simplex.s_e12 = new b2Vec2();
        b2Simplex.s_e13 = new b2Vec2();
        b2Simplex.s_e23 = new b2Vec2();
        return b2Simplex;
      })();
      var b2Distance_s_simplex = new b2Simplex();
      var b2Distance_s_saveA = [ 0, 0, 0 ];
      var b2Distance_s_saveB = [ 0, 0, 0 ];
      var b2Distance_s_p = new b2Vec2();
      var b2Distance_s_d = new b2Vec2();
      var b2Distance_s_normal = new b2Vec2();
      var b2Distance_s_supportA = new b2Vec2();
      var b2Distance_s_supportB = new b2Vec2();
      function b2Distance(output, cache, input) {
        ++exports.b2_gjkCalls;
        var proxyA = input.proxyA;
        var proxyB = input.proxyB;
        var transformA = input.transformA;
        var transformB = input.transformB;
        var simplex = b2Distance_s_simplex;
        simplex.ReadCache(cache, proxyA, transformA, proxyB, transformB);
        var vertices = simplex.m_vertices;
        var k_maxIters = 20;
        var saveA = b2Distance_s_saveA;
        var saveB = b2Distance_s_saveB;
        var saveCount = 0;
        var iter = 0;
        while (iter < k_maxIters) {
          saveCount = simplex.m_count;
          for (var i = 0; i < saveCount; ++i) {
            saveA[i] = vertices[i].indexA;
            saveB[i] = vertices[i].indexB;
          }
          switch (simplex.m_count) {
           case 1:
            break;

           case 2:
            simplex.Solve2();
            break;

           case 3:
            simplex.Solve3();
          }
          if (3 === simplex.m_count) break;
          var d = simplex.GetSearchDirection(b2Distance_s_d);
          if (d.LengthSquared() < b2_epsilon_sq) break;
          var vertex = vertices[simplex.m_count];
          vertex.indexA = proxyA.GetSupport(b2Rot.MulTRV(transformA.q, b2Vec2.NegV(d, b2Vec2.s_t0), b2Distance_s_supportA));
          b2Transform.MulXV(transformA, proxyA.GetVertex(vertex.indexA), vertex.wA);
          vertex.indexB = proxyB.GetSupport(b2Rot.MulTRV(transformB.q, d, b2Distance_s_supportB));
          b2Transform.MulXV(transformB, proxyB.GetVertex(vertex.indexB), vertex.wB);
          b2Vec2.SubVV(vertex.wB, vertex.wA, vertex.w);
          ++iter;
          ++exports.b2_gjkIters;
          var duplicate = false;
          for (var i = 0; i < saveCount; ++i) if (vertex.indexA === saveA[i] && vertex.indexB === saveB[i]) {
            duplicate = true;
            break;
          }
          if (duplicate) break;
          ++simplex.m_count;
        }
        exports.b2_gjkMaxIters = b2Max(exports.b2_gjkMaxIters, iter);
        simplex.GetWitnessPoints(output.pointA, output.pointB);
        output.distance = b2Vec2.DistanceVV(output.pointA, output.pointB);
        output.iterations = iter;
        simplex.WriteCache(cache);
        if (input.useRadii) {
          var rA = proxyA.m_radius;
          var rB = proxyB.m_radius;
          if (output.distance > rA + rB && output.distance > b2_epsilon) {
            output.distance -= rA + rB;
            var normal = b2Vec2.SubVV(output.pointB, output.pointA, b2Distance_s_normal);
            normal.Normalize();
            output.pointA.SelfMulAdd(rA, normal);
            output.pointB.SelfMulSub(rB, normal);
          } else {
            var p = b2Vec2.MidVV(output.pointA, output.pointB, b2Distance_s_p);
            output.pointA.Copy(p);
            output.pointB.Copy(p);
            output.distance = 0;
          }
        }
      }
      var b2ShapeCast_s_n = new b2Vec2();
      var b2ShapeCast_s_simplex = new b2Simplex();
      var b2ShapeCast_s_wA = new b2Vec2();
      var b2ShapeCast_s_wB = new b2Vec2();
      var b2ShapeCast_s_v = new b2Vec2();
      var b2ShapeCast_s_p = new b2Vec2();
      var b2ShapeCast_s_pointA = new b2Vec2();
      var b2ShapeCast_s_pointB = new b2Vec2();
      function b2ShapeCast(output, input) {
        output.iterations = 0;
        output.lambda = 1;
        output.normal.SetZero();
        output.point.SetZero();
        var proxyA = input.proxyA;
        var proxyB = input.proxyB;
        var radiusA = b2Max(proxyA.m_radius, b2_polygonRadius);
        var radiusB = b2Max(proxyB.m_radius, b2_polygonRadius);
        var radius = radiusA + radiusB;
        var xfA = input.transformA;
        var xfB = input.transformB;
        var r = input.translationB;
        var n = b2ShapeCast_s_n.Set(0, 0);
        var lambda = 0;
        var simplex = b2ShapeCast_s_simplex;
        simplex.m_count = 0;
        var vertices = simplex.m_vertices;
        var indexA = proxyA.GetSupport(b2Rot.MulTRV(xfA.q, b2Vec2.NegV(r, b2Vec2.s_t1), b2Vec2.s_t0));
        var wA = b2Transform.MulXV(xfA, proxyA.GetVertex(indexA), b2ShapeCast_s_wA);
        var indexB = proxyB.GetSupport(b2Rot.MulTRV(xfB.q, r, b2Vec2.s_t0));
        var wB = b2Transform.MulXV(xfB, proxyB.GetVertex(indexB), b2ShapeCast_s_wB);
        var v = b2Vec2.SubVV(wA, wB, b2ShapeCast_s_v);
        var sigma = b2Max(b2_polygonRadius, radius - b2_polygonRadius);
        var tolerance = .5 * b2_linearSlop;
        var k_maxIters = 20;
        var iter = 0;
        while (iter < k_maxIters && b2Abs(v.Length() - sigma) > tolerance) {
          output.iterations += 1;
          indexA = proxyA.GetSupport(b2Rot.MulTRV(xfA.q, b2Vec2.NegV(v, b2Vec2.s_t1), b2Vec2.s_t0));
          wA = b2Transform.MulXV(xfA, proxyA.GetVertex(indexA), b2ShapeCast_s_wA);
          indexB = proxyB.GetSupport(b2Rot.MulTRV(xfB.q, v, b2Vec2.s_t0));
          wB = b2Transform.MulXV(xfB, proxyB.GetVertex(indexB), b2ShapeCast_s_wB);
          var p = b2Vec2.SubVV(wA, wB, b2ShapeCast_s_p);
          v.Normalize();
          var vp = b2Vec2.DotVV(v, p);
          var vr = b2Vec2.DotVV(v, r);
          if (vp - sigma > lambda * vr) {
            if (vr <= 0) return false;
            lambda = (vp - sigma) / vr;
            if (lambda > 1) return false;
            n.Copy(v).SelfNeg();
            simplex.m_count = 0;
          }
          var vertex = vertices[simplex.m_count];
          vertex.indexA = indexB;
          vertex.wA.Copy(wB).SelfMulAdd(lambda, r);
          vertex.indexB = indexA;
          vertex.wB.Copy(wA);
          vertex.w.Copy(vertex.wB).SelfSub(vertex.wA);
          vertex.a = 1;
          simplex.m_count += 1;
          switch (simplex.m_count) {
           case 1:
            break;

           case 2:
            simplex.Solve2();
            break;

           case 3:
            simplex.Solve3();
          }
          if (3 === simplex.m_count) return false;
          simplex.GetClosestPoint(v);
          ++iter;
        }
        var pointA = b2ShapeCast_s_pointA;
        var pointB = b2ShapeCast_s_pointB;
        simplex.GetWitnessPoints(pointA, pointB);
        if (v.LengthSquared() > 0) {
          n.Copy(v).SelfNeg();
          n.Normalize();
        }
        output.normal.Copy(n);
        output.lambda = lambda;
        output.iterations = iter;
        return true;
      }
      (function(b2ContactFeatureType) {
        b2ContactFeatureType[b2ContactFeatureType["e_vertex"] = 0] = "e_vertex";
        b2ContactFeatureType[b2ContactFeatureType["e_face"] = 1] = "e_face";
      })(exports.b2ContactFeatureType || (exports.b2ContactFeatureType = {}));
      var b2ContactFeature = (function() {
        function b2ContactFeature() {
          this._key = 0;
          this._key_invalid = false;
          this._indexA = 0;
          this._indexB = 0;
          this._typeA = 0;
          this._typeB = 0;
        }
        Object.defineProperty(b2ContactFeature.prototype, "key", {
          get: function get() {
            if (this._key_invalid) {
              this._key_invalid = false;
              this._key = this._indexA | this._indexB << 8 | this._typeA << 16 | this._typeB << 24;
            }
            return this._key;
          },
          set: function set(value) {
            this._key = value;
            this._key_invalid = false;
            this._indexA = 255 & this._key;
            this._indexB = this._key >> 8 & 255;
            this._typeA = this._key >> 16 & 255;
            this._typeB = this._key >> 24 & 255;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(b2ContactFeature.prototype, "indexA", {
          get: function get() {
            return this._indexA;
          },
          set: function set(value) {
            this._indexA = value;
            this._key_invalid = true;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(b2ContactFeature.prototype, "indexB", {
          get: function get() {
            return this._indexB;
          },
          set: function set(value) {
            this._indexB = value;
            this._key_invalid = true;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(b2ContactFeature.prototype, "typeA", {
          get: function get() {
            return this._typeA;
          },
          set: function set(value) {
            this._typeA = value;
            this._key_invalid = true;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(b2ContactFeature.prototype, "typeB", {
          get: function get() {
            return this._typeB;
          },
          set: function set(value) {
            this._typeB = value;
            this._key_invalid = true;
          },
          enumerable: true,
          configurable: true
        });
        return b2ContactFeature;
      })();
      var b2ContactID = (function() {
        function b2ContactID() {
          this.cf = new b2ContactFeature();
        }
        b2ContactID.prototype.Copy = function(o) {
          this.key = o.key;
          return this;
        };
        b2ContactID.prototype.Clone = function() {
          return new b2ContactID().Copy(this);
        };
        Object.defineProperty(b2ContactID.prototype, "key", {
          get: function get() {
            return this.cf.key;
          },
          set: function set(value) {
            this.cf.key = value;
          },
          enumerable: true,
          configurable: true
        });
        return b2ContactID;
      })();
      var b2ManifoldPoint = (function() {
        function b2ManifoldPoint() {
          this.localPoint = new b2Vec2();
          this.normalImpulse = 0;
          this.tangentImpulse = 0;
          this.id = new b2ContactID();
        }
        b2ManifoldPoint.MakeArray = function(length) {
          return b2MakeArray(length, (function(i) {
            return new b2ManifoldPoint();
          }));
        };
        b2ManifoldPoint.prototype.Reset = function() {
          this.localPoint.SetZero();
          this.normalImpulse = 0;
          this.tangentImpulse = 0;
          this.id.key = 0;
        };
        b2ManifoldPoint.prototype.Copy = function(o) {
          this.localPoint.Copy(o.localPoint);
          this.normalImpulse = o.normalImpulse;
          this.tangentImpulse = o.tangentImpulse;
          this.id.Copy(o.id);
          return this;
        };
        return b2ManifoldPoint;
      })();
      (function(b2ManifoldType) {
        b2ManifoldType[b2ManifoldType["e_unknown"] = -1] = "e_unknown";
        b2ManifoldType[b2ManifoldType["e_circles"] = 0] = "e_circles";
        b2ManifoldType[b2ManifoldType["e_faceA"] = 1] = "e_faceA";
        b2ManifoldType[b2ManifoldType["e_faceB"] = 2] = "e_faceB";
      })(exports.b2ManifoldType || (exports.b2ManifoldType = {}));
      var b2Manifold = (function() {
        function b2Manifold() {
          this.points = b2ManifoldPoint.MakeArray(b2_maxManifoldPoints);
          this.localNormal = new b2Vec2();
          this.localPoint = new b2Vec2();
          this.type = exports.b2ManifoldType.e_unknown;
          this.pointCount = 0;
        }
        b2Manifold.prototype.Reset = function() {
          for (var i = 0; i < b2_maxManifoldPoints; ++i) this.points[i].Reset();
          this.localNormal.SetZero();
          this.localPoint.SetZero();
          this.type = exports.b2ManifoldType.e_unknown;
          this.pointCount = 0;
        };
        b2Manifold.prototype.Copy = function(o) {
          this.pointCount = o.pointCount;
          for (var i = 0; i < b2_maxManifoldPoints; ++i) this.points[i].Copy(o.points[i]);
          this.localNormal.Copy(o.localNormal);
          this.localPoint.Copy(o.localPoint);
          this.type = o.type;
          return this;
        };
        b2Manifold.prototype.Clone = function() {
          return new b2Manifold().Copy(this);
        };
        return b2Manifold;
      })();
      var b2WorldManifold = (function() {
        function b2WorldManifold() {
          this.normal = new b2Vec2();
          this.points = b2Vec2.MakeArray(b2_maxManifoldPoints);
          this.separations = b2MakeNumberArray(b2_maxManifoldPoints);
        }
        b2WorldManifold.prototype.Initialize = function(manifold, xfA, radiusA, xfB, radiusB) {
          if (0 === manifold.pointCount) return;
          switch (manifold.type) {
           case exports.b2ManifoldType.e_circles:
            this.normal.Set(1, 0);
            var pointA = b2Transform.MulXV(xfA, manifold.localPoint, b2WorldManifold.Initialize_s_pointA);
            var pointB = b2Transform.MulXV(xfB, manifold.points[0].localPoint, b2WorldManifold.Initialize_s_pointB);
            b2Vec2.DistanceSquaredVV(pointA, pointB) > b2_epsilon_sq && b2Vec2.SubVV(pointB, pointA, this.normal).SelfNormalize();
            var cA = b2Vec2.AddVMulSV(pointA, radiusA, this.normal, b2WorldManifold.Initialize_s_cA);
            var cB = b2Vec2.SubVMulSV(pointB, radiusB, this.normal, b2WorldManifold.Initialize_s_cB);
            b2Vec2.MidVV(cA, cB, this.points[0]);
            this.separations[0] = b2Vec2.DotVV(b2Vec2.SubVV(cB, cA, b2Vec2.s_t0), this.normal);
            break;

           case exports.b2ManifoldType.e_faceA:
            b2Rot.MulRV(xfA.q, manifold.localNormal, this.normal);
            var planePoint = b2Transform.MulXV(xfA, manifold.localPoint, b2WorldManifold.Initialize_s_planePoint);
            for (var i = 0; i < manifold.pointCount; ++i) {
              var clipPoint = b2Transform.MulXV(xfB, manifold.points[i].localPoint, b2WorldManifold.Initialize_s_clipPoint);
              var s = radiusA - b2Vec2.DotVV(b2Vec2.SubVV(clipPoint, planePoint, b2Vec2.s_t0), this.normal);
              var cA = b2Vec2.AddVMulSV(clipPoint, s, this.normal, b2WorldManifold.Initialize_s_cA);
              var cB = b2Vec2.SubVMulSV(clipPoint, radiusB, this.normal, b2WorldManifold.Initialize_s_cB);
              b2Vec2.MidVV(cA, cB, this.points[i]);
              this.separations[i] = b2Vec2.DotVV(b2Vec2.SubVV(cB, cA, b2Vec2.s_t0), this.normal);
            }
            break;

           case exports.b2ManifoldType.e_faceB:
            b2Rot.MulRV(xfB.q, manifold.localNormal, this.normal);
            var planePoint = b2Transform.MulXV(xfB, manifold.localPoint, b2WorldManifold.Initialize_s_planePoint);
            for (var i = 0; i < manifold.pointCount; ++i) {
              var clipPoint = b2Transform.MulXV(xfA, manifold.points[i].localPoint, b2WorldManifold.Initialize_s_clipPoint);
              var s = radiusB - b2Vec2.DotVV(b2Vec2.SubVV(clipPoint, planePoint, b2Vec2.s_t0), this.normal);
              var cB = b2Vec2.AddVMulSV(clipPoint, s, this.normal, b2WorldManifold.Initialize_s_cB);
              var cA = b2Vec2.SubVMulSV(clipPoint, radiusA, this.normal, b2WorldManifold.Initialize_s_cA);
              b2Vec2.MidVV(cA, cB, this.points[i]);
              this.separations[i] = b2Vec2.DotVV(b2Vec2.SubVV(cA, cB, b2Vec2.s_t0), this.normal);
            }
            this.normal.SelfNeg();
          }
        };
        b2WorldManifold.Initialize_s_pointA = new b2Vec2();
        b2WorldManifold.Initialize_s_pointB = new b2Vec2();
        b2WorldManifold.Initialize_s_cA = new b2Vec2();
        b2WorldManifold.Initialize_s_cB = new b2Vec2();
        b2WorldManifold.Initialize_s_planePoint = new b2Vec2();
        b2WorldManifold.Initialize_s_clipPoint = new b2Vec2();
        return b2WorldManifold;
      })();
      (function(b2PointState) {
        b2PointState[b2PointState["b2_nullState"] = 0] = "b2_nullState";
        b2PointState[b2PointState["b2_addState"] = 1] = "b2_addState";
        b2PointState[b2PointState["b2_persistState"] = 2] = "b2_persistState";
        b2PointState[b2PointState["b2_removeState"] = 3] = "b2_removeState";
      })(exports.b2PointState || (exports.b2PointState = {}));
      function b2GetPointStates(state1, state2, manifold1, manifold2) {
        var i;
        for (i = 0; i < manifold1.pointCount; ++i) {
          var id = manifold1.points[i].id;
          var key = id.key;
          state1[i] = exports.b2PointState.b2_removeState;
          for (var j = 0, jct = manifold2.pointCount; j < jct; ++j) if (manifold2.points[j].id.key === key) {
            state1[i] = exports.b2PointState.b2_persistState;
            break;
          }
        }
        for (;i < b2_maxManifoldPoints; ++i) state1[i] = exports.b2PointState.b2_nullState;
        for (i = 0; i < manifold2.pointCount; ++i) {
          var id = manifold2.points[i].id;
          var key = id.key;
          state2[i] = exports.b2PointState.b2_addState;
          for (var j = 0, jct = manifold1.pointCount; j < jct; ++j) if (manifold1.points[j].id.key === key) {
            state2[i] = exports.b2PointState.b2_persistState;
            break;
          }
        }
        for (;i < b2_maxManifoldPoints; ++i) state2[i] = exports.b2PointState.b2_nullState;
      }
      var b2ClipVertex = (function() {
        function b2ClipVertex() {
          this.v = new b2Vec2();
          this.id = new b2ContactID();
        }
        b2ClipVertex.MakeArray = function(length) {
          return b2MakeArray(length, (function(i) {
            return new b2ClipVertex();
          }));
        };
        b2ClipVertex.prototype.Copy = function(other) {
          this.v.Copy(other.v);
          this.id.Copy(other.id);
          return this;
        };
        return b2ClipVertex;
      })();
      var b2RayCastInput = (function() {
        function b2RayCastInput() {
          this.p1 = new b2Vec2();
          this.p2 = new b2Vec2();
          this.maxFraction = 1;
        }
        b2RayCastInput.prototype.Copy = function(o) {
          this.p1.Copy(o.p1);
          this.p2.Copy(o.p2);
          this.maxFraction = o.maxFraction;
          return this;
        };
        return b2RayCastInput;
      })();
      var b2RayCastOutput = (function() {
        function b2RayCastOutput() {
          this.normal = new b2Vec2();
          this.fraction = 0;
        }
        b2RayCastOutput.prototype.Copy = function(o) {
          this.normal.Copy(o.normal);
          this.fraction = o.fraction;
          return this;
        };
        return b2RayCastOutput;
      })();
      var b2AABB = (function() {
        function b2AABB() {
          this.lowerBound = new b2Vec2();
          this.upperBound = new b2Vec2();
          this.m_cache_center = new b2Vec2();
          this.m_cache_extent = new b2Vec2();
        }
        b2AABB.prototype.Copy = function(o) {
          this.lowerBound.Copy(o.lowerBound);
          this.upperBound.Copy(o.upperBound);
          return this;
        };
        b2AABB.prototype.IsValid = function() {
          var d_x = this.upperBound.x - this.lowerBound.x;
          var d_y = this.upperBound.y - this.lowerBound.y;
          var valid = d_x >= 0 && d_y >= 0;
          valid = valid && this.lowerBound.IsValid() && this.upperBound.IsValid();
          return valid;
        };
        b2AABB.prototype.GetCenter = function() {
          return b2Vec2.MidVV(this.lowerBound, this.upperBound, this.m_cache_center);
        };
        b2AABB.prototype.GetExtents = function() {
          return b2Vec2.ExtVV(this.lowerBound, this.upperBound, this.m_cache_extent);
        };
        b2AABB.prototype.GetPerimeter = function() {
          var wx = this.upperBound.x - this.lowerBound.x;
          var wy = this.upperBound.y - this.lowerBound.y;
          return 2 * (wx + wy);
        };
        b2AABB.prototype.Combine1 = function(aabb) {
          this.lowerBound.x = b2Min(this.lowerBound.x, aabb.lowerBound.x);
          this.lowerBound.y = b2Min(this.lowerBound.y, aabb.lowerBound.y);
          this.upperBound.x = b2Max(this.upperBound.x, aabb.upperBound.x);
          this.upperBound.y = b2Max(this.upperBound.y, aabb.upperBound.y);
          return this;
        };
        b2AABB.prototype.Combine2 = function(aabb1, aabb2) {
          this.lowerBound.x = b2Min(aabb1.lowerBound.x, aabb2.lowerBound.x);
          this.lowerBound.y = b2Min(aabb1.lowerBound.y, aabb2.lowerBound.y);
          this.upperBound.x = b2Max(aabb1.upperBound.x, aabb2.upperBound.x);
          this.upperBound.y = b2Max(aabb1.upperBound.y, aabb2.upperBound.y);
          return this;
        };
        b2AABB.Combine = function(aabb1, aabb2, out) {
          out.Combine2(aabb1, aabb2);
          return out;
        };
        b2AABB.prototype.Contains = function(aabb) {
          var result = true;
          result = result && this.lowerBound.x <= aabb.lowerBound.x;
          result = result && this.lowerBound.y <= aabb.lowerBound.y;
          result = result && aabb.upperBound.x <= this.upperBound.x;
          result = result && aabb.upperBound.y <= this.upperBound.y;
          return result;
        };
        b2AABB.prototype.RayCast = function(output, input) {
          var tmin = -b2_maxFloat;
          var tmax = b2_maxFloat;
          var p_x = input.p1.x;
          var p_y = input.p1.y;
          var d_x = input.p2.x - input.p1.x;
          var d_y = input.p2.y - input.p1.y;
          var absD_x = b2Abs(d_x);
          var absD_y = b2Abs(d_y);
          var normal = output.normal;
          if (absD_x < b2_epsilon) {
            if (p_x < this.lowerBound.x || this.upperBound.x < p_x) return false;
          } else {
            var inv_d = 1 / d_x;
            var t1 = (this.lowerBound.x - p_x) * inv_d;
            var t2 = (this.upperBound.x - p_x) * inv_d;
            var s = -1;
            if (t1 > t2) {
              var t3 = t1;
              t1 = t2;
              t2 = t3;
              s = 1;
            }
            if (t1 > tmin) {
              normal.x = s;
              normal.y = 0;
              tmin = t1;
            }
            tmax = b2Min(tmax, t2);
            if (tmin > tmax) return false;
          }
          if (absD_y < b2_epsilon) {
            if (p_y < this.lowerBound.y || this.upperBound.y < p_y) return false;
          } else {
            var inv_d = 1 / d_y;
            var t1 = (this.lowerBound.y - p_y) * inv_d;
            var t2 = (this.upperBound.y - p_y) * inv_d;
            var s = -1;
            if (t1 > t2) {
              var t3 = t1;
              t1 = t2;
              t2 = t3;
              s = 1;
            }
            if (t1 > tmin) {
              normal.x = 0;
              normal.y = s;
              tmin = t1;
            }
            tmax = b2Min(tmax, t2);
            if (tmin > tmax) return false;
          }
          if (tmin < 0 || input.maxFraction < tmin) return false;
          output.fraction = tmin;
          return true;
        };
        b2AABB.prototype.TestContain = function(point) {
          if (point.x < this.lowerBound.x || this.upperBound.x < point.x) return false;
          if (point.y < this.lowerBound.y || this.upperBound.y < point.y) return false;
          return true;
        };
        b2AABB.prototype.TestOverlap = function(other) {
          var d1_x = other.lowerBound.x - this.upperBound.x;
          var d1_y = other.lowerBound.y - this.upperBound.y;
          var d2_x = this.lowerBound.x - other.upperBound.x;
          var d2_y = this.lowerBound.y - other.upperBound.y;
          if (d1_x > 0 || d1_y > 0) return false;
          if (d2_x > 0 || d2_y > 0) return false;
          return true;
        };
        return b2AABB;
      })();
      function b2TestOverlapAABB(a, b) {
        var d1_x = b.lowerBound.x - a.upperBound.x;
        var d1_y = b.lowerBound.y - a.upperBound.y;
        var d2_x = a.lowerBound.x - b.upperBound.x;
        var d2_y = a.lowerBound.y - b.upperBound.y;
        if (d1_x > 0 || d1_y > 0) return false;
        if (d2_x > 0 || d2_y > 0) return false;
        return true;
      }
      function b2ClipSegmentToLine(vOut, vIn, normal, offset, vertexIndexA) {
        var numOut = 0;
        var vIn0 = vIn[0];
        var vIn1 = vIn[1];
        var distance0 = b2Vec2.DotVV(normal, vIn0.v) - offset;
        var distance1 = b2Vec2.DotVV(normal, vIn1.v) - offset;
        distance0 <= 0 && vOut[numOut++].Copy(vIn0);
        distance1 <= 0 && vOut[numOut++].Copy(vIn1);
        if (distance0 * distance1 < 0) {
          var interp = distance0 / (distance0 - distance1);
          var v = vOut[numOut].v;
          v.x = vIn0.v.x + interp * (vIn1.v.x - vIn0.v.x);
          v.y = vIn0.v.y + interp * (vIn1.v.y - vIn0.v.y);
          var id = vOut[numOut].id;
          id.cf.indexA = vertexIndexA;
          id.cf.indexB = vIn0.id.cf.indexB;
          id.cf.typeA = exports.b2ContactFeatureType.e_vertex;
          id.cf.typeB = exports.b2ContactFeatureType.e_face;
          ++numOut;
        }
        return numOut;
      }
      var b2TestOverlapShape_s_input = new b2DistanceInput();
      var b2TestOverlapShape_s_simplexCache = new b2SimplexCache();
      var b2TestOverlapShape_s_output = new b2DistanceOutput();
      function b2TestOverlapShape(shapeA, indexA, shapeB, indexB, xfA, xfB) {
        var input = b2TestOverlapShape_s_input.Reset();
        input.proxyA.SetShape(shapeA, indexA);
        input.proxyB.SetShape(shapeB, indexB);
        input.transformA.Copy(xfA);
        input.transformB.Copy(xfB);
        input.useRadii = true;
        var simplexCache = b2TestOverlapShape_s_simplexCache.Reset();
        simplexCache.count = 0;
        var output = b2TestOverlapShape_s_output.Reset();
        b2Distance(output, simplexCache, input);
        return output.distance < 10 * b2_epsilon;
      }
      function verify(value) {
        if (null === value) throw new Error();
        return value;
      }
      var b2TreeNode = (function() {
        function b2TreeNode(id) {
          void 0 === id && (id = 0);
          this.m_id = 0;
          this.aabb = new b2AABB();
          this.parent = null;
          this.child1 = null;
          this.child2 = null;
          this.height = 0;
          this.m_id = id;
        }
        b2TreeNode.prototype.IsLeaf = function() {
          return null === this.child1;
        };
        return b2TreeNode;
      })();
      var b2DynamicTree = (function() {
        function b2DynamicTree() {
          this.m_root = null;
          this.m_freeList = null;
          this.m_path = 0;
          this.m_insertionCount = 0;
          this.m_stack = new b2GrowableStack(256);
        }
        b2DynamicTree.prototype.Query = function(aabb, callback) {
          if (null === this.m_root) return;
          var stack = this.m_stack.Reset();
          stack.Push(this.m_root);
          while (stack.GetCount() > 0) {
            var node = stack.Pop();
            if (node.aabb.TestOverlap(aabb)) if (node.IsLeaf()) {
              var proceed = callback(node);
              if (!proceed) return;
            } else {
              stack.Push(verify(node.child1));
              stack.Push(verify(node.child2));
            }
          }
        };
        b2DynamicTree.prototype.QueryPoint = function(point, callback) {
          if (null === this.m_root) return;
          var stack = this.m_stack.Reset();
          stack.Push(this.m_root);
          while (stack.GetCount() > 0) {
            var node = stack.Pop();
            if (node.aabb.TestContain(point)) if (node.IsLeaf()) {
              var proceed = callback(node);
              if (!proceed) return;
            } else {
              stack.Push(verify(node.child1));
              stack.Push(verify(node.child2));
            }
          }
        };
        b2DynamicTree.prototype.RayCast = function(input, callback) {
          if (null === this.m_root) return;
          var p1 = input.p1;
          var p2 = input.p2;
          var r = b2Vec2.SubVV(p2, p1, b2DynamicTree.s_r);
          r.Normalize();
          var v = b2Vec2.CrossOneV(r, b2DynamicTree.s_v);
          var abs_v = b2Vec2.AbsV(v, b2DynamicTree.s_abs_v);
          var maxFraction = input.maxFraction;
          var segmentAABB = b2DynamicTree.s_segmentAABB;
          var t_x = p1.x + maxFraction * (p2.x - p1.x);
          var t_y = p1.y + maxFraction * (p2.y - p1.y);
          segmentAABB.lowerBound.x = b2Min(p1.x, t_x);
          segmentAABB.lowerBound.y = b2Min(p1.y, t_y);
          segmentAABB.upperBound.x = b2Max(p1.x, t_x);
          segmentAABB.upperBound.y = b2Max(p1.y, t_y);
          var stack = this.m_stack.Reset();
          stack.Push(this.m_root);
          while (stack.GetCount() > 0) {
            var node = stack.Pop();
            if (!b2TestOverlapAABB(node.aabb, segmentAABB)) continue;
            var c = node.aabb.GetCenter();
            var h = node.aabb.GetExtents();
            var separation = b2Abs(b2Vec2.DotVV(v, b2Vec2.SubVV(p1, c, b2Vec2.s_t0))) - b2Vec2.DotVV(abs_v, h);
            if (separation > 0) continue;
            if (node.IsLeaf()) {
              var subInput = b2DynamicTree.s_subInput;
              subInput.p1.Copy(input.p1);
              subInput.p2.Copy(input.p2);
              subInput.maxFraction = maxFraction;
              var value = callback(subInput, node);
              if (0 === value) return;
              if (value > 0) {
                maxFraction = value;
                t_x = p1.x + maxFraction * (p2.x - p1.x);
                t_y = p1.y + maxFraction * (p2.y - p1.y);
                segmentAABB.lowerBound.x = b2Min(p1.x, t_x);
                segmentAABB.lowerBound.y = b2Min(p1.y, t_y);
                segmentAABB.upperBound.x = b2Max(p1.x, t_x);
                segmentAABB.upperBound.y = b2Max(p1.y, t_y);
              }
            } else {
              stack.Push(verify(node.child1));
              stack.Push(verify(node.child2));
            }
          }
        };
        b2DynamicTree.prototype.AllocateNode = function() {
          if (this.m_freeList) {
            var node = this.m_freeList;
            this.m_freeList = node.parent;
            node.parent = null;
            node.child1 = null;
            node.child2 = null;
            node.height = 0;
            delete node.userData;
            return node;
          }
          return new b2TreeNode(b2DynamicTree.s_node_id++);
        };
        b2DynamicTree.prototype.FreeNode = function(node) {
          node.parent = this.m_freeList;
          node.child1 = null;
          node.child2 = null;
          node.height = -1;
          delete node.userData;
          this.m_freeList = node;
        };
        b2DynamicTree.prototype.CreateProxy = function(aabb, userData) {
          var node = this.AllocateNode();
          var r_x = b2_aabbExtension;
          var r_y = b2_aabbExtension;
          node.aabb.lowerBound.x = aabb.lowerBound.x - r_x;
          node.aabb.lowerBound.y = aabb.lowerBound.y - r_y;
          node.aabb.upperBound.x = aabb.upperBound.x + r_x;
          node.aabb.upperBound.y = aabb.upperBound.y + r_y;
          node.userData = userData;
          node.height = 0;
          this.InsertLeaf(node);
          return node;
        };
        b2DynamicTree.prototype.DestroyProxy = function(proxy) {
          this.RemoveLeaf(proxy);
          this.FreeNode(proxy);
        };
        b2DynamicTree.prototype.MoveProxy = function(proxy, aabb, displacement) {
          if (proxy.aabb.Contains(aabb)) return false;
          this.RemoveLeaf(proxy);
          var r_x = b2_aabbExtension + b2_aabbMultiplier * (displacement.x > 0 ? displacement.x : -displacement.x);
          var r_y = b2_aabbExtension + b2_aabbMultiplier * (displacement.y > 0 ? displacement.y : -displacement.y);
          proxy.aabb.lowerBound.x = aabb.lowerBound.x - r_x;
          proxy.aabb.lowerBound.y = aabb.lowerBound.y - r_y;
          proxy.aabb.upperBound.x = aabb.upperBound.x + r_x;
          proxy.aabb.upperBound.y = aabb.upperBound.y + r_y;
          this.InsertLeaf(proxy);
          return true;
        };
        b2DynamicTree.prototype.InsertLeaf = function(leaf) {
          ++this.m_insertionCount;
          if (null === this.m_root) {
            this.m_root = leaf;
            this.m_root.parent = null;
            return;
          }
          var leafAABB = leaf.aabb;
          var index = this.m_root;
          while (!index.IsLeaf()) {
            var child1 = verify(index.child1);
            var child2 = verify(index.child2);
            var area = index.aabb.GetPerimeter();
            var combinedAABB = b2DynamicTree.s_combinedAABB;
            combinedAABB.Combine2(index.aabb, leafAABB);
            var combinedArea = combinedAABB.GetPerimeter();
            var cost = 2 * combinedArea;
            var inheritanceCost = 2 * (combinedArea - area);
            var cost1 = void 0;
            var aabb = b2DynamicTree.s_aabb;
            var oldArea = void 0;
            var newArea = void 0;
            if (child1.IsLeaf()) {
              aabb.Combine2(leafAABB, child1.aabb);
              cost1 = aabb.GetPerimeter() + inheritanceCost;
            } else {
              aabb.Combine2(leafAABB, child1.aabb);
              oldArea = child1.aabb.GetPerimeter();
              newArea = aabb.GetPerimeter();
              cost1 = newArea - oldArea + inheritanceCost;
            }
            var cost2 = void 0;
            if (child2.IsLeaf()) {
              aabb.Combine2(leafAABB, child2.aabb);
              cost2 = aabb.GetPerimeter() + inheritanceCost;
            } else {
              aabb.Combine2(leafAABB, child2.aabb);
              oldArea = child2.aabb.GetPerimeter();
              newArea = aabb.GetPerimeter();
              cost2 = newArea - oldArea + inheritanceCost;
            }
            if (cost < cost1 && cost < cost2) break;
            index = cost1 < cost2 ? child1 : child2;
          }
          var sibling = index;
          var oldParent = sibling.parent;
          var newParent = this.AllocateNode();
          newParent.parent = oldParent;
          delete newParent.userData;
          newParent.aabb.Combine2(leafAABB, sibling.aabb);
          newParent.height = sibling.height + 1;
          if (oldParent) {
            oldParent.child1 === sibling ? oldParent.child1 = newParent : oldParent.child2 = newParent;
            newParent.child1 = sibling;
            newParent.child2 = leaf;
            sibling.parent = newParent;
            leaf.parent = newParent;
          } else {
            newParent.child1 = sibling;
            newParent.child2 = leaf;
            sibling.parent = newParent;
            leaf.parent = newParent;
            this.m_root = newParent;
          }
          var index2 = leaf.parent;
          while (null !== index2) {
            index2 = this.Balance(index2);
            var child1 = verify(index2.child1);
            var child2 = verify(index2.child2);
            index2.height = 1 + b2Max(child1.height, child2.height);
            index2.aabb.Combine2(child1.aabb, child2.aabb);
            index2 = index2.parent;
          }
        };
        b2DynamicTree.prototype.RemoveLeaf = function(leaf) {
          if (leaf === this.m_root) {
            this.m_root = null;
            return;
          }
          var parent = verify(leaf.parent);
          var grandParent = parent && parent.parent;
          var sibling;
          sibling = parent.child1 === leaf ? verify(parent.child2) : verify(parent.child1);
          if (grandParent) {
            grandParent.child1 === parent ? grandParent.child1 = sibling : grandParent.child2 = sibling;
            sibling.parent = grandParent;
            this.FreeNode(parent);
            var index = grandParent;
            while (index) {
              index = this.Balance(index);
              var child1 = verify(index.child1);
              var child2 = verify(index.child2);
              index.aabb.Combine2(child1.aabb, child2.aabb);
              index.height = 1 + b2Max(child1.height, child2.height);
              index = index.parent;
            }
          } else {
            this.m_root = sibling;
            sibling.parent = null;
            this.FreeNode(parent);
          }
        };
        b2DynamicTree.prototype.Balance = function(A) {
          if (A.IsLeaf() || A.height < 2) return A;
          var B = verify(A.child1);
          var C = verify(A.child2);
          var balance = C.height - B.height;
          if (balance > 1) {
            var F = verify(C.child1);
            var G = verify(C.child2);
            C.child1 = A;
            C.parent = A.parent;
            A.parent = C;
            null !== C.parent ? C.parent.child1 === A ? C.parent.child1 = C : C.parent.child2 = C : this.m_root = C;
            if (F.height > G.height) {
              C.child2 = F;
              A.child2 = G;
              G.parent = A;
              A.aabb.Combine2(B.aabb, G.aabb);
              C.aabb.Combine2(A.aabb, F.aabb);
              A.height = 1 + b2Max(B.height, G.height);
              C.height = 1 + b2Max(A.height, F.height);
            } else {
              C.child2 = G;
              A.child2 = F;
              F.parent = A;
              A.aabb.Combine2(B.aabb, F.aabb);
              C.aabb.Combine2(A.aabb, G.aabb);
              A.height = 1 + b2Max(B.height, F.height);
              C.height = 1 + b2Max(A.height, G.height);
            }
            return C;
          }
          if (balance < -1) {
            var D = verify(B.child1);
            var E = verify(B.child2);
            B.child1 = A;
            B.parent = A.parent;
            A.parent = B;
            null !== B.parent ? B.parent.child1 === A ? B.parent.child1 = B : B.parent.child2 = B : this.m_root = B;
            if (D.height > E.height) {
              B.child2 = D;
              A.child1 = E;
              E.parent = A;
              A.aabb.Combine2(C.aabb, E.aabb);
              B.aabb.Combine2(A.aabb, D.aabb);
              A.height = 1 + b2Max(C.height, E.height);
              B.height = 1 + b2Max(A.height, D.height);
            } else {
              B.child2 = E;
              A.child1 = D;
              D.parent = A;
              A.aabb.Combine2(C.aabb, D.aabb);
              B.aabb.Combine2(A.aabb, E.aabb);
              A.height = 1 + b2Max(C.height, D.height);
              B.height = 1 + b2Max(A.height, E.height);
            }
            return B;
          }
          return A;
        };
        b2DynamicTree.prototype.GetHeight = function() {
          if (null === this.m_root) return 0;
          return this.m_root.height;
        };
        b2DynamicTree.GetAreaNode = function(node) {
          if (null === node) return 0;
          if (node.IsLeaf()) return 0;
          var area = node.aabb.GetPerimeter();
          area += b2DynamicTree.GetAreaNode(node.child1);
          area += b2DynamicTree.GetAreaNode(node.child2);
          return area;
        };
        b2DynamicTree.prototype.GetAreaRatio = function() {
          if (null === this.m_root) return 0;
          var root = this.m_root;
          var rootArea = root.aabb.GetPerimeter();
          var totalArea = b2DynamicTree.GetAreaNode(this.m_root);
          return totalArea / rootArea;
        };
        b2DynamicTree.prototype.ComputeHeightNode = function(node) {
          if (!node || node.IsLeaf()) return 0;
          var height1 = this.ComputeHeightNode(node.child1);
          var height2 = this.ComputeHeightNode(node.child2);
          return 1 + b2Max(height1, height2);
        };
        b2DynamicTree.prototype.ComputeHeight = function() {
          var height = this.ComputeHeightNode(this.m_root);
          return height;
        };
        b2DynamicTree.prototype.ValidateStructure = function(index) {
          if (null === index) return;
          index === this.m_root;
          var node = index;
          if (node.IsLeaf()) return;
          var child1 = verify(node.child1);
          var child2 = verify(node.child2);
          this.ValidateStructure(child1);
          this.ValidateStructure(child2);
        };
        b2DynamicTree.prototype.ValidateMetrics = function(index) {
          if (null === index) return;
          var node = index;
          if (node.IsLeaf()) return;
          var child1 = verify(node.child1);
          var child2 = verify(node.child2);
          var aabb = b2DynamicTree.s_aabb;
          aabb.Combine2(child1.aabb, child2.aabb);
          this.ValidateMetrics(child1);
          this.ValidateMetrics(child2);
        };
        b2DynamicTree.prototype.Validate = function() {};
        b2DynamicTree.GetMaxBalanceNode = function(node, maxBalance) {
          if (null === node) return maxBalance;
          if (node.height <= 1) return maxBalance;
          var child1 = verify(node.child1);
          var child2 = verify(node.child2);
          var balance = b2Abs(child2.height - child1.height);
          return b2Max(maxBalance, balance);
        };
        b2DynamicTree.prototype.GetMaxBalance = function() {
          var maxBalance = b2DynamicTree.GetMaxBalanceNode(this.m_root, 0);
          return maxBalance;
        };
        b2DynamicTree.prototype.RebuildBottomUp = function() {
          this.Validate();
        };
        b2DynamicTree.ShiftOriginNode = function(node, newOrigin) {
          if (null === node) return;
          if (node.height <= 1) return;
          var child1 = node.child1;
          var child2 = node.child2;
          b2DynamicTree.ShiftOriginNode(child1, newOrigin);
          b2DynamicTree.ShiftOriginNode(child2, newOrigin);
          node.aabb.lowerBound.SelfSub(newOrigin);
          node.aabb.upperBound.SelfSub(newOrigin);
        };
        b2DynamicTree.prototype.ShiftOrigin = function(newOrigin) {
          b2DynamicTree.ShiftOriginNode(this.m_root, newOrigin);
        };
        b2DynamicTree.s_r = new b2Vec2();
        b2DynamicTree.s_v = new b2Vec2();
        b2DynamicTree.s_abs_v = new b2Vec2();
        b2DynamicTree.s_segmentAABB = new b2AABB();
        b2DynamicTree.s_subInput = new b2RayCastInput();
        b2DynamicTree.s_combinedAABB = new b2AABB();
        b2DynamicTree.s_aabb = new b2AABB();
        b2DynamicTree.s_node_id = 0;
        return b2DynamicTree;
      })();
      var b2Pair = (function() {
        function b2Pair(proxyA, proxyB) {
          this.proxyA = proxyA;
          this.proxyB = proxyB;
        }
        return b2Pair;
      })();
      var b2BroadPhase = (function() {
        function b2BroadPhase() {
          this.m_tree = new b2DynamicTree();
          this.m_proxyCount = 0;
          this.m_moveCount = 0;
          this.m_moveBuffer = [];
          this.m_pairCount = 0;
          this.m_pairBuffer = [];
        }
        b2BroadPhase.prototype.CreateProxy = function(aabb, userData) {
          var proxy = this.m_tree.CreateProxy(aabb, userData);
          ++this.m_proxyCount;
          this.BufferMove(proxy);
          return proxy;
        };
        b2BroadPhase.prototype.DestroyProxy = function(proxy) {
          this.UnBufferMove(proxy);
          --this.m_proxyCount;
          this.m_tree.DestroyProxy(proxy);
        };
        b2BroadPhase.prototype.MoveProxy = function(proxy, aabb, displacement) {
          var buffer = this.m_tree.MoveProxy(proxy, aabb, displacement);
          buffer && this.BufferMove(proxy);
        };
        b2BroadPhase.prototype.TouchProxy = function(proxy) {
          this.BufferMove(proxy);
        };
        b2BroadPhase.prototype.GetProxyCount = function() {
          return this.m_proxyCount;
        };
        b2BroadPhase.prototype.UpdatePairs = function(callback) {
          var _this = this;
          this.m_pairCount = 0;
          var _loop_1 = function _loop_1(i_1) {
            var queryProxy = this_1.m_moveBuffer[i_1];
            if (null === queryProxy) return "continue";
            var fatAABB = queryProxy.aabb;
            this_1.m_tree.Query(fatAABB, (function(proxy) {
              if (proxy.m_id === queryProxy.m_id) return true;
              var proxyA;
              var proxyB;
              if (proxy.m_id < queryProxy.m_id) {
                proxyA = proxy;
                proxyB = queryProxy;
              } else {
                proxyA = queryProxy;
                proxyB = proxy;
              }
              if (_this.m_pairCount === _this.m_pairBuffer.length) _this.m_pairBuffer[_this.m_pairCount] = new b2Pair(proxyA, proxyB); else {
                var pair = _this.m_pairBuffer[_this.m_pairCount];
                pair.proxyA = proxyA;
                pair.proxyB = proxyB;
              }
              ++_this.m_pairCount;
              return true;
            }));
          };
          var this_1 = this;
          for (var i_1 = 0; i_1 < this.m_moveCount; ++i_1) _loop_1(i_1);
          this.m_moveCount = 0;
          this.m_pairBuffer.length = this.m_pairCount;
          this.m_pairBuffer.sort(b2PairLessThan);
          var i = 0;
          while (i < this.m_pairCount) {
            var primaryPair = this.m_pairBuffer[i];
            var userDataA = primaryPair.proxyA.userData;
            var userDataB = primaryPair.proxyB.userData;
            userDataA && userDataB && callback(userDataA, userDataB);
            ++i;
            while (i < this.m_pairCount) {
              var pair = this.m_pairBuffer[i];
              if (pair.proxyA.m_id !== primaryPair.proxyA.m_id || pair.proxyB.m_id !== primaryPair.proxyB.m_id) break;
              ++i;
            }
          }
        };
        b2BroadPhase.prototype.Query = function(aabb, callback) {
          this.m_tree.Query(aabb, callback);
        };
        b2BroadPhase.prototype.QueryPoint = function(point, callback) {
          this.m_tree.QueryPoint(point, callback);
        };
        b2BroadPhase.prototype.RayCast = function(input, callback) {
          this.m_tree.RayCast(input, callback);
        };
        b2BroadPhase.prototype.GetTreeHeight = function() {
          return this.m_tree.GetHeight();
        };
        b2BroadPhase.prototype.GetTreeBalance = function() {
          return this.m_tree.GetMaxBalance();
        };
        b2BroadPhase.prototype.GetTreeQuality = function() {
          return this.m_tree.GetAreaRatio();
        };
        b2BroadPhase.prototype.ShiftOrigin = function(newOrigin) {
          this.m_tree.ShiftOrigin(newOrigin);
        };
        b2BroadPhase.prototype.BufferMove = function(proxy) {
          this.m_moveBuffer[this.m_moveCount] = proxy;
          ++this.m_moveCount;
        };
        b2BroadPhase.prototype.UnBufferMove = function(proxy) {
          var i = this.m_moveBuffer.indexOf(proxy);
          this.m_moveBuffer[i] = null;
        };
        return b2BroadPhase;
      })();
      function b2PairLessThan(pair1, pair2) {
        if (pair1.proxyA.m_id === pair2.proxyA.m_id) return pair1.proxyB.m_id - pair2.proxyB.m_id;
        return pair1.proxyA.m_id - pair2.proxyA.m_id;
      }
      exports.b2_toiTime = 0;
      exports.b2_toiMaxTime = 0;
      exports.b2_toiCalls = 0;
      exports.b2_toiIters = 0;
      exports.b2_toiMaxIters = 0;
      exports.b2_toiRootIters = 0;
      exports.b2_toiMaxRootIters = 0;
      function b2_toi_reset() {
        exports.b2_toiTime = 0;
        exports.b2_toiMaxTime = 0;
        exports.b2_toiCalls = 0;
        exports.b2_toiIters = 0;
        exports.b2_toiMaxIters = 0;
        exports.b2_toiRootIters = 0;
        exports.b2_toiMaxRootIters = 0;
      }
      var b2TimeOfImpact_s_xfA = new b2Transform();
      var b2TimeOfImpact_s_xfB = new b2Transform();
      var b2TimeOfImpact_s_pointA = new b2Vec2();
      var b2TimeOfImpact_s_pointB = new b2Vec2();
      var b2TimeOfImpact_s_normal = new b2Vec2();
      var b2TimeOfImpact_s_axisA = new b2Vec2();
      var b2TimeOfImpact_s_axisB = new b2Vec2();
      var b2TOIInput = (function() {
        function b2TOIInput() {
          this.proxyA = new b2DistanceProxy();
          this.proxyB = new b2DistanceProxy();
          this.sweepA = new b2Sweep();
          this.sweepB = new b2Sweep();
          this.tMax = 0;
        }
        return b2TOIInput;
      })();
      (function(b2TOIOutputState) {
        b2TOIOutputState[b2TOIOutputState["e_unknown"] = 0] = "e_unknown";
        b2TOIOutputState[b2TOIOutputState["e_failed"] = 1] = "e_failed";
        b2TOIOutputState[b2TOIOutputState["e_overlapped"] = 2] = "e_overlapped";
        b2TOIOutputState[b2TOIOutputState["e_touching"] = 3] = "e_touching";
        b2TOIOutputState[b2TOIOutputState["e_separated"] = 4] = "e_separated";
      })(exports.b2TOIOutputState || (exports.b2TOIOutputState = {}));
      var b2TOIOutput = (function() {
        function b2TOIOutput() {
          this.state = exports.b2TOIOutputState.e_unknown;
          this.t = 0;
        }
        return b2TOIOutput;
      })();
      (function(b2SeparationFunctionType) {
        b2SeparationFunctionType[b2SeparationFunctionType["e_unknown"] = -1] = "e_unknown";
        b2SeparationFunctionType[b2SeparationFunctionType["e_points"] = 0] = "e_points";
        b2SeparationFunctionType[b2SeparationFunctionType["e_faceA"] = 1] = "e_faceA";
        b2SeparationFunctionType[b2SeparationFunctionType["e_faceB"] = 2] = "e_faceB";
      })(exports.b2SeparationFunctionType || (exports.b2SeparationFunctionType = {}));
      var b2SeparationFunction = (function() {
        function b2SeparationFunction() {
          this.m_sweepA = new b2Sweep();
          this.m_sweepB = new b2Sweep();
          this.m_type = exports.b2SeparationFunctionType.e_unknown;
          this.m_localPoint = new b2Vec2();
          this.m_axis = new b2Vec2();
        }
        b2SeparationFunction.prototype.Initialize = function(cache, proxyA, sweepA, proxyB, sweepB, t1) {
          this.m_proxyA = proxyA;
          this.m_proxyB = proxyB;
          var count = cache.count;
          this.m_sweepA.Copy(sweepA);
          this.m_sweepB.Copy(sweepB);
          var xfA = b2TimeOfImpact_s_xfA;
          var xfB = b2TimeOfImpact_s_xfB;
          this.m_sweepA.GetTransform(xfA, t1);
          this.m_sweepB.GetTransform(xfB, t1);
          if (1 === count) {
            this.m_type = exports.b2SeparationFunctionType.e_points;
            var localPointA = this.m_proxyA.GetVertex(cache.indexA[0]);
            var localPointB = this.m_proxyB.GetVertex(cache.indexB[0]);
            var pointA = b2Transform.MulXV(xfA, localPointA, b2TimeOfImpact_s_pointA);
            var pointB = b2Transform.MulXV(xfB, localPointB, b2TimeOfImpact_s_pointB);
            b2Vec2.SubVV(pointB, pointA, this.m_axis);
            var s = this.m_axis.Normalize();
            this.m_localPoint.SetZero();
            return s;
          }
          if (cache.indexA[0] === cache.indexA[1]) {
            this.m_type = exports.b2SeparationFunctionType.e_faceB;
            var localPointB1 = this.m_proxyB.GetVertex(cache.indexB[0]);
            var localPointB2 = this.m_proxyB.GetVertex(cache.indexB[1]);
            b2Vec2.CrossVOne(b2Vec2.SubVV(localPointB2, localPointB1, b2Vec2.s_t0), this.m_axis).SelfNormalize();
            var normal = b2Rot.MulRV(xfB.q, this.m_axis, b2TimeOfImpact_s_normal);
            b2Vec2.MidVV(localPointB1, localPointB2, this.m_localPoint);
            var pointB = b2Transform.MulXV(xfB, this.m_localPoint, b2TimeOfImpact_s_pointB);
            var localPointA = this.m_proxyA.GetVertex(cache.indexA[0]);
            var pointA = b2Transform.MulXV(xfA, localPointA, b2TimeOfImpact_s_pointA);
            var s = b2Vec2.DotVV(b2Vec2.SubVV(pointA, pointB, b2Vec2.s_t0), normal);
            if (s < 0) {
              this.m_axis.SelfNeg();
              s = -s;
            }
            return s;
          }
          this.m_type = exports.b2SeparationFunctionType.e_faceA;
          var localPointA1 = this.m_proxyA.GetVertex(cache.indexA[0]);
          var localPointA2 = this.m_proxyA.GetVertex(cache.indexA[1]);
          b2Vec2.CrossVOne(b2Vec2.SubVV(localPointA2, localPointA1, b2Vec2.s_t0), this.m_axis).SelfNormalize();
          var normal = b2Rot.MulRV(xfA.q, this.m_axis, b2TimeOfImpact_s_normal);
          b2Vec2.MidVV(localPointA1, localPointA2, this.m_localPoint);
          var pointA = b2Transform.MulXV(xfA, this.m_localPoint, b2TimeOfImpact_s_pointA);
          var localPointB = this.m_proxyB.GetVertex(cache.indexB[0]);
          var pointB = b2Transform.MulXV(xfB, localPointB, b2TimeOfImpact_s_pointB);
          var s = b2Vec2.DotVV(b2Vec2.SubVV(pointB, pointA, b2Vec2.s_t0), normal);
          if (s < 0) {
            this.m_axis.SelfNeg();
            s = -s;
          }
          return s;
        };
        b2SeparationFunction.prototype.FindMinSeparation = function(indexA, indexB, t) {
          var xfA = b2TimeOfImpact_s_xfA;
          var xfB = b2TimeOfImpact_s_xfB;
          this.m_sweepA.GetTransform(xfA, t);
          this.m_sweepB.GetTransform(xfB, t);
          switch (this.m_type) {
           case exports.b2SeparationFunctionType.e_points:
            var axisA = b2Rot.MulTRV(xfA.q, this.m_axis, b2TimeOfImpact_s_axisA);
            var axisB = b2Rot.MulTRV(xfB.q, b2Vec2.NegV(this.m_axis, b2Vec2.s_t0), b2TimeOfImpact_s_axisB);
            indexA[0] = this.m_proxyA.GetSupport(axisA);
            indexB[0] = this.m_proxyB.GetSupport(axisB);
            var localPointA = this.m_proxyA.GetVertex(indexA[0]);
            var localPointB = this.m_proxyB.GetVertex(indexB[0]);
            var pointA = b2Transform.MulXV(xfA, localPointA, b2TimeOfImpact_s_pointA);
            var pointB = b2Transform.MulXV(xfB, localPointB, b2TimeOfImpact_s_pointB);
            var separation = b2Vec2.DotVV(b2Vec2.SubVV(pointB, pointA, b2Vec2.s_t0), this.m_axis);
            return separation;

           case exports.b2SeparationFunctionType.e_faceA:
            var normal = b2Rot.MulRV(xfA.q, this.m_axis, b2TimeOfImpact_s_normal);
            var pointA = b2Transform.MulXV(xfA, this.m_localPoint, b2TimeOfImpact_s_pointA);
            var axisB = b2Rot.MulTRV(xfB.q, b2Vec2.NegV(normal, b2Vec2.s_t0), b2TimeOfImpact_s_axisB);
            indexA[0] = -1;
            indexB[0] = this.m_proxyB.GetSupport(axisB);
            var localPointB = this.m_proxyB.GetVertex(indexB[0]);
            var pointB = b2Transform.MulXV(xfB, localPointB, b2TimeOfImpact_s_pointB);
            var separation = b2Vec2.DotVV(b2Vec2.SubVV(pointB, pointA, b2Vec2.s_t0), normal);
            return separation;

           case exports.b2SeparationFunctionType.e_faceB:
            var normal = b2Rot.MulRV(xfB.q, this.m_axis, b2TimeOfImpact_s_normal);
            var pointB = b2Transform.MulXV(xfB, this.m_localPoint, b2TimeOfImpact_s_pointB);
            var axisA = b2Rot.MulTRV(xfA.q, b2Vec2.NegV(normal, b2Vec2.s_t0), b2TimeOfImpact_s_axisA);
            indexB[0] = -1;
            indexA[0] = this.m_proxyA.GetSupport(axisA);
            var localPointA = this.m_proxyA.GetVertex(indexA[0]);
            var pointA = b2Transform.MulXV(xfA, localPointA, b2TimeOfImpact_s_pointA);
            var separation = b2Vec2.DotVV(b2Vec2.SubVV(pointA, pointB, b2Vec2.s_t0), normal);
            return separation;

           default:
            indexA[0] = -1;
            indexB[0] = -1;
            return 0;
          }
        };
        b2SeparationFunction.prototype.Evaluate = function(indexA, indexB, t) {
          var xfA = b2TimeOfImpact_s_xfA;
          var xfB = b2TimeOfImpact_s_xfB;
          this.m_sweepA.GetTransform(xfA, t);
          this.m_sweepB.GetTransform(xfB, t);
          switch (this.m_type) {
           case exports.b2SeparationFunctionType.e_points:
            var localPointA = this.m_proxyA.GetVertex(indexA);
            var localPointB = this.m_proxyB.GetVertex(indexB);
            var pointA = b2Transform.MulXV(xfA, localPointA, b2TimeOfImpact_s_pointA);
            var pointB = b2Transform.MulXV(xfB, localPointB, b2TimeOfImpact_s_pointB);
            var separation = b2Vec2.DotVV(b2Vec2.SubVV(pointB, pointA, b2Vec2.s_t0), this.m_axis);
            return separation;

           case exports.b2SeparationFunctionType.e_faceA:
            var normal = b2Rot.MulRV(xfA.q, this.m_axis, b2TimeOfImpact_s_normal);
            var pointA = b2Transform.MulXV(xfA, this.m_localPoint, b2TimeOfImpact_s_pointA);
            var localPointB = this.m_proxyB.GetVertex(indexB);
            var pointB = b2Transform.MulXV(xfB, localPointB, b2TimeOfImpact_s_pointB);
            var separation = b2Vec2.DotVV(b2Vec2.SubVV(pointB, pointA, b2Vec2.s_t0), normal);
            return separation;

           case exports.b2SeparationFunctionType.e_faceB:
            var normal = b2Rot.MulRV(xfB.q, this.m_axis, b2TimeOfImpact_s_normal);
            var pointB = b2Transform.MulXV(xfB, this.m_localPoint, b2TimeOfImpact_s_pointB);
            var localPointA = this.m_proxyA.GetVertex(indexA);
            var pointA = b2Transform.MulXV(xfA, localPointA, b2TimeOfImpact_s_pointA);
            var separation = b2Vec2.DotVV(b2Vec2.SubVV(pointA, pointB, b2Vec2.s_t0), normal);
            return separation;

           default:
            return 0;
          }
        };
        return b2SeparationFunction;
      })();
      var b2TimeOfImpact_s_timer = new b2Timer();
      var b2TimeOfImpact_s_cache = new b2SimplexCache();
      var b2TimeOfImpact_s_distanceInput = new b2DistanceInput();
      var b2TimeOfImpact_s_distanceOutput = new b2DistanceOutput();
      var b2TimeOfImpact_s_fcn = new b2SeparationFunction();
      var b2TimeOfImpact_s_indexA = [ 0 ];
      var b2TimeOfImpact_s_indexB = [ 0 ];
      var b2TimeOfImpact_s_sweepA = new b2Sweep();
      var b2TimeOfImpact_s_sweepB = new b2Sweep();
      function b2TimeOfImpact(output, input) {
        var timer = b2TimeOfImpact_s_timer.Reset();
        ++exports.b2_toiCalls;
        output.state = exports.b2TOIOutputState.e_unknown;
        output.t = input.tMax;
        var proxyA = input.proxyA;
        var proxyB = input.proxyB;
        var sweepA = b2TimeOfImpact_s_sweepA.Copy(input.sweepA);
        var sweepB = b2TimeOfImpact_s_sweepB.Copy(input.sweepB);
        sweepA.Normalize();
        sweepB.Normalize();
        var tMax = input.tMax;
        var totalRadius = proxyA.m_radius + proxyB.m_radius;
        var target = b2Max(b2_linearSlop, totalRadius - 3 * b2_linearSlop);
        var tolerance = .25 * b2_linearSlop;
        var t1 = 0;
        var k_maxIterations = 20;
        var iter = 0;
        var cache = b2TimeOfImpact_s_cache;
        cache.count = 0;
        var distanceInput = b2TimeOfImpact_s_distanceInput;
        distanceInput.proxyA.Copy(input.proxyA);
        distanceInput.proxyB.Copy(input.proxyB);
        distanceInput.useRadii = false;
        for (;;) {
          var xfA = b2TimeOfImpact_s_xfA;
          var xfB = b2TimeOfImpact_s_xfB;
          sweepA.GetTransform(xfA, t1);
          sweepB.GetTransform(xfB, t1);
          distanceInput.transformA.Copy(xfA);
          distanceInput.transformB.Copy(xfB);
          var distanceOutput = b2TimeOfImpact_s_distanceOutput;
          b2Distance(distanceOutput, cache, distanceInput);
          if (distanceOutput.distance <= 0) {
            output.state = exports.b2TOIOutputState.e_overlapped;
            output.t = 0;
            break;
          }
          if (distanceOutput.distance < target + tolerance) {
            output.state = exports.b2TOIOutputState.e_touching;
            output.t = t1;
            break;
          }
          var fcn = b2TimeOfImpact_s_fcn;
          fcn.Initialize(cache, proxyA, sweepA, proxyB, sweepB, t1);
          var done = false;
          var t2 = tMax;
          var pushBackIter = 0;
          for (;;) {
            var indexA = b2TimeOfImpact_s_indexA;
            var indexB = b2TimeOfImpact_s_indexB;
            var s2 = fcn.FindMinSeparation(indexA, indexB, t2);
            if (s2 > target + tolerance) {
              output.state = exports.b2TOIOutputState.e_separated;
              output.t = tMax;
              done = true;
              break;
            }
            if (s2 > target - tolerance) {
              t1 = t2;
              break;
            }
            var s1 = fcn.Evaluate(indexA[0], indexB[0], t1);
            if (s1 < target - tolerance) {
              output.state = exports.b2TOIOutputState.e_failed;
              output.t = t1;
              done = true;
              break;
            }
            if (s1 <= target + tolerance) {
              output.state = exports.b2TOIOutputState.e_touching;
              output.t = t1;
              done = true;
              break;
            }
            var rootIterCount = 0;
            var a1 = t1;
            var a2 = t2;
            for (;;) {
              var t = 0;
              t = 1 & rootIterCount ? a1 + (target - s1) * (a2 - a1) / (s2 - s1) : .5 * (a1 + a2);
              ++rootIterCount;
              ++exports.b2_toiRootIters;
              var s = fcn.Evaluate(indexA[0], indexB[0], t);
              if (b2Abs(s - target) < tolerance) {
                t2 = t;
                break;
              }
              if (s > target) {
                a1 = t;
                s1 = s;
              } else {
                a2 = t;
                s2 = s;
              }
              if (50 === rootIterCount) break;
            }
            exports.b2_toiMaxRootIters = b2Max(exports.b2_toiMaxRootIters, rootIterCount);
            ++pushBackIter;
            if (pushBackIter === b2_maxPolygonVertices) break;
          }
          ++iter;
          ++exports.b2_toiIters;
          if (done) break;
          if (iter === k_maxIterations) {
            output.state = exports.b2TOIOutputState.e_failed;
            output.t = t1;
            break;
          }
        }
        exports.b2_toiMaxIters = b2Max(exports.b2_toiMaxIters, iter);
        var time = timer.GetMilliseconds();
        exports.b2_toiMaxTime = b2Max(exports.b2_toiMaxTime, time);
        exports.b2_toiTime += time;
      }
      var b2CollideCircles_s_pA = new b2Vec2();
      var b2CollideCircles_s_pB = new b2Vec2();
      function b2CollideCircles(manifold, circleA, xfA, circleB, xfB) {
        manifold.pointCount = 0;
        var pA = b2Transform.MulXV(xfA, circleA.m_p, b2CollideCircles_s_pA);
        var pB = b2Transform.MulXV(xfB, circleB.m_p, b2CollideCircles_s_pB);
        var distSqr = b2Vec2.DistanceSquaredVV(pA, pB);
        var radius = circleA.m_radius + circleB.m_radius;
        if (distSqr > radius * radius) return;
        manifold.type = exports.b2ManifoldType.e_circles;
        manifold.localPoint.Copy(circleA.m_p);
        manifold.localNormal.SetZero();
        manifold.pointCount = 1;
        manifold.points[0].localPoint.Copy(circleB.m_p);
        manifold.points[0].id.key = 0;
      }
      var b2CollidePolygonAndCircle_s_c = new b2Vec2();
      var b2CollidePolygonAndCircle_s_cLocal = new b2Vec2();
      var b2CollidePolygonAndCircle_s_faceCenter = new b2Vec2();
      function b2CollidePolygonAndCircle(manifold, polygonA, xfA, circleB, xfB) {
        manifold.pointCount = 0;
        var c = b2Transform.MulXV(xfB, circleB.m_p, b2CollidePolygonAndCircle_s_c);
        var cLocal = b2Transform.MulTXV(xfA, c, b2CollidePolygonAndCircle_s_cLocal);
        var normalIndex = 0;
        var separation = -b2_maxFloat;
        var radius = polygonA.m_radius + circleB.m_radius;
        var vertexCount = polygonA.m_count;
        var vertices = polygonA.m_vertices;
        var normals = polygonA.m_normals;
        for (var i = 0; i < vertexCount; ++i) {
          var s = b2Vec2.DotVV(normals[i], b2Vec2.SubVV(cLocal, vertices[i], b2Vec2.s_t0));
          if (s > radius) return;
          if (s > separation) {
            separation = s;
            normalIndex = i;
          }
        }
        var vertIndex1 = normalIndex;
        var vertIndex2 = (vertIndex1 + 1) % vertexCount;
        var v1 = vertices[vertIndex1];
        var v2 = vertices[vertIndex2];
        if (separation < b2_epsilon) {
          manifold.pointCount = 1;
          manifold.type = exports.b2ManifoldType.e_faceA;
          manifold.localNormal.Copy(normals[normalIndex]);
          b2Vec2.MidVV(v1, v2, manifold.localPoint);
          manifold.points[0].localPoint.Copy(circleB.m_p);
          manifold.points[0].id.key = 0;
          return;
        }
        var u1 = b2Vec2.DotVV(b2Vec2.SubVV(cLocal, v1, b2Vec2.s_t0), b2Vec2.SubVV(v2, v1, b2Vec2.s_t1));
        var u2 = b2Vec2.DotVV(b2Vec2.SubVV(cLocal, v2, b2Vec2.s_t0), b2Vec2.SubVV(v1, v2, b2Vec2.s_t1));
        if (u1 <= 0) {
          if (b2Vec2.DistanceSquaredVV(cLocal, v1) > radius * radius) return;
          manifold.pointCount = 1;
          manifold.type = exports.b2ManifoldType.e_faceA;
          b2Vec2.SubVV(cLocal, v1, manifold.localNormal).SelfNormalize();
          manifold.localPoint.Copy(v1);
          manifold.points[0].localPoint.Copy(circleB.m_p);
          manifold.points[0].id.key = 0;
        } else if (u2 <= 0) {
          if (b2Vec2.DistanceSquaredVV(cLocal, v2) > radius * radius) return;
          manifold.pointCount = 1;
          manifold.type = exports.b2ManifoldType.e_faceA;
          b2Vec2.SubVV(cLocal, v2, manifold.localNormal).SelfNormalize();
          manifold.localPoint.Copy(v2);
          manifold.points[0].localPoint.Copy(circleB.m_p);
          manifold.points[0].id.key = 0;
        } else {
          var faceCenter = b2Vec2.MidVV(v1, v2, b2CollidePolygonAndCircle_s_faceCenter);
          var separation_1 = b2Vec2.DotVV(b2Vec2.SubVV(cLocal, faceCenter, b2Vec2.s_t1), normals[vertIndex1]);
          if (separation_1 > radius) return;
          manifold.pointCount = 1;
          manifold.type = exports.b2ManifoldType.e_faceA;
          manifold.localNormal.Copy(normals[vertIndex1]).SelfNormalize();
          manifold.localPoint.Copy(faceCenter);
          manifold.points[0].localPoint.Copy(circleB.m_p);
          manifold.points[0].id.key = 0;
        }
      }
      var b2EdgeSeparation_s_normal1World = new b2Vec2();
      var b2EdgeSeparation_s_normal1 = new b2Vec2();
      var b2EdgeSeparation_s_v1 = new b2Vec2();
      var b2EdgeSeparation_s_v2 = new b2Vec2();
      function b2EdgeSeparation(poly1, xf1, edge1, poly2, xf2) {
        var vertices1 = poly1.m_vertices;
        var normals1 = poly1.m_normals;
        var count2 = poly2.m_count;
        var vertices2 = poly2.m_vertices;
        var normal1World = b2Rot.MulRV(xf1.q, normals1[edge1], b2EdgeSeparation_s_normal1World);
        var normal1 = b2Rot.MulTRV(xf2.q, normal1World, b2EdgeSeparation_s_normal1);
        var index = 0;
        var minDot = b2_maxFloat;
        for (var i = 0; i < count2; ++i) {
          var dot = b2Vec2.DotVV(vertices2[i], normal1);
          if (dot < minDot) {
            minDot = dot;
            index = i;
          }
        }
        var v1 = b2Transform.MulXV(xf1, vertices1[edge1], b2EdgeSeparation_s_v1);
        var v2 = b2Transform.MulXV(xf2, vertices2[index], b2EdgeSeparation_s_v2);
        var separation = b2Vec2.DotVV(b2Vec2.SubVV(v2, v1, b2Vec2.s_t0), normal1World);
        return separation;
      }
      var b2FindMaxSeparation_s_d = new b2Vec2();
      var b2FindMaxSeparation_s_dLocal1 = new b2Vec2();
      function b2FindMaxSeparation(edgeIndex, poly1, xf1, poly2, xf2) {
        var count1 = poly1.m_count;
        var normals1 = poly1.m_normals;
        var d = b2Vec2.SubVV(b2Transform.MulXV(xf2, poly2.m_centroid, b2Vec2.s_t0), b2Transform.MulXV(xf1, poly1.m_centroid, b2Vec2.s_t1), b2FindMaxSeparation_s_d);
        var dLocal1 = b2Rot.MulTRV(xf1.q, d, b2FindMaxSeparation_s_dLocal1);
        var edge = 0;
        var maxDot = -b2_maxFloat;
        for (var i = 0; i < count1; ++i) {
          var dot = b2Vec2.DotVV(normals1[i], dLocal1);
          if (dot > maxDot) {
            maxDot = dot;
            edge = i;
          }
        }
        var s = b2EdgeSeparation(poly1, xf1, edge, poly2, xf2);
        var prevEdge = (edge + count1 - 1) % count1;
        var sPrev = b2EdgeSeparation(poly1, xf1, prevEdge, poly2, xf2);
        var nextEdge = (edge + 1) % count1;
        var sNext = b2EdgeSeparation(poly1, xf1, nextEdge, poly2, xf2);
        var bestEdge = 0;
        var bestSeparation = 0;
        var increment = 0;
        if (sPrev > s && sPrev > sNext) {
          increment = -1;
          bestEdge = prevEdge;
          bestSeparation = sPrev;
        } else {
          if (!(sNext > s)) {
            edgeIndex[0] = edge;
            return s;
          }
          increment = 1;
          bestEdge = nextEdge;
          bestSeparation = sNext;
        }
        while (true) {
          edge = -1 === increment ? (bestEdge + count1 - 1) % count1 : (bestEdge + 1) % count1;
          s = b2EdgeSeparation(poly1, xf1, edge, poly2, xf2);
          if (!(s > bestSeparation)) break;
          bestEdge = edge;
          bestSeparation = s;
        }
        edgeIndex[0] = bestEdge;
        return bestSeparation;
      }
      var b2FindIncidentEdge_s_normal1 = new b2Vec2();
      function b2FindIncidentEdge(c, poly1, xf1, edge1, poly2, xf2) {
        var normals1 = poly1.m_normals;
        var count2 = poly2.m_count;
        var vertices2 = poly2.m_vertices;
        var normals2 = poly2.m_normals;
        var normal1 = b2Rot.MulTRV(xf2.q, b2Rot.MulRV(xf1.q, normals1[edge1], b2Vec2.s_t0), b2FindIncidentEdge_s_normal1);
        var index = 0;
        var minDot = b2_maxFloat;
        for (var i = 0; i < count2; ++i) {
          var dot = b2Vec2.DotVV(normal1, normals2[i]);
          if (dot < minDot) {
            minDot = dot;
            index = i;
          }
        }
        var i1 = index;
        var i2 = (i1 + 1) % count2;
        var c0 = c[0];
        b2Transform.MulXV(xf2, vertices2[i1], c0.v);
        var cf0 = c0.id.cf;
        cf0.indexA = edge1;
        cf0.indexB = i1;
        cf0.typeA = exports.b2ContactFeatureType.e_face;
        cf0.typeB = exports.b2ContactFeatureType.e_vertex;
        var c1 = c[1];
        b2Transform.MulXV(xf2, vertices2[i2], c1.v);
        var cf1 = c1.id.cf;
        cf1.indexA = edge1;
        cf1.indexB = i2;
        cf1.typeA = exports.b2ContactFeatureType.e_face;
        cf1.typeB = exports.b2ContactFeatureType.e_vertex;
      }
      var b2CollidePolygons_s_incidentEdge = b2ClipVertex.MakeArray(2);
      var b2CollidePolygons_s_clipPoints1 = b2ClipVertex.MakeArray(2);
      var b2CollidePolygons_s_clipPoints2 = b2ClipVertex.MakeArray(2);
      var b2CollidePolygons_s_edgeA = [ 0 ];
      var b2CollidePolygons_s_edgeB = [ 0 ];
      var b2CollidePolygons_s_localTangent = new b2Vec2();
      var b2CollidePolygons_s_localNormal = new b2Vec2();
      var b2CollidePolygons_s_planePoint = new b2Vec2();
      var b2CollidePolygons_s_normal = new b2Vec2();
      var b2CollidePolygons_s_tangent = new b2Vec2();
      var b2CollidePolygons_s_ntangent = new b2Vec2();
      var b2CollidePolygons_s_v11 = new b2Vec2();
      var b2CollidePolygons_s_v12 = new b2Vec2();
      function b2CollidePolygons(manifold, polyA, xfA, polyB, xfB) {
        manifold.pointCount = 0;
        var totalRadius = polyA.m_radius + polyB.m_radius;
        var edgeA = b2CollidePolygons_s_edgeA;
        edgeA[0] = 0;
        var separationA = b2FindMaxSeparation(edgeA, polyA, xfA, polyB, xfB);
        if (separationA > totalRadius) return;
        var edgeB = b2CollidePolygons_s_edgeB;
        edgeB[0] = 0;
        var separationB = b2FindMaxSeparation(edgeB, polyB, xfB, polyA, xfA);
        if (separationB > totalRadius) return;
        var poly1;
        var poly2;
        var xf1, xf2;
        var edge1 = 0;
        var flip = 0;
        var k_relativeTol = .98;
        var k_absoluteTol = .001;
        if (separationB > k_relativeTol * separationA + k_absoluteTol) {
          poly1 = polyB;
          poly2 = polyA;
          xf1 = xfB;
          xf2 = xfA;
          edge1 = edgeB[0];
          manifold.type = exports.b2ManifoldType.e_faceB;
          flip = 1;
        } else {
          poly1 = polyA;
          poly2 = polyB;
          xf1 = xfA;
          xf2 = xfB;
          edge1 = edgeA[0];
          manifold.type = exports.b2ManifoldType.e_faceA;
          flip = 0;
        }
        var incidentEdge = b2CollidePolygons_s_incidentEdge;
        b2FindIncidentEdge(incidentEdge, poly1, xf1, edge1, poly2, xf2);
        var count1 = poly1.m_count;
        var vertices1 = poly1.m_vertices;
        var iv1 = edge1;
        var iv2 = (edge1 + 1) % count1;
        var local_v11 = vertices1[iv1];
        var local_v12 = vertices1[iv2];
        var localTangent = b2Vec2.SubVV(local_v12, local_v11, b2CollidePolygons_s_localTangent);
        localTangent.Normalize();
        var localNormal = b2Vec2.CrossVOne(localTangent, b2CollidePolygons_s_localNormal);
        var planePoint = b2Vec2.MidVV(local_v11, local_v12, b2CollidePolygons_s_planePoint);
        var tangent = b2Rot.MulRV(xf1.q, localTangent, b2CollidePolygons_s_tangent);
        var normal = b2Vec2.CrossVOne(tangent, b2CollidePolygons_s_normal);
        var v11 = b2Transform.MulXV(xf1, local_v11, b2CollidePolygons_s_v11);
        var v12 = b2Transform.MulXV(xf1, local_v12, b2CollidePolygons_s_v12);
        var frontOffset = b2Vec2.DotVV(normal, v11);
        var sideOffset1 = -b2Vec2.DotVV(tangent, v11) + totalRadius;
        var sideOffset2 = b2Vec2.DotVV(tangent, v12) + totalRadius;
        var clipPoints1 = b2CollidePolygons_s_clipPoints1;
        var clipPoints2 = b2CollidePolygons_s_clipPoints2;
        var np;
        var ntangent = b2Vec2.NegV(tangent, b2CollidePolygons_s_ntangent);
        np = b2ClipSegmentToLine(clipPoints1, incidentEdge, ntangent, sideOffset1, iv1);
        if (np < 2) return;
        np = b2ClipSegmentToLine(clipPoints2, clipPoints1, tangent, sideOffset2, iv2);
        if (np < 2) return;
        manifold.localNormal.Copy(localNormal);
        manifold.localPoint.Copy(planePoint);
        var pointCount = 0;
        for (var i = 0; i < b2_maxManifoldPoints; ++i) {
          var cv = clipPoints2[i];
          var separation = b2Vec2.DotVV(normal, cv.v) - frontOffset;
          if (separation <= totalRadius) {
            var cp = manifold.points[pointCount];
            b2Transform.MulTXV(xf2, cv.v, cp.localPoint);
            cp.id.Copy(cv.id);
            if (flip) {
              var cf = cp.id.cf;
              cp.id.cf.indexA = cf.indexB;
              cp.id.cf.indexB = cf.indexA;
              cp.id.cf.typeA = cf.typeB;
              cp.id.cf.typeB = cf.typeA;
            }
            ++pointCount;
          }
        }
        manifold.pointCount = pointCount;
      }
      var b2CollideEdgeAndCircle_s_Q = new b2Vec2();
      var b2CollideEdgeAndCircle_s_e = new b2Vec2();
      var b2CollideEdgeAndCircle_s_d = new b2Vec2();
      var b2CollideEdgeAndCircle_s_e1 = new b2Vec2();
      var b2CollideEdgeAndCircle_s_e2 = new b2Vec2();
      var b2CollideEdgeAndCircle_s_P = new b2Vec2();
      var b2CollideEdgeAndCircle_s_n = new b2Vec2();
      var b2CollideEdgeAndCircle_s_id = new b2ContactID();
      function b2CollideEdgeAndCircle(manifold, edgeA, xfA, circleB, xfB) {
        manifold.pointCount = 0;
        var Q = b2Transform.MulTXV(xfA, b2Transform.MulXV(xfB, circleB.m_p, b2Vec2.s_t0), b2CollideEdgeAndCircle_s_Q);
        var A = edgeA.m_vertex1;
        var B = edgeA.m_vertex2;
        var e = b2Vec2.SubVV(B, A, b2CollideEdgeAndCircle_s_e);
        var u = b2Vec2.DotVV(e, b2Vec2.SubVV(B, Q, b2Vec2.s_t0));
        var v = b2Vec2.DotVV(e, b2Vec2.SubVV(Q, A, b2Vec2.s_t0));
        var radius = edgeA.m_radius + circleB.m_radius;
        var id = b2CollideEdgeAndCircle_s_id;
        id.cf.indexB = 0;
        id.cf.typeB = exports.b2ContactFeatureType.e_vertex;
        if (v <= 0) {
          var P_1 = A;
          var d_1 = b2Vec2.SubVV(Q, P_1, b2CollideEdgeAndCircle_s_d);
          var dd_1 = b2Vec2.DotVV(d_1, d_1);
          if (dd_1 > radius * radius) return;
          if (edgeA.m_hasVertex0) {
            var A1 = edgeA.m_vertex0;
            var B1 = A;
            var e1 = b2Vec2.SubVV(B1, A1, b2CollideEdgeAndCircle_s_e1);
            var u1 = b2Vec2.DotVV(e1, b2Vec2.SubVV(B1, Q, b2Vec2.s_t0));
            if (u1 > 0) return;
          }
          id.cf.indexA = 0;
          id.cf.typeA = exports.b2ContactFeatureType.e_vertex;
          manifold.pointCount = 1;
          manifold.type = exports.b2ManifoldType.e_circles;
          manifold.localNormal.SetZero();
          manifold.localPoint.Copy(P_1);
          manifold.points[0].id.Copy(id);
          manifold.points[0].localPoint.Copy(circleB.m_p);
          return;
        }
        if (u <= 0) {
          var P_2 = B;
          var d_2 = b2Vec2.SubVV(Q, P_2, b2CollideEdgeAndCircle_s_d);
          var dd_2 = b2Vec2.DotVV(d_2, d_2);
          if (dd_2 > radius * radius) return;
          if (edgeA.m_hasVertex3) {
            var B2 = edgeA.m_vertex3;
            var A2 = B;
            var e2 = b2Vec2.SubVV(B2, A2, b2CollideEdgeAndCircle_s_e2);
            var v2 = b2Vec2.DotVV(e2, b2Vec2.SubVV(Q, A2, b2Vec2.s_t0));
            if (v2 > 0) return;
          }
          id.cf.indexA = 1;
          id.cf.typeA = exports.b2ContactFeatureType.e_vertex;
          manifold.pointCount = 1;
          manifold.type = exports.b2ManifoldType.e_circles;
          manifold.localNormal.SetZero();
          manifold.localPoint.Copy(P_2);
          manifold.points[0].id.Copy(id);
          manifold.points[0].localPoint.Copy(circleB.m_p);
          return;
        }
        var den = b2Vec2.DotVV(e, e);
        var P = b2CollideEdgeAndCircle_s_P;
        P.x = 1 / den * (u * A.x + v * B.x);
        P.y = 1 / den * (u * A.y + v * B.y);
        var d = b2Vec2.SubVV(Q, P, b2CollideEdgeAndCircle_s_d);
        var dd = b2Vec2.DotVV(d, d);
        if (dd > radius * radius) return;
        var n = b2CollideEdgeAndCircle_s_n.Set(-e.y, e.x);
        b2Vec2.DotVV(n, b2Vec2.SubVV(Q, A, b2Vec2.s_t0)) < 0 && n.Set(-n.x, -n.y);
        n.Normalize();
        id.cf.indexA = 0;
        id.cf.typeA = exports.b2ContactFeatureType.e_face;
        manifold.pointCount = 1;
        manifold.type = exports.b2ManifoldType.e_faceA;
        manifold.localNormal.Copy(n);
        manifold.localPoint.Copy(A);
        manifold.points[0].id.Copy(id);
        manifold.points[0].localPoint.Copy(circleB.m_p);
      }
      var b2EPAxis = (function() {
        function b2EPAxis() {
          this.type = 0;
          this.index = 0;
          this.separation = 0;
        }
        return b2EPAxis;
      })();
      var b2TempPolygon = (function() {
        function b2TempPolygon() {
          this.vertices = b2Vec2.MakeArray(b2_maxPolygonVertices);
          this.normals = b2Vec2.MakeArray(b2_maxPolygonVertices);
          this.count = 0;
        }
        return b2TempPolygon;
      })();
      var b2ReferenceFace = (function() {
        function b2ReferenceFace() {
          this.i1 = 0;
          this.i2 = 0;
          this.v1 = new b2Vec2();
          this.v2 = new b2Vec2();
          this.normal = new b2Vec2();
          this.sideNormal1 = new b2Vec2();
          this.sideOffset1 = 0;
          this.sideNormal2 = new b2Vec2();
          this.sideOffset2 = 0;
        }
        return b2ReferenceFace;
      })();
      var b2EPCollider = (function() {
        function b2EPCollider() {
          this.m_polygonB = new b2TempPolygon();
          this.m_xf = new b2Transform();
          this.m_centroidB = new b2Vec2();
          this.m_v0 = new b2Vec2();
          this.m_v1 = new b2Vec2();
          this.m_v2 = new b2Vec2();
          this.m_v3 = new b2Vec2();
          this.m_normal0 = new b2Vec2();
          this.m_normal1 = new b2Vec2();
          this.m_normal2 = new b2Vec2();
          this.m_normal = new b2Vec2();
          this.m_type1 = 0;
          this.m_type2 = 0;
          this.m_lowerLimit = new b2Vec2();
          this.m_upperLimit = new b2Vec2();
          this.m_radius = 0;
          this.m_front = false;
        }
        b2EPCollider.prototype.Collide = function(manifold, edgeA, xfA, polygonB, xfB) {
          b2Transform.MulTXX(xfA, xfB, this.m_xf);
          b2Transform.MulXV(this.m_xf, polygonB.m_centroid, this.m_centroidB);
          this.m_v0.Copy(edgeA.m_vertex0);
          this.m_v1.Copy(edgeA.m_vertex1);
          this.m_v2.Copy(edgeA.m_vertex2);
          this.m_v3.Copy(edgeA.m_vertex3);
          var hasVertex0 = edgeA.m_hasVertex0;
          var hasVertex3 = edgeA.m_hasVertex3;
          var edge1 = b2Vec2.SubVV(this.m_v2, this.m_v1, b2EPCollider.s_edge1);
          edge1.Normalize();
          this.m_normal1.Set(edge1.y, -edge1.x);
          var offset1 = b2Vec2.DotVV(this.m_normal1, b2Vec2.SubVV(this.m_centroidB, this.m_v1, b2Vec2.s_t0));
          var offset0 = 0;
          var offset2 = 0;
          var convex1 = false;
          var convex2 = false;
          if (hasVertex0) {
            var edge0 = b2Vec2.SubVV(this.m_v1, this.m_v0, b2EPCollider.s_edge0);
            edge0.Normalize();
            this.m_normal0.Set(edge0.y, -edge0.x);
            convex1 = b2Vec2.CrossVV(edge0, edge1) >= 0;
            offset0 = b2Vec2.DotVV(this.m_normal0, b2Vec2.SubVV(this.m_centroidB, this.m_v0, b2Vec2.s_t0));
          }
          if (hasVertex3) {
            var edge2 = b2Vec2.SubVV(this.m_v3, this.m_v2, b2EPCollider.s_edge2);
            edge2.Normalize();
            this.m_normal2.Set(edge2.y, -edge2.x);
            convex2 = b2Vec2.CrossVV(edge1, edge2) > 0;
            offset2 = b2Vec2.DotVV(this.m_normal2, b2Vec2.SubVV(this.m_centroidB, this.m_v2, b2Vec2.s_t0));
          }
          if (hasVertex0 && hasVertex3) if (convex1 && convex2) {
            this.m_front = offset0 >= 0 || offset1 >= 0 || offset2 >= 0;
            if (this.m_front) {
              this.m_normal.Copy(this.m_normal1);
              this.m_lowerLimit.Copy(this.m_normal0);
              this.m_upperLimit.Copy(this.m_normal2);
            } else {
              this.m_normal.Copy(this.m_normal1).SelfNeg();
              this.m_lowerLimit.Copy(this.m_normal1).SelfNeg();
              this.m_upperLimit.Copy(this.m_normal1).SelfNeg();
            }
          } else if (convex1) {
            this.m_front = offset0 >= 0 || offset1 >= 0 && offset2 >= 0;
            if (this.m_front) {
              this.m_normal.Copy(this.m_normal1);
              this.m_lowerLimit.Copy(this.m_normal0);
              this.m_upperLimit.Copy(this.m_normal1);
            } else {
              this.m_normal.Copy(this.m_normal1).SelfNeg();
              this.m_lowerLimit.Copy(this.m_normal2).SelfNeg();
              this.m_upperLimit.Copy(this.m_normal1).SelfNeg();
            }
          } else if (convex2) {
            this.m_front = offset2 >= 0 || offset0 >= 0 && offset1 >= 0;
            if (this.m_front) {
              this.m_normal.Copy(this.m_normal1);
              this.m_lowerLimit.Copy(this.m_normal1);
              this.m_upperLimit.Copy(this.m_normal2);
            } else {
              this.m_normal.Copy(this.m_normal1).SelfNeg();
              this.m_lowerLimit.Copy(this.m_normal1).SelfNeg();
              this.m_upperLimit.Copy(this.m_normal0).SelfNeg();
            }
          } else {
            this.m_front = offset0 >= 0 && offset1 >= 0 && offset2 >= 0;
            if (this.m_front) {
              this.m_normal.Copy(this.m_normal1);
              this.m_lowerLimit.Copy(this.m_normal1);
              this.m_upperLimit.Copy(this.m_normal1);
            } else {
              this.m_normal.Copy(this.m_normal1).SelfNeg();
              this.m_lowerLimit.Copy(this.m_normal2).SelfNeg();
              this.m_upperLimit.Copy(this.m_normal0).SelfNeg();
            }
          } else if (hasVertex0) if (convex1) {
            this.m_front = offset0 >= 0 || offset1 >= 0;
            if (this.m_front) {
              this.m_normal.Copy(this.m_normal1);
              this.m_lowerLimit.Copy(this.m_normal0);
              this.m_upperLimit.Copy(this.m_normal1).SelfNeg();
            } else {
              this.m_normal.Copy(this.m_normal1).SelfNeg();
              this.m_lowerLimit.Copy(this.m_normal1);
              this.m_upperLimit.Copy(this.m_normal1).SelfNeg();
            }
          } else {
            this.m_front = offset0 >= 0 && offset1 >= 0;
            if (this.m_front) {
              this.m_normal.Copy(this.m_normal1);
              this.m_lowerLimit.Copy(this.m_normal1);
              this.m_upperLimit.Copy(this.m_normal1).SelfNeg();
            } else {
              this.m_normal.Copy(this.m_normal1).SelfNeg();
              this.m_lowerLimit.Copy(this.m_normal1);
              this.m_upperLimit.Copy(this.m_normal0).SelfNeg();
            }
          } else if (hasVertex3) if (convex2) {
            this.m_front = offset1 >= 0 || offset2 >= 0;
            if (this.m_front) {
              this.m_normal.Copy(this.m_normal1);
              this.m_lowerLimit.Copy(this.m_normal1).SelfNeg();
              this.m_upperLimit.Copy(this.m_normal2);
            } else {
              this.m_normal.Copy(this.m_normal1).SelfNeg();
              this.m_lowerLimit.Copy(this.m_normal1).SelfNeg();
              this.m_upperLimit.Copy(this.m_normal1);
            }
          } else {
            this.m_front = offset1 >= 0 && offset2 >= 0;
            if (this.m_front) {
              this.m_normal.Copy(this.m_normal1);
              this.m_lowerLimit.Copy(this.m_normal1).SelfNeg();
              this.m_upperLimit.Copy(this.m_normal1);
            } else {
              this.m_normal.Copy(this.m_normal1).SelfNeg();
              this.m_lowerLimit.Copy(this.m_normal2).SelfNeg();
              this.m_upperLimit.Copy(this.m_normal1);
            }
          } else {
            this.m_front = offset1 >= 0;
            if (this.m_front) {
              this.m_normal.Copy(this.m_normal1);
              this.m_lowerLimit.Copy(this.m_normal1).SelfNeg();
              this.m_upperLimit.Copy(this.m_normal1).SelfNeg();
            } else {
              this.m_normal.Copy(this.m_normal1).SelfNeg();
              this.m_lowerLimit.Copy(this.m_normal1);
              this.m_upperLimit.Copy(this.m_normal1);
            }
          }
          this.m_polygonB.count = polygonB.m_count;
          for (var i = 0; i < polygonB.m_count; ++i) {
            b2Transform.MulXV(this.m_xf, polygonB.m_vertices[i], this.m_polygonB.vertices[i]);
            b2Rot.MulRV(this.m_xf.q, polygonB.m_normals[i], this.m_polygonB.normals[i]);
          }
          this.m_radius = polygonB.m_radius + edgeA.m_radius;
          manifold.pointCount = 0;
          var edgeAxis = this.ComputeEdgeSeparation(b2EPCollider.s_edgeAxis);
          if (0 === edgeAxis.type) return;
          if (edgeAxis.separation > this.m_radius) return;
          var polygonAxis = this.ComputePolygonSeparation(b2EPCollider.s_polygonAxis);
          if (0 !== polygonAxis.type && polygonAxis.separation > this.m_radius) return;
          var k_relativeTol = .98;
          var k_absoluteTol = .001;
          var primaryAxis;
          primaryAxis = 0 === polygonAxis.type ? edgeAxis : polygonAxis.separation > k_relativeTol * edgeAxis.separation + k_absoluteTol ? polygonAxis : edgeAxis;
          var ie = b2EPCollider.s_ie;
          var rf = b2EPCollider.s_rf;
          if (1 === primaryAxis.type) {
            manifold.type = exports.b2ManifoldType.e_faceA;
            var bestIndex = 0;
            var bestValue = b2Vec2.DotVV(this.m_normal, this.m_polygonB.normals[0]);
            for (var i = 1; i < this.m_polygonB.count; ++i) {
              var value = b2Vec2.DotVV(this.m_normal, this.m_polygonB.normals[i]);
              if (value < bestValue) {
                bestValue = value;
                bestIndex = i;
              }
            }
            var i1 = bestIndex;
            var i2 = (i1 + 1) % this.m_polygonB.count;
            var ie0 = ie[0];
            ie0.v.Copy(this.m_polygonB.vertices[i1]);
            ie0.id.cf.indexA = 0;
            ie0.id.cf.indexB = i1;
            ie0.id.cf.typeA = exports.b2ContactFeatureType.e_face;
            ie0.id.cf.typeB = exports.b2ContactFeatureType.e_vertex;
            var ie1 = ie[1];
            ie1.v.Copy(this.m_polygonB.vertices[i2]);
            ie1.id.cf.indexA = 0;
            ie1.id.cf.indexB = i2;
            ie1.id.cf.typeA = exports.b2ContactFeatureType.e_face;
            ie1.id.cf.typeB = exports.b2ContactFeatureType.e_vertex;
            if (this.m_front) {
              rf.i1 = 0;
              rf.i2 = 1;
              rf.v1.Copy(this.m_v1);
              rf.v2.Copy(this.m_v2);
              rf.normal.Copy(this.m_normal1);
            } else {
              rf.i1 = 1;
              rf.i2 = 0;
              rf.v1.Copy(this.m_v2);
              rf.v2.Copy(this.m_v1);
              rf.normal.Copy(this.m_normal1).SelfNeg();
            }
          } else {
            manifold.type = exports.b2ManifoldType.e_faceB;
            var ie0 = ie[0];
            ie0.v.Copy(this.m_v1);
            ie0.id.cf.indexA = 0;
            ie0.id.cf.indexB = primaryAxis.index;
            ie0.id.cf.typeA = exports.b2ContactFeatureType.e_vertex;
            ie0.id.cf.typeB = exports.b2ContactFeatureType.e_face;
            var ie1 = ie[1];
            ie1.v.Copy(this.m_v2);
            ie1.id.cf.indexA = 0;
            ie1.id.cf.indexB = primaryAxis.index;
            ie1.id.cf.typeA = exports.b2ContactFeatureType.e_vertex;
            ie1.id.cf.typeB = exports.b2ContactFeatureType.e_face;
            rf.i1 = primaryAxis.index;
            rf.i2 = (rf.i1 + 1) % this.m_polygonB.count;
            rf.v1.Copy(this.m_polygonB.vertices[rf.i1]);
            rf.v2.Copy(this.m_polygonB.vertices[rf.i2]);
            rf.normal.Copy(this.m_polygonB.normals[rf.i1]);
          }
          rf.sideNormal1.Set(rf.normal.y, -rf.normal.x);
          rf.sideNormal2.Copy(rf.sideNormal1).SelfNeg();
          rf.sideOffset1 = b2Vec2.DotVV(rf.sideNormal1, rf.v1);
          rf.sideOffset2 = b2Vec2.DotVV(rf.sideNormal2, rf.v2);
          var clipPoints1 = b2EPCollider.s_clipPoints1;
          var clipPoints2 = b2EPCollider.s_clipPoints2;
          var np = 0;
          np = b2ClipSegmentToLine(clipPoints1, ie, rf.sideNormal1, rf.sideOffset1, rf.i1);
          if (np < b2_maxManifoldPoints) return;
          np = b2ClipSegmentToLine(clipPoints2, clipPoints1, rf.sideNormal2, rf.sideOffset2, rf.i2);
          if (np < b2_maxManifoldPoints) return;
          if (1 === primaryAxis.type) {
            manifold.localNormal.Copy(rf.normal);
            manifold.localPoint.Copy(rf.v1);
          } else {
            manifold.localNormal.Copy(polygonB.m_normals[rf.i1]);
            manifold.localPoint.Copy(polygonB.m_vertices[rf.i1]);
          }
          var pointCount = 0;
          for (var i = 0; i < b2_maxManifoldPoints; ++i) {
            var separation = void 0;
            separation = b2Vec2.DotVV(rf.normal, b2Vec2.SubVV(clipPoints2[i].v, rf.v1, b2Vec2.s_t0));
            if (separation <= this.m_radius) {
              var cp = manifold.points[pointCount];
              if (1 === primaryAxis.type) {
                b2Transform.MulTXV(this.m_xf, clipPoints2[i].v, cp.localPoint);
                cp.id = clipPoints2[i].id;
              } else {
                cp.localPoint.Copy(clipPoints2[i].v);
                cp.id.cf.typeA = clipPoints2[i].id.cf.typeB;
                cp.id.cf.typeB = clipPoints2[i].id.cf.typeA;
                cp.id.cf.indexA = clipPoints2[i].id.cf.indexB;
                cp.id.cf.indexB = clipPoints2[i].id.cf.indexA;
              }
              ++pointCount;
            }
          }
          manifold.pointCount = pointCount;
        };
        b2EPCollider.prototype.ComputeEdgeSeparation = function(out) {
          var axis = out;
          axis.type = 1;
          axis.index = this.m_front ? 0 : 1;
          axis.separation = b2_maxFloat;
          for (var i = 0; i < this.m_polygonB.count; ++i) {
            var s = b2Vec2.DotVV(this.m_normal, b2Vec2.SubVV(this.m_polygonB.vertices[i], this.m_v1, b2Vec2.s_t0));
            s < axis.separation && (axis.separation = s);
          }
          return axis;
        };
        b2EPCollider.prototype.ComputePolygonSeparation = function(out) {
          var axis = out;
          axis.type = 0;
          axis.index = -1;
          axis.separation = -b2_maxFloat;
          var perp = b2EPCollider.s_perp.Set(-this.m_normal.y, this.m_normal.x);
          for (var i = 0; i < this.m_polygonB.count; ++i) {
            var n = b2Vec2.NegV(this.m_polygonB.normals[i], b2EPCollider.s_n);
            var s1 = b2Vec2.DotVV(n, b2Vec2.SubVV(this.m_polygonB.vertices[i], this.m_v1, b2Vec2.s_t0));
            var s2 = b2Vec2.DotVV(n, b2Vec2.SubVV(this.m_polygonB.vertices[i], this.m_v2, b2Vec2.s_t0));
            var s = b2Min(s1, s2);
            if (s > this.m_radius) {
              axis.type = 2;
              axis.index = i;
              axis.separation = s;
              return axis;
            }
            if (b2Vec2.DotVV(n, perp) >= 0) {
              if (b2Vec2.DotVV(b2Vec2.SubVV(n, this.m_upperLimit, b2Vec2.s_t0), this.m_normal) < -b2_angularSlop) continue;
            } else if (b2Vec2.DotVV(b2Vec2.SubVV(n, this.m_lowerLimit, b2Vec2.s_t0), this.m_normal) < -b2_angularSlop) continue;
            if (s > axis.separation) {
              axis.type = 2;
              axis.index = i;
              axis.separation = s;
            }
          }
          return axis;
        };
        b2EPCollider.s_edge1 = new b2Vec2();
        b2EPCollider.s_edge0 = new b2Vec2();
        b2EPCollider.s_edge2 = new b2Vec2();
        b2EPCollider.s_ie = b2ClipVertex.MakeArray(2);
        b2EPCollider.s_rf = new b2ReferenceFace();
        b2EPCollider.s_clipPoints1 = b2ClipVertex.MakeArray(2);
        b2EPCollider.s_clipPoints2 = b2ClipVertex.MakeArray(2);
        b2EPCollider.s_edgeAxis = new b2EPAxis();
        b2EPCollider.s_polygonAxis = new b2EPAxis();
        b2EPCollider.s_n = new b2Vec2();
        b2EPCollider.s_perp = new b2Vec2();
        return b2EPCollider;
      })();
      var b2CollideEdgeAndPolygon_s_collider = new b2EPCollider();
      function b2CollideEdgeAndPolygon(manifold, edgeA, xfA, polygonB, xfB) {
        var collider = b2CollideEdgeAndPolygon_s_collider;
        collider.Collide(manifold, edgeA, xfA, polygonB, xfB);
      }
      var b2MassData = (function() {
        function b2MassData() {
          this.mass = 0;
          this.center = new b2Vec2(0, 0);
          this.I = 0;
        }
        return b2MassData;
      })();
      (function(b2ShapeType) {
        b2ShapeType[b2ShapeType["e_unknown"] = -1] = "e_unknown";
        b2ShapeType[b2ShapeType["e_circleShape"] = 0] = "e_circleShape";
        b2ShapeType[b2ShapeType["e_edgeShape"] = 1] = "e_edgeShape";
        b2ShapeType[b2ShapeType["e_polygonShape"] = 2] = "e_polygonShape";
        b2ShapeType[b2ShapeType["e_chainShape"] = 3] = "e_chainShape";
        b2ShapeType[b2ShapeType["e_shapeTypeCount"] = 4] = "e_shapeTypeCount";
      })(exports.b2ShapeType || (exports.b2ShapeType = {}));
      var b2Shape = (function() {
        function b2Shape(type, radius) {
          this.m_type = exports.b2ShapeType.e_unknown;
          this.m_radius = 0;
          this.m_type = type;
          this.m_radius = radius;
        }
        b2Shape.prototype.Copy = function(other) {
          this.m_radius = other.m_radius;
          return this;
        };
        b2Shape.prototype.GetType = function() {
          return this.m_type;
        };
        return b2Shape;
      })();
      var extendStatics = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function(d, b) {
        d.__proto__ = b;
      } || function(d, b) {
        for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
      };
      function __extends(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      }
      var b2CircleShape = (function(_super) {
        __extends(b2CircleShape, _super);
        function b2CircleShape(radius) {
          void 0 === radius && (radius = 0);
          var _this = _super.call(this, exports.b2ShapeType.e_circleShape, radius) || this;
          _this.m_p = new b2Vec2();
          return _this;
        }
        b2CircleShape.prototype.Set = function(position, radius) {
          void 0 === radius && (radius = this.m_radius);
          this.m_p.Copy(position);
          this.m_radius = radius;
          return this;
        };
        b2CircleShape.prototype.Clone = function() {
          return new b2CircleShape().Copy(this);
        };
        b2CircleShape.prototype.Copy = function(other) {
          _super.prototype.Copy.call(this, other);
          this.m_p.Copy(other.m_p);
          return this;
        };
        b2CircleShape.prototype.GetChildCount = function() {
          return 1;
        };
        b2CircleShape.prototype.TestPoint = function(transform, p) {
          var center = b2Transform.MulXV(transform, this.m_p, b2CircleShape.TestPoint_s_center);
          var d = b2Vec2.SubVV(p, center, b2CircleShape.TestPoint_s_d);
          return b2Vec2.DotVV(d, d) <= b2Sq(this.m_radius);
        };
        b2CircleShape.prototype.ComputeDistance = function(xf, p, normal, childIndex) {
          var center = b2Transform.MulXV(xf, this.m_p, b2CircleShape.ComputeDistance_s_center);
          b2Vec2.SubVV(p, center, normal);
          return normal.Normalize() - this.m_radius;
        };
        b2CircleShape.prototype.RayCast = function(output, input, transform, childIndex) {
          var position = b2Transform.MulXV(transform, this.m_p, b2CircleShape.RayCast_s_position);
          var s = b2Vec2.SubVV(input.p1, position, b2CircleShape.RayCast_s_s);
          var b = b2Vec2.DotVV(s, s) - b2Sq(this.m_radius);
          var r = b2Vec2.SubVV(input.p2, input.p1, b2CircleShape.RayCast_s_r);
          var c = b2Vec2.DotVV(s, r);
          var rr = b2Vec2.DotVV(r, r);
          var sigma = c * c - rr * b;
          if (sigma < 0 || rr < b2_epsilon) return false;
          var a = -(c + b2Sqrt(sigma));
          if (0 <= a && a <= input.maxFraction * rr) {
            a /= rr;
            output.fraction = a;
            b2Vec2.AddVMulSV(s, a, r, output.normal).SelfNormalize();
            return true;
          }
          return false;
        };
        b2CircleShape.prototype.ComputeAABB = function(aabb, transform, childIndex) {
          var p = b2Transform.MulXV(transform, this.m_p, b2CircleShape.ComputeAABB_s_p);
          aabb.lowerBound.Set(p.x - this.m_radius, p.y - this.m_radius);
          aabb.upperBound.Set(p.x + this.m_radius, p.y + this.m_radius);
        };
        b2CircleShape.prototype.ComputeMass = function(massData, density) {
          var radius_sq = b2Sq(this.m_radius);
          massData.mass = density * b2_pi * radius_sq;
          massData.center.Copy(this.m_p);
          massData.I = massData.mass * (.5 * radius_sq + b2Vec2.DotVV(this.m_p, this.m_p));
        };
        b2CircleShape.prototype.SetupDistanceProxy = function(proxy, index) {
          proxy.m_vertices = proxy.m_buffer;
          proxy.m_vertices[0].Copy(this.m_p);
          proxy.m_count = 1;
          proxy.m_radius = this.m_radius;
        };
        b2CircleShape.prototype.ComputeSubmergedArea = function(normal, offset, xf, c) {
          var p = b2Transform.MulXV(xf, this.m_p, new b2Vec2());
          var l = -(b2Vec2.DotVV(normal, p) - offset);
          if (l < -this.m_radius + b2_epsilon) return 0;
          if (l > this.m_radius) {
            c.Copy(p);
            return b2_pi * this.m_radius * this.m_radius;
          }
          var r2 = this.m_radius * this.m_radius;
          var l2 = l * l;
          var area = r2 * (b2Asin(l / this.m_radius) + b2_pi / 2) + l * b2Sqrt(r2 - l2);
          var com = -2 / 3 * b2Pow(r2 - l2, 1.5) / area;
          c.x = p.x + normal.x * com;
          c.y = p.y + normal.y * com;
          return area;
        };
        b2CircleShape.prototype.Dump = function(log) {
          log("    const shape: b2CircleShape = new b2CircleShape();\n");
          log("    shape.m_radius = %.15f;\n", this.m_radius);
          log("    shape.m_p.Set(%.15f, %.15f);\n", this.m_p.x, this.m_p.y);
        };
        b2CircleShape.TestPoint_s_center = new b2Vec2();
        b2CircleShape.TestPoint_s_d = new b2Vec2();
        b2CircleShape.ComputeDistance_s_center = new b2Vec2();
        b2CircleShape.RayCast_s_position = new b2Vec2();
        b2CircleShape.RayCast_s_s = new b2Vec2();
        b2CircleShape.RayCast_s_r = new b2Vec2();
        b2CircleShape.ComputeAABB_s_p = new b2Vec2();
        return b2CircleShape;
      })(b2Shape);
      var b2PolygonShape = (function(_super) {
        __extends(b2PolygonShape, _super);
        function b2PolygonShape() {
          var _this = _super.call(this, exports.b2ShapeType.e_polygonShape, b2_polygonRadius) || this;
          _this.m_centroid = new b2Vec2(0, 0);
          _this.m_vertices = [];
          _this.m_normals = [];
          _this.m_count = 0;
          return _this;
        }
        b2PolygonShape.prototype.Clone = function() {
          return new b2PolygonShape().Copy(this);
        };
        b2PolygonShape.prototype.Copy = function(other) {
          _super.prototype.Copy.call(this, other);
          this.m_centroid.Copy(other.m_centroid);
          this.m_count = other.m_count;
          this.m_vertices = b2Vec2.MakeArray(this.m_count);
          this.m_normals = b2Vec2.MakeArray(this.m_count);
          for (var i = 0; i < this.m_count; ++i) {
            this.m_vertices[i].Copy(other.m_vertices[i]);
            this.m_normals[i].Copy(other.m_normals[i]);
          }
          return this;
        };
        b2PolygonShape.prototype.GetChildCount = function() {
          return 1;
        };
        b2PolygonShape.prototype.Set = function(vertices, count, start) {
          void 0 === count && (count = vertices.length);
          void 0 === start && (start = 0);
          if (count < 3) return this.SetAsBox(1, 1);
          var n = b2Min(count, b2_maxPolygonVertices);
          var ps = b2PolygonShape.Set_s_ps;
          var tempCount = 0;
          for (var i = 0; i < n; ++i) {
            var v = vertices[start + i];
            var unique = true;
            for (var j = 0; j < tempCount; ++j) if (b2Vec2.DistanceSquaredVV(v, ps[j]) < .5 * b2_linearSlop * (.5 * b2_linearSlop)) {
              unique = false;
              break;
            }
            unique && ps[tempCount++].Copy(v);
          }
          n = tempCount;
          if (n < 3) return this.SetAsBox(1, 1);
          var i0 = 0;
          var x0 = ps[0].x;
          for (var i = 1; i < n; ++i) {
            var x = ps[i].x;
            if (x > x0 || x === x0 && ps[i].y < ps[i0].y) {
              i0 = i;
              x0 = x;
            }
          }
          var hull = b2PolygonShape.Set_s_hull;
          var m = 0;
          var ih = i0;
          for (;;) {
            hull[m] = ih;
            var ie = 0;
            for (var j = 1; j < n; ++j) {
              if (ie === ih) {
                ie = j;
                continue;
              }
              var r = b2Vec2.SubVV(ps[ie], ps[hull[m]], b2PolygonShape.Set_s_r);
              var v = b2Vec2.SubVV(ps[j], ps[hull[m]], b2PolygonShape.Set_s_v);
              var c = b2Vec2.CrossVV(r, v);
              c < 0 && (ie = j);
              0 === c && v.LengthSquared() > r.LengthSquared() && (ie = j);
            }
            ++m;
            ih = ie;
            if (ie === i0) break;
          }
          this.m_count = m;
          this.m_vertices = b2Vec2.MakeArray(this.m_count);
          this.m_normals = b2Vec2.MakeArray(this.m_count);
          for (var i = 0; i < m; ++i) this.m_vertices[i].Copy(ps[hull[i]]);
          for (var i = 0; i < m; ++i) {
            var vertexi1 = this.m_vertices[i];
            var vertexi2 = this.m_vertices[(i + 1) % m];
            var edge = b2Vec2.SubVV(vertexi2, vertexi1, b2Vec2.s_t0);
            b2Vec2.CrossVOne(edge, this.m_normals[i]).SelfNormalize();
          }
          b2PolygonShape.ComputeCentroid(this.m_vertices, m, this.m_centroid);
          return this;
        };
        b2PolygonShape.prototype.SetAsArray = function(vertices, count) {
          void 0 === count && (count = vertices.length);
          return this.Set(vertices, count);
        };
        b2PolygonShape.prototype.SetAsBox = function(hx, hy, center, angle) {
          void 0 === angle && (angle = 0);
          this.m_count = 4;
          this.m_vertices = b2Vec2.MakeArray(this.m_count);
          this.m_normals = b2Vec2.MakeArray(this.m_count);
          this.m_vertices[0].Set(-hx, -hy);
          this.m_vertices[1].Set(hx, -hy);
          this.m_vertices[2].Set(hx, hy);
          this.m_vertices[3].Set(-hx, hy);
          this.m_normals[0].Set(0, -1);
          this.m_normals[1].Set(1, 0);
          this.m_normals[2].Set(0, 1);
          this.m_normals[3].Set(-1, 0);
          this.m_centroid.SetZero();
          if (center) {
            this.m_centroid.Copy(center);
            var xf = new b2Transform();
            xf.SetPosition(center);
            xf.SetRotationAngle(angle);
            for (var i = 0; i < this.m_count; ++i) {
              b2Transform.MulXV(xf, this.m_vertices[i], this.m_vertices[i]);
              b2Rot.MulRV(xf.q, this.m_normals[i], this.m_normals[i]);
            }
          }
          return this;
        };
        b2PolygonShape.prototype.TestPoint = function(xf, p) {
          var pLocal = b2Transform.MulTXV(xf, p, b2PolygonShape.TestPoint_s_pLocal);
          for (var i = 0; i < this.m_count; ++i) {
            var dot = b2Vec2.DotVV(this.m_normals[i], b2Vec2.SubVV(pLocal, this.m_vertices[i], b2Vec2.s_t0));
            if (dot > 0) return false;
          }
          return true;
        };
        b2PolygonShape.prototype.ComputeDistance = function(xf, p, normal, childIndex) {
          var pLocal = b2Transform.MulTXV(xf, p, b2PolygonShape.ComputeDistance_s_pLocal);
          var maxDistance = -b2_maxFloat;
          var normalForMaxDistance = b2PolygonShape.ComputeDistance_s_normalForMaxDistance.Copy(pLocal);
          for (var i = 0; i < this.m_count; ++i) {
            var dot = b2Vec2.DotVV(this.m_normals[i], b2Vec2.SubVV(pLocal, this.m_vertices[i], b2Vec2.s_t0));
            if (dot > maxDistance) {
              maxDistance = dot;
              normalForMaxDistance.Copy(this.m_normals[i]);
            }
          }
          if (maxDistance > 0) {
            var minDistance = b2PolygonShape.ComputeDistance_s_minDistance.Copy(normalForMaxDistance);
            var minDistance2 = maxDistance * maxDistance;
            for (var i = 0; i < this.m_count; ++i) {
              var distance = b2Vec2.SubVV(pLocal, this.m_vertices[i], b2PolygonShape.ComputeDistance_s_distance);
              var distance2 = distance.LengthSquared();
              if (minDistance2 > distance2) {
                minDistance.Copy(distance);
                minDistance2 = distance2;
              }
            }
            b2Rot.MulRV(xf.q, minDistance, normal);
            normal.Normalize();
            return Math.sqrt(minDistance2);
          }
          b2Rot.MulRV(xf.q, normalForMaxDistance, normal);
          return maxDistance;
        };
        b2PolygonShape.prototype.RayCast = function(output, input, xf, childIndex) {
          var p1 = b2Transform.MulTXV(xf, input.p1, b2PolygonShape.RayCast_s_p1);
          var p2 = b2Transform.MulTXV(xf, input.p2, b2PolygonShape.RayCast_s_p2);
          var d = b2Vec2.SubVV(p2, p1, b2PolygonShape.RayCast_s_d);
          var lower = 0, upper = input.maxFraction;
          var index = -1;
          for (var i = 0; i < this.m_count; ++i) {
            var numerator = b2Vec2.DotVV(this.m_normals[i], b2Vec2.SubVV(this.m_vertices[i], p1, b2Vec2.s_t0));
            var denominator = b2Vec2.DotVV(this.m_normals[i], d);
            if (0 === denominator) {
              if (numerator < 0) return false;
            } else if (denominator < 0 && numerator < lower * denominator) {
              lower = numerator / denominator;
              index = i;
            } else denominator > 0 && numerator < upper * denominator && (upper = numerator / denominator);
            if (upper < lower) return false;
          }
          if (index >= 0) {
            output.fraction = lower;
            b2Rot.MulRV(xf.q, this.m_normals[index], output.normal);
            return true;
          }
          return false;
        };
        b2PolygonShape.prototype.ComputeAABB = function(aabb, xf, childIndex) {
          var lower = b2Transform.MulXV(xf, this.m_vertices[0], aabb.lowerBound);
          var upper = aabb.upperBound.Copy(lower);
          for (var i = 0; i < this.m_count; ++i) {
            var v = b2Transform.MulXV(xf, this.m_vertices[i], b2PolygonShape.ComputeAABB_s_v);
            b2Vec2.MinV(v, lower, lower);
            b2Vec2.MaxV(v, upper, upper);
          }
          var r = this.m_radius;
          lower.SelfSubXY(r, r);
          upper.SelfAddXY(r, r);
        };
        b2PolygonShape.prototype.ComputeMass = function(massData, density) {
          var center = b2PolygonShape.ComputeMass_s_center.SetZero();
          var area = 0;
          var I = 0;
          var s = b2PolygonShape.ComputeMass_s_s.SetZero();
          for (var i = 0; i < this.m_count; ++i) s.SelfAdd(this.m_vertices[i]);
          s.SelfMul(1 / this.m_count);
          var k_inv3 = 1 / 3;
          for (var i = 0; i < this.m_count; ++i) {
            var e1 = b2Vec2.SubVV(this.m_vertices[i], s, b2PolygonShape.ComputeMass_s_e1);
            var e2 = b2Vec2.SubVV(this.m_vertices[(i + 1) % this.m_count], s, b2PolygonShape.ComputeMass_s_e2);
            var D = b2Vec2.CrossVV(e1, e2);
            var triangleArea = .5 * D;
            area += triangleArea;
            center.SelfAdd(b2Vec2.MulSV(triangleArea * k_inv3, b2Vec2.AddVV(e1, e2, b2Vec2.s_t0), b2Vec2.s_t1));
            var ex1 = e1.x;
            var ey1 = e1.y;
            var ex2 = e2.x;
            var ey2 = e2.y;
            var intx2 = ex1 * ex1 + ex2 * ex1 + ex2 * ex2;
            var inty2 = ey1 * ey1 + ey2 * ey1 + ey2 * ey2;
            I += .25 * k_inv3 * D * (intx2 + inty2);
          }
          massData.mass = density * area;
          center.SelfMul(1 / area);
          b2Vec2.AddVV(center, s, massData.center);
          massData.I = density * I;
          massData.I += massData.mass * (b2Vec2.DotVV(massData.center, massData.center) - b2Vec2.DotVV(center, center));
        };
        b2PolygonShape.prototype.Validate = function() {
          for (var i = 0; i < this.m_count; ++i) {
            var i1 = i;
            var i2 = (i + 1) % this.m_count;
            var p = this.m_vertices[i1];
            var e = b2Vec2.SubVV(this.m_vertices[i2], p, b2PolygonShape.Validate_s_e);
            for (var j = 0; j < this.m_count; ++j) {
              if (j === i1 || j === i2) continue;
              var v = b2Vec2.SubVV(this.m_vertices[j], p, b2PolygonShape.Validate_s_v);
              var c = b2Vec2.CrossVV(e, v);
              if (c < 0) return false;
            }
          }
          return true;
        };
        b2PolygonShape.prototype.SetupDistanceProxy = function(proxy, index) {
          proxy.m_vertices = this.m_vertices;
          proxy.m_count = this.m_count;
          proxy.m_radius = this.m_radius;
        };
        b2PolygonShape.prototype.ComputeSubmergedArea = function(normal, offset, xf, c) {
          var normalL = b2Rot.MulTRV(xf.q, normal, b2PolygonShape.ComputeSubmergedArea_s_normalL);
          var offsetL = offset - b2Vec2.DotVV(normal, xf.p);
          var depths = b2PolygonShape.ComputeSubmergedArea_s_depths;
          var diveCount = 0;
          var intoIndex = -1;
          var outoIndex = -1;
          var lastSubmerged = false;
          for (var i_1 = 0; i_1 < this.m_count; ++i_1) {
            depths[i_1] = b2Vec2.DotVV(normalL, this.m_vertices[i_1]) - offsetL;
            var isSubmerged = depths[i_1] < -b2_epsilon;
            if (i_1 > 0) if (isSubmerged) {
              if (!lastSubmerged) {
                intoIndex = i_1 - 1;
                diveCount++;
              }
            } else if (lastSubmerged) {
              outoIndex = i_1 - 1;
              diveCount++;
            }
            lastSubmerged = isSubmerged;
          }
          switch (diveCount) {
           case 0:
            if (lastSubmerged) {
              var md = b2PolygonShape.ComputeSubmergedArea_s_md;
              this.ComputeMass(md, 1);
              b2Transform.MulXV(xf, md.center, c);
              return md.mass;
            }
            return 0;

           case 1:
            -1 === intoIndex ? intoIndex = this.m_count - 1 : outoIndex = this.m_count - 1;
          }
          var intoIndex2 = (intoIndex + 1) % this.m_count;
          var outoIndex2 = (outoIndex + 1) % this.m_count;
          var intoLamdda = (0 - depths[intoIndex]) / (depths[intoIndex2] - depths[intoIndex]);
          var outoLamdda = (0 - depths[outoIndex]) / (depths[outoIndex2] - depths[outoIndex]);
          var intoVec = b2PolygonShape.ComputeSubmergedArea_s_intoVec.Set(this.m_vertices[intoIndex].x * (1 - intoLamdda) + this.m_vertices[intoIndex2].x * intoLamdda, this.m_vertices[intoIndex].y * (1 - intoLamdda) + this.m_vertices[intoIndex2].y * intoLamdda);
          var outoVec = b2PolygonShape.ComputeSubmergedArea_s_outoVec.Set(this.m_vertices[outoIndex].x * (1 - outoLamdda) + this.m_vertices[outoIndex2].x * outoLamdda, this.m_vertices[outoIndex].y * (1 - outoLamdda) + this.m_vertices[outoIndex2].y * outoLamdda);
          var area = 0;
          var center = b2PolygonShape.ComputeSubmergedArea_s_center.SetZero();
          var p2 = this.m_vertices[intoIndex2];
          var p3;
          var i = intoIndex2;
          while (i !== outoIndex2) {
            i = (i + 1) % this.m_count;
            p3 = i === outoIndex2 ? outoVec : this.m_vertices[i];
            var triangleArea = .5 * ((p2.x - intoVec.x) * (p3.y - intoVec.y) - (p2.y - intoVec.y) * (p3.x - intoVec.x));
            area += triangleArea;
            center.x += triangleArea * (intoVec.x + p2.x + p3.x) / 3;
            center.y += triangleArea * (intoVec.y + p2.y + p3.y) / 3;
            p2 = p3;
          }
          center.SelfMul(1 / area);
          b2Transform.MulXV(xf, center, c);
          return area;
        };
        b2PolygonShape.prototype.Dump = function(log) {
          log("    const shape: b2PolygonShape = new b2PolygonShape();\n");
          log("    const vs: b2Vec2[] = b2Vec2.MakeArray(%d);\n", b2_maxPolygonVertices);
          for (var i = 0; i < this.m_count; ++i) log("    vs[%d].Set(%.15f, %.15f);\n", i, this.m_vertices[i].x, this.m_vertices[i].y);
          log("    shape.Set(vs, %d);\n", this.m_count);
        };
        b2PolygonShape.ComputeCentroid = function(vs, count, out) {
          var c = out;
          c.SetZero();
          var area = 0;
          var pRef = b2PolygonShape.ComputeCentroid_s_pRef.SetZero();
          var inv3 = 1 / 3;
          for (var i = 0; i < count; ++i) {
            var p1 = pRef;
            var p2 = vs[i];
            var p3 = vs[(i + 1) % count];
            var e1 = b2Vec2.SubVV(p2, p1, b2PolygonShape.ComputeCentroid_s_e1);
            var e2 = b2Vec2.SubVV(p3, p1, b2PolygonShape.ComputeCentroid_s_e2);
            var D = b2Vec2.CrossVV(e1, e2);
            var triangleArea = .5 * D;
            area += triangleArea;
            c.x += triangleArea * inv3 * (p1.x + p2.x + p3.x);
            c.y += triangleArea * inv3 * (p1.y + p2.y + p3.y);
          }
          c.SelfMul(1 / area);
          return c;
        };
        b2PolygonShape.Set_s_ps = b2Vec2.MakeArray(b2_maxPolygonVertices);
        b2PolygonShape.Set_s_hull = b2MakeNumberArray(b2_maxPolygonVertices);
        b2PolygonShape.Set_s_r = new b2Vec2();
        b2PolygonShape.Set_s_v = new b2Vec2();
        b2PolygonShape.TestPoint_s_pLocal = new b2Vec2();
        b2PolygonShape.ComputeDistance_s_pLocal = new b2Vec2();
        b2PolygonShape.ComputeDistance_s_normalForMaxDistance = new b2Vec2();
        b2PolygonShape.ComputeDistance_s_minDistance = new b2Vec2();
        b2PolygonShape.ComputeDistance_s_distance = new b2Vec2();
        b2PolygonShape.RayCast_s_p1 = new b2Vec2();
        b2PolygonShape.RayCast_s_p2 = new b2Vec2();
        b2PolygonShape.RayCast_s_d = new b2Vec2();
        b2PolygonShape.ComputeAABB_s_v = new b2Vec2();
        b2PolygonShape.ComputeMass_s_center = new b2Vec2();
        b2PolygonShape.ComputeMass_s_s = new b2Vec2();
        b2PolygonShape.ComputeMass_s_e1 = new b2Vec2();
        b2PolygonShape.ComputeMass_s_e2 = new b2Vec2();
        b2PolygonShape.Validate_s_e = new b2Vec2();
        b2PolygonShape.Validate_s_v = new b2Vec2();
        b2PolygonShape.ComputeSubmergedArea_s_normalL = new b2Vec2();
        b2PolygonShape.ComputeSubmergedArea_s_depths = b2MakeNumberArray(b2_maxPolygonVertices);
        b2PolygonShape.ComputeSubmergedArea_s_md = new b2MassData();
        b2PolygonShape.ComputeSubmergedArea_s_intoVec = new b2Vec2();
        b2PolygonShape.ComputeSubmergedArea_s_outoVec = new b2Vec2();
        b2PolygonShape.ComputeSubmergedArea_s_center = new b2Vec2();
        b2PolygonShape.ComputeCentroid_s_pRef = new b2Vec2();
        b2PolygonShape.ComputeCentroid_s_e1 = new b2Vec2();
        b2PolygonShape.ComputeCentroid_s_e2 = new b2Vec2();
        return b2PolygonShape;
      })(b2Shape);
      var b2EdgeShape = (function(_super) {
        __extends(b2EdgeShape, _super);
        function b2EdgeShape() {
          var _this = _super.call(this, exports.b2ShapeType.e_edgeShape, b2_polygonRadius) || this;
          _this.m_vertex1 = new b2Vec2();
          _this.m_vertex2 = new b2Vec2();
          _this.m_vertex0 = new b2Vec2();
          _this.m_vertex3 = new b2Vec2();
          _this.m_hasVertex0 = false;
          _this.m_hasVertex3 = false;
          return _this;
        }
        b2EdgeShape.prototype.Set = function(v1, v2) {
          this.m_vertex1.Copy(v1);
          this.m_vertex2.Copy(v2);
          this.m_hasVertex0 = false;
          this.m_hasVertex3 = false;
          return this;
        };
        b2EdgeShape.prototype.Clone = function() {
          return new b2EdgeShape().Copy(this);
        };
        b2EdgeShape.prototype.Copy = function(other) {
          _super.prototype.Copy.call(this, other);
          this.m_vertex1.Copy(other.m_vertex1);
          this.m_vertex2.Copy(other.m_vertex2);
          this.m_vertex0.Copy(other.m_vertex0);
          this.m_vertex3.Copy(other.m_vertex3);
          this.m_hasVertex0 = other.m_hasVertex0;
          this.m_hasVertex3 = other.m_hasVertex3;
          return this;
        };
        b2EdgeShape.prototype.GetChildCount = function() {
          return 1;
        };
        b2EdgeShape.prototype.TestPoint = function(xf, p) {
          return false;
        };
        b2EdgeShape.prototype.ComputeDistance = function(xf, p, normal, childIndex) {
          var v1 = b2Transform.MulXV(xf, this.m_vertex1, b2EdgeShape.ComputeDistance_s_v1);
          var v2 = b2Transform.MulXV(xf, this.m_vertex2, b2EdgeShape.ComputeDistance_s_v2);
          var d = b2Vec2.SubVV(p, v1, b2EdgeShape.ComputeDistance_s_d);
          var s = b2Vec2.SubVV(v2, v1, b2EdgeShape.ComputeDistance_s_s);
          var ds = b2Vec2.DotVV(d, s);
          if (ds > 0) {
            var s2 = b2Vec2.DotVV(s, s);
            ds > s2 ? b2Vec2.SubVV(p, v2, d) : d.SelfMulSub(ds / s2, s);
          }
          normal.Copy(d);
          return normal.Normalize();
        };
        b2EdgeShape.prototype.RayCast = function(output, input, xf, childIndex) {
          var p1 = b2Transform.MulTXV(xf, input.p1, b2EdgeShape.RayCast_s_p1);
          var p2 = b2Transform.MulTXV(xf, input.p2, b2EdgeShape.RayCast_s_p2);
          var d = b2Vec2.SubVV(p2, p1, b2EdgeShape.RayCast_s_d);
          var v1 = this.m_vertex1;
          var v2 = this.m_vertex2;
          var e = b2Vec2.SubVV(v2, v1, b2EdgeShape.RayCast_s_e);
          var normal = output.normal.Set(e.y, -e.x).SelfNormalize();
          var numerator = b2Vec2.DotVV(normal, b2Vec2.SubVV(v1, p1, b2Vec2.s_t0));
          var denominator = b2Vec2.DotVV(normal, d);
          if (0 === denominator) return false;
          var t = numerator / denominator;
          if (t < 0 || input.maxFraction < t) return false;
          var q = b2Vec2.AddVMulSV(p1, t, d, b2EdgeShape.RayCast_s_q);
          var r = b2Vec2.SubVV(v2, v1, b2EdgeShape.RayCast_s_r);
          var rr = b2Vec2.DotVV(r, r);
          if (0 === rr) return false;
          var s = b2Vec2.DotVV(b2Vec2.SubVV(q, v1, b2Vec2.s_t0), r) / rr;
          if (s < 0 || 1 < s) return false;
          output.fraction = t;
          b2Rot.MulRV(xf.q, output.normal, output.normal);
          numerator > 0 && output.normal.SelfNeg();
          return true;
        };
        b2EdgeShape.prototype.ComputeAABB = function(aabb, xf, childIndex) {
          var v1 = b2Transform.MulXV(xf, this.m_vertex1, b2EdgeShape.ComputeAABB_s_v1);
          var v2 = b2Transform.MulXV(xf, this.m_vertex2, b2EdgeShape.ComputeAABB_s_v2);
          b2Vec2.MinV(v1, v2, aabb.lowerBound);
          b2Vec2.MaxV(v1, v2, aabb.upperBound);
          var r = this.m_radius;
          aabb.lowerBound.SelfSubXY(r, r);
          aabb.upperBound.SelfAddXY(r, r);
        };
        b2EdgeShape.prototype.ComputeMass = function(massData, density) {
          massData.mass = 0;
          b2Vec2.MidVV(this.m_vertex1, this.m_vertex2, massData.center);
          massData.I = 0;
        };
        b2EdgeShape.prototype.SetupDistanceProxy = function(proxy, index) {
          proxy.m_vertices = proxy.m_buffer;
          proxy.m_vertices[0].Copy(this.m_vertex1);
          proxy.m_vertices[1].Copy(this.m_vertex2);
          proxy.m_count = 2;
          proxy.m_radius = this.m_radius;
        };
        b2EdgeShape.prototype.ComputeSubmergedArea = function(normal, offset, xf, c) {
          c.SetZero();
          return 0;
        };
        b2EdgeShape.prototype.Dump = function(log) {
          log("    const shape: b2EdgeShape = new b2EdgeShape();\n");
          log("    shape.m_radius = %.15f;\n", this.m_radius);
          log("    shape.m_vertex0.Set(%.15f, %.15f);\n", this.m_vertex0.x, this.m_vertex0.y);
          log("    shape.m_vertex1.Set(%.15f, %.15f);\n", this.m_vertex1.x, this.m_vertex1.y);
          log("    shape.m_vertex2.Set(%.15f, %.15f);\n", this.m_vertex2.x, this.m_vertex2.y);
          log("    shape.m_vertex3.Set(%.15f, %.15f);\n", this.m_vertex3.x, this.m_vertex3.y);
          log("    shape.m_hasVertex0 = %s;\n", this.m_hasVertex0);
          log("    shape.m_hasVertex3 = %s;\n", this.m_hasVertex3);
        };
        b2EdgeShape.ComputeDistance_s_v1 = new b2Vec2();
        b2EdgeShape.ComputeDistance_s_v2 = new b2Vec2();
        b2EdgeShape.ComputeDistance_s_d = new b2Vec2();
        b2EdgeShape.ComputeDistance_s_s = new b2Vec2();
        b2EdgeShape.RayCast_s_p1 = new b2Vec2();
        b2EdgeShape.RayCast_s_p2 = new b2Vec2();
        b2EdgeShape.RayCast_s_d = new b2Vec2();
        b2EdgeShape.RayCast_s_e = new b2Vec2();
        b2EdgeShape.RayCast_s_q = new b2Vec2();
        b2EdgeShape.RayCast_s_r = new b2Vec2();
        b2EdgeShape.ComputeAABB_s_v1 = new b2Vec2();
        b2EdgeShape.ComputeAABB_s_v2 = new b2Vec2();
        return b2EdgeShape;
      })(b2Shape);
      var b2ChainShape = (function(_super) {
        __extends(b2ChainShape, _super);
        function b2ChainShape() {
          var _this = _super.call(this, exports.b2ShapeType.e_chainShape, b2_polygonRadius) || this;
          _this.m_vertices = [];
          _this.m_count = 0;
          _this.m_prevVertex = new b2Vec2();
          _this.m_nextVertex = new b2Vec2();
          _this.m_hasPrevVertex = false;
          _this.m_hasNextVertex = false;
          return _this;
        }
        b2ChainShape.prototype.CreateLoop = function(vertices, count, start) {
          void 0 === count && (count = vertices.length);
          void 0 === start && (start = 0);
          if (count < 3) return this;
          this.m_count = count + 1;
          this.m_vertices = b2Vec2.MakeArray(this.m_count);
          for (var i = 0; i < count; ++i) this.m_vertices[i].Copy(vertices[start + i]);
          this.m_vertices[count].Copy(this.m_vertices[0]);
          this.m_prevVertex.Copy(this.m_vertices[this.m_count - 2]);
          this.m_nextVertex.Copy(this.m_vertices[1]);
          this.m_hasPrevVertex = true;
          this.m_hasNextVertex = true;
          return this;
        };
        b2ChainShape.prototype.CreateChain = function(vertices, count, start) {
          void 0 === count && (count = vertices.length);
          void 0 === start && (start = 0);
          this.m_count = count;
          this.m_vertices = b2Vec2.MakeArray(count);
          for (var i = 0; i < count; ++i) this.m_vertices[i].Copy(vertices[start + i]);
          this.m_hasPrevVertex = false;
          this.m_hasNextVertex = false;
          this.m_prevVertex.SetZero();
          this.m_nextVertex.SetZero();
          return this;
        };
        b2ChainShape.prototype.SetPrevVertex = function(prevVertex) {
          this.m_prevVertex.Copy(prevVertex);
          this.m_hasPrevVertex = true;
          return this;
        };
        b2ChainShape.prototype.SetNextVertex = function(nextVertex) {
          this.m_nextVertex.Copy(nextVertex);
          this.m_hasNextVertex = true;
          return this;
        };
        b2ChainShape.prototype.Clone = function() {
          return new b2ChainShape().Copy(this);
        };
        b2ChainShape.prototype.Copy = function(other) {
          _super.prototype.Copy.call(this, other);
          this.CreateChain(other.m_vertices, other.m_count);
          this.m_prevVertex.Copy(other.m_prevVertex);
          this.m_nextVertex.Copy(other.m_nextVertex);
          this.m_hasPrevVertex = other.m_hasPrevVertex;
          this.m_hasNextVertex = other.m_hasNextVertex;
          return this;
        };
        b2ChainShape.prototype.GetChildCount = function() {
          return this.m_count - 1;
        };
        b2ChainShape.prototype.GetChildEdge = function(edge, index) {
          edge.m_type = exports.b2ShapeType.e_edgeShape;
          edge.m_radius = this.m_radius;
          edge.m_vertex1.Copy(this.m_vertices[index]);
          edge.m_vertex2.Copy(this.m_vertices[index + 1]);
          if (index > 0) {
            edge.m_vertex0.Copy(this.m_vertices[index - 1]);
            edge.m_hasVertex0 = true;
          } else {
            edge.m_vertex0.Copy(this.m_prevVertex);
            edge.m_hasVertex0 = this.m_hasPrevVertex;
          }
          if (index < this.m_count - 2) {
            edge.m_vertex3.Copy(this.m_vertices[index + 2]);
            edge.m_hasVertex3 = true;
          } else {
            edge.m_vertex3.Copy(this.m_nextVertex);
            edge.m_hasVertex3 = this.m_hasNextVertex;
          }
        };
        b2ChainShape.prototype.TestPoint = function(xf, p) {
          return false;
        };
        b2ChainShape.prototype.ComputeDistance = function(xf, p, normal, childIndex) {
          var edge = b2ChainShape.ComputeDistance_s_edgeShape;
          this.GetChildEdge(edge, childIndex);
          return edge.ComputeDistance(xf, p, normal, 0);
        };
        b2ChainShape.prototype.RayCast = function(output, input, xf, childIndex) {
          var edgeShape = b2ChainShape.RayCast_s_edgeShape;
          edgeShape.m_vertex1.Copy(this.m_vertices[childIndex]);
          edgeShape.m_vertex2.Copy(this.m_vertices[(childIndex + 1) % this.m_count]);
          return edgeShape.RayCast(output, input, xf, 0);
        };
        b2ChainShape.prototype.ComputeAABB = function(aabb, xf, childIndex) {
          var vertexi1 = this.m_vertices[childIndex];
          var vertexi2 = this.m_vertices[(childIndex + 1) % this.m_count];
          var v1 = b2Transform.MulXV(xf, vertexi1, b2ChainShape.ComputeAABB_s_v1);
          var v2 = b2Transform.MulXV(xf, vertexi2, b2ChainShape.ComputeAABB_s_v2);
          b2Vec2.MinV(v1, v2, aabb.lowerBound);
          b2Vec2.MaxV(v1, v2, aabb.upperBound);
        };
        b2ChainShape.prototype.ComputeMass = function(massData, density) {
          massData.mass = 0;
          massData.center.SetZero();
          massData.I = 0;
        };
        b2ChainShape.prototype.SetupDistanceProxy = function(proxy, index) {
          proxy.m_vertices = proxy.m_buffer;
          proxy.m_vertices[0].Copy(this.m_vertices[index]);
          index + 1 < this.m_count ? proxy.m_vertices[1].Copy(this.m_vertices[index + 1]) : proxy.m_vertices[1].Copy(this.m_vertices[0]);
          proxy.m_count = 2;
          proxy.m_radius = this.m_radius;
        };
        b2ChainShape.prototype.ComputeSubmergedArea = function(normal, offset, xf, c) {
          c.SetZero();
          return 0;
        };
        b2ChainShape.prototype.Dump = function(log) {
          log("    const shape: b2ChainShape = new b2ChainShape();\n");
          log("    const vs: b2Vec2[] = b2Vec2.MakeArray(%d);\n", b2_maxPolygonVertices);
          for (var i = 0; i < this.m_count; ++i) log("    vs[%d].Set(%.15f, %.15f);\n", i, this.m_vertices[i].x, this.m_vertices[i].y);
          log("    shape.CreateChain(vs, %d);\n", this.m_count);
          log("    shape.m_prevVertex.Set(%.15f, %.15f);\n", this.m_prevVertex.x, this.m_prevVertex.y);
          log("    shape.m_nextVertex.Set(%.15f, %.15f);\n", this.m_nextVertex.x, this.m_nextVertex.y);
          log("    shape.m_hasPrevVertex = %s;\n", this.m_hasPrevVertex ? "true" : "false");
          log("    shape.m_hasNextVertex = %s;\n", this.m_hasNextVertex ? "true" : "false");
        };
        b2ChainShape.ComputeDistance_s_edgeShape = new b2EdgeShape();
        b2ChainShape.RayCast_s_edgeShape = new b2EdgeShape();
        b2ChainShape.ComputeAABB_s_v1 = new b2Vec2();
        b2ChainShape.ComputeAABB_s_v2 = new b2Vec2();
        return b2ChainShape;
      })(b2Shape);
      var b2Filter = (function() {
        function b2Filter() {
          this.categoryBits = 1;
          this.maskBits = 65535;
          this.groupIndex = 0;
        }
        b2Filter.prototype.Clone = function() {
          return new b2Filter().Copy(this);
        };
        b2Filter.prototype.Copy = function(other) {
          this.categoryBits = other.categoryBits;
          this.maskBits = other.maskBits;
          this.groupIndex = other.groupIndex || 0;
          return this;
        };
        b2Filter.DEFAULT = new b2Filter();
        return b2Filter;
      })();
      var b2FixtureDef = (function() {
        function b2FixtureDef() {
          this.userData = null;
          this.friction = .2;
          this.restitution = 0;
          this.density = 0;
          this.isSensor = false;
          this.filter = new b2Filter();
        }
        return b2FixtureDef;
      })();
      var b2FixtureProxy = (function() {
        function b2FixtureProxy(fixture) {
          this.aabb = new b2AABB();
          this.childIndex = 0;
          this.fixture = fixture;
        }
        return b2FixtureProxy;
      })();
      var b2Fixture = (function() {
        function b2Fixture(def, body) {
          this.m_density = 0;
          this.m_next = null;
          this.m_friction = 0;
          this.m_restitution = 0;
          this.m_proxies = [];
          this.m_proxyCount = 0;
          this.m_filter = new b2Filter();
          this.m_isSensor = false;
          this.m_userData = null;
          this.m_body = body;
          this.m_shape = def.shape.Clone();
        }
        b2Fixture.prototype.GetType = function() {
          return this.m_shape.GetType();
        };
        b2Fixture.prototype.GetShape = function() {
          return this.m_shape;
        };
        b2Fixture.prototype.SetSensor = function(sensor) {
          if (sensor !== this.m_isSensor) {
            this.m_body.SetAwake(true);
            this.m_isSensor = sensor;
          }
        };
        b2Fixture.prototype.IsSensor = function() {
          return this.m_isSensor;
        };
        b2Fixture.prototype.SetFilterData = function(filter) {
          this.m_filter.Copy(filter);
          this.Refilter();
        };
        b2Fixture.prototype.GetFilterData = function() {
          return this.m_filter;
        };
        b2Fixture.prototype.Refilter = function() {
          var edge = this.m_body.GetContactList();
          while (edge) {
            var contact = edge.contact;
            var fixtureA = contact.GetFixtureA();
            var fixtureB = contact.GetFixtureB();
            fixtureA !== this && fixtureB !== this || contact.FlagForFiltering();
            edge = edge.next;
          }
          var world = this.m_body.GetWorld();
          if (null === world) return;
          var broadPhase = world.m_contactManager.m_broadPhase;
          for (var i = 0; i < this.m_proxyCount; ++i) broadPhase.TouchProxy(this.m_proxies[i].treeNode);
        };
        b2Fixture.prototype.GetBody = function() {
          return this.m_body;
        };
        b2Fixture.prototype.GetNext = function() {
          return this.m_next;
        };
        b2Fixture.prototype.GetUserData = function() {
          return this.m_userData;
        };
        b2Fixture.prototype.SetUserData = function(data) {
          this.m_userData = data;
        };
        b2Fixture.prototype.TestPoint = function(p) {
          return this.m_shape.TestPoint(this.m_body.GetTransform(), p);
        };
        b2Fixture.prototype.ComputeDistance = function(p, normal, childIndex) {
          return this.m_shape.ComputeDistance(this.m_body.GetTransform(), p, normal, childIndex);
        };
        b2Fixture.prototype.RayCast = function(output, input, childIndex) {
          return this.m_shape.RayCast(output, input, this.m_body.GetTransform(), childIndex);
        };
        b2Fixture.prototype.GetMassData = function(massData) {
          void 0 === massData && (massData = new b2MassData());
          this.m_shape.ComputeMass(massData, this.m_density);
          return massData;
        };
        b2Fixture.prototype.SetDensity = function(density) {
          this.m_density = density;
        };
        b2Fixture.prototype.GetDensity = function() {
          return this.m_density;
        };
        b2Fixture.prototype.GetFriction = function() {
          return this.m_friction;
        };
        b2Fixture.prototype.SetFriction = function(friction) {
          this.m_friction = friction;
        };
        b2Fixture.prototype.GetRestitution = function() {
          return this.m_restitution;
        };
        b2Fixture.prototype.SetRestitution = function(restitution) {
          this.m_restitution = restitution;
        };
        b2Fixture.prototype.GetAABB = function(childIndex) {
          return this.m_proxies[childIndex].aabb;
        };
        b2Fixture.prototype.Dump = function(log, bodyIndex) {
          log("    const fd: b2FixtureDef = new b2FixtureDef();\n");
          log("    fd.friction = %.15f;\n", this.m_friction);
          log("    fd.restitution = %.15f;\n", this.m_restitution);
          log("    fd.density = %.15f;\n", this.m_density);
          log("    fd.isSensor = %s;\n", this.m_isSensor ? "true" : "false");
          log("    fd.filter.categoryBits = %d;\n", this.m_filter.categoryBits);
          log("    fd.filter.maskBits = %d;\n", this.m_filter.maskBits);
          log("    fd.filter.groupIndex = %d;\n", this.m_filter.groupIndex);
          this.m_shape.Dump(log);
          log("\n");
          log("    fd.shape = shape;\n");
          log("\n");
          log("    bodies[%d].CreateFixture(fd);\n", bodyIndex);
        };
        b2Fixture.prototype.Create = function(def) {
          var _this = this;
          this.m_userData = def.userData;
          this.m_friction = b2Maybe(def.friction, .2);
          this.m_restitution = b2Maybe(def.restitution, 0);
          this.m_next = null;
          this.m_filter.Copy(b2Maybe(def.filter, b2Filter.DEFAULT));
          this.m_isSensor = b2Maybe(def.isSensor, false);
          this.m_proxies = b2MakeArray(this.m_shape.GetChildCount(), (function(i) {
            return new b2FixtureProxy(_this);
          }));
          this.m_proxyCount = 0;
          this.m_density = b2Maybe(def.density, 0);
        };
        b2Fixture.prototype.Destroy = function() {};
        b2Fixture.prototype.CreateProxies = function(xf) {
          var broadPhase = this.m_body.m_world.m_contactManager.m_broadPhase;
          this.m_proxyCount = this.m_shape.GetChildCount();
          for (var i = 0; i < this.m_proxyCount; ++i) {
            var proxy = this.m_proxies[i] = new b2FixtureProxy(this);
            this.m_shape.ComputeAABB(proxy.aabb, xf, i);
            proxy.treeNode = broadPhase.CreateProxy(proxy.aabb, proxy);
            proxy.childIndex = i;
          }
        };
        b2Fixture.prototype.DestroyProxies = function() {
          var broadPhase = this.m_body.m_world.m_contactManager.m_broadPhase;
          for (var i = 0; i < this.m_proxyCount; ++i) {
            var proxy = this.m_proxies[i];
            delete proxy.treeNode.userData;
            broadPhase.DestroyProxy(proxy.treeNode);
            delete proxy.treeNode;
          }
          this.m_proxyCount = 0;
        };
        b2Fixture.prototype.TouchProxies = function() {
          var broadPhase = this.m_body.m_world.m_contactManager.m_broadPhase;
          var proxyCount = this.m_proxyCount;
          for (var i = 0; i < proxyCount; ++i) broadPhase.TouchProxy(this.m_proxies[i].treeNode);
        };
        b2Fixture.prototype.Synchronize = function(transform1, transform2) {
          if (0 === this.m_proxyCount) return;
          var broadPhase = this.m_body.m_world.m_contactManager.m_broadPhase;
          for (var i = 0; i < this.m_proxyCount; ++i) {
            var proxy = this.m_proxies[i];
            var aabb1 = b2Fixture.Synchronize_s_aabb1;
            var aabb2 = b2Fixture.Synchronize_s_aabb2;
            this.m_shape.ComputeAABB(aabb1, transform1, i);
            this.m_shape.ComputeAABB(aabb2, transform2, i);
            proxy.aabb.Combine2(aabb1, aabb2);
            var displacement = b2Vec2.SubVV(transform2.p, transform1.p, b2Fixture.Synchronize_s_displacement);
            broadPhase.MoveProxy(proxy.treeNode, proxy.aabb, displacement);
          }
        };
        b2Fixture.Synchronize_s_aabb1 = new b2AABB();
        b2Fixture.Synchronize_s_aabb2 = new b2AABB();
        b2Fixture.Synchronize_s_displacement = new b2Vec2();
        return b2Fixture;
      })();
      (function(b2BodyType) {
        b2BodyType[b2BodyType["b2_unknown"] = -1] = "b2_unknown";
        b2BodyType[b2BodyType["b2_staticBody"] = 0] = "b2_staticBody";
        b2BodyType[b2BodyType["b2_kinematicBody"] = 1] = "b2_kinematicBody";
        b2BodyType[b2BodyType["b2_dynamicBody"] = 2] = "b2_dynamicBody";
      })(exports.b2BodyType || (exports.b2BodyType = {}));
      var b2BodyDef = (function() {
        function b2BodyDef() {
          this.type = exports.b2BodyType.b2_staticBody;
          this.position = new b2Vec2(0, 0);
          this.angle = 0;
          this.linearVelocity = new b2Vec2(0, 0);
          this.angularVelocity = 0;
          this.linearDamping = 0;
          this.angularDamping = 0;
          this.allowSleep = true;
          this.awake = true;
          this.fixedRotation = false;
          this.bullet = false;
          this.active = true;
          this.userData = null;
          this.gravityScale = 1;
        }
        return b2BodyDef;
      })();
      var b2Body = (function() {
        function b2Body(bd, world) {
          this.m_type = exports.b2BodyType.b2_staticBody;
          this.m_islandFlag = false;
          this.m_awakeFlag = false;
          this.m_autoSleepFlag = false;
          this.m_bulletFlag = false;
          this.m_fixedRotationFlag = false;
          this.m_activeFlag = false;
          this.m_toiFlag = false;
          this.m_islandIndex = 0;
          this.m_xf = new b2Transform();
          this.m_xf0 = new b2Transform();
          this.m_sweep = new b2Sweep();
          this.m_linearVelocity = new b2Vec2();
          this.m_angularVelocity = 0;
          this.m_force = new b2Vec2();
          this.m_torque = 0;
          this.m_prev = null;
          this.m_next = null;
          this.m_fixtureList = null;
          this.m_fixtureCount = 0;
          this.m_jointList = null;
          this.m_contactList = null;
          this.m_mass = 1;
          this.m_invMass = 1;
          this.m_I = 0;
          this.m_invI = 0;
          this.m_linearDamping = 0;
          this.m_angularDamping = 0;
          this.m_gravityScale = 1;
          this.m_sleepTime = 0;
          this.m_userData = null;
          this.m_controllerList = null;
          this.m_controllerCount = 0;
          this.m_bulletFlag = b2Maybe(bd.bullet, false);
          this.m_fixedRotationFlag = b2Maybe(bd.fixedRotation, false);
          this.m_autoSleepFlag = b2Maybe(bd.allowSleep, true);
          this.m_awakeFlag = b2Maybe(bd.awake, true);
          this.m_activeFlag = b2Maybe(bd.active, true);
          this.m_world = world;
          this.m_xf.p.Copy(b2Maybe(bd.position, b2Vec2.ZERO));
          this.m_xf.q.SetAngle(b2Maybe(bd.angle, 0));
          this.m_xf0.Copy(this.m_xf);
          this.m_sweep.localCenter.SetZero();
          this.m_sweep.c0.Copy(this.m_xf.p);
          this.m_sweep.c.Copy(this.m_xf.p);
          this.m_sweep.a0 = this.m_sweep.a = this.m_xf.q.GetAngle();
          this.m_sweep.alpha0 = 0;
          this.m_linearVelocity.Copy(b2Maybe(bd.linearVelocity, b2Vec2.ZERO));
          this.m_angularVelocity = b2Maybe(bd.angularVelocity, 0);
          this.m_linearDamping = b2Maybe(bd.linearDamping, 0);
          this.m_angularDamping = b2Maybe(bd.angularDamping, 0);
          this.m_gravityScale = b2Maybe(bd.gravityScale, 1);
          this.m_force.SetZero();
          this.m_torque = 0;
          this.m_sleepTime = 0;
          this.m_type = b2Maybe(bd.type, exports.b2BodyType.b2_staticBody);
          if (bd.type === exports.b2BodyType.b2_dynamicBody) {
            this.m_mass = 1;
            this.m_invMass = 1;
          } else {
            this.m_mass = 0;
            this.m_invMass = 0;
          }
          this.m_I = 0;
          this.m_invI = 0;
          this.m_userData = bd.userData;
          this.m_fixtureList = null;
          this.m_fixtureCount = 0;
          this.m_controllerList = null;
          this.m_controllerCount = 0;
        }
        b2Body.prototype.CreateFixture = function(a, b) {
          void 0 === b && (b = 0);
          return a instanceof b2Shape ? this.CreateFixtureShapeDensity(a, b) : this.CreateFixtureDef(a);
        };
        b2Body.prototype.CreateFixtureDef = function(def) {
          if (this.m_world.IsLocked()) throw new Error();
          var fixture = new b2Fixture(def, this);
          fixture.Create(def);
          this.m_activeFlag && fixture.CreateProxies(this.m_xf);
          fixture.m_next = this.m_fixtureList;
          this.m_fixtureList = fixture;
          ++this.m_fixtureCount;
          fixture.m_density > 0 && this.ResetMassData();
          this.m_world.m_newFixture = true;
          return fixture;
        };
        b2Body.prototype.CreateFixtureShapeDensity = function(shape, density) {
          void 0 === density && (density = 0);
          var def = b2Body.CreateFixtureShapeDensity_s_def;
          def.shape = shape;
          def.density = density;
          return this.CreateFixtureDef(def);
        };
        b2Body.prototype.DestroyFixture = function(fixture) {
          if (this.m_world.IsLocked()) throw new Error();
          var node = this.m_fixtureList;
          var ppF = null;
          while (null !== node) {
            if (node === fixture) {
              ppF ? ppF.m_next = fixture.m_next : this.m_fixtureList = fixture.m_next;
              break;
            }
            ppF = node;
            node = node.m_next;
          }
          var edge = this.m_contactList;
          while (edge) {
            var c = edge.contact;
            edge = edge.next;
            var fixtureA = c.GetFixtureA();
            var fixtureB = c.GetFixtureB();
            fixture !== fixtureA && fixture !== fixtureB || this.m_world.m_contactManager.Destroy(c);
          }
          this.m_activeFlag && fixture.DestroyProxies();
          fixture.m_next = null;
          fixture.Destroy();
          --this.m_fixtureCount;
          this.ResetMassData();
        };
        b2Body.prototype.SetTransformVec = function(position, angle) {
          this.SetTransformXY(position.x, position.y, angle);
        };
        b2Body.prototype.SetTransformXY = function(x, y, angle) {
          if (this.m_world.IsLocked()) throw new Error();
          this.m_xf.q.SetAngle(angle);
          this.m_xf.p.Set(x, y);
          this.m_xf0.Copy(this.m_xf);
          b2Transform.MulXV(this.m_xf, this.m_sweep.localCenter, this.m_sweep.c);
          this.m_sweep.a = angle;
          this.m_sweep.c0.Copy(this.m_sweep.c);
          this.m_sweep.a0 = angle;
          for (var f = this.m_fixtureList; f; f = f.m_next) f.Synchronize(this.m_xf, this.m_xf);
          this.m_world.m_contactManager.FindNewContacts();
        };
        b2Body.prototype.SetTransform = function(xf) {
          this.SetTransformVec(xf.p, xf.GetAngle());
        };
        b2Body.prototype.GetTransform = function() {
          return this.m_xf;
        };
        b2Body.prototype.GetPosition = function() {
          return this.m_xf.p;
        };
        b2Body.prototype.SetPosition = function(position) {
          this.SetTransformVec(position, this.GetAngle());
        };
        b2Body.prototype.SetPositionXY = function(x, y) {
          this.SetTransformXY(x, y, this.GetAngle());
        };
        b2Body.prototype.GetAngle = function() {
          return this.m_sweep.a;
        };
        b2Body.prototype.SetAngle = function(angle) {
          this.SetTransformVec(this.GetPosition(), angle);
        };
        b2Body.prototype.GetWorldCenter = function() {
          return this.m_sweep.c;
        };
        b2Body.prototype.GetLocalCenter = function() {
          return this.m_sweep.localCenter;
        };
        b2Body.prototype.SetLinearVelocity = function(v) {
          if (this.m_type === exports.b2BodyType.b2_staticBody) return;
          b2Vec2.DotVV(v, v) > 0 && this.SetAwake(true);
          this.m_linearVelocity.Copy(v);
        };
        b2Body.prototype.GetLinearVelocity = function() {
          return this.m_linearVelocity;
        };
        b2Body.prototype.SetAngularVelocity = function(w) {
          if (this.m_type === exports.b2BodyType.b2_staticBody) return;
          w * w > 0 && this.SetAwake(true);
          this.m_angularVelocity = w;
        };
        b2Body.prototype.GetAngularVelocity = function() {
          return this.m_angularVelocity;
        };
        b2Body.prototype.GetDefinition = function(bd) {
          bd.type = this.GetType();
          bd.allowSleep = this.m_autoSleepFlag;
          bd.angle = this.GetAngle();
          bd.angularDamping = this.m_angularDamping;
          bd.gravityScale = this.m_gravityScale;
          bd.angularVelocity = this.m_angularVelocity;
          bd.fixedRotation = this.m_fixedRotationFlag;
          bd.bullet = this.m_bulletFlag;
          bd.awake = this.m_awakeFlag;
          bd.linearDamping = this.m_linearDamping;
          bd.linearVelocity.Copy(this.GetLinearVelocity());
          bd.position.Copy(this.GetPosition());
          bd.userData = this.GetUserData();
          return bd;
        };
        b2Body.prototype.ApplyForce = function(force, point, wake) {
          void 0 === wake && (wake = true);
          if (this.m_type !== exports.b2BodyType.b2_dynamicBody) return;
          wake && !this.m_awakeFlag && this.SetAwake(true);
          if (this.m_awakeFlag) {
            this.m_force.x += force.x;
            this.m_force.y += force.y;
            this.m_torque += (point.x - this.m_sweep.c.x) * force.y - (point.y - this.m_sweep.c.y) * force.x;
          }
        };
        b2Body.prototype.ApplyForceToCenter = function(force, wake) {
          void 0 === wake && (wake = true);
          if (this.m_type !== exports.b2BodyType.b2_dynamicBody) return;
          wake && !this.m_awakeFlag && this.SetAwake(true);
          if (this.m_awakeFlag) {
            this.m_force.x += force.x;
            this.m_force.y += force.y;
          }
        };
        b2Body.prototype.ApplyTorque = function(torque, wake) {
          void 0 === wake && (wake = true);
          if (this.m_type !== exports.b2BodyType.b2_dynamicBody) return;
          wake && !this.m_awakeFlag && this.SetAwake(true);
          this.m_awakeFlag && (this.m_torque += torque);
        };
        b2Body.prototype.ApplyLinearImpulse = function(impulse, point, wake) {
          void 0 === wake && (wake = true);
          if (this.m_type !== exports.b2BodyType.b2_dynamicBody) return;
          wake && !this.m_awakeFlag && this.SetAwake(true);
          if (this.m_awakeFlag) {
            this.m_linearVelocity.x += this.m_invMass * impulse.x;
            this.m_linearVelocity.y += this.m_invMass * impulse.y;
            this.m_angularVelocity += this.m_invI * ((point.x - this.m_sweep.c.x) * impulse.y - (point.y - this.m_sweep.c.y) * impulse.x);
          }
        };
        b2Body.prototype.ApplyLinearImpulseToCenter = function(impulse, wake) {
          void 0 === wake && (wake = true);
          if (this.m_type !== exports.b2BodyType.b2_dynamicBody) return;
          wake && !this.m_awakeFlag && this.SetAwake(true);
          if (this.m_awakeFlag) {
            this.m_linearVelocity.x += this.m_invMass * impulse.x;
            this.m_linearVelocity.y += this.m_invMass * impulse.y;
          }
        };
        b2Body.prototype.ApplyAngularImpulse = function(impulse, wake) {
          void 0 === wake && (wake = true);
          if (this.m_type !== exports.b2BodyType.b2_dynamicBody) return;
          wake && !this.m_awakeFlag && this.SetAwake(true);
          this.m_awakeFlag && (this.m_angularVelocity += this.m_invI * impulse);
        };
        b2Body.prototype.GetMass = function() {
          return this.m_mass;
        };
        b2Body.prototype.GetInertia = function() {
          return this.m_I + this.m_mass * b2Vec2.DotVV(this.m_sweep.localCenter, this.m_sweep.localCenter);
        };
        b2Body.prototype.GetMassData = function(data) {
          data.mass = this.m_mass;
          data.I = this.m_I + this.m_mass * b2Vec2.DotVV(this.m_sweep.localCenter, this.m_sweep.localCenter);
          data.center.Copy(this.m_sweep.localCenter);
          return data;
        };
        b2Body.prototype.SetMassData = function(massData) {
          if (this.m_world.IsLocked()) throw new Error();
          if (this.m_type !== exports.b2BodyType.b2_dynamicBody) return;
          this.m_invMass = 0;
          this.m_I = 0;
          this.m_invI = 0;
          this.m_mass = massData.mass;
          this.m_mass <= 0 && (this.m_mass = 1);
          this.m_invMass = 1 / this.m_mass;
          if (massData.I > 0 && !this.m_fixedRotationFlag) {
            this.m_I = massData.I - this.m_mass * b2Vec2.DotVV(massData.center, massData.center);
            this.m_invI = 1 / this.m_I;
          }
          var oldCenter = b2Body.SetMassData_s_oldCenter.Copy(this.m_sweep.c);
          this.m_sweep.localCenter.Copy(massData.center);
          b2Transform.MulXV(this.m_xf, this.m_sweep.localCenter, this.m_sweep.c);
          this.m_sweep.c0.Copy(this.m_sweep.c);
          b2Vec2.AddVCrossSV(this.m_linearVelocity, this.m_angularVelocity, b2Vec2.SubVV(this.m_sweep.c, oldCenter, b2Vec2.s_t0), this.m_linearVelocity);
        };
        b2Body.prototype.ResetMassData = function() {
          this.m_mass = 0;
          this.m_invMass = 0;
          this.m_I = 0;
          this.m_invI = 0;
          this.m_sweep.localCenter.SetZero();
          if (this.m_type === exports.b2BodyType.b2_staticBody || this.m_type === exports.b2BodyType.b2_kinematicBody) {
            this.m_sweep.c0.Copy(this.m_xf.p);
            this.m_sweep.c.Copy(this.m_xf.p);
            this.m_sweep.a0 = this.m_sweep.a;
            return;
          }
          var localCenter = b2Body.ResetMassData_s_localCenter.SetZero();
          for (var f = this.m_fixtureList; f; f = f.m_next) {
            if (0 === f.m_density) continue;
            var massData = f.GetMassData(b2Body.ResetMassData_s_massData);
            this.m_mass += massData.mass;
            localCenter.x += massData.center.x * massData.mass;
            localCenter.y += massData.center.y * massData.mass;
            this.m_I += massData.I;
          }
          if (this.m_mass > 0) {
            this.m_invMass = 1 / this.m_mass;
            localCenter.x *= this.m_invMass;
            localCenter.y *= this.m_invMass;
          } else {
            this.m_mass = 1;
            this.m_invMass = 1;
          }
          if (this.m_I > 0 && !this.m_fixedRotationFlag) {
            this.m_I -= this.m_mass * b2Vec2.DotVV(localCenter, localCenter);
            this.m_invI = 1 / this.m_I;
          } else {
            this.m_I = 0;
            this.m_invI = 0;
          }
          var oldCenter = b2Body.ResetMassData_s_oldCenter.Copy(this.m_sweep.c);
          this.m_sweep.localCenter.Copy(localCenter);
          b2Transform.MulXV(this.m_xf, this.m_sweep.localCenter, this.m_sweep.c);
          this.m_sweep.c0.Copy(this.m_sweep.c);
          b2Vec2.AddVCrossSV(this.m_linearVelocity, this.m_angularVelocity, b2Vec2.SubVV(this.m_sweep.c, oldCenter, b2Vec2.s_t0), this.m_linearVelocity);
        };
        b2Body.prototype.GetWorldPoint = function(localPoint, out) {
          return b2Transform.MulXV(this.m_xf, localPoint, out);
        };
        b2Body.prototype.GetWorldVector = function(localVector, out) {
          return b2Rot.MulRV(this.m_xf.q, localVector, out);
        };
        b2Body.prototype.GetLocalPoint = function(worldPoint, out) {
          return b2Transform.MulTXV(this.m_xf, worldPoint, out);
        };
        b2Body.prototype.GetLocalVector = function(worldVector, out) {
          return b2Rot.MulTRV(this.m_xf.q, worldVector, out);
        };
        b2Body.prototype.GetLinearVelocityFromWorldPoint = function(worldPoint, out) {
          return b2Vec2.AddVCrossSV(this.m_linearVelocity, this.m_angularVelocity, b2Vec2.SubVV(worldPoint, this.m_sweep.c, b2Vec2.s_t0), out);
        };
        b2Body.prototype.GetLinearVelocityFromLocalPoint = function(localPoint, out) {
          return this.GetLinearVelocityFromWorldPoint(this.GetWorldPoint(localPoint, out), out);
        };
        b2Body.prototype.GetLinearDamping = function() {
          return this.m_linearDamping;
        };
        b2Body.prototype.SetLinearDamping = function(linearDamping) {
          this.m_linearDamping = linearDamping;
        };
        b2Body.prototype.GetAngularDamping = function() {
          return this.m_angularDamping;
        };
        b2Body.prototype.SetAngularDamping = function(angularDamping) {
          this.m_angularDamping = angularDamping;
        };
        b2Body.prototype.GetGravityScale = function() {
          return this.m_gravityScale;
        };
        b2Body.prototype.SetGravityScale = function(scale) {
          this.m_gravityScale = scale;
        };
        b2Body.prototype.SetType = function(type) {
          if (this.m_world.IsLocked()) throw new Error();
          if (this.m_type === type) return;
          this.m_type = type;
          this.ResetMassData();
          if (this.m_type === exports.b2BodyType.b2_staticBody) {
            this.m_linearVelocity.SetZero();
            this.m_angularVelocity = 0;
            this.m_sweep.a0 = this.m_sweep.a;
            this.m_sweep.c0.Copy(this.m_sweep.c);
            this.SynchronizeFixtures();
          }
          this.SetAwake(true);
          this.m_force.SetZero();
          this.m_torque = 0;
          var ce = this.m_contactList;
          while (ce) {
            var ce0 = ce;
            ce = ce.next;
            this.m_world.m_contactManager.Destroy(ce0.contact);
          }
          this.m_contactList = null;
          for (var f = this.m_fixtureList; f; f = f.m_next) f.TouchProxies();
        };
        b2Body.prototype.GetType = function() {
          return this.m_type;
        };
        b2Body.prototype.SetBullet = function(flag) {
          this.m_bulletFlag = flag;
        };
        b2Body.prototype.IsBullet = function() {
          return this.m_bulletFlag;
        };
        b2Body.prototype.SetSleepingAllowed = function(flag) {
          this.m_autoSleepFlag = flag;
          flag || this.SetAwake(true);
        };
        b2Body.prototype.IsSleepingAllowed = function() {
          return this.m_autoSleepFlag;
        };
        b2Body.prototype.SetAwake = function(flag) {
          if (flag) {
            this.m_awakeFlag = true;
            this.m_sleepTime = 0;
          } else {
            this.m_awakeFlag = false;
            this.m_sleepTime = 0;
            this.m_linearVelocity.SetZero();
            this.m_angularVelocity = 0;
            this.m_force.SetZero();
            this.m_torque = 0;
          }
        };
        b2Body.prototype.IsAwake = function() {
          return this.m_awakeFlag;
        };
        b2Body.prototype.SetActive = function(flag) {
          if (this.m_world.IsLocked()) throw new Error();
          if (flag === this.IsActive()) return;
          this.m_activeFlag = flag;
          if (flag) for (var f = this.m_fixtureList; f; f = f.m_next) f.CreateProxies(this.m_xf); else {
            for (var f = this.m_fixtureList; f; f = f.m_next) f.DestroyProxies();
            var ce = this.m_contactList;
            while (ce) {
              var ce0 = ce;
              ce = ce.next;
              this.m_world.m_contactManager.Destroy(ce0.contact);
            }
            this.m_contactList = null;
          }
        };
        b2Body.prototype.IsActive = function() {
          return this.m_activeFlag;
        };
        b2Body.prototype.SetFixedRotation = function(flag) {
          if (this.m_fixedRotationFlag === flag) return;
          this.m_fixedRotationFlag = flag;
          this.m_angularVelocity = 0;
          this.ResetMassData();
        };
        b2Body.prototype.IsFixedRotation = function() {
          return this.m_fixedRotationFlag;
        };
        b2Body.prototype.GetFixtureList = function() {
          return this.m_fixtureList;
        };
        b2Body.prototype.GetJointList = function() {
          return this.m_jointList;
        };
        b2Body.prototype.GetContactList = function() {
          return this.m_contactList;
        };
        b2Body.prototype.GetNext = function() {
          return this.m_next;
        };
        b2Body.prototype.GetUserData = function() {
          return this.m_userData;
        };
        b2Body.prototype.SetUserData = function(data) {
          this.m_userData = data;
        };
        b2Body.prototype.GetWorld = function() {
          return this.m_world;
        };
        b2Body.prototype.Dump = function(log) {
          var bodyIndex = this.m_islandIndex;
          log("{\n");
          log("  const bd: b2BodyDef = new b2BodyDef();\n");
          var type_str = "";
          switch (this.m_type) {
           case exports.b2BodyType.b2_staticBody:
            type_str = "b2BodyType.b2_staticBody";
            break;

           case exports.b2BodyType.b2_kinematicBody:
            type_str = "b2BodyType.b2_kinematicBody";
            break;

           case exports.b2BodyType.b2_dynamicBody:
            type_str = "b2BodyType.b2_dynamicBody";
          }
          log("  bd.type = %s;\n", type_str);
          log("  bd.position.Set(%.15f, %.15f);\n", this.m_xf.p.x, this.m_xf.p.y);
          log("  bd.angle = %.15f;\n", this.m_sweep.a);
          log("  bd.linearVelocity.Set(%.15f, %.15f);\n", this.m_linearVelocity.x, this.m_linearVelocity.y);
          log("  bd.angularVelocity = %.15f;\n", this.m_angularVelocity);
          log("  bd.linearDamping = %.15f;\n", this.m_linearDamping);
          log("  bd.angularDamping = %.15f;\n", this.m_angularDamping);
          log("  bd.allowSleep = %s;\n", this.m_autoSleepFlag ? "true" : "false");
          log("  bd.awake = %s;\n", this.m_awakeFlag ? "true" : "false");
          log("  bd.fixedRotation = %s;\n", this.m_fixedRotationFlag ? "true" : "false");
          log("  bd.bullet = %s;\n", this.m_bulletFlag ? "true" : "false");
          log("  bd.active = %s;\n", this.m_activeFlag ? "true" : "false");
          log("  bd.gravityScale = %.15f;\n", this.m_gravityScale);
          log("\n");
          log("  bodies[%d] = this.m_world.CreateBody(bd);\n", this.m_islandIndex);
          log("\n");
          for (var f = this.m_fixtureList; f; f = f.m_next) {
            log("  {\n");
            f.Dump(log, bodyIndex);
            log("  }\n");
          }
          log("}\n");
        };
        b2Body.prototype.SynchronizeFixtures = function() {
          var xf1 = b2Body.SynchronizeFixtures_s_xf1;
          xf1.q.SetAngle(this.m_sweep.a0);
          b2Rot.MulRV(xf1.q, this.m_sweep.localCenter, xf1.p);
          b2Vec2.SubVV(this.m_sweep.c0, xf1.p, xf1.p);
          for (var f = this.m_fixtureList; f; f = f.m_next) f.Synchronize(xf1, this.m_xf);
        };
        b2Body.prototype.SynchronizeTransform = function() {
          this.m_xf.q.SetAngle(this.m_sweep.a);
          b2Rot.MulRV(this.m_xf.q, this.m_sweep.localCenter, this.m_xf.p);
          b2Vec2.SubVV(this.m_sweep.c, this.m_xf.p, this.m_xf.p);
        };
        b2Body.prototype.ShouldCollide = function(other) {
          if (this.m_type === exports.b2BodyType.b2_staticBody && other.m_type === exports.b2BodyType.b2_staticBody) return false;
          return this.ShouldCollideConnected(other);
        };
        b2Body.prototype.ShouldCollideConnected = function(other) {
          for (var jn = this.m_jointList; jn; jn = jn.next) if (jn.other === other && !jn.joint.m_collideConnected) return false;
          return true;
        };
        b2Body.prototype.Advance = function(alpha) {
          this.m_sweep.Advance(alpha);
          this.m_sweep.c.Copy(this.m_sweep.c0);
          this.m_sweep.a = this.m_sweep.a0;
          this.m_xf.q.SetAngle(this.m_sweep.a);
          b2Rot.MulRV(this.m_xf.q, this.m_sweep.localCenter, this.m_xf.p);
          b2Vec2.SubVV(this.m_sweep.c, this.m_xf.p, this.m_xf.p);
        };
        b2Body.prototype.GetControllerList = function() {
          return this.m_controllerList;
        };
        b2Body.prototype.GetControllerCount = function() {
          return this.m_controllerCount;
        };
        b2Body.CreateFixtureShapeDensity_s_def = new b2FixtureDef();
        b2Body.SetMassData_s_oldCenter = new b2Vec2();
        b2Body.ResetMassData_s_localCenter = new b2Vec2();
        b2Body.ResetMassData_s_oldCenter = new b2Vec2();
        b2Body.ResetMassData_s_massData = new b2MassData();
        b2Body.SynchronizeFixtures_s_xf1 = new b2Transform();
        return b2Body;
      })();
      (function(b2JointType) {
        b2JointType[b2JointType["e_unknownJoint"] = 0] = "e_unknownJoint";
        b2JointType[b2JointType["e_revoluteJoint"] = 1] = "e_revoluteJoint";
        b2JointType[b2JointType["e_prismaticJoint"] = 2] = "e_prismaticJoint";
        b2JointType[b2JointType["e_distanceJoint"] = 3] = "e_distanceJoint";
        b2JointType[b2JointType["e_pulleyJoint"] = 4] = "e_pulleyJoint";
        b2JointType[b2JointType["e_mouseJoint"] = 5] = "e_mouseJoint";
        b2JointType[b2JointType["e_gearJoint"] = 6] = "e_gearJoint";
        b2JointType[b2JointType["e_wheelJoint"] = 7] = "e_wheelJoint";
        b2JointType[b2JointType["e_weldJoint"] = 8] = "e_weldJoint";
        b2JointType[b2JointType["e_frictionJoint"] = 9] = "e_frictionJoint";
        b2JointType[b2JointType["e_ropeJoint"] = 10] = "e_ropeJoint";
        b2JointType[b2JointType["e_motorJoint"] = 11] = "e_motorJoint";
        b2JointType[b2JointType["e_areaJoint"] = 12] = "e_areaJoint";
      })(exports.b2JointType || (exports.b2JointType = {}));
      (function(b2LimitState) {
        b2LimitState[b2LimitState["e_inactiveLimit"] = 0] = "e_inactiveLimit";
        b2LimitState[b2LimitState["e_atLowerLimit"] = 1] = "e_atLowerLimit";
        b2LimitState[b2LimitState["e_atUpperLimit"] = 2] = "e_atUpperLimit";
        b2LimitState[b2LimitState["e_equalLimits"] = 3] = "e_equalLimits";
      })(exports.b2LimitState || (exports.b2LimitState = {}));
      var b2Jacobian = (function() {
        function b2Jacobian() {
          this.linear = new b2Vec2();
          this.angularA = 0;
          this.angularB = 0;
        }
        b2Jacobian.prototype.SetZero = function() {
          this.linear.SetZero();
          this.angularA = 0;
          this.angularB = 0;
          return this;
        };
        b2Jacobian.prototype.Set = function(x, a1, a2) {
          this.linear.Copy(x);
          this.angularA = a1;
          this.angularB = a2;
          return this;
        };
        return b2Jacobian;
      })();
      var b2JointEdge = (function() {
        function b2JointEdge(joint, other) {
          this.prev = null;
          this.next = null;
          this.joint = joint;
          this.other = other;
        }
        return b2JointEdge;
      })();
      var b2JointDef = (function() {
        function b2JointDef(type) {
          this.type = exports.b2JointType.e_unknownJoint;
          this.userData = null;
          this.collideConnected = false;
          this.type = type;
        }
        return b2JointDef;
      })();
      var b2Joint = (function() {
        function b2Joint(def) {
          this.m_type = exports.b2JointType.e_unknownJoint;
          this.m_prev = null;
          this.m_next = null;
          this.m_index = 0;
          this.m_islandFlag = false;
          this.m_collideConnected = false;
          this.m_userData = null;
          this.m_type = def.type;
          this.m_edgeA = new b2JointEdge(this, def.bodyB);
          this.m_edgeB = new b2JointEdge(this, def.bodyA);
          this.m_bodyA = def.bodyA;
          this.m_bodyB = def.bodyB;
          this.m_collideConnected = b2Maybe(def.collideConnected, false);
          this.m_userData = def.userData;
        }
        b2Joint.prototype.GetType = function() {
          return this.m_type;
        };
        b2Joint.prototype.GetBodyA = function() {
          return this.m_bodyA;
        };
        b2Joint.prototype.GetBodyB = function() {
          return this.m_bodyB;
        };
        b2Joint.prototype.GetNext = function() {
          return this.m_next;
        };
        b2Joint.prototype.GetUserData = function() {
          return this.m_userData;
        };
        b2Joint.prototype.SetUserData = function(data) {
          this.m_userData = data;
        };
        b2Joint.prototype.IsActive = function() {
          return this.m_bodyA.IsActive() && this.m_bodyB.IsActive();
        };
        b2Joint.prototype.GetCollideConnected = function() {
          return this.m_collideConnected;
        };
        b2Joint.prototype.Dump = function(log) {
          log("// Dump is not supported for this joint type.\n");
        };
        b2Joint.prototype.ShiftOrigin = function(newOrigin) {};
        return b2Joint;
      })();
      var b2DistanceJointDef = (function(_super) {
        __extends(b2DistanceJointDef, _super);
        function b2DistanceJointDef() {
          var _this = _super.call(this, exports.b2JointType.e_distanceJoint) || this;
          _this.localAnchorA = new b2Vec2();
          _this.localAnchorB = new b2Vec2();
          _this.length = 1;
          _this.frequencyHz = 0;
          _this.dampingRatio = 0;
          return _this;
        }
        b2DistanceJointDef.prototype.Initialize = function(b1, b2, anchor1, anchor2) {
          this.bodyA = b1;
          this.bodyB = b2;
          this.bodyA.GetLocalPoint(anchor1, this.localAnchorA);
          this.bodyB.GetLocalPoint(anchor2, this.localAnchorB);
          this.length = b2Vec2.DistanceVV(anchor1, anchor2);
          this.frequencyHz = 0;
          this.dampingRatio = 0;
        };
        return b2DistanceJointDef;
      })(b2JointDef);
      var b2DistanceJoint = (function(_super) {
        __extends(b2DistanceJoint, _super);
        function b2DistanceJoint(def) {
          var _this = _super.call(this, def) || this;
          _this.m_frequencyHz = 0;
          _this.m_dampingRatio = 0;
          _this.m_bias = 0;
          _this.m_localAnchorA = new b2Vec2();
          _this.m_localAnchorB = new b2Vec2();
          _this.m_gamma = 0;
          _this.m_impulse = 0;
          _this.m_length = 0;
          _this.m_indexA = 0;
          _this.m_indexB = 0;
          _this.m_u = new b2Vec2();
          _this.m_rA = new b2Vec2();
          _this.m_rB = new b2Vec2();
          _this.m_localCenterA = new b2Vec2();
          _this.m_localCenterB = new b2Vec2();
          _this.m_invMassA = 0;
          _this.m_invMassB = 0;
          _this.m_invIA = 0;
          _this.m_invIB = 0;
          _this.m_mass = 0;
          _this.m_qA = new b2Rot();
          _this.m_qB = new b2Rot();
          _this.m_lalcA = new b2Vec2();
          _this.m_lalcB = new b2Vec2();
          _this.m_frequencyHz = b2Maybe(def.frequencyHz, 0);
          _this.m_dampingRatio = b2Maybe(def.dampingRatio, 0);
          _this.m_localAnchorA.Copy(def.localAnchorA);
          _this.m_localAnchorB.Copy(def.localAnchorB);
          _this.m_length = def.length;
          return _this;
        }
        b2DistanceJoint.prototype.GetAnchorA = function(out) {
          return this.m_bodyA.GetWorldPoint(this.m_localAnchorA, out);
        };
        b2DistanceJoint.prototype.GetAnchorB = function(out) {
          return this.m_bodyB.GetWorldPoint(this.m_localAnchorB, out);
        };
        b2DistanceJoint.prototype.GetReactionForce = function(inv_dt, out) {
          out.x = inv_dt * this.m_impulse * this.m_u.x;
          out.y = inv_dt * this.m_impulse * this.m_u.y;
          return out;
        };
        b2DistanceJoint.prototype.GetReactionTorque = function(inv_dt) {
          return 0;
        };
        b2DistanceJoint.prototype.GetLocalAnchorA = function() {
          return this.m_localAnchorA;
        };
        b2DistanceJoint.prototype.GetLocalAnchorB = function() {
          return this.m_localAnchorB;
        };
        b2DistanceJoint.prototype.SetLength = function(length) {
          this.m_length = length;
        };
        b2DistanceJoint.prototype.Length = function() {
          return this.m_length;
        };
        b2DistanceJoint.prototype.SetFrequency = function(hz) {
          this.m_frequencyHz = hz;
        };
        b2DistanceJoint.prototype.GetFrequency = function() {
          return this.m_frequencyHz;
        };
        b2DistanceJoint.prototype.SetDampingRatio = function(ratio) {
          this.m_dampingRatio = ratio;
        };
        b2DistanceJoint.prototype.GetDampingRatio = function() {
          return this.m_dampingRatio;
        };
        b2DistanceJoint.prototype.Dump = function(log) {
          var indexA = this.m_bodyA.m_islandIndex;
          var indexB = this.m_bodyB.m_islandIndex;
          log("  const jd: b2DistanceJointDef = new b2DistanceJointDef();\n");
          log("  jd.bodyA = bodies[%d];\n", indexA);
          log("  jd.bodyB = bodies[%d];\n", indexB);
          log("  jd.collideConnected = %s;\n", this.m_collideConnected ? "true" : "false");
          log("  jd.localAnchorA.Set(%.15f, %.15f);\n", this.m_localAnchorA.x, this.m_localAnchorA.y);
          log("  jd.localAnchorB.Set(%.15f, %.15f);\n", this.m_localAnchorB.x, this.m_localAnchorB.y);
          log("  jd.length = %.15f;\n", this.m_length);
          log("  jd.frequencyHz = %.15f;\n", this.m_frequencyHz);
          log("  jd.dampingRatio = %.15f;\n", this.m_dampingRatio);
          log("  joints[%d] = this.m_world.CreateJoint(jd);\n", this.m_index);
        };
        b2DistanceJoint.prototype.InitVelocityConstraints = function(data) {
          this.m_indexA = this.m_bodyA.m_islandIndex;
          this.m_indexB = this.m_bodyB.m_islandIndex;
          this.m_localCenterA.Copy(this.m_bodyA.m_sweep.localCenter);
          this.m_localCenterB.Copy(this.m_bodyB.m_sweep.localCenter);
          this.m_invMassA = this.m_bodyA.m_invMass;
          this.m_invMassB = this.m_bodyB.m_invMass;
          this.m_invIA = this.m_bodyA.m_invI;
          this.m_invIB = this.m_bodyB.m_invI;
          var cA = data.positions[this.m_indexA].c;
          var aA = data.positions[this.m_indexA].a;
          var vA = data.velocities[this.m_indexA].v;
          var wA = data.velocities[this.m_indexA].w;
          var cB = data.positions[this.m_indexB].c;
          var aB = data.positions[this.m_indexB].a;
          var vB = data.velocities[this.m_indexB].v;
          var wB = data.velocities[this.m_indexB].w;
          var qA = this.m_qA.SetAngle(aA), qB = this.m_qB.SetAngle(aB);
          b2Vec2.SubVV(this.m_localAnchorA, this.m_localCenterA, this.m_lalcA);
          b2Rot.MulRV(qA, this.m_lalcA, this.m_rA);
          b2Vec2.SubVV(this.m_localAnchorB, this.m_localCenterB, this.m_lalcB);
          b2Rot.MulRV(qB, this.m_lalcB, this.m_rB);
          this.m_u.x = cB.x + this.m_rB.x - cA.x - this.m_rA.x;
          this.m_u.y = cB.y + this.m_rB.y - cA.y - this.m_rA.y;
          var length = this.m_u.Length();
          length > b2_linearSlop ? this.m_u.SelfMul(1 / length) : this.m_u.SetZero();
          var crAu = b2Vec2.CrossVV(this.m_rA, this.m_u);
          var crBu = b2Vec2.CrossVV(this.m_rB, this.m_u);
          var invMass = this.m_invMassA + this.m_invIA * crAu * crAu + this.m_invMassB + this.m_invIB * crBu * crBu;
          this.m_mass = 0 !== invMass ? 1 / invMass : 0;
          if (this.m_frequencyHz > 0) {
            var C = length - this.m_length;
            var omega = 2 * b2_pi * this.m_frequencyHz;
            var d = 2 * this.m_mass * this.m_dampingRatio * omega;
            var k = this.m_mass * omega * omega;
            var h = data.step.dt;
            this.m_gamma = h * (d + h * k);
            this.m_gamma = 0 !== this.m_gamma ? 1 / this.m_gamma : 0;
            this.m_bias = C * h * k * this.m_gamma;
            invMass += this.m_gamma;
            this.m_mass = 0 !== invMass ? 1 / invMass : 0;
          } else {
            this.m_gamma = 0;
            this.m_bias = 0;
          }
          if (data.step.warmStarting) {
            this.m_impulse *= data.step.dtRatio;
            var P = b2Vec2.MulSV(this.m_impulse, this.m_u, b2DistanceJoint.InitVelocityConstraints_s_P);
            vA.SelfMulSub(this.m_invMassA, P);
            wA -= this.m_invIA * b2Vec2.CrossVV(this.m_rA, P);
            vB.SelfMulAdd(this.m_invMassB, P);
            wB += this.m_invIB * b2Vec2.CrossVV(this.m_rB, P);
          } else this.m_impulse = 0;
          data.velocities[this.m_indexA].w = wA;
          data.velocities[this.m_indexB].w = wB;
        };
        b2DistanceJoint.prototype.SolveVelocityConstraints = function(data) {
          var vA = data.velocities[this.m_indexA].v;
          var wA = data.velocities[this.m_indexA].w;
          var vB = data.velocities[this.m_indexB].v;
          var wB = data.velocities[this.m_indexB].w;
          var vpA = b2Vec2.AddVCrossSV(vA, wA, this.m_rA, b2DistanceJoint.SolveVelocityConstraints_s_vpA);
          var vpB = b2Vec2.AddVCrossSV(vB, wB, this.m_rB, b2DistanceJoint.SolveVelocityConstraints_s_vpB);
          var Cdot = b2Vec2.DotVV(this.m_u, b2Vec2.SubVV(vpB, vpA, b2Vec2.s_t0));
          var impulse = -this.m_mass * (Cdot + this.m_bias + this.m_gamma * this.m_impulse);
          this.m_impulse += impulse;
          var P = b2Vec2.MulSV(impulse, this.m_u, b2DistanceJoint.SolveVelocityConstraints_s_P);
          vA.SelfMulSub(this.m_invMassA, P);
          wA -= this.m_invIA * b2Vec2.CrossVV(this.m_rA, P);
          vB.SelfMulAdd(this.m_invMassB, P);
          wB += this.m_invIB * b2Vec2.CrossVV(this.m_rB, P);
          data.velocities[this.m_indexA].w = wA;
          data.velocities[this.m_indexB].w = wB;
        };
        b2DistanceJoint.prototype.SolvePositionConstraints = function(data) {
          if (this.m_frequencyHz > 0) return true;
          var cA = data.positions[this.m_indexA].c;
          var aA = data.positions[this.m_indexA].a;
          var cB = data.positions[this.m_indexB].c;
          var aB = data.positions[this.m_indexB].a;
          var qA = this.m_qA.SetAngle(aA), qB = this.m_qB.SetAngle(aB);
          var rA = b2Rot.MulRV(qA, this.m_lalcA, this.m_rA);
          var rB = b2Rot.MulRV(qB, this.m_lalcB, this.m_rB);
          var u = this.m_u;
          u.x = cB.x + rB.x - cA.x - rA.x;
          u.y = cB.y + rB.y - cA.y - rA.y;
          var length = this.m_u.Normalize();
          var C = length - this.m_length;
          C = b2Clamp(C, -b2_maxLinearCorrection, b2_maxLinearCorrection);
          var impulse = -this.m_mass * C;
          var P = b2Vec2.MulSV(impulse, u, b2DistanceJoint.SolvePositionConstraints_s_P);
          cA.SelfMulSub(this.m_invMassA, P);
          aA -= this.m_invIA * b2Vec2.CrossVV(rA, P);
          cB.SelfMulAdd(this.m_invMassB, P);
          aB += this.m_invIB * b2Vec2.CrossVV(rB, P);
          data.positions[this.m_indexA].a = aA;
          data.positions[this.m_indexB].a = aB;
          return b2Abs(C) < b2_linearSlop;
        };
        b2DistanceJoint.InitVelocityConstraints_s_P = new b2Vec2();
        b2DistanceJoint.SolveVelocityConstraints_s_vpA = new b2Vec2();
        b2DistanceJoint.SolveVelocityConstraints_s_vpB = new b2Vec2();
        b2DistanceJoint.SolveVelocityConstraints_s_P = new b2Vec2();
        b2DistanceJoint.SolvePositionConstraints_s_P = new b2Vec2();
        return b2DistanceJoint;
      })(b2Joint);
      var b2AreaJointDef = (function(_super) {
        __extends(b2AreaJointDef, _super);
        function b2AreaJointDef() {
          var _this = _super.call(this, exports.b2JointType.e_areaJoint) || this;
          _this.bodies = [];
          _this.frequencyHz = 0;
          _this.dampingRatio = 0;
          return _this;
        }
        b2AreaJointDef.prototype.AddBody = function(body) {
          this.bodies.push(body);
          1 === this.bodies.length ? this.bodyA = body : 2 === this.bodies.length && (this.bodyB = body);
        };
        return b2AreaJointDef;
      })(b2JointDef);
      var b2AreaJoint = (function(_super) {
        __extends(b2AreaJoint, _super);
        function b2AreaJoint(def) {
          var _this = _super.call(this, def) || this;
          _this.m_frequencyHz = 0;
          _this.m_dampingRatio = 0;
          _this.m_impulse = 0;
          _this.m_targetArea = 0;
          _this.m_bodies = def.bodies;
          _this.m_frequencyHz = b2Maybe(def.frequencyHz, 0);
          _this.m_dampingRatio = b2Maybe(def.dampingRatio, 0);
          _this.m_targetLengths = b2MakeNumberArray(def.bodies.length);
          _this.m_normals = b2Vec2.MakeArray(def.bodies.length);
          _this.m_joints = [];
          _this.m_deltas = b2Vec2.MakeArray(def.bodies.length);
          _this.m_delta = new b2Vec2();
          var djd = new b2DistanceJointDef();
          djd.frequencyHz = _this.m_frequencyHz;
          djd.dampingRatio = _this.m_dampingRatio;
          _this.m_targetArea = 0;
          for (var i = 0; i < _this.m_bodies.length; ++i) {
            var body = _this.m_bodies[i];
            var next = _this.m_bodies[(i + 1) % _this.m_bodies.length];
            var body_c = body.GetWorldCenter();
            var next_c = next.GetWorldCenter();
            _this.m_targetLengths[i] = b2Vec2.DistanceVV(body_c, next_c);
            _this.m_targetArea += b2Vec2.CrossVV(body_c, next_c);
            djd.Initialize(body, next, body_c, next_c);
            _this.m_joints[i] = body.GetWorld().CreateJoint(djd);
          }
          _this.m_targetArea *= .5;
          return _this;
        }
        b2AreaJoint.prototype.GetAnchorA = function(out) {
          return out;
        };
        b2AreaJoint.prototype.GetAnchorB = function(out) {
          return out;
        };
        b2AreaJoint.prototype.GetReactionForce = function(inv_dt, out) {
          return out;
        };
        b2AreaJoint.prototype.GetReactionTorque = function(inv_dt) {
          return 0;
        };
        b2AreaJoint.prototype.SetFrequency = function(hz) {
          this.m_frequencyHz = hz;
          for (var i = 0; i < this.m_joints.length; ++i) this.m_joints[i].SetFrequency(hz);
        };
        b2AreaJoint.prototype.GetFrequency = function() {
          return this.m_frequencyHz;
        };
        b2AreaJoint.prototype.SetDampingRatio = function(ratio) {
          this.m_dampingRatio = ratio;
          for (var i = 0; i < this.m_joints.length; ++i) this.m_joints[i].SetDampingRatio(ratio);
        };
        b2AreaJoint.prototype.GetDampingRatio = function() {
          return this.m_dampingRatio;
        };
        b2AreaJoint.prototype.Dump = function(log) {
          log("Area joint dumping is not supported.\n");
        };
        b2AreaJoint.prototype.InitVelocityConstraints = function(data) {
          for (var i = 0; i < this.m_bodies.length; ++i) {
            var prev = this.m_bodies[(i + this.m_bodies.length - 1) % this.m_bodies.length];
            var next = this.m_bodies[(i + 1) % this.m_bodies.length];
            var prev_c = data.positions[prev.m_islandIndex].c;
            var next_c = data.positions[next.m_islandIndex].c;
            var delta = this.m_deltas[i];
            b2Vec2.SubVV(next_c, prev_c, delta);
          }
          if (data.step.warmStarting) {
            this.m_impulse *= data.step.dtRatio;
            for (var i = 0; i < this.m_bodies.length; ++i) {
              var body = this.m_bodies[i];
              var body_v = data.velocities[body.m_islandIndex].v;
              var delta = this.m_deltas[i];
              body_v.x += body.m_invMass * delta.y * .5 * this.m_impulse;
              body_v.y += body.m_invMass * -delta.x * .5 * this.m_impulse;
            }
          } else this.m_impulse = 0;
        };
        b2AreaJoint.prototype.SolveVelocityConstraints = function(data) {
          var dotMassSum = 0;
          var crossMassSum = 0;
          for (var i = 0; i < this.m_bodies.length; ++i) {
            var body = this.m_bodies[i];
            var body_v = data.velocities[body.m_islandIndex].v;
            var delta = this.m_deltas[i];
            dotMassSum += delta.LengthSquared() / body.GetMass();
            crossMassSum += b2Vec2.CrossVV(body_v, delta);
          }
          var lambda = -2 * crossMassSum / dotMassSum;
          this.m_impulse += lambda;
          for (var i = 0; i < this.m_bodies.length; ++i) {
            var body = this.m_bodies[i];
            var body_v = data.velocities[body.m_islandIndex].v;
            var delta = this.m_deltas[i];
            body_v.x += body.m_invMass * delta.y * .5 * lambda;
            body_v.y += body.m_invMass * -delta.x * .5 * lambda;
          }
        };
        b2AreaJoint.prototype.SolvePositionConstraints = function(data) {
          var perimeter = 0;
          var area = 0;
          for (var i = 0; i < this.m_bodies.length; ++i) {
            var body = this.m_bodies[i];
            var next = this.m_bodies[(i + 1) % this.m_bodies.length];
            var body_c = data.positions[body.m_islandIndex].c;
            var next_c = data.positions[next.m_islandIndex].c;
            var delta = b2Vec2.SubVV(next_c, body_c, this.m_delta);
            var dist = delta.Length();
            dist < b2_epsilon && (dist = 1);
            this.m_normals[i].x = delta.y / dist;
            this.m_normals[i].y = -delta.x / dist;
            perimeter += dist;
            area += b2Vec2.CrossVV(body_c, next_c);
          }
          area *= .5;
          var deltaArea = this.m_targetArea - area;
          var toExtrude = .5 * deltaArea / perimeter;
          var done = true;
          for (var i = 0; i < this.m_bodies.length; ++i) {
            var body = this.m_bodies[i];
            var body_c = data.positions[body.m_islandIndex].c;
            var next_i = (i + 1) % this.m_bodies.length;
            var delta = b2Vec2.AddVV(this.m_normals[i], this.m_normals[next_i], this.m_delta);
            delta.SelfMul(toExtrude);
            var norm_sq = delta.LengthSquared();
            norm_sq > b2Sq(b2_maxLinearCorrection) && delta.SelfMul(b2_maxLinearCorrection / b2Sqrt(norm_sq));
            norm_sq > b2Sq(b2_linearSlop) && (done = false);
            body_c.x += delta.x;
            body_c.y += delta.y;
          }
          return done;
        };
        return b2AreaJoint;
      })(b2Joint);
      var b2FrictionJointDef = (function(_super) {
        __extends(b2FrictionJointDef, _super);
        function b2FrictionJointDef() {
          var _this = _super.call(this, exports.b2JointType.e_frictionJoint) || this;
          _this.localAnchorA = new b2Vec2();
          _this.localAnchorB = new b2Vec2();
          _this.maxForce = 0;
          _this.maxTorque = 0;
          return _this;
        }
        b2FrictionJointDef.prototype.Initialize = function(bA, bB, anchor) {
          this.bodyA = bA;
          this.bodyB = bB;
          this.bodyA.GetLocalPoint(anchor, this.localAnchorA);
          this.bodyB.GetLocalPoint(anchor, this.localAnchorB);
        };
        return b2FrictionJointDef;
      })(b2JointDef);
      var b2FrictionJoint = (function(_super) {
        __extends(b2FrictionJoint, _super);
        function b2FrictionJoint(def) {
          var _this = _super.call(this, def) || this;
          _this.m_localAnchorA = new b2Vec2();
          _this.m_localAnchorB = new b2Vec2();
          _this.m_linearImpulse = new b2Vec2();
          _this.m_angularImpulse = 0;
          _this.m_maxForce = 0;
          _this.m_maxTorque = 0;
          _this.m_indexA = 0;
          _this.m_indexB = 0;
          _this.m_rA = new b2Vec2();
          _this.m_rB = new b2Vec2();
          _this.m_localCenterA = new b2Vec2();
          _this.m_localCenterB = new b2Vec2();
          _this.m_invMassA = 0;
          _this.m_invMassB = 0;
          _this.m_invIA = 0;
          _this.m_invIB = 0;
          _this.m_linearMass = new b2Mat22();
          _this.m_angularMass = 0;
          _this.m_qA = new b2Rot();
          _this.m_qB = new b2Rot();
          _this.m_lalcA = new b2Vec2();
          _this.m_lalcB = new b2Vec2();
          _this.m_K = new b2Mat22();
          _this.m_localAnchorA.Copy(def.localAnchorA);
          _this.m_localAnchorB.Copy(def.localAnchorB);
          _this.m_linearImpulse.SetZero();
          _this.m_maxForce = b2Maybe(def.maxForce, 0);
          _this.m_maxTorque = b2Maybe(def.maxTorque, 0);
          _this.m_linearMass.SetZero();
          return _this;
        }
        b2FrictionJoint.prototype.InitVelocityConstraints = function(data) {
          this.m_indexA = this.m_bodyA.m_islandIndex;
          this.m_indexB = this.m_bodyB.m_islandIndex;
          this.m_localCenterA.Copy(this.m_bodyA.m_sweep.localCenter);
          this.m_localCenterB.Copy(this.m_bodyB.m_sweep.localCenter);
          this.m_invMassA = this.m_bodyA.m_invMass;
          this.m_invMassB = this.m_bodyB.m_invMass;
          this.m_invIA = this.m_bodyA.m_invI;
          this.m_invIB = this.m_bodyB.m_invI;
          var aA = data.positions[this.m_indexA].a;
          var vA = data.velocities[this.m_indexA].v;
          var wA = data.velocities[this.m_indexA].w;
          var aB = data.positions[this.m_indexB].a;
          var vB = data.velocities[this.m_indexB].v;
          var wB = data.velocities[this.m_indexB].w;
          var qA = this.m_qA.SetAngle(aA), qB = this.m_qB.SetAngle(aB);
          b2Vec2.SubVV(this.m_localAnchorA, this.m_localCenterA, this.m_lalcA);
          var rA = b2Rot.MulRV(qA, this.m_lalcA, this.m_rA);
          b2Vec2.SubVV(this.m_localAnchorB, this.m_localCenterB, this.m_lalcB);
          var rB = b2Rot.MulRV(qB, this.m_lalcB, this.m_rB);
          var mA = this.m_invMassA, mB = this.m_invMassB;
          var iA = this.m_invIA, iB = this.m_invIB;
          var K = this.m_K;
          K.ex.x = mA + mB + iA * rA.y * rA.y + iB * rB.y * rB.y;
          K.ex.y = -iA * rA.x * rA.y - iB * rB.x * rB.y;
          K.ey.x = K.ex.y;
          K.ey.y = mA + mB + iA * rA.x * rA.x + iB * rB.x * rB.x;
          K.GetInverse(this.m_linearMass);
          this.m_angularMass = iA + iB;
          this.m_angularMass > 0 && (this.m_angularMass = 1 / this.m_angularMass);
          if (data.step.warmStarting) {
            this.m_linearImpulse.SelfMul(data.step.dtRatio);
            this.m_angularImpulse *= data.step.dtRatio;
            var P = this.m_linearImpulse;
            vA.SelfMulSub(mA, P);
            wA -= iA * (b2Vec2.CrossVV(this.m_rA, P) + this.m_angularImpulse);
            vB.SelfMulAdd(mB, P);
            wB += iB * (b2Vec2.CrossVV(this.m_rB, P) + this.m_angularImpulse);
          } else {
            this.m_linearImpulse.SetZero();
            this.m_angularImpulse = 0;
          }
          data.velocities[this.m_indexA].w = wA;
          data.velocities[this.m_indexB].w = wB;
        };
        b2FrictionJoint.prototype.SolveVelocityConstraints = function(data) {
          var vA = data.velocities[this.m_indexA].v;
          var wA = data.velocities[this.m_indexA].w;
          var vB = data.velocities[this.m_indexB].v;
          var wB = data.velocities[this.m_indexB].w;
          var mA = this.m_invMassA, mB = this.m_invMassB;
          var iA = this.m_invIA, iB = this.m_invIB;
          var h = data.step.dt;
          var Cdot = wB - wA;
          var impulse = -this.m_angularMass * Cdot;
          var oldImpulse = this.m_angularImpulse;
          var maxImpulse = h * this.m_maxTorque;
          this.m_angularImpulse = b2Clamp(this.m_angularImpulse + impulse, -maxImpulse, maxImpulse);
          impulse = this.m_angularImpulse - oldImpulse;
          wA -= iA * impulse;
          wB += iB * impulse;
          var Cdot_v2 = b2Vec2.SubVV(b2Vec2.AddVCrossSV(vB, wB, this.m_rB, b2Vec2.s_t0), b2Vec2.AddVCrossSV(vA, wA, this.m_rA, b2Vec2.s_t1), b2FrictionJoint.SolveVelocityConstraints_s_Cdot_v2);
          var impulseV = b2Mat22.MulMV(this.m_linearMass, Cdot_v2, b2FrictionJoint.SolveVelocityConstraints_s_impulseV).SelfNeg();
          var oldImpulseV = b2FrictionJoint.SolveVelocityConstraints_s_oldImpulseV.Copy(this.m_linearImpulse);
          this.m_linearImpulse.SelfAdd(impulseV);
          var maxImpulse = h * this.m_maxForce;
          if (this.m_linearImpulse.LengthSquared() > maxImpulse * maxImpulse) {
            this.m_linearImpulse.Normalize();
            this.m_linearImpulse.SelfMul(maxImpulse);
          }
          b2Vec2.SubVV(this.m_linearImpulse, oldImpulseV, impulseV);
          vA.SelfMulSub(mA, impulseV);
          wA -= iA * b2Vec2.CrossVV(this.m_rA, impulseV);
          vB.SelfMulAdd(mB, impulseV);
          wB += iB * b2Vec2.CrossVV(this.m_rB, impulseV);
          data.velocities[this.m_indexA].w = wA;
          data.velocities[this.m_indexB].w = wB;
        };
        b2FrictionJoint.prototype.SolvePositionConstraints = function(data) {
          return true;
        };
        b2FrictionJoint.prototype.GetAnchorA = function(out) {
          return this.m_bodyA.GetWorldPoint(this.m_localAnchorA, out);
        };
        b2FrictionJoint.prototype.GetAnchorB = function(out) {
          return this.m_bodyB.GetWorldPoint(this.m_localAnchorB, out);
        };
        b2FrictionJoint.prototype.GetReactionForce = function(inv_dt, out) {
          out.x = inv_dt * this.m_linearImpulse.x;
          out.y = inv_dt * this.m_linearImpulse.y;
          return out;
        };
        b2FrictionJoint.prototype.GetReactionTorque = function(inv_dt) {
          return inv_dt * this.m_angularImpulse;
        };
        b2FrictionJoint.prototype.GetLocalAnchorA = function() {
          return this.m_localAnchorA;
        };
        b2FrictionJoint.prototype.GetLocalAnchorB = function() {
          return this.m_localAnchorB;
        };
        b2FrictionJoint.prototype.SetMaxForce = function(force) {
          this.m_maxForce = force;
        };
        b2FrictionJoint.prototype.GetMaxForce = function() {
          return this.m_maxForce;
        };
        b2FrictionJoint.prototype.SetMaxTorque = function(torque) {
          this.m_maxTorque = torque;
        };
        b2FrictionJoint.prototype.GetMaxTorque = function() {
          return this.m_maxTorque;
        };
        b2FrictionJoint.prototype.Dump = function(log) {
          var indexA = this.m_bodyA.m_islandIndex;
          var indexB = this.m_bodyB.m_islandIndex;
          log("  const jd: b2FrictionJointDef = new b2FrictionJointDef();\n");
          log("  jd.bodyA = bodies[%d];\n", indexA);
          log("  jd.bodyB = bodies[%d];\n", indexB);
          log("  jd.collideConnected = %s;\n", this.m_collideConnected ? "true" : "false");
          log("  jd.localAnchorA.Set(%.15f, %.15f);\n", this.m_localAnchorA.x, this.m_localAnchorA.y);
          log("  jd.localAnchorB.Set(%.15f, %.15f);\n", this.m_localAnchorB.x, this.m_localAnchorB.y);
          log("  jd.maxForce = %.15f;\n", this.m_maxForce);
          log("  jd.maxTorque = %.15f;\n", this.m_maxTorque);
          log("  joints[%d] = this.m_world.CreateJoint(jd);\n", this.m_index);
        };
        b2FrictionJoint.SolveVelocityConstraints_s_Cdot_v2 = new b2Vec2();
        b2FrictionJoint.SolveVelocityConstraints_s_impulseV = new b2Vec2();
        b2FrictionJoint.SolveVelocityConstraints_s_oldImpulseV = new b2Vec2();
        return b2FrictionJoint;
      })(b2Joint);
      var b2GearJointDef = (function(_super) {
        __extends(b2GearJointDef, _super);
        function b2GearJointDef() {
          var _this = _super.call(this, exports.b2JointType.e_gearJoint) || this;
          _this.ratio = 1;
          return _this;
        }
        return b2GearJointDef;
      })(b2JointDef);
      var b2GearJoint = (function(_super) {
        __extends(b2GearJoint, _super);
        function b2GearJoint(def) {
          var _this = _super.call(this, def) || this;
          _this.m_typeA = exports.b2JointType.e_unknownJoint;
          _this.m_typeB = exports.b2JointType.e_unknownJoint;
          _this.m_localAnchorA = new b2Vec2();
          _this.m_localAnchorB = new b2Vec2();
          _this.m_localAnchorC = new b2Vec2();
          _this.m_localAnchorD = new b2Vec2();
          _this.m_localAxisC = new b2Vec2();
          _this.m_localAxisD = new b2Vec2();
          _this.m_referenceAngleA = 0;
          _this.m_referenceAngleB = 0;
          _this.m_constant = 0;
          _this.m_ratio = 0;
          _this.m_impulse = 0;
          _this.m_indexA = 0;
          _this.m_indexB = 0;
          _this.m_indexC = 0;
          _this.m_indexD = 0;
          _this.m_lcA = new b2Vec2();
          _this.m_lcB = new b2Vec2();
          _this.m_lcC = new b2Vec2();
          _this.m_lcD = new b2Vec2();
          _this.m_mA = 0;
          _this.m_mB = 0;
          _this.m_mC = 0;
          _this.m_mD = 0;
          _this.m_iA = 0;
          _this.m_iB = 0;
          _this.m_iC = 0;
          _this.m_iD = 0;
          _this.m_JvAC = new b2Vec2();
          _this.m_JvBD = new b2Vec2();
          _this.m_JwA = 0;
          _this.m_JwB = 0;
          _this.m_JwC = 0;
          _this.m_JwD = 0;
          _this.m_mass = 0;
          _this.m_qA = new b2Rot();
          _this.m_qB = new b2Rot();
          _this.m_qC = new b2Rot();
          _this.m_qD = new b2Rot();
          _this.m_lalcA = new b2Vec2();
          _this.m_lalcB = new b2Vec2();
          _this.m_lalcC = new b2Vec2();
          _this.m_lalcD = new b2Vec2();
          _this.m_joint1 = def.joint1;
          _this.m_joint2 = def.joint2;
          _this.m_typeA = _this.m_joint1.GetType();
          _this.m_typeB = _this.m_joint2.GetType();
          var coordinateA, coordinateB;
          _this.m_bodyC = _this.m_joint1.GetBodyA();
          _this.m_bodyA = _this.m_joint1.GetBodyB();
          var xfA = _this.m_bodyA.m_xf;
          var aA = _this.m_bodyA.m_sweep.a;
          var xfC = _this.m_bodyC.m_xf;
          var aC = _this.m_bodyC.m_sweep.a;
          if (_this.m_typeA === exports.b2JointType.e_revoluteJoint) {
            var revolute = def.joint1;
            _this.m_localAnchorC.Copy(revolute.m_localAnchorA);
            _this.m_localAnchorA.Copy(revolute.m_localAnchorB);
            _this.m_referenceAngleA = revolute.m_referenceAngle;
            _this.m_localAxisC.SetZero();
            coordinateA = aA - aC - _this.m_referenceAngleA;
          } else {
            var prismatic = def.joint1;
            _this.m_localAnchorC.Copy(prismatic.m_localAnchorA);
            _this.m_localAnchorA.Copy(prismatic.m_localAnchorB);
            _this.m_referenceAngleA = prismatic.m_referenceAngle;
            _this.m_localAxisC.Copy(prismatic.m_localXAxisA);
            var pC = _this.m_localAnchorC;
            var pA = b2Rot.MulTRV(xfC.q, b2Vec2.AddVV(b2Rot.MulRV(xfA.q, _this.m_localAnchorA, b2Vec2.s_t0), b2Vec2.SubVV(xfA.p, xfC.p, b2Vec2.s_t1), b2Vec2.s_t0), b2Vec2.s_t0);
            coordinateA = b2Vec2.DotVV(b2Vec2.SubVV(pA, pC, b2Vec2.s_t0), _this.m_localAxisC);
          }
          _this.m_bodyD = _this.m_joint2.GetBodyA();
          _this.m_bodyB = _this.m_joint2.GetBodyB();
          var xfB = _this.m_bodyB.m_xf;
          var aB = _this.m_bodyB.m_sweep.a;
          var xfD = _this.m_bodyD.m_xf;
          var aD = _this.m_bodyD.m_sweep.a;
          if (_this.m_typeB === exports.b2JointType.e_revoluteJoint) {
            var revolute = def.joint2;
            _this.m_localAnchorD.Copy(revolute.m_localAnchorA);
            _this.m_localAnchorB.Copy(revolute.m_localAnchorB);
            _this.m_referenceAngleB = revolute.m_referenceAngle;
            _this.m_localAxisD.SetZero();
            coordinateB = aB - aD - _this.m_referenceAngleB;
          } else {
            var prismatic = def.joint2;
            _this.m_localAnchorD.Copy(prismatic.m_localAnchorA);
            _this.m_localAnchorB.Copy(prismatic.m_localAnchorB);
            _this.m_referenceAngleB = prismatic.m_referenceAngle;
            _this.m_localAxisD.Copy(prismatic.m_localXAxisA);
            var pD = _this.m_localAnchorD;
            var pB = b2Rot.MulTRV(xfD.q, b2Vec2.AddVV(b2Rot.MulRV(xfB.q, _this.m_localAnchorB, b2Vec2.s_t0), b2Vec2.SubVV(xfB.p, xfD.p, b2Vec2.s_t1), b2Vec2.s_t0), b2Vec2.s_t0);
            coordinateB = b2Vec2.DotVV(b2Vec2.SubVV(pB, pD, b2Vec2.s_t0), _this.m_localAxisD);
          }
          _this.m_ratio = b2Maybe(def.ratio, 1);
          _this.m_constant = coordinateA + _this.m_ratio * coordinateB;
          _this.m_impulse = 0;
          return _this;
        }
        b2GearJoint.prototype.InitVelocityConstraints = function(data) {
          this.m_indexA = this.m_bodyA.m_islandIndex;
          this.m_indexB = this.m_bodyB.m_islandIndex;
          this.m_indexC = this.m_bodyC.m_islandIndex;
          this.m_indexD = this.m_bodyD.m_islandIndex;
          this.m_lcA.Copy(this.m_bodyA.m_sweep.localCenter);
          this.m_lcB.Copy(this.m_bodyB.m_sweep.localCenter);
          this.m_lcC.Copy(this.m_bodyC.m_sweep.localCenter);
          this.m_lcD.Copy(this.m_bodyD.m_sweep.localCenter);
          this.m_mA = this.m_bodyA.m_invMass;
          this.m_mB = this.m_bodyB.m_invMass;
          this.m_mC = this.m_bodyC.m_invMass;
          this.m_mD = this.m_bodyD.m_invMass;
          this.m_iA = this.m_bodyA.m_invI;
          this.m_iB = this.m_bodyB.m_invI;
          this.m_iC = this.m_bodyC.m_invI;
          this.m_iD = this.m_bodyD.m_invI;
          var aA = data.positions[this.m_indexA].a;
          var vA = data.velocities[this.m_indexA].v;
          var wA = data.velocities[this.m_indexA].w;
          var aB = data.positions[this.m_indexB].a;
          var vB = data.velocities[this.m_indexB].v;
          var wB = data.velocities[this.m_indexB].w;
          var aC = data.positions[this.m_indexC].a;
          var vC = data.velocities[this.m_indexC].v;
          var wC = data.velocities[this.m_indexC].w;
          var aD = data.positions[this.m_indexD].a;
          var vD = data.velocities[this.m_indexD].v;
          var wD = data.velocities[this.m_indexD].w;
          var qA = this.m_qA.SetAngle(aA), qB = this.m_qB.SetAngle(aB), qC = this.m_qC.SetAngle(aC), qD = this.m_qD.SetAngle(aD);
          this.m_mass = 0;
          if (this.m_typeA === exports.b2JointType.e_revoluteJoint) {
            this.m_JvAC.SetZero();
            this.m_JwA = 1;
            this.m_JwC = 1;
            this.m_mass += this.m_iA + this.m_iC;
          } else {
            var u = b2Rot.MulRV(qC, this.m_localAxisC, b2GearJoint.InitVelocityConstraints_s_u);
            b2Vec2.SubVV(this.m_localAnchorC, this.m_lcC, this.m_lalcC);
            var rC = b2Rot.MulRV(qC, this.m_lalcC, b2GearJoint.InitVelocityConstraints_s_rC);
            b2Vec2.SubVV(this.m_localAnchorA, this.m_lcA, this.m_lalcA);
            var rA = b2Rot.MulRV(qA, this.m_lalcA, b2GearJoint.InitVelocityConstraints_s_rA);
            this.m_JvAC.Copy(u);
            this.m_JwC = b2Vec2.CrossVV(rC, u);
            this.m_JwA = b2Vec2.CrossVV(rA, u);
            this.m_mass += this.m_mC + this.m_mA + this.m_iC * this.m_JwC * this.m_JwC + this.m_iA * this.m_JwA * this.m_JwA;
          }
          if (this.m_typeB === exports.b2JointType.e_revoluteJoint) {
            this.m_JvBD.SetZero();
            this.m_JwB = this.m_ratio;
            this.m_JwD = this.m_ratio;
            this.m_mass += this.m_ratio * this.m_ratio * (this.m_iB + this.m_iD);
          } else {
            var u = b2Rot.MulRV(qD, this.m_localAxisD, b2GearJoint.InitVelocityConstraints_s_u);
            b2Vec2.SubVV(this.m_localAnchorD, this.m_lcD, this.m_lalcD);
            var rD = b2Rot.MulRV(qD, this.m_lalcD, b2GearJoint.InitVelocityConstraints_s_rD);
            b2Vec2.SubVV(this.m_localAnchorB, this.m_lcB, this.m_lalcB);
            var rB = b2Rot.MulRV(qB, this.m_lalcB, b2GearJoint.InitVelocityConstraints_s_rB);
            b2Vec2.MulSV(this.m_ratio, u, this.m_JvBD);
            this.m_JwD = this.m_ratio * b2Vec2.CrossVV(rD, u);
            this.m_JwB = this.m_ratio * b2Vec2.CrossVV(rB, u);
            this.m_mass += this.m_ratio * this.m_ratio * (this.m_mD + this.m_mB) + this.m_iD * this.m_JwD * this.m_JwD + this.m_iB * this.m_JwB * this.m_JwB;
          }
          this.m_mass = this.m_mass > 0 ? 1 / this.m_mass : 0;
          if (data.step.warmStarting) {
            vA.SelfMulAdd(this.m_mA * this.m_impulse, this.m_JvAC);
            wA += this.m_iA * this.m_impulse * this.m_JwA;
            vB.SelfMulAdd(this.m_mB * this.m_impulse, this.m_JvBD);
            wB += this.m_iB * this.m_impulse * this.m_JwB;
            vC.SelfMulSub(this.m_mC * this.m_impulse, this.m_JvAC);
            wC -= this.m_iC * this.m_impulse * this.m_JwC;
            vD.SelfMulSub(this.m_mD * this.m_impulse, this.m_JvBD);
            wD -= this.m_iD * this.m_impulse * this.m_JwD;
          } else this.m_impulse = 0;
          data.velocities[this.m_indexA].w = wA;
          data.velocities[this.m_indexB].w = wB;
          data.velocities[this.m_indexC].w = wC;
          data.velocities[this.m_indexD].w = wD;
        };
        b2GearJoint.prototype.SolveVelocityConstraints = function(data) {
          var vA = data.velocities[this.m_indexA].v;
          var wA = data.velocities[this.m_indexA].w;
          var vB = data.velocities[this.m_indexB].v;
          var wB = data.velocities[this.m_indexB].w;
          var vC = data.velocities[this.m_indexC].v;
          var wC = data.velocities[this.m_indexC].w;
          var vD = data.velocities[this.m_indexD].v;
          var wD = data.velocities[this.m_indexD].w;
          var Cdot = b2Vec2.DotVV(this.m_JvAC, b2Vec2.SubVV(vA, vC, b2Vec2.s_t0)) + b2Vec2.DotVV(this.m_JvBD, b2Vec2.SubVV(vB, vD, b2Vec2.s_t0));
          Cdot += this.m_JwA * wA - this.m_JwC * wC + (this.m_JwB * wB - this.m_JwD * wD);
          var impulse = -this.m_mass * Cdot;
          this.m_impulse += impulse;
          vA.SelfMulAdd(this.m_mA * impulse, this.m_JvAC);
          wA += this.m_iA * impulse * this.m_JwA;
          vB.SelfMulAdd(this.m_mB * impulse, this.m_JvBD);
          wB += this.m_iB * impulse * this.m_JwB;
          vC.SelfMulSub(this.m_mC * impulse, this.m_JvAC);
          wC -= this.m_iC * impulse * this.m_JwC;
          vD.SelfMulSub(this.m_mD * impulse, this.m_JvBD);
          wD -= this.m_iD * impulse * this.m_JwD;
          data.velocities[this.m_indexA].w = wA;
          data.velocities[this.m_indexB].w = wB;
          data.velocities[this.m_indexC].w = wC;
          data.velocities[this.m_indexD].w = wD;
        };
        b2GearJoint.prototype.SolvePositionConstraints = function(data) {
          var cA = data.positions[this.m_indexA].c;
          var aA = data.positions[this.m_indexA].a;
          var cB = data.positions[this.m_indexB].c;
          var aB = data.positions[this.m_indexB].a;
          var cC = data.positions[this.m_indexC].c;
          var aC = data.positions[this.m_indexC].a;
          var cD = data.positions[this.m_indexD].c;
          var aD = data.positions[this.m_indexD].a;
          var qA = this.m_qA.SetAngle(aA), qB = this.m_qB.SetAngle(aB), qC = this.m_qC.SetAngle(aC), qD = this.m_qD.SetAngle(aD);
          var linearError = 0;
          var coordinateA, coordinateB;
          var JvAC = this.m_JvAC, JvBD = this.m_JvBD;
          var JwA, JwB, JwC, JwD;
          var mass = 0;
          if (this.m_typeA === exports.b2JointType.e_revoluteJoint) {
            JvAC.SetZero();
            JwA = 1;
            JwC = 1;
            mass += this.m_iA + this.m_iC;
            coordinateA = aA - aC - this.m_referenceAngleA;
          } else {
            var u = b2Rot.MulRV(qC, this.m_localAxisC, b2GearJoint.SolvePositionConstraints_s_u);
            var rC = b2Rot.MulRV(qC, this.m_lalcC, b2GearJoint.SolvePositionConstraints_s_rC);
            var rA = b2Rot.MulRV(qA, this.m_lalcA, b2GearJoint.SolvePositionConstraints_s_rA);
            JvAC.Copy(u);
            JwC = b2Vec2.CrossVV(rC, u);
            JwA = b2Vec2.CrossVV(rA, u);
            mass += this.m_mC + this.m_mA + this.m_iC * JwC * JwC + this.m_iA * JwA * JwA;
            var pC = this.m_lalcC;
            var pA = b2Rot.MulTRV(qC, b2Vec2.AddVV(rA, b2Vec2.SubVV(cA, cC, b2Vec2.s_t0), b2Vec2.s_t0), b2Vec2.s_t0);
            coordinateA = b2Vec2.DotVV(b2Vec2.SubVV(pA, pC, b2Vec2.s_t0), this.m_localAxisC);
          }
          if (this.m_typeB === exports.b2JointType.e_revoluteJoint) {
            JvBD.SetZero();
            JwB = this.m_ratio;
            JwD = this.m_ratio;
            mass += this.m_ratio * this.m_ratio * (this.m_iB + this.m_iD);
            coordinateB = aB - aD - this.m_referenceAngleB;
          } else {
            var u = b2Rot.MulRV(qD, this.m_localAxisD, b2GearJoint.SolvePositionConstraints_s_u);
            var rD = b2Rot.MulRV(qD, this.m_lalcD, b2GearJoint.SolvePositionConstraints_s_rD);
            var rB = b2Rot.MulRV(qB, this.m_lalcB, b2GearJoint.SolvePositionConstraints_s_rB);
            b2Vec2.MulSV(this.m_ratio, u, JvBD);
            JwD = this.m_ratio * b2Vec2.CrossVV(rD, u);
            JwB = this.m_ratio * b2Vec2.CrossVV(rB, u);
            mass += this.m_ratio * this.m_ratio * (this.m_mD + this.m_mB) + this.m_iD * JwD * JwD + this.m_iB * JwB * JwB;
            var pD = this.m_lalcD;
            var pB = b2Rot.MulTRV(qD, b2Vec2.AddVV(rB, b2Vec2.SubVV(cB, cD, b2Vec2.s_t0), b2Vec2.s_t0), b2Vec2.s_t0);
            coordinateB = b2Vec2.DotVV(b2Vec2.SubVV(pB, pD, b2Vec2.s_t0), this.m_localAxisD);
          }
          var C = coordinateA + this.m_ratio * coordinateB - this.m_constant;
          var impulse = 0;
          mass > 0 && (impulse = -C / mass);
          cA.SelfMulAdd(this.m_mA * impulse, JvAC);
          aA += this.m_iA * impulse * JwA;
          cB.SelfMulAdd(this.m_mB * impulse, JvBD);
          aB += this.m_iB * impulse * JwB;
          cC.SelfMulSub(this.m_mC * impulse, JvAC);
          aC -= this.m_iC * impulse * JwC;
          cD.SelfMulSub(this.m_mD * impulse, JvBD);
          aD -= this.m_iD * impulse * JwD;
          data.positions[this.m_indexA].a = aA;
          data.positions[this.m_indexB].a = aB;
          data.positions[this.m_indexC].a = aC;
          data.positions[this.m_indexD].a = aD;
          return linearError < b2_linearSlop;
        };
        b2GearJoint.prototype.GetAnchorA = function(out) {
          return this.m_bodyA.GetWorldPoint(this.m_localAnchorA, out);
        };
        b2GearJoint.prototype.GetAnchorB = function(out) {
          return this.m_bodyB.GetWorldPoint(this.m_localAnchorB, out);
        };
        b2GearJoint.prototype.GetReactionForce = function(inv_dt, out) {
          return b2Vec2.MulSV(inv_dt * this.m_impulse, this.m_JvAC, out);
        };
        b2GearJoint.prototype.GetReactionTorque = function(inv_dt) {
          return inv_dt * this.m_impulse * this.m_JwA;
        };
        b2GearJoint.prototype.GetJoint1 = function() {
          return this.m_joint1;
        };
        b2GearJoint.prototype.GetJoint2 = function() {
          return this.m_joint2;
        };
        b2GearJoint.prototype.GetRatio = function() {
          return this.m_ratio;
        };
        b2GearJoint.prototype.SetRatio = function(ratio) {
          this.m_ratio = ratio;
        };
        b2GearJoint.prototype.Dump = function(log) {
          var indexA = this.m_bodyA.m_islandIndex;
          var indexB = this.m_bodyB.m_islandIndex;
          var index1 = this.m_joint1.m_index;
          var index2 = this.m_joint2.m_index;
          log("  const jd: b2GearJointDef = new b2GearJointDef();\n");
          log("  jd.bodyA = bodies[%d];\n", indexA);
          log("  jd.bodyB = bodies[%d];\n", indexB);
          log("  jd.collideConnected = %s;\n", this.m_collideConnected ? "true" : "false");
          log("  jd.joint1 = joints[%d];\n", index1);
          log("  jd.joint2 = joints[%d];\n", index2);
          log("  jd.ratio = %.15f;\n", this.m_ratio);
          log("  joints[%d] = this.m_world.CreateJoint(jd);\n", this.m_index);
        };
        b2GearJoint.InitVelocityConstraints_s_u = new b2Vec2();
        b2GearJoint.InitVelocityConstraints_s_rA = new b2Vec2();
        b2GearJoint.InitVelocityConstraints_s_rB = new b2Vec2();
        b2GearJoint.InitVelocityConstraints_s_rC = new b2Vec2();
        b2GearJoint.InitVelocityConstraints_s_rD = new b2Vec2();
        b2GearJoint.SolvePositionConstraints_s_u = new b2Vec2();
        b2GearJoint.SolvePositionConstraints_s_rA = new b2Vec2();
        b2GearJoint.SolvePositionConstraints_s_rB = new b2Vec2();
        b2GearJoint.SolvePositionConstraints_s_rC = new b2Vec2();
        b2GearJoint.SolvePositionConstraints_s_rD = new b2Vec2();
        return b2GearJoint;
      })(b2Joint);
      var b2MotorJointDef = (function(_super) {
        __extends(b2MotorJointDef, _super);
        function b2MotorJointDef() {
          var _this = _super.call(this, exports.b2JointType.e_motorJoint) || this;
          _this.linearOffset = new b2Vec2(0, 0);
          _this.angularOffset = 0;
          _this.maxForce = 1;
          _this.maxTorque = 1;
          _this.correctionFactor = .3;
          return _this;
        }
        b2MotorJointDef.prototype.Initialize = function(bA, bB) {
          this.bodyA = bA;
          this.bodyB = bB;
          this.bodyA.GetLocalPoint(this.bodyB.GetPosition(), this.linearOffset);
          var angleA = this.bodyA.GetAngle();
          var angleB = this.bodyB.GetAngle();
          this.angularOffset = angleB - angleA;
        };
        return b2MotorJointDef;
      })(b2JointDef);
      var b2MotorJoint = (function(_super) {
        __extends(b2MotorJoint, _super);
        function b2MotorJoint(def) {
          var _this = _super.call(this, def) || this;
          _this.m_linearOffset = new b2Vec2();
          _this.m_angularOffset = 0;
          _this.m_linearImpulse = new b2Vec2();
          _this.m_angularImpulse = 0;
          _this.m_maxForce = 0;
          _this.m_maxTorque = 0;
          _this.m_correctionFactor = .3;
          _this.m_indexA = 0;
          _this.m_indexB = 0;
          _this.m_rA = new b2Vec2();
          _this.m_rB = new b2Vec2();
          _this.m_localCenterA = new b2Vec2();
          _this.m_localCenterB = new b2Vec2();
          _this.m_linearError = new b2Vec2();
          _this.m_angularError = 0;
          _this.m_invMassA = 0;
          _this.m_invMassB = 0;
          _this.m_invIA = 0;
          _this.m_invIB = 0;
          _this.m_linearMass = new b2Mat22();
          _this.m_angularMass = 0;
          _this.m_qA = new b2Rot();
          _this.m_qB = new b2Rot();
          _this.m_K = new b2Mat22();
          _this.m_linearOffset.Copy(b2Maybe(def.linearOffset, b2Vec2.ZERO));
          _this.m_linearImpulse.SetZero();
          _this.m_maxForce = b2Maybe(def.maxForce, 0);
          _this.m_maxTorque = b2Maybe(def.maxTorque, 0);
          _this.m_correctionFactor = b2Maybe(def.correctionFactor, .3);
          return _this;
        }
        b2MotorJoint.prototype.GetAnchorA = function(out) {
          var pos = this.m_bodyA.GetPosition();
          out.x = pos.x;
          out.y = pos.y;
          return out;
        };
        b2MotorJoint.prototype.GetAnchorB = function(out) {
          var pos = this.m_bodyB.GetPosition();
          out.x = pos.x;
          out.y = pos.y;
          return out;
        };
        b2MotorJoint.prototype.GetReactionForce = function(inv_dt, out) {
          return b2Vec2.MulSV(inv_dt, this.m_linearImpulse, out);
        };
        b2MotorJoint.prototype.GetReactionTorque = function(inv_dt) {
          return inv_dt * this.m_angularImpulse;
        };
        b2MotorJoint.prototype.SetLinearOffset = function(linearOffset) {
          if (!b2Vec2.IsEqualToV(linearOffset, this.m_linearOffset)) {
            this.m_bodyA.SetAwake(true);
            this.m_bodyB.SetAwake(true);
            this.m_linearOffset.Copy(linearOffset);
          }
        };
        b2MotorJoint.prototype.GetLinearOffset = function() {
          return this.m_linearOffset;
        };
        b2MotorJoint.prototype.SetAngularOffset = function(angularOffset) {
          if (angularOffset !== this.m_angularOffset) {
            this.m_bodyA.SetAwake(true);
            this.m_bodyB.SetAwake(true);
            this.m_angularOffset = angularOffset;
          }
        };
        b2MotorJoint.prototype.GetAngularOffset = function() {
          return this.m_angularOffset;
        };
        b2MotorJoint.prototype.SetMaxForce = function(force) {
          this.m_maxForce = force;
        };
        b2MotorJoint.prototype.GetMaxForce = function() {
          return this.m_maxForce;
        };
        b2MotorJoint.prototype.SetMaxTorque = function(torque) {
          this.m_maxTorque = torque;
        };
        b2MotorJoint.prototype.GetMaxTorque = function() {
          return this.m_maxTorque;
        };
        b2MotorJoint.prototype.InitVelocityConstraints = function(data) {
          this.m_indexA = this.m_bodyA.m_islandIndex;
          this.m_indexB = this.m_bodyB.m_islandIndex;
          this.m_localCenterA.Copy(this.m_bodyA.m_sweep.localCenter);
          this.m_localCenterB.Copy(this.m_bodyB.m_sweep.localCenter);
          this.m_invMassA = this.m_bodyA.m_invMass;
          this.m_invMassB = this.m_bodyB.m_invMass;
          this.m_invIA = this.m_bodyA.m_invI;
          this.m_invIB = this.m_bodyB.m_invI;
          var cA = data.positions[this.m_indexA].c;
          var aA = data.positions[this.m_indexA].a;
          var vA = data.velocities[this.m_indexA].v;
          var wA = data.velocities[this.m_indexA].w;
          var cB = data.positions[this.m_indexB].c;
          var aB = data.positions[this.m_indexB].a;
          var vB = data.velocities[this.m_indexB].v;
          var wB = data.velocities[this.m_indexB].w;
          var qA = this.m_qA.SetAngle(aA), qB = this.m_qB.SetAngle(aB);
          var rA = b2Rot.MulRV(qA, b2Vec2.SubVV(this.m_linearOffset, this.m_localCenterA, b2Vec2.s_t0), this.m_rA);
          var rB = b2Rot.MulRV(qB, b2Vec2.NegV(this.m_localCenterB, b2Vec2.s_t0), this.m_rB);
          var mA = this.m_invMassA, mB = this.m_invMassB;
          var iA = this.m_invIA, iB = this.m_invIB;
          var K = this.m_K;
          K.ex.x = mA + mB + iA * rA.y * rA.y + iB * rB.y * rB.y;
          K.ex.y = -iA * rA.x * rA.y - iB * rB.x * rB.y;
          K.ey.x = K.ex.y;
          K.ey.y = mA + mB + iA * rA.x * rA.x + iB * rB.x * rB.x;
          K.GetInverse(this.m_linearMass);
          this.m_angularMass = iA + iB;
          this.m_angularMass > 0 && (this.m_angularMass = 1 / this.m_angularMass);
          b2Vec2.SubVV(b2Vec2.AddVV(cB, rB, b2Vec2.s_t0), b2Vec2.AddVV(cA, rA, b2Vec2.s_t1), this.m_linearError);
          this.m_angularError = aB - aA - this.m_angularOffset;
          if (data.step.warmStarting) {
            this.m_linearImpulse.SelfMul(data.step.dtRatio);
            this.m_angularImpulse *= data.step.dtRatio;
            var P = this.m_linearImpulse;
            vA.SelfMulSub(mA, P);
            wA -= iA * (b2Vec2.CrossVV(rA, P) + this.m_angularImpulse);
            vB.SelfMulAdd(mB, P);
            wB += iB * (b2Vec2.CrossVV(rB, P) + this.m_angularImpulse);
          } else {
            this.m_linearImpulse.SetZero();
            this.m_angularImpulse = 0;
          }
          data.velocities[this.m_indexA].w = wA;
          data.velocities[this.m_indexB].w = wB;
        };
        b2MotorJoint.prototype.SolveVelocityConstraints = function(data) {
          var vA = data.velocities[this.m_indexA].v;
          var wA = data.velocities[this.m_indexA].w;
          var vB = data.velocities[this.m_indexB].v;
          var wB = data.velocities[this.m_indexB].w;
          var mA = this.m_invMassA, mB = this.m_invMassB;
          var iA = this.m_invIA, iB = this.m_invIB;
          var h = data.step.dt;
          var inv_h = data.step.inv_dt;
          var Cdot = wB - wA + inv_h * this.m_correctionFactor * this.m_angularError;
          var impulse = -this.m_angularMass * Cdot;
          var oldImpulse = this.m_angularImpulse;
          var maxImpulse = h * this.m_maxTorque;
          this.m_angularImpulse = b2Clamp(this.m_angularImpulse + impulse, -maxImpulse, maxImpulse);
          impulse = this.m_angularImpulse - oldImpulse;
          wA -= iA * impulse;
          wB += iB * impulse;
          var rA = this.m_rA;
          var rB = this.m_rB;
          var Cdot_v2 = b2Vec2.AddVV(b2Vec2.SubVV(b2Vec2.AddVV(vB, b2Vec2.CrossSV(wB, rB, b2Vec2.s_t0), b2Vec2.s_t0), b2Vec2.AddVV(vA, b2Vec2.CrossSV(wA, rA, b2Vec2.s_t1), b2Vec2.s_t1), b2Vec2.s_t2), b2Vec2.MulSV(inv_h * this.m_correctionFactor, this.m_linearError, b2Vec2.s_t3), b2MotorJoint.SolveVelocityConstraints_s_Cdot_v2);
          var impulse_v2 = b2Mat22.MulMV(this.m_linearMass, Cdot_v2, b2MotorJoint.SolveVelocityConstraints_s_impulse_v2).SelfNeg();
          var oldImpulse_v2 = b2MotorJoint.SolveVelocityConstraints_s_oldImpulse_v2.Copy(this.m_linearImpulse);
          this.m_linearImpulse.SelfAdd(impulse_v2);
          var maxImpulse = h * this.m_maxForce;
          if (this.m_linearImpulse.LengthSquared() > maxImpulse * maxImpulse) {
            this.m_linearImpulse.Normalize();
            this.m_linearImpulse.SelfMul(maxImpulse);
          }
          b2Vec2.SubVV(this.m_linearImpulse, oldImpulse_v2, impulse_v2);
          vA.SelfMulSub(mA, impulse_v2);
          wA -= iA * b2Vec2.CrossVV(rA, impulse_v2);
          vB.SelfMulAdd(mB, impulse_v2);
          wB += iB * b2Vec2.CrossVV(rB, impulse_v2);
          data.velocities[this.m_indexA].w = wA;
          data.velocities[this.m_indexB].w = wB;
        };
        b2MotorJoint.prototype.SolvePositionConstraints = function(data) {
          return true;
        };
        b2MotorJoint.prototype.Dump = function(log) {
          var indexA = this.m_bodyA.m_islandIndex;
          var indexB = this.m_bodyB.m_islandIndex;
          log("  const jd: b2MotorJointDef = new b2MotorJointDef();\n");
          log("  jd.bodyA = bodies[%d];\n", indexA);
          log("  jd.bodyB = bodies[%d];\n", indexB);
          log("  jd.collideConnected = %s;\n", this.m_collideConnected ? "true" : "false");
          log("  jd.linearOffset.Set(%.15f, %.15f);\n", this.m_linearOffset.x, this.m_linearOffset.y);
          log("  jd.angularOffset = %.15f;\n", this.m_angularOffset);
          log("  jd.maxForce = %.15f;\n", this.m_maxForce);
          log("  jd.maxTorque = %.15f;\n", this.m_maxTorque);
          log("  jd.correctionFactor = %.15f;\n", this.m_correctionFactor);
          log("  joints[%d] = this.m_world.CreateJoint(jd);\n", this.m_index);
        };
        b2MotorJoint.SolveVelocityConstraints_s_Cdot_v2 = new b2Vec2();
        b2MotorJoint.SolveVelocityConstraints_s_impulse_v2 = new b2Vec2();
        b2MotorJoint.SolveVelocityConstraints_s_oldImpulse_v2 = new b2Vec2();
        return b2MotorJoint;
      })(b2Joint);
      var b2MouseJointDef = (function(_super) {
        __extends(b2MouseJointDef, _super);
        function b2MouseJointDef() {
          var _this = _super.call(this, exports.b2JointType.e_mouseJoint) || this;
          _this.target = new b2Vec2();
          _this.maxForce = 0;
          _this.frequencyHz = 5;
          _this.dampingRatio = .7;
          return _this;
        }
        return b2MouseJointDef;
      })(b2JointDef);
      var b2MouseJoint = (function(_super) {
        __extends(b2MouseJoint, _super);
        function b2MouseJoint(def) {
          var _this = _super.call(this, def) || this;
          _this.m_localAnchorB = new b2Vec2();
          _this.m_targetA = new b2Vec2();
          _this.m_frequencyHz = 0;
          _this.m_dampingRatio = 0;
          _this.m_beta = 0;
          _this.m_impulse = new b2Vec2();
          _this.m_maxForce = 0;
          _this.m_gamma = 0;
          _this.m_indexA = 0;
          _this.m_indexB = 0;
          _this.m_rB = new b2Vec2();
          _this.m_localCenterB = new b2Vec2();
          _this.m_invMassB = 0;
          _this.m_invIB = 0;
          _this.m_mass = new b2Mat22();
          _this.m_C = new b2Vec2();
          _this.m_qB = new b2Rot();
          _this.m_lalcB = new b2Vec2();
          _this.m_K = new b2Mat22();
          _this.m_targetA.Copy(b2Maybe(def.target, b2Vec2.ZERO));
          b2Transform.MulTXV(_this.m_bodyB.GetTransform(), _this.m_targetA, _this.m_localAnchorB);
          _this.m_maxForce = b2Maybe(def.maxForce, 0);
          _this.m_impulse.SetZero();
          _this.m_frequencyHz = b2Maybe(def.frequencyHz, 0);
          _this.m_dampingRatio = b2Maybe(def.dampingRatio, 0);
          _this.m_beta = 0;
          _this.m_gamma = 0;
          return _this;
        }
        b2MouseJoint.prototype.SetTarget = function(target) {
          this.m_bodyB.IsAwake() || this.m_bodyB.SetAwake(true);
          this.m_targetA.Copy(target);
        };
        b2MouseJoint.prototype.GetTarget = function() {
          return this.m_targetA;
        };
        b2MouseJoint.prototype.SetMaxForce = function(maxForce) {
          this.m_maxForce = maxForce;
        };
        b2MouseJoint.prototype.GetMaxForce = function() {
          return this.m_maxForce;
        };
        b2MouseJoint.prototype.SetFrequency = function(hz) {
          this.m_frequencyHz = hz;
        };
        b2MouseJoint.prototype.GetFrequency = function() {
          return this.m_frequencyHz;
        };
        b2MouseJoint.prototype.SetDampingRatio = function(ratio) {
          this.m_dampingRatio = ratio;
        };
        b2MouseJoint.prototype.GetDampingRatio = function() {
          return this.m_dampingRatio;
        };
        b2MouseJoint.prototype.InitVelocityConstraints = function(data) {
          this.m_indexB = this.m_bodyB.m_islandIndex;
          this.m_localCenterB.Copy(this.m_bodyB.m_sweep.localCenter);
          this.m_invMassB = this.m_bodyB.m_invMass;
          this.m_invIB = this.m_bodyB.m_invI;
          var cB = data.positions[this.m_indexB].c;
          var aB = data.positions[this.m_indexB].a;
          var vB = data.velocities[this.m_indexB].v;
          var wB = data.velocities[this.m_indexB].w;
          var qB = this.m_qB.SetAngle(aB);
          var mass = this.m_bodyB.GetMass();
          var omega = 2 * b2_pi * this.m_frequencyHz;
          var d = 2 * mass * this.m_dampingRatio * omega;
          var k = mass * (omega * omega);
          var h = data.step.dt;
          this.m_gamma = h * (d + h * k);
          0 !== this.m_gamma && (this.m_gamma = 1 / this.m_gamma);
          this.m_beta = h * k * this.m_gamma;
          b2Vec2.SubVV(this.m_localAnchorB, this.m_localCenterB, this.m_lalcB);
          b2Rot.MulRV(qB, this.m_lalcB, this.m_rB);
          var K = this.m_K;
          K.ex.x = this.m_invMassB + this.m_invIB * this.m_rB.y * this.m_rB.y + this.m_gamma;
          K.ex.y = -this.m_invIB * this.m_rB.x * this.m_rB.y;
          K.ey.x = K.ex.y;
          K.ey.y = this.m_invMassB + this.m_invIB * this.m_rB.x * this.m_rB.x + this.m_gamma;
          K.GetInverse(this.m_mass);
          this.m_C.x = cB.x + this.m_rB.x - this.m_targetA.x;
          this.m_C.y = cB.y + this.m_rB.y - this.m_targetA.y;
          this.m_C.SelfMul(this.m_beta);
          wB *= .98;
          if (data.step.warmStarting) {
            this.m_impulse.SelfMul(data.step.dtRatio);
            vB.x += this.m_invMassB * this.m_impulse.x;
            vB.y += this.m_invMassB * this.m_impulse.y;
            wB += this.m_invIB * b2Vec2.CrossVV(this.m_rB, this.m_impulse);
          } else this.m_impulse.SetZero();
          data.velocities[this.m_indexB].w = wB;
        };
        b2MouseJoint.prototype.SolveVelocityConstraints = function(data) {
          var vB = data.velocities[this.m_indexB].v;
          var wB = data.velocities[this.m_indexB].w;
          var Cdot = b2Vec2.AddVCrossSV(vB, wB, this.m_rB, b2MouseJoint.SolveVelocityConstraints_s_Cdot);
          var impulse = b2Mat22.MulMV(this.m_mass, b2Vec2.AddVV(Cdot, b2Vec2.AddVV(this.m_C, b2Vec2.MulSV(this.m_gamma, this.m_impulse, b2Vec2.s_t0), b2Vec2.s_t0), b2Vec2.s_t0).SelfNeg(), b2MouseJoint.SolveVelocityConstraints_s_impulse);
          var oldImpulse = b2MouseJoint.SolveVelocityConstraints_s_oldImpulse.Copy(this.m_impulse);
          this.m_impulse.SelfAdd(impulse);
          var maxImpulse = data.step.dt * this.m_maxForce;
          this.m_impulse.LengthSquared() > maxImpulse * maxImpulse && this.m_impulse.SelfMul(maxImpulse / this.m_impulse.Length());
          b2Vec2.SubVV(this.m_impulse, oldImpulse, impulse);
          vB.SelfMulAdd(this.m_invMassB, impulse);
          wB += this.m_invIB * b2Vec2.CrossVV(this.m_rB, impulse);
          data.velocities[this.m_indexB].w = wB;
        };
        b2MouseJoint.prototype.SolvePositionConstraints = function(data) {
          return true;
        };
        b2MouseJoint.prototype.GetAnchorA = function(out) {
          out.x = this.m_targetA.x;
          out.y = this.m_targetA.y;
          return out;
        };
        b2MouseJoint.prototype.GetAnchorB = function(out) {
          return this.m_bodyB.GetWorldPoint(this.m_localAnchorB, out);
        };
        b2MouseJoint.prototype.GetReactionForce = function(inv_dt, out) {
          return b2Vec2.MulSV(inv_dt, this.m_impulse, out);
        };
        b2MouseJoint.prototype.GetReactionTorque = function(inv_dt) {
          return 0;
        };
        b2MouseJoint.prototype.Dump = function(log) {
          log("Mouse joint dumping is not supported.\n");
        };
        b2MouseJoint.prototype.ShiftOrigin = function(newOrigin) {
          this.m_targetA.SelfSub(newOrigin);
        };
        b2MouseJoint.SolveVelocityConstraints_s_Cdot = new b2Vec2();
        b2MouseJoint.SolveVelocityConstraints_s_impulse = new b2Vec2();
        b2MouseJoint.SolveVelocityConstraints_s_oldImpulse = new b2Vec2();
        return b2MouseJoint;
      })(b2Joint);
      var b2PrismaticJointDef = (function(_super) {
        __extends(b2PrismaticJointDef, _super);
        function b2PrismaticJointDef() {
          var _this = _super.call(this, exports.b2JointType.e_prismaticJoint) || this;
          _this.localAnchorA = new b2Vec2();
          _this.localAnchorB = new b2Vec2();
          _this.localAxisA = new b2Vec2(1, 0);
          _this.referenceAngle = 0;
          _this.enableLimit = false;
          _this.lowerTranslation = 0;
          _this.upperTranslation = 0;
          _this.enableMotor = false;
          _this.maxMotorForce = 0;
          _this.motorSpeed = 0;
          return _this;
        }
        b2PrismaticJointDef.prototype.Initialize = function(bA, bB, anchor, axis) {
          this.bodyA = bA;
          this.bodyB = bB;
          this.bodyA.GetLocalPoint(anchor, this.localAnchorA);
          this.bodyB.GetLocalPoint(anchor, this.localAnchorB);
          this.bodyA.GetLocalVector(axis, this.localAxisA);
          this.referenceAngle = this.bodyB.GetAngle() - this.bodyA.GetAngle();
        };
        return b2PrismaticJointDef;
      })(b2JointDef);
      var b2PrismaticJoint = (function(_super) {
        __extends(b2PrismaticJoint, _super);
        function b2PrismaticJoint(def) {
          var _this = _super.call(this, def) || this;
          _this.m_localAnchorA = new b2Vec2();
          _this.m_localAnchorB = new b2Vec2();
          _this.m_localXAxisA = new b2Vec2();
          _this.m_localYAxisA = new b2Vec2();
          _this.m_referenceAngle = 0;
          _this.m_impulse = new b2Vec3(0, 0, 0);
          _this.m_motorImpulse = 0;
          _this.m_lowerTranslation = 0;
          _this.m_upperTranslation = 0;
          _this.m_maxMotorForce = 0;
          _this.m_motorSpeed = 0;
          _this.m_enableLimit = false;
          _this.m_enableMotor = false;
          _this.m_limitState = exports.b2LimitState.e_inactiveLimit;
          _this.m_indexA = 0;
          _this.m_indexB = 0;
          _this.m_localCenterA = new b2Vec2();
          _this.m_localCenterB = new b2Vec2();
          _this.m_invMassA = 0;
          _this.m_invMassB = 0;
          _this.m_invIA = 0;
          _this.m_invIB = 0;
          _this.m_axis = new b2Vec2(0, 0);
          _this.m_perp = new b2Vec2(0, 0);
          _this.m_s1 = 0;
          _this.m_s2 = 0;
          _this.m_a1 = 0;
          _this.m_a2 = 0;
          _this.m_K = new b2Mat33();
          _this.m_K3 = new b2Mat33();
          _this.m_K2 = new b2Mat22();
          _this.m_motorMass = 0;
          _this.m_qA = new b2Rot();
          _this.m_qB = new b2Rot();
          _this.m_lalcA = new b2Vec2();
          _this.m_lalcB = new b2Vec2();
          _this.m_rA = new b2Vec2();
          _this.m_rB = new b2Vec2();
          _this.m_localAnchorA.Copy(b2Maybe(def.localAnchorA, b2Vec2.ZERO));
          _this.m_localAnchorB.Copy(b2Maybe(def.localAnchorB, b2Vec2.ZERO));
          _this.m_localXAxisA.Copy(b2Maybe(def.localAxisA, new b2Vec2(1, 0))).SelfNormalize();
          b2Vec2.CrossOneV(_this.m_localXAxisA, _this.m_localYAxisA);
          _this.m_referenceAngle = b2Maybe(def.referenceAngle, 0);
          _this.m_lowerTranslation = b2Maybe(def.lowerTranslation, 0);
          _this.m_upperTranslation = b2Maybe(def.upperTranslation, 0);
          _this.m_maxMotorForce = b2Maybe(def.maxMotorForce, 0);
          _this.m_motorSpeed = b2Maybe(def.motorSpeed, 0);
          _this.m_enableLimit = b2Maybe(def.enableLimit, false);
          _this.m_enableMotor = b2Maybe(def.enableMotor, false);
          return _this;
        }
        b2PrismaticJoint.prototype.InitVelocityConstraints = function(data) {
          this.m_indexA = this.m_bodyA.m_islandIndex;
          this.m_indexB = this.m_bodyB.m_islandIndex;
          this.m_localCenterA.Copy(this.m_bodyA.m_sweep.localCenter);
          this.m_localCenterB.Copy(this.m_bodyB.m_sweep.localCenter);
          this.m_invMassA = this.m_bodyA.m_invMass;
          this.m_invMassB = this.m_bodyB.m_invMass;
          this.m_invIA = this.m_bodyA.m_invI;
          this.m_invIB = this.m_bodyB.m_invI;
          var cA = data.positions[this.m_indexA].c;
          var aA = data.positions[this.m_indexA].a;
          var vA = data.velocities[this.m_indexA].v;
          var wA = data.velocities[this.m_indexA].w;
          var cB = data.positions[this.m_indexB].c;
          var aB = data.positions[this.m_indexB].a;
          var vB = data.velocities[this.m_indexB].v;
          var wB = data.velocities[this.m_indexB].w;
          var qA = this.m_qA.SetAngle(aA), qB = this.m_qB.SetAngle(aB);
          b2Vec2.SubVV(this.m_localAnchorA, this.m_localCenterA, this.m_lalcA);
          var rA = b2Rot.MulRV(qA, this.m_lalcA, this.m_rA);
          b2Vec2.SubVV(this.m_localAnchorB, this.m_localCenterB, this.m_lalcB);
          var rB = b2Rot.MulRV(qB, this.m_lalcB, this.m_rB);
          var d = b2Vec2.AddVV(b2Vec2.SubVV(cB, cA, b2Vec2.s_t0), b2Vec2.SubVV(rB, rA, b2Vec2.s_t1), b2PrismaticJoint.InitVelocityConstraints_s_d);
          var mA = this.m_invMassA, mB = this.m_invMassB;
          var iA = this.m_invIA, iB = this.m_invIB;
          b2Rot.MulRV(qA, this.m_localXAxisA, this.m_axis);
          this.m_a1 = b2Vec2.CrossVV(b2Vec2.AddVV(d, rA, b2Vec2.s_t0), this.m_axis);
          this.m_a2 = b2Vec2.CrossVV(rB, this.m_axis);
          this.m_motorMass = mA + mB + iA * this.m_a1 * this.m_a1 + iB * this.m_a2 * this.m_a2;
          this.m_motorMass > 0 && (this.m_motorMass = 1 / this.m_motorMass);
          b2Rot.MulRV(qA, this.m_localYAxisA, this.m_perp);
          this.m_s1 = b2Vec2.CrossVV(b2Vec2.AddVV(d, rA, b2Vec2.s_t0), this.m_perp);
          this.m_s2 = b2Vec2.CrossVV(rB, this.m_perp);
          this.m_K.ex.x = mA + mB + iA * this.m_s1 * this.m_s1 + iB * this.m_s2 * this.m_s2;
          this.m_K.ex.y = iA * this.m_s1 + iB * this.m_s2;
          this.m_K.ex.z = iA * this.m_s1 * this.m_a1 + iB * this.m_s2 * this.m_a2;
          this.m_K.ey.x = this.m_K.ex.y;
          this.m_K.ey.y = iA + iB;
          0 === this.m_K.ey.y && (this.m_K.ey.y = 1);
          this.m_K.ey.z = iA * this.m_a1 + iB * this.m_a2;
          this.m_K.ez.x = this.m_K.ex.z;
          this.m_K.ez.y = this.m_K.ey.z;
          this.m_K.ez.z = mA + mB + iA * this.m_a1 * this.m_a1 + iB * this.m_a2 * this.m_a2;
          if (this.m_enableLimit) {
            var jointTranslation = b2Vec2.DotVV(this.m_axis, d);
            if (b2Abs(this.m_upperTranslation - this.m_lowerTranslation) < 2 * b2_linearSlop) this.m_limitState = exports.b2LimitState.e_equalLimits; else if (jointTranslation <= this.m_lowerTranslation) {
              if (this.m_limitState !== exports.b2LimitState.e_atLowerLimit) {
                this.m_limitState = exports.b2LimitState.e_atLowerLimit;
                this.m_impulse.z = 0;
              }
            } else if (jointTranslation >= this.m_upperTranslation) {
              if (this.m_limitState !== exports.b2LimitState.e_atUpperLimit) {
                this.m_limitState = exports.b2LimitState.e_atUpperLimit;
                this.m_impulse.z = 0;
              }
            } else {
              this.m_limitState = exports.b2LimitState.e_inactiveLimit;
              this.m_impulse.z = 0;
            }
          } else {
            this.m_limitState = exports.b2LimitState.e_inactiveLimit;
            this.m_impulse.z = 0;
          }
          this.m_enableMotor || (this.m_motorImpulse = 0);
          if (data.step.warmStarting) {
            this.m_impulse.SelfMul(data.step.dtRatio);
            this.m_motorImpulse *= data.step.dtRatio;
            var P = b2Vec2.AddVV(b2Vec2.MulSV(this.m_impulse.x, this.m_perp, b2Vec2.s_t0), b2Vec2.MulSV(this.m_motorImpulse + this.m_impulse.z, this.m_axis, b2Vec2.s_t1), b2PrismaticJoint.InitVelocityConstraints_s_P);
            var LA = this.m_impulse.x * this.m_s1 + this.m_impulse.y + (this.m_motorImpulse + this.m_impulse.z) * this.m_a1;
            var LB = this.m_impulse.x * this.m_s2 + this.m_impulse.y + (this.m_motorImpulse + this.m_impulse.z) * this.m_a2;
            vA.SelfMulSub(mA, P);
            wA -= iA * LA;
            vB.SelfMulAdd(mB, P);
            wB += iB * LB;
          } else {
            this.m_impulse.SetZero();
            this.m_motorImpulse = 0;
          }
          data.velocities[this.m_indexA].w = wA;
          data.velocities[this.m_indexB].w = wB;
        };
        b2PrismaticJoint.prototype.SolveVelocityConstraints = function(data) {
          var vA = data.velocities[this.m_indexA].v;
          var wA = data.velocities[this.m_indexA].w;
          var vB = data.velocities[this.m_indexB].v;
          var wB = data.velocities[this.m_indexB].w;
          var mA = this.m_invMassA, mB = this.m_invMassB;
          var iA = this.m_invIA, iB = this.m_invIB;
          if (this.m_enableMotor && this.m_limitState !== exports.b2LimitState.e_equalLimits) {
            var Cdot = b2Vec2.DotVV(this.m_axis, b2Vec2.SubVV(vB, vA, b2Vec2.s_t0)) + this.m_a2 * wB - this.m_a1 * wA;
            var impulse = this.m_motorMass * (this.m_motorSpeed - Cdot);
            var oldImpulse = this.m_motorImpulse;
            var maxImpulse = data.step.dt * this.m_maxMotorForce;
            this.m_motorImpulse = b2Clamp(this.m_motorImpulse + impulse, -maxImpulse, maxImpulse);
            impulse = this.m_motorImpulse - oldImpulse;
            var P = b2Vec2.MulSV(impulse, this.m_axis, b2PrismaticJoint.SolveVelocityConstraints_s_P);
            var LA = impulse * this.m_a1;
            var LB = impulse * this.m_a2;
            vA.SelfMulSub(mA, P);
            wA -= iA * LA;
            vB.SelfMulAdd(mB, P);
            wB += iB * LB;
          }
          var Cdot1_x = b2Vec2.DotVV(this.m_perp, b2Vec2.SubVV(vB, vA, b2Vec2.s_t0)) + this.m_s2 * wB - this.m_s1 * wA;
          var Cdot1_y = wB - wA;
          if (this.m_enableLimit && this.m_limitState !== exports.b2LimitState.e_inactiveLimit) {
            var Cdot2 = b2Vec2.DotVV(this.m_axis, b2Vec2.SubVV(vB, vA, b2Vec2.s_t0)) + this.m_a2 * wB - this.m_a1 * wA;
            var f1 = b2PrismaticJoint.SolveVelocityConstraints_s_f1.Copy(this.m_impulse);
            var df3 = this.m_K.Solve33(-Cdot1_x, -Cdot1_y, -Cdot2, b2PrismaticJoint.SolveVelocityConstraints_s_df3);
            this.m_impulse.SelfAdd(df3);
            this.m_limitState === exports.b2LimitState.e_atLowerLimit ? this.m_impulse.z = b2Max(this.m_impulse.z, 0) : this.m_limitState === exports.b2LimitState.e_atUpperLimit && (this.m_impulse.z = b2Min(this.m_impulse.z, 0));
            var b_x = -Cdot1_x - (this.m_impulse.z - f1.z) * this.m_K.ez.x;
            var b_y = -Cdot1_y - (this.m_impulse.z - f1.z) * this.m_K.ez.y;
            var f2r = this.m_K.Solve22(b_x, b_y, b2PrismaticJoint.SolveVelocityConstraints_s_f2r);
            f2r.x += f1.x;
            f2r.y += f1.y;
            this.m_impulse.x = f2r.x;
            this.m_impulse.y = f2r.y;
            df3.x = this.m_impulse.x - f1.x;
            df3.y = this.m_impulse.y - f1.y;
            df3.z = this.m_impulse.z - f1.z;
            var P = b2Vec2.AddVV(b2Vec2.MulSV(df3.x, this.m_perp, b2Vec2.s_t0), b2Vec2.MulSV(df3.z, this.m_axis, b2Vec2.s_t1), b2PrismaticJoint.SolveVelocityConstraints_s_P);
            var LA = df3.x * this.m_s1 + df3.y + df3.z * this.m_a1;
            var LB = df3.x * this.m_s2 + df3.y + df3.z * this.m_a2;
            vA.SelfMulSub(mA, P);
            wA -= iA * LA;
            vB.SelfMulAdd(mB, P);
            wB += iB * LB;
          } else {
            var df2 = this.m_K.Solve22(-Cdot1_x, -Cdot1_y, b2PrismaticJoint.SolveVelocityConstraints_s_df2);
            this.m_impulse.x += df2.x;
            this.m_impulse.y += df2.y;
            var P = b2Vec2.MulSV(df2.x, this.m_perp, b2PrismaticJoint.SolveVelocityConstraints_s_P);
            var LA = df2.x * this.m_s1 + df2.y;
            var LB = df2.x * this.m_s2 + df2.y;
            vA.SelfMulSub(mA, P);
            wA -= iA * LA;
            vB.SelfMulAdd(mB, P);
            wB += iB * LB;
          }
          data.velocities[this.m_indexA].w = wA;
          data.velocities[this.m_indexB].w = wB;
        };
        b2PrismaticJoint.prototype.SolvePositionConstraints = function(data) {
          var cA = data.positions[this.m_indexA].c;
          var aA = data.positions[this.m_indexA].a;
          var cB = data.positions[this.m_indexB].c;
          var aB = data.positions[this.m_indexB].a;
          var qA = this.m_qA.SetAngle(aA), qB = this.m_qB.SetAngle(aB);
          var mA = this.m_invMassA, mB = this.m_invMassB;
          var iA = this.m_invIA, iB = this.m_invIB;
          var rA = b2Rot.MulRV(qA, this.m_lalcA, this.m_rA);
          var rB = b2Rot.MulRV(qB, this.m_lalcB, this.m_rB);
          var d = b2Vec2.SubVV(b2Vec2.AddVV(cB, rB, b2Vec2.s_t0), b2Vec2.AddVV(cA, rA, b2Vec2.s_t1), b2PrismaticJoint.SolvePositionConstraints_s_d);
          var axis = b2Rot.MulRV(qA, this.m_localXAxisA, this.m_axis);
          var a1 = b2Vec2.CrossVV(b2Vec2.AddVV(d, rA, b2Vec2.s_t0), axis);
          var a2 = b2Vec2.CrossVV(rB, axis);
          var perp = b2Rot.MulRV(qA, this.m_localYAxisA, this.m_perp);
          var s1 = b2Vec2.CrossVV(b2Vec2.AddVV(d, rA, b2Vec2.s_t0), perp);
          var s2 = b2Vec2.CrossVV(rB, perp);
          var impulse = b2PrismaticJoint.SolvePositionConstraints_s_impulse;
          var C1_x = b2Vec2.DotVV(perp, d);
          var C1_y = aB - aA - this.m_referenceAngle;
          var linearError = b2Abs(C1_x);
          var angularError = b2Abs(C1_y);
          var active = false;
          var C2 = 0;
          if (this.m_enableLimit) {
            var translation = b2Vec2.DotVV(axis, d);
            if (b2Abs(this.m_upperTranslation - this.m_lowerTranslation) < 2 * b2_linearSlop) {
              C2 = b2Clamp(translation, -b2_maxLinearCorrection, b2_maxLinearCorrection);
              linearError = b2Max(linearError, b2Abs(translation));
              active = true;
            } else if (translation <= this.m_lowerTranslation) {
              C2 = b2Clamp(translation - this.m_lowerTranslation + b2_linearSlop, -b2_maxLinearCorrection, 0);
              linearError = b2Max(linearError, this.m_lowerTranslation - translation);
              active = true;
            } else if (translation >= this.m_upperTranslation) {
              C2 = b2Clamp(translation - this.m_upperTranslation - b2_linearSlop, 0, b2_maxLinearCorrection);
              linearError = b2Max(linearError, translation - this.m_upperTranslation);
              active = true;
            }
          }
          if (active) {
            var k11 = mA + mB + iA * s1 * s1 + iB * s2 * s2;
            var k12 = iA * s1 + iB * s2;
            var k13 = iA * s1 * a1 + iB * s2 * a2;
            var k22 = iA + iB;
            0 === k22 && (k22 = 1);
            var k23 = iA * a1 + iB * a2;
            var k33 = mA + mB + iA * a1 * a1 + iB * a2 * a2;
            var K = this.m_K3;
            K.ex.SetXYZ(k11, k12, k13);
            K.ey.SetXYZ(k12, k22, k23);
            K.ez.SetXYZ(k13, k23, k33);
            impulse = K.Solve33(-C1_x, -C1_y, -C2, impulse);
          } else {
            var k11 = mA + mB + iA * s1 * s1 + iB * s2 * s2;
            var k12 = iA * s1 + iB * s2;
            var k22 = iA + iB;
            0 === k22 && (k22 = 1);
            var K2 = this.m_K2;
            K2.ex.Set(k11, k12);
            K2.ey.Set(k12, k22);
            var impulse1 = K2.Solve(-C1_x, -C1_y, b2PrismaticJoint.SolvePositionConstraints_s_impulse1);
            impulse.x = impulse1.x;
            impulse.y = impulse1.y;
            impulse.z = 0;
          }
          var P = b2Vec2.AddVV(b2Vec2.MulSV(impulse.x, perp, b2Vec2.s_t0), b2Vec2.MulSV(impulse.z, axis, b2Vec2.s_t1), b2PrismaticJoint.SolvePositionConstraints_s_P);
          var LA = impulse.x * s1 + impulse.y + impulse.z * a1;
          var LB = impulse.x * s2 + impulse.y + impulse.z * a2;
          cA.SelfMulSub(mA, P);
          aA -= iA * LA;
          cB.SelfMulAdd(mB, P);
          aB += iB * LB;
          data.positions[this.m_indexA].a = aA;
          data.positions[this.m_indexB].a = aB;
          return linearError <= b2_linearSlop && angularError <= b2_angularSlop;
        };
        b2PrismaticJoint.prototype.GetAnchorA = function(out) {
          return this.m_bodyA.GetWorldPoint(this.m_localAnchorA, out);
        };
        b2PrismaticJoint.prototype.GetAnchorB = function(out) {
          return this.m_bodyB.GetWorldPoint(this.m_localAnchorB, out);
        };
        b2PrismaticJoint.prototype.GetReactionForce = function(inv_dt, out) {
          out.x = inv_dt * (this.m_impulse.x * this.m_perp.x + (this.m_motorImpulse + this.m_impulse.z) * this.m_axis.x);
          out.y = inv_dt * (this.m_impulse.x * this.m_perp.y + (this.m_motorImpulse + this.m_impulse.z) * this.m_axis.y);
          return out;
        };
        b2PrismaticJoint.prototype.GetReactionTorque = function(inv_dt) {
          return inv_dt * this.m_impulse.y;
        };
        b2PrismaticJoint.prototype.GetLocalAnchorA = function() {
          return this.m_localAnchorA;
        };
        b2PrismaticJoint.prototype.GetLocalAnchorB = function() {
          return this.m_localAnchorB;
        };
        b2PrismaticJoint.prototype.GetLocalAxisA = function() {
          return this.m_localXAxisA;
        };
        b2PrismaticJoint.prototype.GetReferenceAngle = function() {
          return this.m_referenceAngle;
        };
        b2PrismaticJoint.prototype.GetJointTranslation = function() {
          var pA = this.m_bodyA.GetWorldPoint(this.m_localAnchorA, b2PrismaticJoint.GetJointTranslation_s_pA);
          var pB = this.m_bodyB.GetWorldPoint(this.m_localAnchorB, b2PrismaticJoint.GetJointTranslation_s_pB);
          var d = b2Vec2.SubVV(pB, pA, b2PrismaticJoint.GetJointTranslation_s_d);
          var axis = this.m_bodyA.GetWorldVector(this.m_localXAxisA, b2PrismaticJoint.GetJointTranslation_s_axis);
          var translation = b2Vec2.DotVV(d, axis);
          return translation;
        };
        b2PrismaticJoint.prototype.GetJointSpeed = function() {
          var bA = this.m_bodyA;
          var bB = this.m_bodyB;
          b2Vec2.SubVV(this.m_localAnchorA, bA.m_sweep.localCenter, this.m_lalcA);
          var rA = b2Rot.MulRV(bA.m_xf.q, this.m_lalcA, this.m_rA);
          b2Vec2.SubVV(this.m_localAnchorB, bB.m_sweep.localCenter, this.m_lalcB);
          var rB = b2Rot.MulRV(bB.m_xf.q, this.m_lalcB, this.m_rB);
          var pA = b2Vec2.AddVV(bA.m_sweep.c, rA, b2Vec2.s_t0);
          var pB = b2Vec2.AddVV(bB.m_sweep.c, rB, b2Vec2.s_t1);
          var d = b2Vec2.SubVV(pB, pA, b2Vec2.s_t2);
          var axis = bA.GetWorldVector(this.m_localXAxisA, this.m_axis);
          var vA = bA.m_linearVelocity;
          var vB = bB.m_linearVelocity;
          var wA = bA.m_angularVelocity;
          var wB = bB.m_angularVelocity;
          var speed = b2Vec2.DotVV(d, b2Vec2.CrossSV(wA, axis, b2Vec2.s_t0)) + b2Vec2.DotVV(axis, b2Vec2.SubVV(b2Vec2.AddVCrossSV(vB, wB, rB, b2Vec2.s_t0), b2Vec2.AddVCrossSV(vA, wA, rA, b2Vec2.s_t1), b2Vec2.s_t0));
          return speed;
        };
        b2PrismaticJoint.prototype.IsLimitEnabled = function() {
          return this.m_enableLimit;
        };
        b2PrismaticJoint.prototype.EnableLimit = function(flag) {
          if (flag !== this.m_enableLimit) {
            this.m_bodyA.SetAwake(true);
            this.m_bodyB.SetAwake(true);
            this.m_enableLimit = flag;
            this.m_impulse.z = 0;
          }
        };
        b2PrismaticJoint.prototype.GetLowerLimit = function() {
          return this.m_lowerTranslation;
        };
        b2PrismaticJoint.prototype.GetUpperLimit = function() {
          return this.m_upperTranslation;
        };
        b2PrismaticJoint.prototype.SetLimits = function(lower, upper) {
          if (lower !== this.m_lowerTranslation || upper !== this.m_upperTranslation) {
            this.m_bodyA.SetAwake(true);
            this.m_bodyB.SetAwake(true);
            this.m_lowerTranslation = lower;
            this.m_upperTranslation = upper;
            this.m_impulse.z = 0;
          }
        };
        b2PrismaticJoint.prototype.IsMotorEnabled = function() {
          return this.m_enableMotor;
        };
        b2PrismaticJoint.prototype.EnableMotor = function(flag) {
          if (flag !== this.m_enableMotor) {
            this.m_bodyA.SetAwake(true);
            this.m_bodyB.SetAwake(true);
            this.m_enableMotor = flag;
          }
        };
        b2PrismaticJoint.prototype.SetMotorSpeed = function(speed) {
          if (speed !== this.m_motorSpeed) {
            this.m_bodyA.SetAwake(true);
            this.m_bodyB.SetAwake(true);
            this.m_motorSpeed = speed;
          }
        };
        b2PrismaticJoint.prototype.GetMotorSpeed = function() {
          return this.m_motorSpeed;
        };
        b2PrismaticJoint.prototype.SetMaxMotorForce = function(force) {
          if (force !== this.m_maxMotorForce) {
            this.m_bodyA.SetAwake(true);
            this.m_bodyB.SetAwake(true);
            this.m_maxMotorForce = force;
          }
        };
        b2PrismaticJoint.prototype.GetMaxMotorForce = function() {
          return this.m_maxMotorForce;
        };
        b2PrismaticJoint.prototype.GetMotorForce = function(inv_dt) {
          return inv_dt * this.m_motorImpulse;
        };
        b2PrismaticJoint.prototype.Dump = function(log) {
          var indexA = this.m_bodyA.m_islandIndex;
          var indexB = this.m_bodyB.m_islandIndex;
          log("  const jd: b2PrismaticJointDef = new b2PrismaticJointDef();\n");
          log("  jd.bodyA = bodies[%d];\n", indexA);
          log("  jd.bodyB = bodies[%d];\n", indexB);
          log("  jd.collideConnected = %s;\n", this.m_collideConnected ? "true" : "false");
          log("  jd.localAnchorA.Set(%.15f, %.15f);\n", this.m_localAnchorA.x, this.m_localAnchorA.y);
          log("  jd.localAnchorB.Set(%.15f, %.15f);\n", this.m_localAnchorB.x, this.m_localAnchorB.y);
          log("  jd.localAxisA.Set(%.15f, %.15f);\n", this.m_localXAxisA.x, this.m_localXAxisA.y);
          log("  jd.referenceAngle = %.15f;\n", this.m_referenceAngle);
          log("  jd.enableLimit = %s;\n", this.m_enableLimit ? "true" : "false");
          log("  jd.lowerTranslation = %.15f;\n", this.m_lowerTranslation);
          log("  jd.upperTranslation = %.15f;\n", this.m_upperTranslation);
          log("  jd.enableMotor = %s;\n", this.m_enableMotor ? "true" : "false");
          log("  jd.motorSpeed = %.15f;\n", this.m_motorSpeed);
          log("  jd.maxMotorForce = %.15f;\n", this.m_maxMotorForce);
          log("  joints[%d] = this.m_world.CreateJoint(jd);\n", this.m_index);
        };
        b2PrismaticJoint.InitVelocityConstraints_s_d = new b2Vec2();
        b2PrismaticJoint.InitVelocityConstraints_s_P = new b2Vec2();
        b2PrismaticJoint.SolveVelocityConstraints_s_P = new b2Vec2();
        b2PrismaticJoint.SolveVelocityConstraints_s_f2r = new b2Vec2();
        b2PrismaticJoint.SolveVelocityConstraints_s_f1 = new b2Vec3();
        b2PrismaticJoint.SolveVelocityConstraints_s_df3 = new b2Vec3();
        b2PrismaticJoint.SolveVelocityConstraints_s_df2 = new b2Vec2();
        b2PrismaticJoint.SolvePositionConstraints_s_d = new b2Vec2();
        b2PrismaticJoint.SolvePositionConstraints_s_impulse = new b2Vec3();
        b2PrismaticJoint.SolvePositionConstraints_s_impulse1 = new b2Vec2();
        b2PrismaticJoint.SolvePositionConstraints_s_P = new b2Vec2();
        b2PrismaticJoint.GetJointTranslation_s_pA = new b2Vec2();
        b2PrismaticJoint.GetJointTranslation_s_pB = new b2Vec2();
        b2PrismaticJoint.GetJointTranslation_s_d = new b2Vec2();
        b2PrismaticJoint.GetJointTranslation_s_axis = new b2Vec2();
        return b2PrismaticJoint;
      })(b2Joint);
      var b2_minPulleyLength = 2;
      var b2PulleyJointDef = (function(_super) {
        __extends(b2PulleyJointDef, _super);
        function b2PulleyJointDef() {
          var _this = _super.call(this, exports.b2JointType.e_pulleyJoint) || this;
          _this.groundAnchorA = new b2Vec2(-1, 1);
          _this.groundAnchorB = new b2Vec2(1, 1);
          _this.localAnchorA = new b2Vec2(-1, 0);
          _this.localAnchorB = new b2Vec2(1, 0);
          _this.lengthA = 0;
          _this.lengthB = 0;
          _this.ratio = 1;
          _this.collideConnected = true;
          return _this;
        }
        b2PulleyJointDef.prototype.Initialize = function(bA, bB, groundA, groundB, anchorA, anchorB, r) {
          this.bodyA = bA;
          this.bodyB = bB;
          this.groundAnchorA.Copy(groundA);
          this.groundAnchorB.Copy(groundB);
          this.bodyA.GetLocalPoint(anchorA, this.localAnchorA);
          this.bodyB.GetLocalPoint(anchorB, this.localAnchorB);
          this.lengthA = b2Vec2.DistanceVV(anchorA, groundA);
          this.lengthB = b2Vec2.DistanceVV(anchorB, groundB);
          this.ratio = r;
        };
        return b2PulleyJointDef;
      })(b2JointDef);
      var b2PulleyJoint = (function(_super) {
        __extends(b2PulleyJoint, _super);
        function b2PulleyJoint(def) {
          var _this = _super.call(this, def) || this;
          _this.m_groundAnchorA = new b2Vec2();
          _this.m_groundAnchorB = new b2Vec2();
          _this.m_lengthA = 0;
          _this.m_lengthB = 0;
          _this.m_localAnchorA = new b2Vec2();
          _this.m_localAnchorB = new b2Vec2();
          _this.m_constant = 0;
          _this.m_ratio = 0;
          _this.m_impulse = 0;
          _this.m_indexA = 0;
          _this.m_indexB = 0;
          _this.m_uA = new b2Vec2();
          _this.m_uB = new b2Vec2();
          _this.m_rA = new b2Vec2();
          _this.m_rB = new b2Vec2();
          _this.m_localCenterA = new b2Vec2();
          _this.m_localCenterB = new b2Vec2();
          _this.m_invMassA = 0;
          _this.m_invMassB = 0;
          _this.m_invIA = 0;
          _this.m_invIB = 0;
          _this.m_mass = 0;
          _this.m_qA = new b2Rot();
          _this.m_qB = new b2Rot();
          _this.m_lalcA = new b2Vec2();
          _this.m_lalcB = new b2Vec2();
          _this.m_groundAnchorA.Copy(b2Maybe(def.groundAnchorA, new b2Vec2(-1, 1)));
          _this.m_groundAnchorB.Copy(b2Maybe(def.groundAnchorB, new b2Vec2(1, 0)));
          _this.m_localAnchorA.Copy(b2Maybe(def.localAnchorA, new b2Vec2(-1, 0)));
          _this.m_localAnchorB.Copy(b2Maybe(def.localAnchorB, new b2Vec2(1, 0)));
          _this.m_lengthA = b2Maybe(def.lengthA, 0);
          _this.m_lengthB = b2Maybe(def.lengthB, 0);
          _this.m_ratio = b2Maybe(def.ratio, 1);
          _this.m_constant = b2Maybe(def.lengthA, 0) + _this.m_ratio * b2Maybe(def.lengthB, 0);
          _this.m_impulse = 0;
          return _this;
        }
        b2PulleyJoint.prototype.InitVelocityConstraints = function(data) {
          this.m_indexA = this.m_bodyA.m_islandIndex;
          this.m_indexB = this.m_bodyB.m_islandIndex;
          this.m_localCenterA.Copy(this.m_bodyA.m_sweep.localCenter);
          this.m_localCenterB.Copy(this.m_bodyB.m_sweep.localCenter);
          this.m_invMassA = this.m_bodyA.m_invMass;
          this.m_invMassB = this.m_bodyB.m_invMass;
          this.m_invIA = this.m_bodyA.m_invI;
          this.m_invIB = this.m_bodyB.m_invI;
          var cA = data.positions[this.m_indexA].c;
          var aA = data.positions[this.m_indexA].a;
          var vA = data.velocities[this.m_indexA].v;
          var wA = data.velocities[this.m_indexA].w;
          var cB = data.positions[this.m_indexB].c;
          var aB = data.positions[this.m_indexB].a;
          var vB = data.velocities[this.m_indexB].v;
          var wB = data.velocities[this.m_indexB].w;
          var qA = this.m_qA.SetAngle(aA), qB = this.m_qB.SetAngle(aB);
          b2Vec2.SubVV(this.m_localAnchorA, this.m_localCenterA, this.m_lalcA);
          b2Rot.MulRV(qA, this.m_lalcA, this.m_rA);
          b2Vec2.SubVV(this.m_localAnchorB, this.m_localCenterB, this.m_lalcB);
          b2Rot.MulRV(qB, this.m_lalcB, this.m_rB);
          this.m_uA.Copy(cA).SelfAdd(this.m_rA).SelfSub(this.m_groundAnchorA);
          this.m_uB.Copy(cB).SelfAdd(this.m_rB).SelfSub(this.m_groundAnchorB);
          var lengthA = this.m_uA.Length();
          var lengthB = this.m_uB.Length();
          lengthA > 10 * b2_linearSlop ? this.m_uA.SelfMul(1 / lengthA) : this.m_uA.SetZero();
          lengthB > 10 * b2_linearSlop ? this.m_uB.SelfMul(1 / lengthB) : this.m_uB.SetZero();
          var ruA = b2Vec2.CrossVV(this.m_rA, this.m_uA);
          var ruB = b2Vec2.CrossVV(this.m_rB, this.m_uB);
          var mA = this.m_invMassA + this.m_invIA * ruA * ruA;
          var mB = this.m_invMassB + this.m_invIB * ruB * ruB;
          this.m_mass = mA + this.m_ratio * this.m_ratio * mB;
          this.m_mass > 0 && (this.m_mass = 1 / this.m_mass);
          if (data.step.warmStarting) {
            this.m_impulse *= data.step.dtRatio;
            var PA = b2Vec2.MulSV(-this.m_impulse, this.m_uA, b2PulleyJoint.InitVelocityConstraints_s_PA);
            var PB = b2Vec2.MulSV(-this.m_ratio * this.m_impulse, this.m_uB, b2PulleyJoint.InitVelocityConstraints_s_PB);
            vA.SelfMulAdd(this.m_invMassA, PA);
            wA += this.m_invIA * b2Vec2.CrossVV(this.m_rA, PA);
            vB.SelfMulAdd(this.m_invMassB, PB);
            wB += this.m_invIB * b2Vec2.CrossVV(this.m_rB, PB);
          } else this.m_impulse = 0;
          data.velocities[this.m_indexA].w = wA;
          data.velocities[this.m_indexB].w = wB;
        };
        b2PulleyJoint.prototype.SolveVelocityConstraints = function(data) {
          var vA = data.velocities[this.m_indexA].v;
          var wA = data.velocities[this.m_indexA].w;
          var vB = data.velocities[this.m_indexB].v;
          var wB = data.velocities[this.m_indexB].w;
          var vpA = b2Vec2.AddVCrossSV(vA, wA, this.m_rA, b2PulleyJoint.SolveVelocityConstraints_s_vpA);
          var vpB = b2Vec2.AddVCrossSV(vB, wB, this.m_rB, b2PulleyJoint.SolveVelocityConstraints_s_vpB);
          var Cdot = -b2Vec2.DotVV(this.m_uA, vpA) - this.m_ratio * b2Vec2.DotVV(this.m_uB, vpB);
          var impulse = -this.m_mass * Cdot;
          this.m_impulse += impulse;
          var PA = b2Vec2.MulSV(-impulse, this.m_uA, b2PulleyJoint.SolveVelocityConstraints_s_PA);
          var PB = b2Vec2.MulSV(-this.m_ratio * impulse, this.m_uB, b2PulleyJoint.SolveVelocityConstraints_s_PB);
          vA.SelfMulAdd(this.m_invMassA, PA);
          wA += this.m_invIA * b2Vec2.CrossVV(this.m_rA, PA);
          vB.SelfMulAdd(this.m_invMassB, PB);
          wB += this.m_invIB * b2Vec2.CrossVV(this.m_rB, PB);
          data.velocities[this.m_indexA].w = wA;
          data.velocities[this.m_indexB].w = wB;
        };
        b2PulleyJoint.prototype.SolvePositionConstraints = function(data) {
          var cA = data.positions[this.m_indexA].c;
          var aA = data.positions[this.m_indexA].a;
          var cB = data.positions[this.m_indexB].c;
          var aB = data.positions[this.m_indexB].a;
          var qA = this.m_qA.SetAngle(aA), qB = this.m_qB.SetAngle(aB);
          b2Vec2.SubVV(this.m_localAnchorA, this.m_localCenterA, this.m_lalcA);
          var rA = b2Rot.MulRV(qA, this.m_lalcA, this.m_rA);
          b2Vec2.SubVV(this.m_localAnchorB, this.m_localCenterB, this.m_lalcB);
          var rB = b2Rot.MulRV(qB, this.m_lalcB, this.m_rB);
          var uA = this.m_uA.Copy(cA).SelfAdd(rA).SelfSub(this.m_groundAnchorA);
          var uB = this.m_uB.Copy(cB).SelfAdd(rB).SelfSub(this.m_groundAnchorB);
          var lengthA = uA.Length();
          var lengthB = uB.Length();
          lengthA > 10 * b2_linearSlop ? uA.SelfMul(1 / lengthA) : uA.SetZero();
          lengthB > 10 * b2_linearSlop ? uB.SelfMul(1 / lengthB) : uB.SetZero();
          var ruA = b2Vec2.CrossVV(rA, uA);
          var ruB = b2Vec2.CrossVV(rB, uB);
          var mA = this.m_invMassA + this.m_invIA * ruA * ruA;
          var mB = this.m_invMassB + this.m_invIB * ruB * ruB;
          var mass = mA + this.m_ratio * this.m_ratio * mB;
          mass > 0 && (mass = 1 / mass);
          var C = this.m_constant - lengthA - this.m_ratio * lengthB;
          var linearError = b2Abs(C);
          var impulse = -mass * C;
          var PA = b2Vec2.MulSV(-impulse, uA, b2PulleyJoint.SolvePositionConstraints_s_PA);
          var PB = b2Vec2.MulSV(-this.m_ratio * impulse, uB, b2PulleyJoint.SolvePositionConstraints_s_PB);
          cA.SelfMulAdd(this.m_invMassA, PA);
          aA += this.m_invIA * b2Vec2.CrossVV(rA, PA);
          cB.SelfMulAdd(this.m_invMassB, PB);
          aB += this.m_invIB * b2Vec2.CrossVV(rB, PB);
          data.positions[this.m_indexA].a = aA;
          data.positions[this.m_indexB].a = aB;
          return linearError < b2_linearSlop;
        };
        b2PulleyJoint.prototype.GetAnchorA = function(out) {
          return this.m_bodyA.GetWorldPoint(this.m_localAnchorA, out);
        };
        b2PulleyJoint.prototype.GetAnchorB = function(out) {
          return this.m_bodyB.GetWorldPoint(this.m_localAnchorB, out);
        };
        b2PulleyJoint.prototype.GetReactionForce = function(inv_dt, out) {
          out.x = inv_dt * this.m_impulse * this.m_uB.x;
          out.y = inv_dt * this.m_impulse * this.m_uB.y;
          return out;
        };
        b2PulleyJoint.prototype.GetReactionTorque = function(inv_dt) {
          return 0;
        };
        b2PulleyJoint.prototype.GetGroundAnchorA = function() {
          return this.m_groundAnchorA;
        };
        b2PulleyJoint.prototype.GetGroundAnchorB = function() {
          return this.m_groundAnchorB;
        };
        b2PulleyJoint.prototype.GetLengthA = function() {
          return this.m_lengthA;
        };
        b2PulleyJoint.prototype.GetLengthB = function() {
          return this.m_lengthB;
        };
        b2PulleyJoint.prototype.GetRatio = function() {
          return this.m_ratio;
        };
        b2PulleyJoint.prototype.GetCurrentLengthA = function() {
          var p = this.m_bodyA.GetWorldPoint(this.m_localAnchorA, b2PulleyJoint.GetCurrentLengthA_s_p);
          var s = this.m_groundAnchorA;
          return b2Vec2.DistanceVV(p, s);
        };
        b2PulleyJoint.prototype.GetCurrentLengthB = function() {
          var p = this.m_bodyB.GetWorldPoint(this.m_localAnchorB, b2PulleyJoint.GetCurrentLengthB_s_p);
          var s = this.m_groundAnchorB;
          return b2Vec2.DistanceVV(p, s);
        };
        b2PulleyJoint.prototype.Dump = function(log) {
          var indexA = this.m_bodyA.m_islandIndex;
          var indexB = this.m_bodyB.m_islandIndex;
          log("  const jd: b2PulleyJointDef = new b2PulleyJointDef();\n");
          log("  jd.bodyA = bodies[%d];\n", indexA);
          log("  jd.bodyB = bodies[%d];\n", indexB);
          log("  jd.collideConnected = %s;\n", this.m_collideConnected ? "true" : "false");
          log("  jd.groundAnchorA.Set(%.15f, %.15f);\n", this.m_groundAnchorA.x, this.m_groundAnchorA.y);
          log("  jd.groundAnchorB.Set(%.15f, %.15f);\n", this.m_groundAnchorB.x, this.m_groundAnchorB.y);
          log("  jd.localAnchorA.Set(%.15f, %.15f);\n", this.m_localAnchorA.x, this.m_localAnchorA.y);
          log("  jd.localAnchorB.Set(%.15f, %.15f);\n", this.m_localAnchorB.x, this.m_localAnchorB.y);
          log("  jd.lengthA = %.15f;\n", this.m_lengthA);
          log("  jd.lengthB = %.15f;\n", this.m_lengthB);
          log("  jd.ratio = %.15f;\n", this.m_ratio);
          log("  joints[%d] = this.m_world.CreateJoint(jd);\n", this.m_index);
        };
        b2PulleyJoint.prototype.ShiftOrigin = function(newOrigin) {
          this.m_groundAnchorA.SelfSub(newOrigin);
          this.m_groundAnchorB.SelfSub(newOrigin);
        };
        b2PulleyJoint.InitVelocityConstraints_s_PA = new b2Vec2();
        b2PulleyJoint.InitVelocityConstraints_s_PB = new b2Vec2();
        b2PulleyJoint.SolveVelocityConstraints_s_vpA = new b2Vec2();
        b2PulleyJoint.SolveVelocityConstraints_s_vpB = new b2Vec2();
        b2PulleyJoint.SolveVelocityConstraints_s_PA = new b2Vec2();
        b2PulleyJoint.SolveVelocityConstraints_s_PB = new b2Vec2();
        b2PulleyJoint.SolvePositionConstraints_s_PA = new b2Vec2();
        b2PulleyJoint.SolvePositionConstraints_s_PB = new b2Vec2();
        b2PulleyJoint.GetCurrentLengthA_s_p = new b2Vec2();
        b2PulleyJoint.GetCurrentLengthB_s_p = new b2Vec2();
        return b2PulleyJoint;
      })(b2Joint);
      var b2RevoluteJointDef = (function(_super) {
        __extends(b2RevoluteJointDef, _super);
        function b2RevoluteJointDef() {
          var _this = _super.call(this, exports.b2JointType.e_revoluteJoint) || this;
          _this.localAnchorA = new b2Vec2(0, 0);
          _this.localAnchorB = new b2Vec2(0, 0);
          _this.referenceAngle = 0;
          _this.enableLimit = false;
          _this.lowerAngle = 0;
          _this.upperAngle = 0;
          _this.enableMotor = false;
          _this.motorSpeed = 0;
          _this.maxMotorTorque = 0;
          return _this;
        }
        b2RevoluteJointDef.prototype.Initialize = function(bA, bB, anchor) {
          this.bodyA = bA;
          this.bodyB = bB;
          this.bodyA.GetLocalPoint(anchor, this.localAnchorA);
          this.bodyB.GetLocalPoint(anchor, this.localAnchorB);
          this.referenceAngle = this.bodyB.GetAngle() - this.bodyA.GetAngle();
        };
        return b2RevoluteJointDef;
      })(b2JointDef);
      var b2RevoluteJoint = (function(_super) {
        __extends(b2RevoluteJoint, _super);
        function b2RevoluteJoint(def) {
          var _this = _super.call(this, def) || this;
          _this.m_localAnchorA = new b2Vec2();
          _this.m_localAnchorB = new b2Vec2();
          _this.m_impulse = new b2Vec3();
          _this.m_motorImpulse = 0;
          _this.m_enableMotor = false;
          _this.m_maxMotorTorque = 0;
          _this.m_motorSpeed = 0;
          _this.m_enableLimit = false;
          _this.m_referenceAngle = 0;
          _this.m_lowerAngle = 0;
          _this.m_upperAngle = 0;
          _this.m_indexA = 0;
          _this.m_indexB = 0;
          _this.m_rA = new b2Vec2();
          _this.m_rB = new b2Vec2();
          _this.m_localCenterA = new b2Vec2();
          _this.m_localCenterB = new b2Vec2();
          _this.m_invMassA = 0;
          _this.m_invMassB = 0;
          _this.m_invIA = 0;
          _this.m_invIB = 0;
          _this.m_mass = new b2Mat33();
          _this.m_motorMass = 0;
          _this.m_limitState = exports.b2LimitState.e_inactiveLimit;
          _this.m_qA = new b2Rot();
          _this.m_qB = new b2Rot();
          _this.m_lalcA = new b2Vec2();
          _this.m_lalcB = new b2Vec2();
          _this.m_K = new b2Mat22();
          _this.m_localAnchorA.Copy(b2Maybe(def.localAnchorA, b2Vec2.ZERO));
          _this.m_localAnchorB.Copy(b2Maybe(def.localAnchorB, b2Vec2.ZERO));
          _this.m_referenceAngle = b2Maybe(def.referenceAngle, 0);
          _this.m_impulse.SetZero();
          _this.m_motorImpulse = 0;
          _this.m_lowerAngle = b2Maybe(def.lowerAngle, 0);
          _this.m_upperAngle = b2Maybe(def.upperAngle, 0);
          _this.m_maxMotorTorque = b2Maybe(def.maxMotorTorque, 0);
          _this.m_motorSpeed = b2Maybe(def.motorSpeed, 0);
          _this.m_enableLimit = b2Maybe(def.enableLimit, false);
          _this.m_enableMotor = b2Maybe(def.enableMotor, false);
          _this.m_limitState = exports.b2LimitState.e_inactiveLimit;
          return _this;
        }
        b2RevoluteJoint.prototype.InitVelocityConstraints = function(data) {
          this.m_indexA = this.m_bodyA.m_islandIndex;
          this.m_indexB = this.m_bodyB.m_islandIndex;
          this.m_localCenterA.Copy(this.m_bodyA.m_sweep.localCenter);
          this.m_localCenterB.Copy(this.m_bodyB.m_sweep.localCenter);
          this.m_invMassA = this.m_bodyA.m_invMass;
          this.m_invMassB = this.m_bodyB.m_invMass;
          this.m_invIA = this.m_bodyA.m_invI;
          this.m_invIB = this.m_bodyB.m_invI;
          var aA = data.positions[this.m_indexA].a;
          var vA = data.velocities[this.m_indexA].v;
          var wA = data.velocities[this.m_indexA].w;
          var aB = data.positions[this.m_indexB].a;
          var vB = data.velocities[this.m_indexB].v;
          var wB = data.velocities[this.m_indexB].w;
          var qA = this.m_qA.SetAngle(aA), qB = this.m_qB.SetAngle(aB);
          b2Vec2.SubVV(this.m_localAnchorA, this.m_localCenterA, this.m_lalcA);
          b2Rot.MulRV(qA, this.m_lalcA, this.m_rA);
          b2Vec2.SubVV(this.m_localAnchorB, this.m_localCenterB, this.m_lalcB);
          b2Rot.MulRV(qB, this.m_lalcB, this.m_rB);
          var mA = this.m_invMassA, mB = this.m_invMassB;
          var iA = this.m_invIA, iB = this.m_invIB;
          var fixedRotation = iA + iB === 0;
          this.m_mass.ex.x = mA + mB + this.m_rA.y * this.m_rA.y * iA + this.m_rB.y * this.m_rB.y * iB;
          this.m_mass.ey.x = -this.m_rA.y * this.m_rA.x * iA - this.m_rB.y * this.m_rB.x * iB;
          this.m_mass.ez.x = -this.m_rA.y * iA - this.m_rB.y * iB;
          this.m_mass.ex.y = this.m_mass.ey.x;
          this.m_mass.ey.y = mA + mB + this.m_rA.x * this.m_rA.x * iA + this.m_rB.x * this.m_rB.x * iB;
          this.m_mass.ez.y = this.m_rA.x * iA + this.m_rB.x * iB;
          this.m_mass.ex.z = this.m_mass.ez.x;
          this.m_mass.ey.z = this.m_mass.ez.y;
          this.m_mass.ez.z = iA + iB;
          this.m_motorMass = iA + iB;
          this.m_motorMass > 0 && (this.m_motorMass = 1 / this.m_motorMass);
          this.m_enableMotor && !fixedRotation || (this.m_motorImpulse = 0);
          if (this.m_enableLimit && !fixedRotation) {
            var jointAngle = aB - aA - this.m_referenceAngle;
            if (b2Abs(this.m_upperAngle - this.m_lowerAngle) < 2 * b2_angularSlop) this.m_limitState = exports.b2LimitState.e_equalLimits; else if (jointAngle <= this.m_lowerAngle) {
              this.m_limitState !== exports.b2LimitState.e_atLowerLimit && (this.m_impulse.z = 0);
              this.m_limitState = exports.b2LimitState.e_atLowerLimit;
            } else if (jointAngle >= this.m_upperAngle) {
              this.m_limitState !== exports.b2LimitState.e_atUpperLimit && (this.m_impulse.z = 0);
              this.m_limitState = exports.b2LimitState.e_atUpperLimit;
            } else {
              this.m_limitState = exports.b2LimitState.e_inactiveLimit;
              this.m_impulse.z = 0;
            }
          } else this.m_limitState = exports.b2LimitState.e_inactiveLimit;
          if (data.step.warmStarting) {
            this.m_impulse.SelfMul(data.step.dtRatio);
            this.m_motorImpulse *= data.step.dtRatio;
            var P = b2RevoluteJoint.InitVelocityConstraints_s_P.Set(this.m_impulse.x, this.m_impulse.y);
            vA.SelfMulSub(mA, P);
            wA -= iA * (b2Vec2.CrossVV(this.m_rA, P) + this.m_motorImpulse + this.m_impulse.z);
            vB.SelfMulAdd(mB, P);
            wB += iB * (b2Vec2.CrossVV(this.m_rB, P) + this.m_motorImpulse + this.m_impulse.z);
          } else {
            this.m_impulse.SetZero();
            this.m_motorImpulse = 0;
          }
          data.velocities[this.m_indexA].w = wA;
          data.velocities[this.m_indexB].w = wB;
        };
        b2RevoluteJoint.prototype.SolveVelocityConstraints = function(data) {
          var vA = data.velocities[this.m_indexA].v;
          var wA = data.velocities[this.m_indexA].w;
          var vB = data.velocities[this.m_indexB].v;
          var wB = data.velocities[this.m_indexB].w;
          var mA = this.m_invMassA, mB = this.m_invMassB;
          var iA = this.m_invIA, iB = this.m_invIB;
          var fixedRotation = iA + iB === 0;
          if (this.m_enableMotor && this.m_limitState !== exports.b2LimitState.e_equalLimits && !fixedRotation) {
            var Cdot = wB - wA - this.m_motorSpeed;
            var impulse = -this.m_motorMass * Cdot;
            var oldImpulse = this.m_motorImpulse;
            var maxImpulse = data.step.dt * this.m_maxMotorTorque;
            this.m_motorImpulse = b2Clamp(this.m_motorImpulse + impulse, -maxImpulse, maxImpulse);
            impulse = this.m_motorImpulse - oldImpulse;
            wA -= iA * impulse;
            wB += iB * impulse;
          }
          if (this.m_enableLimit && this.m_limitState !== exports.b2LimitState.e_inactiveLimit && !fixedRotation) {
            var Cdot1 = b2Vec2.SubVV(b2Vec2.AddVCrossSV(vB, wB, this.m_rB, b2Vec2.s_t0), b2Vec2.AddVCrossSV(vA, wA, this.m_rA, b2Vec2.s_t1), b2RevoluteJoint.SolveVelocityConstraints_s_Cdot1);
            var Cdot2 = wB - wA;
            var impulse_v3 = this.m_mass.Solve33(Cdot1.x, Cdot1.y, Cdot2, b2RevoluteJoint.SolveVelocityConstraints_s_impulse_v3).SelfNeg();
            if (this.m_limitState === exports.b2LimitState.e_equalLimits) this.m_impulse.SelfAdd(impulse_v3); else if (this.m_limitState === exports.b2LimitState.e_atLowerLimit) {
              var newImpulse = this.m_impulse.z + impulse_v3.z;
              if (newImpulse < 0) {
                var rhs_x = -Cdot1.x + this.m_impulse.z * this.m_mass.ez.x;
                var rhs_y = -Cdot1.y + this.m_impulse.z * this.m_mass.ez.y;
                var reduced_v2 = this.m_mass.Solve22(rhs_x, rhs_y, b2RevoluteJoint.SolveVelocityConstraints_s_reduced_v2);
                impulse_v3.x = reduced_v2.x;
                impulse_v3.y = reduced_v2.y;
                impulse_v3.z = -this.m_impulse.z;
                this.m_impulse.x += reduced_v2.x;
                this.m_impulse.y += reduced_v2.y;
                this.m_impulse.z = 0;
              } else this.m_impulse.SelfAdd(impulse_v3);
            } else if (this.m_limitState === exports.b2LimitState.e_atUpperLimit) {
              var newImpulse = this.m_impulse.z + impulse_v3.z;
              if (newImpulse > 0) {
                var rhs_x = -Cdot1.x + this.m_impulse.z * this.m_mass.ez.x;
                var rhs_y = -Cdot1.y + this.m_impulse.z * this.m_mass.ez.y;
                var reduced_v2 = this.m_mass.Solve22(rhs_x, rhs_y, b2RevoluteJoint.SolveVelocityConstraints_s_reduced_v2);
                impulse_v3.x = reduced_v2.x;
                impulse_v3.y = reduced_v2.y;
                impulse_v3.z = -this.m_impulse.z;
                this.m_impulse.x += reduced_v2.x;
                this.m_impulse.y += reduced_v2.y;
                this.m_impulse.z = 0;
              } else this.m_impulse.SelfAdd(impulse_v3);
            }
            var P = b2RevoluteJoint.SolveVelocityConstraints_s_P.Set(impulse_v3.x, impulse_v3.y);
            vA.SelfMulSub(mA, P);
            wA -= iA * (b2Vec2.CrossVV(this.m_rA, P) + impulse_v3.z);
            vB.SelfMulAdd(mB, P);
            wB += iB * (b2Vec2.CrossVV(this.m_rB, P) + impulse_v3.z);
          } else {
            var Cdot_v2 = b2Vec2.SubVV(b2Vec2.AddVCrossSV(vB, wB, this.m_rB, b2Vec2.s_t0), b2Vec2.AddVCrossSV(vA, wA, this.m_rA, b2Vec2.s_t1), b2RevoluteJoint.SolveVelocityConstraints_s_Cdot_v2);
            var impulse_v2 = this.m_mass.Solve22(-Cdot_v2.x, -Cdot_v2.y, b2RevoluteJoint.SolveVelocityConstraints_s_impulse_v2);
            this.m_impulse.x += impulse_v2.x;
            this.m_impulse.y += impulse_v2.y;
            vA.SelfMulSub(mA, impulse_v2);
            wA -= iA * b2Vec2.CrossVV(this.m_rA, impulse_v2);
            vB.SelfMulAdd(mB, impulse_v2);
            wB += iB * b2Vec2.CrossVV(this.m_rB, impulse_v2);
          }
          data.velocities[this.m_indexA].w = wA;
          data.velocities[this.m_indexB].w = wB;
        };
        b2RevoluteJoint.prototype.SolvePositionConstraints = function(data) {
          var cA = data.positions[this.m_indexA].c;
          var aA = data.positions[this.m_indexA].a;
          var cB = data.positions[this.m_indexB].c;
          var aB = data.positions[this.m_indexB].a;
          var qA = this.m_qA.SetAngle(aA), qB = this.m_qB.SetAngle(aB);
          var angularError = 0;
          var positionError = 0;
          var fixedRotation = this.m_invIA + this.m_invIB === 0;
          if (this.m_enableLimit && this.m_limitState !== exports.b2LimitState.e_inactiveLimit && !fixedRotation) {
            var angle = aB - aA - this.m_referenceAngle;
            var limitImpulse = 0;
            if (this.m_limitState === exports.b2LimitState.e_equalLimits) {
              var C = b2Clamp(angle - this.m_lowerAngle, -b2_maxAngularCorrection, b2_maxAngularCorrection);
              limitImpulse = -this.m_motorMass * C;
              angularError = b2Abs(C);
            } else if (this.m_limitState === exports.b2LimitState.e_atLowerLimit) {
              var C = angle - this.m_lowerAngle;
              angularError = -C;
              C = b2Clamp(C + b2_angularSlop, -b2_maxAngularCorrection, 0);
              limitImpulse = -this.m_motorMass * C;
            } else if (this.m_limitState === exports.b2LimitState.e_atUpperLimit) {
              var C = angle - this.m_upperAngle;
              angularError = C;
              C = b2Clamp(C - b2_angularSlop, 0, b2_maxAngularCorrection);
              limitImpulse = -this.m_motorMass * C;
            }
            aA -= this.m_invIA * limitImpulse;
            aB += this.m_invIB * limitImpulse;
          }
          qA.SetAngle(aA);
          qB.SetAngle(aB);
          b2Vec2.SubVV(this.m_localAnchorA, this.m_localCenterA, this.m_lalcA);
          var rA = b2Rot.MulRV(qA, this.m_lalcA, this.m_rA);
          b2Vec2.SubVV(this.m_localAnchorB, this.m_localCenterB, this.m_lalcB);
          var rB = b2Rot.MulRV(qB, this.m_lalcB, this.m_rB);
          var C_v2 = b2Vec2.SubVV(b2Vec2.AddVV(cB, rB, b2Vec2.s_t0), b2Vec2.AddVV(cA, rA, b2Vec2.s_t1), b2RevoluteJoint.SolvePositionConstraints_s_C_v2);
          positionError = C_v2.Length();
          var mA = this.m_invMassA, mB = this.m_invMassB;
          var iA = this.m_invIA, iB = this.m_invIB;
          var K = this.m_K;
          K.ex.x = mA + mB + iA * rA.y * rA.y + iB * rB.y * rB.y;
          K.ex.y = -iA * rA.x * rA.y - iB * rB.x * rB.y;
          K.ey.x = K.ex.y;
          K.ey.y = mA + mB + iA * rA.x * rA.x + iB * rB.x * rB.x;
          var impulse = K.Solve(C_v2.x, C_v2.y, b2RevoluteJoint.SolvePositionConstraints_s_impulse).SelfNeg();
          cA.SelfMulSub(mA, impulse);
          aA -= iA * b2Vec2.CrossVV(rA, impulse);
          cB.SelfMulAdd(mB, impulse);
          aB += iB * b2Vec2.CrossVV(rB, impulse);
          data.positions[this.m_indexA].a = aA;
          data.positions[this.m_indexB].a = aB;
          return positionError <= b2_linearSlop && angularError <= b2_angularSlop;
        };
        b2RevoluteJoint.prototype.GetAnchorA = function(out) {
          return this.m_bodyA.GetWorldPoint(this.m_localAnchorA, out);
        };
        b2RevoluteJoint.prototype.GetAnchorB = function(out) {
          return this.m_bodyB.GetWorldPoint(this.m_localAnchorB, out);
        };
        b2RevoluteJoint.prototype.GetReactionForce = function(inv_dt, out) {
          out.x = inv_dt * this.m_impulse.x;
          out.y = inv_dt * this.m_impulse.y;
          return out;
        };
        b2RevoluteJoint.prototype.GetReactionTorque = function(inv_dt) {
          return inv_dt * this.m_impulse.z;
        };
        b2RevoluteJoint.prototype.GetLocalAnchorA = function() {
          return this.m_localAnchorA;
        };
        b2RevoluteJoint.prototype.GetLocalAnchorB = function() {
          return this.m_localAnchorB;
        };
        b2RevoluteJoint.prototype.GetReferenceAngle = function() {
          return this.m_referenceAngle;
        };
        b2RevoluteJoint.prototype.GetJointAngle = function() {
          return this.m_bodyB.m_sweep.a - this.m_bodyA.m_sweep.a - this.m_referenceAngle;
        };
        b2RevoluteJoint.prototype.GetJointSpeed = function() {
          return this.m_bodyB.m_angularVelocity - this.m_bodyA.m_angularVelocity;
        };
        b2RevoluteJoint.prototype.IsMotorEnabled = function() {
          return this.m_enableMotor;
        };
        b2RevoluteJoint.prototype.EnableMotor = function(flag) {
          if (flag !== this.m_enableMotor) {
            this.m_bodyA.SetAwake(true);
            this.m_bodyB.SetAwake(true);
            this.m_enableMotor = flag;
          }
        };
        b2RevoluteJoint.prototype.GetMotorTorque = function(inv_dt) {
          return inv_dt * this.m_motorImpulse;
        };
        b2RevoluteJoint.prototype.GetMotorSpeed = function() {
          return this.m_motorSpeed;
        };
        b2RevoluteJoint.prototype.SetMaxMotorTorque = function(torque) {
          if (torque !== this.m_maxMotorTorque) {
            this.m_bodyA.SetAwake(true);
            this.m_bodyB.SetAwake(true);
            this.m_maxMotorTorque = torque;
          }
        };
        b2RevoluteJoint.prototype.GetMaxMotorTorque = function() {
          return this.m_maxMotorTorque;
        };
        b2RevoluteJoint.prototype.IsLimitEnabled = function() {
          return this.m_enableLimit;
        };
        b2RevoluteJoint.prototype.EnableLimit = function(flag) {
          if (flag !== this.m_enableLimit) {
            this.m_bodyA.SetAwake(true);
            this.m_bodyB.SetAwake(true);
            this.m_enableLimit = flag;
            this.m_impulse.z = 0;
          }
        };
        b2RevoluteJoint.prototype.GetLowerLimit = function() {
          return this.m_lowerAngle;
        };
        b2RevoluteJoint.prototype.GetUpperLimit = function() {
          return this.m_upperAngle;
        };
        b2RevoluteJoint.prototype.SetLimits = function(lower, upper) {
          if (lower !== this.m_lowerAngle || upper !== this.m_upperAngle) {
            this.m_bodyA.SetAwake(true);
            this.m_bodyB.SetAwake(true);
            this.m_impulse.z = 0;
            this.m_lowerAngle = lower;
            this.m_upperAngle = upper;
          }
        };
        b2RevoluteJoint.prototype.SetMotorSpeed = function(speed) {
          if (speed !== this.m_motorSpeed) {
            this.m_bodyA.SetAwake(true);
            this.m_bodyB.SetAwake(true);
            this.m_motorSpeed = speed;
          }
        };
        b2RevoluteJoint.prototype.Dump = function(log) {
          var indexA = this.m_bodyA.m_islandIndex;
          var indexB = this.m_bodyB.m_islandIndex;
          log("  const jd: b2RevoluteJointDef = new b2RevoluteJointDef();\n");
          log("  jd.bodyA = bodies[%d];\n", indexA);
          log("  jd.bodyB = bodies[%d];\n", indexB);
          log("  jd.collideConnected = %s;\n", this.m_collideConnected ? "true" : "false");
          log("  jd.localAnchorA.Set(%.15f, %.15f);\n", this.m_localAnchorA.x, this.m_localAnchorA.y);
          log("  jd.localAnchorB.Set(%.15f, %.15f);\n", this.m_localAnchorB.x, this.m_localAnchorB.y);
          log("  jd.referenceAngle = %.15f;\n", this.m_referenceAngle);
          log("  jd.enableLimit = %s;\n", this.m_enableLimit ? "true" : "false");
          log("  jd.lowerAngle = %.15f;\n", this.m_lowerAngle);
          log("  jd.upperAngle = %.15f;\n", this.m_upperAngle);
          log("  jd.enableMotor = %s;\n", this.m_enableMotor ? "true" : "false");
          log("  jd.motorSpeed = %.15f;\n", this.m_motorSpeed);
          log("  jd.maxMotorTorque = %.15f;\n", this.m_maxMotorTorque);
          log("  joints[%d] = this.m_world.CreateJoint(jd);\n", this.m_index);
        };
        b2RevoluteJoint.InitVelocityConstraints_s_P = new b2Vec2();
        b2RevoluteJoint.SolveVelocityConstraints_s_P = new b2Vec2();
        b2RevoluteJoint.SolveVelocityConstraints_s_Cdot_v2 = new b2Vec2();
        b2RevoluteJoint.SolveVelocityConstraints_s_Cdot1 = new b2Vec2();
        b2RevoluteJoint.SolveVelocityConstraints_s_impulse_v3 = new b2Vec3();
        b2RevoluteJoint.SolveVelocityConstraints_s_reduced_v2 = new b2Vec2();
        b2RevoluteJoint.SolveVelocityConstraints_s_impulse_v2 = new b2Vec2();
        b2RevoluteJoint.SolvePositionConstraints_s_C_v2 = new b2Vec2();
        b2RevoluteJoint.SolvePositionConstraints_s_impulse = new b2Vec2();
        return b2RevoluteJoint;
      })(b2Joint);
      var b2RopeJointDef = (function(_super) {
        __extends(b2RopeJointDef, _super);
        function b2RopeJointDef() {
          var _this = _super.call(this, exports.b2JointType.e_ropeJoint) || this;
          _this.localAnchorA = new b2Vec2(-1, 0);
          _this.localAnchorB = new b2Vec2(1, 0);
          _this.maxLength = 0;
          return _this;
        }
        return b2RopeJointDef;
      })(b2JointDef);
      var b2RopeJoint = (function(_super) {
        __extends(b2RopeJoint, _super);
        function b2RopeJoint(def) {
          var _this = _super.call(this, def) || this;
          _this.m_localAnchorA = new b2Vec2();
          _this.m_localAnchorB = new b2Vec2();
          _this.m_maxLength = 0;
          _this.m_length = 0;
          _this.m_impulse = 0;
          _this.m_indexA = 0;
          _this.m_indexB = 0;
          _this.m_u = new b2Vec2();
          _this.m_rA = new b2Vec2();
          _this.m_rB = new b2Vec2();
          _this.m_localCenterA = new b2Vec2();
          _this.m_localCenterB = new b2Vec2();
          _this.m_invMassA = 0;
          _this.m_invMassB = 0;
          _this.m_invIA = 0;
          _this.m_invIB = 0;
          _this.m_mass = 0;
          _this.m_state = exports.b2LimitState.e_inactiveLimit;
          _this.m_qA = new b2Rot();
          _this.m_qB = new b2Rot();
          _this.m_lalcA = new b2Vec2();
          _this.m_lalcB = new b2Vec2();
          _this.m_localAnchorA.Copy(b2Maybe(def.localAnchorA, new b2Vec2(-1, 0)));
          _this.m_localAnchorB.Copy(b2Maybe(def.localAnchorB, new b2Vec2(1, 0)));
          _this.m_maxLength = b2Maybe(def.maxLength, 0);
          return _this;
        }
        b2RopeJoint.prototype.InitVelocityConstraints = function(data) {
          this.m_indexA = this.m_bodyA.m_islandIndex;
          this.m_indexB = this.m_bodyB.m_islandIndex;
          this.m_localCenterA.Copy(this.m_bodyA.m_sweep.localCenter);
          this.m_localCenterB.Copy(this.m_bodyB.m_sweep.localCenter);
          this.m_invMassA = this.m_bodyA.m_invMass;
          this.m_invMassB = this.m_bodyB.m_invMass;
          this.m_invIA = this.m_bodyA.m_invI;
          this.m_invIB = this.m_bodyB.m_invI;
          var cA = data.positions[this.m_indexA].c;
          var aA = data.positions[this.m_indexA].a;
          var vA = data.velocities[this.m_indexA].v;
          var wA = data.velocities[this.m_indexA].w;
          var cB = data.positions[this.m_indexB].c;
          var aB = data.positions[this.m_indexB].a;
          var vB = data.velocities[this.m_indexB].v;
          var wB = data.velocities[this.m_indexB].w;
          var qA = this.m_qA.SetAngle(aA), qB = this.m_qB.SetAngle(aB);
          b2Vec2.SubVV(this.m_localAnchorA, this.m_localCenterA, this.m_lalcA);
          b2Rot.MulRV(qA, this.m_lalcA, this.m_rA);
          b2Vec2.SubVV(this.m_localAnchorB, this.m_localCenterB, this.m_lalcB);
          b2Rot.MulRV(qB, this.m_lalcB, this.m_rB);
          this.m_u.Copy(cB).SelfAdd(this.m_rB).SelfSub(cA).SelfSub(this.m_rA);
          this.m_length = this.m_u.Length();
          var C = this.m_length - this.m_maxLength;
          this.m_state = C > 0 ? exports.b2LimitState.e_atUpperLimit : exports.b2LimitState.e_inactiveLimit;
          if (!(this.m_length > b2_linearSlop)) {
            this.m_u.SetZero();
            this.m_mass = 0;
            this.m_impulse = 0;
            return;
          }
          this.m_u.SelfMul(1 / this.m_length);
          var crA = b2Vec2.CrossVV(this.m_rA, this.m_u);
          var crB = b2Vec2.CrossVV(this.m_rB, this.m_u);
          var invMass = this.m_invMassA + this.m_invIA * crA * crA + this.m_invMassB + this.m_invIB * crB * crB;
          this.m_mass = 0 !== invMass ? 1 / invMass : 0;
          if (data.step.warmStarting) {
            this.m_impulse *= data.step.dtRatio;
            var P = b2Vec2.MulSV(this.m_impulse, this.m_u, b2RopeJoint.InitVelocityConstraints_s_P);
            vA.SelfMulSub(this.m_invMassA, P);
            wA -= this.m_invIA * b2Vec2.CrossVV(this.m_rA, P);
            vB.SelfMulAdd(this.m_invMassB, P);
            wB += this.m_invIB * b2Vec2.CrossVV(this.m_rB, P);
          } else this.m_impulse = 0;
          data.velocities[this.m_indexA].w = wA;
          data.velocities[this.m_indexB].w = wB;
        };
        b2RopeJoint.prototype.SolveVelocityConstraints = function(data) {
          var vA = data.velocities[this.m_indexA].v;
          var wA = data.velocities[this.m_indexA].w;
          var vB = data.velocities[this.m_indexB].v;
          var wB = data.velocities[this.m_indexB].w;
          var vpA = b2Vec2.AddVCrossSV(vA, wA, this.m_rA, b2RopeJoint.SolveVelocityConstraints_s_vpA);
          var vpB = b2Vec2.AddVCrossSV(vB, wB, this.m_rB, b2RopeJoint.SolveVelocityConstraints_s_vpB);
          var C = this.m_length - this.m_maxLength;
          var Cdot = b2Vec2.DotVV(this.m_u, b2Vec2.SubVV(vpB, vpA, b2Vec2.s_t0));
          C < 0 && (Cdot += data.step.inv_dt * C);
          var impulse = -this.m_mass * Cdot;
          var oldImpulse = this.m_impulse;
          this.m_impulse = b2Min(0, this.m_impulse + impulse);
          impulse = this.m_impulse - oldImpulse;
          var P = b2Vec2.MulSV(impulse, this.m_u, b2RopeJoint.SolveVelocityConstraints_s_P);
          vA.SelfMulSub(this.m_invMassA, P);
          wA -= this.m_invIA * b2Vec2.CrossVV(this.m_rA, P);
          vB.SelfMulAdd(this.m_invMassB, P);
          wB += this.m_invIB * b2Vec2.CrossVV(this.m_rB, P);
          data.velocities[this.m_indexA].w = wA;
          data.velocities[this.m_indexB].w = wB;
        };
        b2RopeJoint.prototype.SolvePositionConstraints = function(data) {
          var cA = data.positions[this.m_indexA].c;
          var aA = data.positions[this.m_indexA].a;
          var cB = data.positions[this.m_indexB].c;
          var aB = data.positions[this.m_indexB].a;
          var qA = this.m_qA.SetAngle(aA), qB = this.m_qB.SetAngle(aB);
          b2Vec2.SubVV(this.m_localAnchorA, this.m_localCenterA, this.m_lalcA);
          var rA = b2Rot.MulRV(qA, this.m_lalcA, this.m_rA);
          b2Vec2.SubVV(this.m_localAnchorB, this.m_localCenterB, this.m_lalcB);
          var rB = b2Rot.MulRV(qB, this.m_lalcB, this.m_rB);
          var u = this.m_u.Copy(cB).SelfAdd(rB).SelfSub(cA).SelfSub(rA);
          var length = u.Normalize();
          var C = length - this.m_maxLength;
          C = b2Clamp(C, 0, b2_maxLinearCorrection);
          var impulse = -this.m_mass * C;
          var P = b2Vec2.MulSV(impulse, u, b2RopeJoint.SolvePositionConstraints_s_P);
          cA.SelfMulSub(this.m_invMassA, P);
          aA -= this.m_invIA * b2Vec2.CrossVV(rA, P);
          cB.SelfMulAdd(this.m_invMassB, P);
          aB += this.m_invIB * b2Vec2.CrossVV(rB, P);
          data.positions[this.m_indexA].a = aA;
          data.positions[this.m_indexB].a = aB;
          return length - this.m_maxLength < b2_linearSlop;
        };
        b2RopeJoint.prototype.GetAnchorA = function(out) {
          return this.m_bodyA.GetWorldPoint(this.m_localAnchorA, out);
        };
        b2RopeJoint.prototype.GetAnchorB = function(out) {
          return this.m_bodyB.GetWorldPoint(this.m_localAnchorB, out);
        };
        b2RopeJoint.prototype.GetReactionForce = function(inv_dt, out) {
          return b2Vec2.MulSV(inv_dt * this.m_impulse, this.m_u, out);
        };
        b2RopeJoint.prototype.GetReactionTorque = function(inv_dt) {
          return 0;
        };
        b2RopeJoint.prototype.GetLocalAnchorA = function() {
          return this.m_localAnchorA;
        };
        b2RopeJoint.prototype.GetLocalAnchorB = function() {
          return this.m_localAnchorB;
        };
        b2RopeJoint.prototype.SetMaxLength = function(length) {
          this.m_maxLength = length;
        };
        b2RopeJoint.prototype.GetMaxLength = function() {
          return this.m_maxLength;
        };
        b2RopeJoint.prototype.GetLimitState = function() {
          return this.m_state;
        };
        b2RopeJoint.prototype.Dump = function(log) {
          var indexA = this.m_bodyA.m_islandIndex;
          var indexB = this.m_bodyB.m_islandIndex;
          log("  const jd: b2RopeJointDef = new b2RopeJointDef();\n");
          log("  jd.bodyA = bodies[%d];\n", indexA);
          log("  jd.bodyB = bodies[%d];\n", indexB);
          log("  jd.collideConnected = %s;\n", this.m_collideConnected ? "true" : "false");
          log("  jd.localAnchorA.Set(%.15f, %.15f);\n", this.m_localAnchorA.x, this.m_localAnchorA.y);
          log("  jd.localAnchorB.Set(%.15f, %.15f);\n", this.m_localAnchorB.x, this.m_localAnchorB.y);
          log("  jd.maxLength = %.15f;\n", this.m_maxLength);
          log("  joints[%d] = this.m_world.CreateJoint(jd);\n", this.m_index);
        };
        b2RopeJoint.InitVelocityConstraints_s_P = new b2Vec2();
        b2RopeJoint.SolveVelocityConstraints_s_vpA = new b2Vec2();
        b2RopeJoint.SolveVelocityConstraints_s_vpB = new b2Vec2();
        b2RopeJoint.SolveVelocityConstraints_s_P = new b2Vec2();
        b2RopeJoint.SolvePositionConstraints_s_P = new b2Vec2();
        return b2RopeJoint;
      })(b2Joint);
      var b2WeldJointDef = (function(_super) {
        __extends(b2WeldJointDef, _super);
        function b2WeldJointDef() {
          var _this = _super.call(this, exports.b2JointType.e_weldJoint) || this;
          _this.localAnchorA = new b2Vec2();
          _this.localAnchorB = new b2Vec2();
          _this.referenceAngle = 0;
          _this.frequencyHz = 0;
          _this.dampingRatio = 0;
          return _this;
        }
        b2WeldJointDef.prototype.Initialize = function(bA, bB, anchor) {
          this.bodyA = bA;
          this.bodyB = bB;
          this.bodyA.GetLocalPoint(anchor, this.localAnchorA);
          this.bodyB.GetLocalPoint(anchor, this.localAnchorB);
          this.referenceAngle = this.bodyB.GetAngle() - this.bodyA.GetAngle();
        };
        return b2WeldJointDef;
      })(b2JointDef);
      var b2WeldJoint = (function(_super) {
        __extends(b2WeldJoint, _super);
        function b2WeldJoint(def) {
          var _this = _super.call(this, def) || this;
          _this.m_frequencyHz = 0;
          _this.m_dampingRatio = 0;
          _this.m_bias = 0;
          _this.m_localAnchorA = new b2Vec2();
          _this.m_localAnchorB = new b2Vec2();
          _this.m_referenceAngle = 0;
          _this.m_gamma = 0;
          _this.m_impulse = new b2Vec3(0, 0, 0);
          _this.m_indexA = 0;
          _this.m_indexB = 0;
          _this.m_rA = new b2Vec2();
          _this.m_rB = new b2Vec2();
          _this.m_localCenterA = new b2Vec2();
          _this.m_localCenterB = new b2Vec2();
          _this.m_invMassA = 0;
          _this.m_invMassB = 0;
          _this.m_invIA = 0;
          _this.m_invIB = 0;
          _this.m_mass = new b2Mat33();
          _this.m_qA = new b2Rot();
          _this.m_qB = new b2Rot();
          _this.m_lalcA = new b2Vec2();
          _this.m_lalcB = new b2Vec2();
          _this.m_K = new b2Mat33();
          _this.m_frequencyHz = b2Maybe(def.frequencyHz, 0);
          _this.m_dampingRatio = b2Maybe(def.dampingRatio, 0);
          _this.m_localAnchorA.Copy(b2Maybe(def.localAnchorA, b2Vec2.ZERO));
          _this.m_localAnchorB.Copy(b2Maybe(def.localAnchorB, b2Vec2.ZERO));
          _this.m_referenceAngle = b2Maybe(def.referenceAngle, 0);
          _this.m_impulse.SetZero();
          return _this;
        }
        b2WeldJoint.prototype.InitVelocityConstraints = function(data) {
          this.m_indexA = this.m_bodyA.m_islandIndex;
          this.m_indexB = this.m_bodyB.m_islandIndex;
          this.m_localCenterA.Copy(this.m_bodyA.m_sweep.localCenter);
          this.m_localCenterB.Copy(this.m_bodyB.m_sweep.localCenter);
          this.m_invMassA = this.m_bodyA.m_invMass;
          this.m_invMassB = this.m_bodyB.m_invMass;
          this.m_invIA = this.m_bodyA.m_invI;
          this.m_invIB = this.m_bodyB.m_invI;
          var aA = data.positions[this.m_indexA].a;
          var vA = data.velocities[this.m_indexA].v;
          var wA = data.velocities[this.m_indexA].w;
          var aB = data.positions[this.m_indexB].a;
          var vB = data.velocities[this.m_indexB].v;
          var wB = data.velocities[this.m_indexB].w;
          var qA = this.m_qA.SetAngle(aA), qB = this.m_qB.SetAngle(aB);
          b2Vec2.SubVV(this.m_localAnchorA, this.m_localCenterA, this.m_lalcA);
          b2Rot.MulRV(qA, this.m_lalcA, this.m_rA);
          b2Vec2.SubVV(this.m_localAnchorB, this.m_localCenterB, this.m_lalcB);
          b2Rot.MulRV(qB, this.m_lalcB, this.m_rB);
          var mA = this.m_invMassA, mB = this.m_invMassB;
          var iA = this.m_invIA, iB = this.m_invIB;
          var K = this.m_K;
          K.ex.x = mA + mB + this.m_rA.y * this.m_rA.y * iA + this.m_rB.y * this.m_rB.y * iB;
          K.ey.x = -this.m_rA.y * this.m_rA.x * iA - this.m_rB.y * this.m_rB.x * iB;
          K.ez.x = -this.m_rA.y * iA - this.m_rB.y * iB;
          K.ex.y = K.ey.x;
          K.ey.y = mA + mB + this.m_rA.x * this.m_rA.x * iA + this.m_rB.x * this.m_rB.x * iB;
          K.ez.y = this.m_rA.x * iA + this.m_rB.x * iB;
          K.ex.z = K.ez.x;
          K.ey.z = K.ez.y;
          K.ez.z = iA + iB;
          if (this.m_frequencyHz > 0) {
            K.GetInverse22(this.m_mass);
            var invM = iA + iB;
            var m = invM > 0 ? 1 / invM : 0;
            var C = aB - aA - this.m_referenceAngle;
            var omega = 2 * b2_pi * this.m_frequencyHz;
            var d = 2 * m * this.m_dampingRatio * omega;
            var k = m * omega * omega;
            var h = data.step.dt;
            this.m_gamma = h * (d + h * k);
            this.m_gamma = 0 !== this.m_gamma ? 1 / this.m_gamma : 0;
            this.m_bias = C * h * k * this.m_gamma;
            invM += this.m_gamma;
            this.m_mass.ez.z = 0 !== invM ? 1 / invM : 0;
          } else {
            K.GetSymInverse33(this.m_mass);
            this.m_gamma = 0;
            this.m_bias = 0;
          }
          if (data.step.warmStarting) {
            this.m_impulse.SelfMul(data.step.dtRatio);
            var P = b2WeldJoint.InitVelocityConstraints_s_P.Set(this.m_impulse.x, this.m_impulse.y);
            vA.SelfMulSub(mA, P);
            wA -= iA * (b2Vec2.CrossVV(this.m_rA, P) + this.m_impulse.z);
            vB.SelfMulAdd(mB, P);
            wB += iB * (b2Vec2.CrossVV(this.m_rB, P) + this.m_impulse.z);
          } else this.m_impulse.SetZero();
          data.velocities[this.m_indexA].w = wA;
          data.velocities[this.m_indexB].w = wB;
        };
        b2WeldJoint.prototype.SolveVelocityConstraints = function(data) {
          var vA = data.velocities[this.m_indexA].v;
          var wA = data.velocities[this.m_indexA].w;
          var vB = data.velocities[this.m_indexB].v;
          var wB = data.velocities[this.m_indexB].w;
          var mA = this.m_invMassA, mB = this.m_invMassB;
          var iA = this.m_invIA, iB = this.m_invIB;
          if (this.m_frequencyHz > 0) {
            var Cdot2 = wB - wA;
            var impulse2 = -this.m_mass.ez.z * (Cdot2 + this.m_bias + this.m_gamma * this.m_impulse.z);
            this.m_impulse.z += impulse2;
            wA -= iA * impulse2;
            wB += iB * impulse2;
            var Cdot1 = b2Vec2.SubVV(b2Vec2.AddVCrossSV(vB, wB, this.m_rB, b2Vec2.s_t0), b2Vec2.AddVCrossSV(vA, wA, this.m_rA, b2Vec2.s_t1), b2WeldJoint.SolveVelocityConstraints_s_Cdot1);
            var impulse1 = b2Mat33.MulM33XY(this.m_mass, Cdot1.x, Cdot1.y, b2WeldJoint.SolveVelocityConstraints_s_impulse1).SelfNeg();
            this.m_impulse.x += impulse1.x;
            this.m_impulse.y += impulse1.y;
            var P = impulse1;
            vA.SelfMulSub(mA, P);
            wA -= iA * b2Vec2.CrossVV(this.m_rA, P);
            vB.SelfMulAdd(mB, P);
            wB += iB * b2Vec2.CrossVV(this.m_rB, P);
          } else {
            var Cdot1 = b2Vec2.SubVV(b2Vec2.AddVCrossSV(vB, wB, this.m_rB, b2Vec2.s_t0), b2Vec2.AddVCrossSV(vA, wA, this.m_rA, b2Vec2.s_t1), b2WeldJoint.SolveVelocityConstraints_s_Cdot1);
            var Cdot2 = wB - wA;
            var impulse = b2Mat33.MulM33XYZ(this.m_mass, Cdot1.x, Cdot1.y, Cdot2, b2WeldJoint.SolveVelocityConstraints_s_impulse).SelfNeg();
            this.m_impulse.SelfAdd(impulse);
            var P = b2WeldJoint.SolveVelocityConstraints_s_P.Set(impulse.x, impulse.y);
            vA.SelfMulSub(mA, P);
            wA -= iA * (b2Vec2.CrossVV(this.m_rA, P) + impulse.z);
            vB.SelfMulAdd(mB, P);
            wB += iB * (b2Vec2.CrossVV(this.m_rB, P) + impulse.z);
          }
          data.velocities[this.m_indexA].w = wA;
          data.velocities[this.m_indexB].w = wB;
        };
        b2WeldJoint.prototype.SolvePositionConstraints = function(data) {
          var cA = data.positions[this.m_indexA].c;
          var aA = data.positions[this.m_indexA].a;
          var cB = data.positions[this.m_indexB].c;
          var aB = data.positions[this.m_indexB].a;
          var qA = this.m_qA.SetAngle(aA), qB = this.m_qB.SetAngle(aB);
          var mA = this.m_invMassA, mB = this.m_invMassB;
          var iA = this.m_invIA, iB = this.m_invIB;
          b2Vec2.SubVV(this.m_localAnchorA, this.m_localCenterA, this.m_lalcA);
          var rA = b2Rot.MulRV(qA, this.m_lalcA, this.m_rA);
          b2Vec2.SubVV(this.m_localAnchorB, this.m_localCenterB, this.m_lalcB);
          var rB = b2Rot.MulRV(qB, this.m_lalcB, this.m_rB);
          var positionError, angularError;
          var K = this.m_K;
          K.ex.x = mA + mB + rA.y * rA.y * iA + rB.y * rB.y * iB;
          K.ey.x = -rA.y * rA.x * iA - rB.y * rB.x * iB;
          K.ez.x = -rA.y * iA - rB.y * iB;
          K.ex.y = K.ey.x;
          K.ey.y = mA + mB + rA.x * rA.x * iA + rB.x * rB.x * iB;
          K.ez.y = rA.x * iA + rB.x * iB;
          K.ex.z = K.ez.x;
          K.ey.z = K.ez.y;
          K.ez.z = iA + iB;
          if (this.m_frequencyHz > 0) {
            var C1 = b2Vec2.SubVV(b2Vec2.AddVV(cB, rB, b2Vec2.s_t0), b2Vec2.AddVV(cA, rA, b2Vec2.s_t1), b2WeldJoint.SolvePositionConstraints_s_C1);
            positionError = C1.Length();
            angularError = 0;
            var P = K.Solve22(C1.x, C1.y, b2WeldJoint.SolvePositionConstraints_s_P).SelfNeg();
            cA.SelfMulSub(mA, P);
            aA -= iA * b2Vec2.CrossVV(rA, P);
            cB.SelfMulAdd(mB, P);
            aB += iB * b2Vec2.CrossVV(rB, P);
          } else {
            var C1 = b2Vec2.SubVV(b2Vec2.AddVV(cB, rB, b2Vec2.s_t0), b2Vec2.AddVV(cA, rA, b2Vec2.s_t1), b2WeldJoint.SolvePositionConstraints_s_C1);
            var C2 = aB - aA - this.m_referenceAngle;
            positionError = C1.Length();
            angularError = b2Abs(C2);
            var impulse = K.Solve33(C1.x, C1.y, C2, b2WeldJoint.SolvePositionConstraints_s_impulse).SelfNeg();
            var P = b2WeldJoint.SolvePositionConstraints_s_P.Set(impulse.x, impulse.y);
            cA.SelfMulSub(mA, P);
            aA -= iA * (b2Vec2.CrossVV(this.m_rA, P) + impulse.z);
            cB.SelfMulAdd(mB, P);
            aB += iB * (b2Vec2.CrossVV(this.m_rB, P) + impulse.z);
          }
          data.positions[this.m_indexA].a = aA;
          data.positions[this.m_indexB].a = aB;
          return positionError <= b2_linearSlop && angularError <= b2_angularSlop;
        };
        b2WeldJoint.prototype.GetAnchorA = function(out) {
          return this.m_bodyA.GetWorldPoint(this.m_localAnchorA, out);
        };
        b2WeldJoint.prototype.GetAnchorB = function(out) {
          return this.m_bodyB.GetWorldPoint(this.m_localAnchorB, out);
        };
        b2WeldJoint.prototype.GetReactionForce = function(inv_dt, out) {
          out.x = inv_dt * this.m_impulse.x;
          out.y = inv_dt * this.m_impulse.y;
          return out;
        };
        b2WeldJoint.prototype.GetReactionTorque = function(inv_dt) {
          return inv_dt * this.m_impulse.z;
        };
        b2WeldJoint.prototype.GetLocalAnchorA = function() {
          return this.m_localAnchorA;
        };
        b2WeldJoint.prototype.GetLocalAnchorB = function() {
          return this.m_localAnchorB;
        };
        b2WeldJoint.prototype.GetReferenceAngle = function() {
          return this.m_referenceAngle;
        };
        b2WeldJoint.prototype.SetFrequency = function(hz) {
          this.m_frequencyHz = hz;
        };
        b2WeldJoint.prototype.GetFrequency = function() {
          return this.m_frequencyHz;
        };
        b2WeldJoint.prototype.SetDampingRatio = function(ratio) {
          this.m_dampingRatio = ratio;
        };
        b2WeldJoint.prototype.GetDampingRatio = function() {
          return this.m_dampingRatio;
        };
        b2WeldJoint.prototype.Dump = function(log) {
          var indexA = this.m_bodyA.m_islandIndex;
          var indexB = this.m_bodyB.m_islandIndex;
          log("  const jd: b2WeldJointDef = new b2WeldJointDef();\n");
          log("  jd.bodyA = bodies[%d];\n", indexA);
          log("  jd.bodyB = bodies[%d];\n", indexB);
          log("  jd.collideConnected = %s;\n", this.m_collideConnected ? "true" : "false");
          log("  jd.localAnchorA.Set(%.15f, %.15f);\n", this.m_localAnchorA.x, this.m_localAnchorA.y);
          log("  jd.localAnchorB.Set(%.15f, %.15f);\n", this.m_localAnchorB.x, this.m_localAnchorB.y);
          log("  jd.referenceAngle = %.15f;\n", this.m_referenceAngle);
          log("  jd.frequencyHz = %.15f;\n", this.m_frequencyHz);
          log("  jd.dampingRatio = %.15f;\n", this.m_dampingRatio);
          log("  joints[%d] = this.m_world.CreateJoint(jd);\n", this.m_index);
        };
        b2WeldJoint.InitVelocityConstraints_s_P = new b2Vec2();
        b2WeldJoint.SolveVelocityConstraints_s_Cdot1 = new b2Vec2();
        b2WeldJoint.SolveVelocityConstraints_s_impulse1 = new b2Vec2();
        b2WeldJoint.SolveVelocityConstraints_s_impulse = new b2Vec3();
        b2WeldJoint.SolveVelocityConstraints_s_P = new b2Vec2();
        b2WeldJoint.SolvePositionConstraints_s_C1 = new b2Vec2();
        b2WeldJoint.SolvePositionConstraints_s_P = new b2Vec2();
        b2WeldJoint.SolvePositionConstraints_s_impulse = new b2Vec3();
        return b2WeldJoint;
      })(b2Joint);
      var b2WheelJointDef = (function(_super) {
        __extends(b2WheelJointDef, _super);
        function b2WheelJointDef() {
          var _this = _super.call(this, exports.b2JointType.e_wheelJoint) || this;
          _this.localAnchorA = new b2Vec2(0, 0);
          _this.localAnchorB = new b2Vec2(0, 0);
          _this.localAxisA = new b2Vec2(1, 0);
          _this.enableMotor = false;
          _this.maxMotorTorque = 0;
          _this.motorSpeed = 0;
          _this.frequencyHz = 2;
          _this.dampingRatio = .7;
          return _this;
        }
        b2WheelJointDef.prototype.Initialize = function(bA, bB, anchor, axis) {
          this.bodyA = bA;
          this.bodyB = bB;
          this.bodyA.GetLocalPoint(anchor, this.localAnchorA);
          this.bodyB.GetLocalPoint(anchor, this.localAnchorB);
          this.bodyA.GetLocalVector(axis, this.localAxisA);
        };
        return b2WheelJointDef;
      })(b2JointDef);
      var b2WheelJoint = (function(_super) {
        __extends(b2WheelJoint, _super);
        function b2WheelJoint(def) {
          var _this = _super.call(this, def) || this;
          _this.m_frequencyHz = 0;
          _this.m_dampingRatio = 0;
          _this.m_localAnchorA = new b2Vec2();
          _this.m_localAnchorB = new b2Vec2();
          _this.m_localXAxisA = new b2Vec2();
          _this.m_localYAxisA = new b2Vec2();
          _this.m_impulse = 0;
          _this.m_motorImpulse = 0;
          _this.m_springImpulse = 0;
          _this.m_maxMotorTorque = 0;
          _this.m_motorSpeed = 0;
          _this.m_enableMotor = false;
          _this.m_indexA = 0;
          _this.m_indexB = 0;
          _this.m_localCenterA = new b2Vec2();
          _this.m_localCenterB = new b2Vec2();
          _this.m_invMassA = 0;
          _this.m_invMassB = 0;
          _this.m_invIA = 0;
          _this.m_invIB = 0;
          _this.m_ax = new b2Vec2();
          _this.m_ay = new b2Vec2();
          _this.m_sAx = 0;
          _this.m_sBx = 0;
          _this.m_sAy = 0;
          _this.m_sBy = 0;
          _this.m_mass = 0;
          _this.m_motorMass = 0;
          _this.m_springMass = 0;
          _this.m_bias = 0;
          _this.m_gamma = 0;
          _this.m_qA = new b2Rot();
          _this.m_qB = new b2Rot();
          _this.m_lalcA = new b2Vec2();
          _this.m_lalcB = new b2Vec2();
          _this.m_rA = new b2Vec2();
          _this.m_rB = new b2Vec2();
          _this.m_frequencyHz = b2Maybe(def.frequencyHz, 2);
          _this.m_dampingRatio = b2Maybe(def.dampingRatio, .7);
          _this.m_localAnchorA.Copy(b2Maybe(def.localAnchorA, b2Vec2.ZERO));
          _this.m_localAnchorB.Copy(b2Maybe(def.localAnchorB, b2Vec2.ZERO));
          _this.m_localXAxisA.Copy(b2Maybe(def.localAxisA, b2Vec2.UNITX));
          b2Vec2.CrossOneV(_this.m_localXAxisA, _this.m_localYAxisA);
          _this.m_maxMotorTorque = b2Maybe(def.maxMotorTorque, 0);
          _this.m_motorSpeed = b2Maybe(def.motorSpeed, 0);
          _this.m_enableMotor = b2Maybe(def.enableMotor, false);
          _this.m_ax.SetZero();
          _this.m_ay.SetZero();
          return _this;
        }
        b2WheelJoint.prototype.GetMotorSpeed = function() {
          return this.m_motorSpeed;
        };
        b2WheelJoint.prototype.GetMaxMotorTorque = function() {
          return this.m_maxMotorTorque;
        };
        b2WheelJoint.prototype.SetSpringFrequencyHz = function(hz) {
          this.m_frequencyHz = hz;
        };
        b2WheelJoint.prototype.GetSpringFrequencyHz = function() {
          return this.m_frequencyHz;
        };
        b2WheelJoint.prototype.SetSpringDampingRatio = function(ratio) {
          this.m_dampingRatio = ratio;
        };
        b2WheelJoint.prototype.GetSpringDampingRatio = function() {
          return this.m_dampingRatio;
        };
        b2WheelJoint.prototype.InitVelocityConstraints = function(data) {
          this.m_indexA = this.m_bodyA.m_islandIndex;
          this.m_indexB = this.m_bodyB.m_islandIndex;
          this.m_localCenterA.Copy(this.m_bodyA.m_sweep.localCenter);
          this.m_localCenterB.Copy(this.m_bodyB.m_sweep.localCenter);
          this.m_invMassA = this.m_bodyA.m_invMass;
          this.m_invMassB = this.m_bodyB.m_invMass;
          this.m_invIA = this.m_bodyA.m_invI;
          this.m_invIB = this.m_bodyB.m_invI;
          var mA = this.m_invMassA, mB = this.m_invMassB;
          var iA = this.m_invIA, iB = this.m_invIB;
          var cA = data.positions[this.m_indexA].c;
          var aA = data.positions[this.m_indexA].a;
          var vA = data.velocities[this.m_indexA].v;
          var wA = data.velocities[this.m_indexA].w;
          var cB = data.positions[this.m_indexB].c;
          var aB = data.positions[this.m_indexB].a;
          var vB = data.velocities[this.m_indexB].v;
          var wB = data.velocities[this.m_indexB].w;
          var qA = this.m_qA.SetAngle(aA), qB = this.m_qB.SetAngle(aB);
          b2Vec2.SubVV(this.m_localAnchorA, this.m_localCenterA, this.m_lalcA);
          var rA = b2Rot.MulRV(qA, this.m_lalcA, this.m_rA);
          b2Vec2.SubVV(this.m_localAnchorB, this.m_localCenterB, this.m_lalcB);
          var rB = b2Rot.MulRV(qB, this.m_lalcB, this.m_rB);
          var d = b2Vec2.SubVV(b2Vec2.AddVV(cB, rB, b2Vec2.s_t0), b2Vec2.AddVV(cA, rA, b2Vec2.s_t1), b2WheelJoint.InitVelocityConstraints_s_d);
          b2Rot.MulRV(qA, this.m_localYAxisA, this.m_ay);
          this.m_sAy = b2Vec2.CrossVV(b2Vec2.AddVV(d, rA, b2Vec2.s_t0), this.m_ay);
          this.m_sBy = b2Vec2.CrossVV(rB, this.m_ay);
          this.m_mass = mA + mB + iA * this.m_sAy * this.m_sAy + iB * this.m_sBy * this.m_sBy;
          this.m_mass > 0 && (this.m_mass = 1 / this.m_mass);
          this.m_springMass = 0;
          this.m_bias = 0;
          this.m_gamma = 0;
          if (this.m_frequencyHz > 0) {
            b2Rot.MulRV(qA, this.m_localXAxisA, this.m_ax);
            this.m_sAx = b2Vec2.CrossVV(b2Vec2.AddVV(d, rA, b2Vec2.s_t0), this.m_ax);
            this.m_sBx = b2Vec2.CrossVV(rB, this.m_ax);
            var invMass = mA + mB + iA * this.m_sAx * this.m_sAx + iB * this.m_sBx * this.m_sBx;
            if (invMass > 0) {
              this.m_springMass = 1 / invMass;
              var C = b2Vec2.DotVV(d, this.m_ax);
              var omega = 2 * b2_pi * this.m_frequencyHz;
              var damp = 2 * this.m_springMass * this.m_dampingRatio * omega;
              var k = this.m_springMass * omega * omega;
              var h = data.step.dt;
              this.m_gamma = h * (damp + h * k);
              this.m_gamma > 0 && (this.m_gamma = 1 / this.m_gamma);
              this.m_bias = C * h * k * this.m_gamma;
              this.m_springMass = invMass + this.m_gamma;
              this.m_springMass > 0 && (this.m_springMass = 1 / this.m_springMass);
            }
          } else this.m_springImpulse = 0;
          if (this.m_enableMotor) {
            this.m_motorMass = iA + iB;
            this.m_motorMass > 0 && (this.m_motorMass = 1 / this.m_motorMass);
          } else {
            this.m_motorMass = 0;
            this.m_motorImpulse = 0;
          }
          if (data.step.warmStarting) {
            this.m_impulse *= data.step.dtRatio;
            this.m_springImpulse *= data.step.dtRatio;
            this.m_motorImpulse *= data.step.dtRatio;
            var P = b2Vec2.AddVV(b2Vec2.MulSV(this.m_impulse, this.m_ay, b2Vec2.s_t0), b2Vec2.MulSV(this.m_springImpulse, this.m_ax, b2Vec2.s_t1), b2WheelJoint.InitVelocityConstraints_s_P);
            var LA = this.m_impulse * this.m_sAy + this.m_springImpulse * this.m_sAx + this.m_motorImpulse;
            var LB = this.m_impulse * this.m_sBy + this.m_springImpulse * this.m_sBx + this.m_motorImpulse;
            vA.SelfMulSub(this.m_invMassA, P);
            wA -= this.m_invIA * LA;
            vB.SelfMulAdd(this.m_invMassB, P);
            wB += this.m_invIB * LB;
          } else {
            this.m_impulse = 0;
            this.m_springImpulse = 0;
            this.m_motorImpulse = 0;
          }
          data.velocities[this.m_indexA].w = wA;
          data.velocities[this.m_indexB].w = wB;
        };
        b2WheelJoint.prototype.SolveVelocityConstraints = function(data) {
          var mA = this.m_invMassA, mB = this.m_invMassB;
          var iA = this.m_invIA, iB = this.m_invIB;
          var vA = data.velocities[this.m_indexA].v;
          var wA = data.velocities[this.m_indexA].w;
          var vB = data.velocities[this.m_indexB].v;
          var wB = data.velocities[this.m_indexB].w;
          var Cdot = b2Vec2.DotVV(this.m_ax, b2Vec2.SubVV(vB, vA, b2Vec2.s_t0)) + this.m_sBx * wB - this.m_sAx * wA;
          var impulse = -this.m_springMass * (Cdot + this.m_bias + this.m_gamma * this.m_springImpulse);
          this.m_springImpulse += impulse;
          var P = b2Vec2.MulSV(impulse, this.m_ax, b2WheelJoint.SolveVelocityConstraints_s_P);
          var LA = impulse * this.m_sAx;
          var LB = impulse * this.m_sBx;
          vA.SelfMulSub(mA, P);
          wA -= iA * LA;
          vB.SelfMulAdd(mB, P);
          wB += iB * LB;
          var Cdot = wB - wA - this.m_motorSpeed;
          var impulse = -this.m_motorMass * Cdot;
          var oldImpulse = this.m_motorImpulse;
          var maxImpulse = data.step.dt * this.m_maxMotorTorque;
          this.m_motorImpulse = b2Clamp(this.m_motorImpulse + impulse, -maxImpulse, maxImpulse);
          impulse = this.m_motorImpulse - oldImpulse;
          wA -= iA * impulse;
          wB += iB * impulse;
          var Cdot = b2Vec2.DotVV(this.m_ay, b2Vec2.SubVV(vB, vA, b2Vec2.s_t0)) + this.m_sBy * wB - this.m_sAy * wA;
          var impulse = -this.m_mass * Cdot;
          this.m_impulse += impulse;
          var P = b2Vec2.MulSV(impulse, this.m_ay, b2WheelJoint.SolveVelocityConstraints_s_P);
          var LA = impulse * this.m_sAy;
          var LB = impulse * this.m_sBy;
          vA.SelfMulSub(mA, P);
          wA -= iA * LA;
          vB.SelfMulAdd(mB, P);
          wB += iB * LB;
          data.velocities[this.m_indexA].w = wA;
          data.velocities[this.m_indexB].w = wB;
        };
        b2WheelJoint.prototype.SolvePositionConstraints = function(data) {
          var cA = data.positions[this.m_indexA].c;
          var aA = data.positions[this.m_indexA].a;
          var cB = data.positions[this.m_indexB].c;
          var aB = data.positions[this.m_indexB].a;
          var qA = this.m_qA.SetAngle(aA), qB = this.m_qB.SetAngle(aB);
          b2Vec2.SubVV(this.m_localAnchorA, this.m_localCenterA, this.m_lalcA);
          var rA = b2Rot.MulRV(qA, this.m_lalcA, this.m_rA);
          b2Vec2.SubVV(this.m_localAnchorB, this.m_localCenterB, this.m_lalcB);
          var rB = b2Rot.MulRV(qB, this.m_lalcB, this.m_rB);
          var d = b2Vec2.AddVV(b2Vec2.SubVV(cB, cA, b2Vec2.s_t0), b2Vec2.SubVV(rB, rA, b2Vec2.s_t1), b2WheelJoint.SolvePositionConstraints_s_d);
          var ay = b2Rot.MulRV(qA, this.m_localYAxisA, this.m_ay);
          var sAy = b2Vec2.CrossVV(b2Vec2.AddVV(d, rA, b2Vec2.s_t0), ay);
          var sBy = b2Vec2.CrossVV(rB, ay);
          var C = b2Vec2.DotVV(d, this.m_ay);
          var k = this.m_invMassA + this.m_invMassB + this.m_invIA * this.m_sAy * this.m_sAy + this.m_invIB * this.m_sBy * this.m_sBy;
          var impulse;
          impulse = 0 !== k ? -C / k : 0;
          var P = b2Vec2.MulSV(impulse, ay, b2WheelJoint.SolvePositionConstraints_s_P);
          var LA = impulse * sAy;
          var LB = impulse * sBy;
          cA.SelfMulSub(this.m_invMassA, P);
          aA -= this.m_invIA * LA;
          cB.SelfMulAdd(this.m_invMassB, P);
          aB += this.m_invIB * LB;
          data.positions[this.m_indexA].a = aA;
          data.positions[this.m_indexB].a = aB;
          return b2Abs(C) <= b2_linearSlop;
        };
        b2WheelJoint.prototype.GetDefinition = function(def) {
          return def;
        };
        b2WheelJoint.prototype.GetAnchorA = function(out) {
          return this.m_bodyA.GetWorldPoint(this.m_localAnchorA, out);
        };
        b2WheelJoint.prototype.GetAnchorB = function(out) {
          return this.m_bodyB.GetWorldPoint(this.m_localAnchorB, out);
        };
        b2WheelJoint.prototype.GetReactionForce = function(inv_dt, out) {
          out.x = inv_dt * (this.m_impulse * this.m_ay.x + this.m_springImpulse * this.m_ax.x);
          out.y = inv_dt * (this.m_impulse * this.m_ay.y + this.m_springImpulse * this.m_ax.y);
          return out;
        };
        b2WheelJoint.prototype.GetReactionTorque = function(inv_dt) {
          return inv_dt * this.m_motorImpulse;
        };
        b2WheelJoint.prototype.GetLocalAnchorA = function() {
          return this.m_localAnchorA;
        };
        b2WheelJoint.prototype.GetLocalAnchorB = function() {
          return this.m_localAnchorB;
        };
        b2WheelJoint.prototype.GetLocalAxisA = function() {
          return this.m_localXAxisA;
        };
        b2WheelJoint.prototype.GetJointTranslation = function() {
          return this.GetPrismaticJointTranslation();
        };
        b2WheelJoint.prototype.GetJointLinearSpeed = function() {
          return this.GetPrismaticJointSpeed();
        };
        b2WheelJoint.prototype.GetJointAngle = function() {
          return this.GetRevoluteJointAngle();
        };
        b2WheelJoint.prototype.GetJointAngularSpeed = function() {
          return this.GetRevoluteJointSpeed();
        };
        b2WheelJoint.prototype.GetPrismaticJointTranslation = function() {
          var bA = this.m_bodyA;
          var bB = this.m_bodyB;
          var pA = bA.GetWorldPoint(this.m_localAnchorA, new b2Vec2());
          var pB = bB.GetWorldPoint(this.m_localAnchorB, new b2Vec2());
          var d = b2Vec2.SubVV(pB, pA, new b2Vec2());
          var axis = bA.GetWorldVector(this.m_localXAxisA, new b2Vec2());
          var translation = b2Vec2.DotVV(d, axis);
          return translation;
        };
        b2WheelJoint.prototype.GetPrismaticJointSpeed = function() {
          var bA = this.m_bodyA;
          var bB = this.m_bodyB;
          b2Vec2.SubVV(this.m_localAnchorA, bA.m_sweep.localCenter, this.m_lalcA);
          var rA = b2Rot.MulRV(bA.m_xf.q, this.m_lalcA, this.m_rA);
          b2Vec2.SubVV(this.m_localAnchorB, bB.m_sweep.localCenter, this.m_lalcB);
          var rB = b2Rot.MulRV(bB.m_xf.q, this.m_lalcB, this.m_rB);
          var pA = b2Vec2.AddVV(bA.m_sweep.c, rA, b2Vec2.s_t0);
          var pB = b2Vec2.AddVV(bB.m_sweep.c, rB, b2Vec2.s_t1);
          var d = b2Vec2.SubVV(pB, pA, b2Vec2.s_t2);
          var axis = bA.GetWorldVector(this.m_localXAxisA, new b2Vec2());
          var vA = bA.m_linearVelocity;
          var vB = bB.m_linearVelocity;
          var wA = bA.m_angularVelocity;
          var wB = bB.m_angularVelocity;
          var speed = b2Vec2.DotVV(d, b2Vec2.CrossSV(wA, axis, b2Vec2.s_t0)) + b2Vec2.DotVV(axis, b2Vec2.SubVV(b2Vec2.AddVCrossSV(vB, wB, rB, b2Vec2.s_t0), b2Vec2.AddVCrossSV(vA, wA, rA, b2Vec2.s_t1), b2Vec2.s_t0));
          return speed;
        };
        b2WheelJoint.prototype.GetRevoluteJointAngle = function() {
          return this.m_bodyB.m_sweep.a - this.m_bodyA.m_sweep.a;
        };
        b2WheelJoint.prototype.GetRevoluteJointSpeed = function() {
          var wA = this.m_bodyA.m_angularVelocity;
          var wB = this.m_bodyB.m_angularVelocity;
          return wB - wA;
        };
        b2WheelJoint.prototype.IsMotorEnabled = function() {
          return this.m_enableMotor;
        };
        b2WheelJoint.prototype.EnableMotor = function(flag) {
          if (flag !== this.m_enableMotor) {
            this.m_bodyA.SetAwake(true);
            this.m_bodyB.SetAwake(true);
            this.m_enableMotor = flag;
          }
        };
        b2WheelJoint.prototype.SetMotorSpeed = function(speed) {
          if (speed !== this.m_motorSpeed) {
            this.m_bodyA.SetAwake(true);
            this.m_bodyB.SetAwake(true);
            this.m_motorSpeed = speed;
          }
        };
        b2WheelJoint.prototype.SetMaxMotorTorque = function(force) {
          if (force !== this.m_maxMotorTorque) {
            this.m_bodyA.SetAwake(true);
            this.m_bodyB.SetAwake(true);
            this.m_maxMotorTorque = force;
          }
        };
        b2WheelJoint.prototype.GetMotorTorque = function(inv_dt) {
          return inv_dt * this.m_motorImpulse;
        };
        b2WheelJoint.prototype.Dump = function(log) {
          var indexA = this.m_bodyA.m_islandIndex;
          var indexB = this.m_bodyB.m_islandIndex;
          log("  const jd: b2WheelJointDef = new b2WheelJointDef();\n");
          log("  jd.bodyA = bodies[%d];\n", indexA);
          log("  jd.bodyB = bodies[%d];\n", indexB);
          log("  jd.collideConnected = %s;\n", this.m_collideConnected ? "true" : "false");
          log("  jd.localAnchorA.Set(%.15f, %.15f);\n", this.m_localAnchorA.x, this.m_localAnchorA.y);
          log("  jd.localAnchorB.Set(%.15f, %.15f);\n", this.m_localAnchorB.x, this.m_localAnchorB.y);
          log("  jd.localAxisA.Set(%.15f, %.15f);\n", this.m_localXAxisA.x, this.m_localXAxisA.y);
          log("  jd.enableMotor = %s;\n", this.m_enableMotor ? "true" : "false");
          log("  jd.motorSpeed = %.15f;\n", this.m_motorSpeed);
          log("  jd.maxMotorTorque = %.15f;\n", this.m_maxMotorTorque);
          log("  jd.frequencyHz = %.15f;\n", this.m_frequencyHz);
          log("  jd.dampingRatio = %.15f;\n", this.m_dampingRatio);
          log("  joints[%d] = this.m_world.CreateJoint(jd);\n", this.m_index);
        };
        b2WheelJoint.InitVelocityConstraints_s_d = new b2Vec2();
        b2WheelJoint.InitVelocityConstraints_s_P = new b2Vec2();
        b2WheelJoint.SolveVelocityConstraints_s_P = new b2Vec2();
        b2WheelJoint.SolvePositionConstraints_s_d = new b2Vec2();
        b2WheelJoint.SolvePositionConstraints_s_P = new b2Vec2();
        return b2WheelJoint;
      })(b2Joint);
      function b2MixFriction(friction1, friction2) {
        return b2Sqrt(friction1 * friction2);
      }
      function b2MixRestitution(restitution1, restitution2) {
        return restitution1 > restitution2 ? restitution1 : restitution2;
      }
      var b2ContactEdge = (function() {
        function b2ContactEdge(contact) {
          this.prev = null;
          this.next = null;
          this.contact = contact;
        }
        return b2ContactEdge;
      })();
      var b2Contact = (function() {
        function b2Contact() {
          this.m_islandFlag = false;
          this.m_touchingFlag = false;
          this.m_enabledFlag = false;
          this.m_filterFlag = false;
          this.m_bulletHitFlag = false;
          this.m_toiFlag = false;
          this.m_prev = null;
          this.m_next = null;
          this.m_indexA = 0;
          this.m_indexB = 0;
          this.m_manifold = new b2Manifold();
          this.m_toiCount = 0;
          this.m_toi = 0;
          this.m_friction = 0;
          this.m_restitution = 0;
          this.m_tangentSpeed = 0;
          this.m_oldManifold = new b2Manifold();
          this.m_nodeA = new b2ContactEdge(this);
          this.m_nodeB = new b2ContactEdge(this);
        }
        b2Contact.prototype.GetManifold = function() {
          return this.m_manifold;
        };
        b2Contact.prototype.GetWorldManifold = function(worldManifold) {
          var bodyA = this.m_fixtureA.GetBody();
          var bodyB = this.m_fixtureB.GetBody();
          var shapeA = this.m_fixtureA.GetShape();
          var shapeB = this.m_fixtureB.GetShape();
          worldManifold.Initialize(this.m_manifold, bodyA.GetTransform(), shapeA.m_radius, bodyB.GetTransform(), shapeB.m_radius);
        };
        b2Contact.prototype.IsTouching = function() {
          return this.m_touchingFlag;
        };
        b2Contact.prototype.SetEnabled = function(flag) {
          this.m_enabledFlag = flag;
        };
        b2Contact.prototype.IsEnabled = function() {
          return this.m_enabledFlag;
        };
        b2Contact.prototype.GetNext = function() {
          return this.m_next;
        };
        b2Contact.prototype.GetFixtureA = function() {
          return this.m_fixtureA;
        };
        b2Contact.prototype.GetChildIndexA = function() {
          return this.m_indexA;
        };
        b2Contact.prototype.GetFixtureB = function() {
          return this.m_fixtureB;
        };
        b2Contact.prototype.GetChildIndexB = function() {
          return this.m_indexB;
        };
        b2Contact.prototype.FlagForFiltering = function() {
          this.m_filterFlag = true;
        };
        b2Contact.prototype.SetFriction = function(friction) {
          this.m_friction = friction;
        };
        b2Contact.prototype.GetFriction = function() {
          return this.m_friction;
        };
        b2Contact.prototype.ResetFriction = function() {
          this.m_friction = b2MixFriction(this.m_fixtureA.m_friction, this.m_fixtureB.m_friction);
        };
        b2Contact.prototype.SetRestitution = function(restitution) {
          this.m_restitution = restitution;
        };
        b2Contact.prototype.GetRestitution = function() {
          return this.m_restitution;
        };
        b2Contact.prototype.ResetRestitution = function() {
          this.m_restitution = b2MixRestitution(this.m_fixtureA.m_restitution, this.m_fixtureB.m_restitution);
        };
        b2Contact.prototype.SetTangentSpeed = function(speed) {
          this.m_tangentSpeed = speed;
        };
        b2Contact.prototype.GetTangentSpeed = function() {
          return this.m_tangentSpeed;
        };
        b2Contact.prototype.Reset = function(fixtureA, indexA, fixtureB, indexB) {
          this.m_islandFlag = false;
          this.m_touchingFlag = false;
          this.m_enabledFlag = true;
          this.m_filterFlag = false;
          this.m_bulletHitFlag = false;
          this.m_toiFlag = false;
          this.m_fixtureA = fixtureA;
          this.m_fixtureB = fixtureB;
          this.m_indexA = indexA;
          this.m_indexB = indexB;
          this.m_manifold.pointCount = 0;
          this.m_prev = null;
          this.m_next = null;
          delete this.m_nodeA.contact;
          this.m_nodeA.prev = null;
          this.m_nodeA.next = null;
          delete this.m_nodeA.other;
          delete this.m_nodeB.contact;
          this.m_nodeB.prev = null;
          this.m_nodeB.next = null;
          delete this.m_nodeB.other;
          this.m_toiCount = 0;
          this.m_friction = b2MixFriction(this.m_fixtureA.m_friction, this.m_fixtureB.m_friction);
          this.m_restitution = b2MixRestitution(this.m_fixtureA.m_restitution, this.m_fixtureB.m_restitution);
        };
        b2Contact.prototype.Update = function(listener) {
          var tManifold = this.m_oldManifold;
          this.m_oldManifold = this.m_manifold;
          this.m_manifold = tManifold;
          this.m_enabledFlag = true;
          var touching = false;
          var wasTouching = this.m_touchingFlag;
          var sensorA = this.m_fixtureA.IsSensor();
          var sensorB = this.m_fixtureB.IsSensor();
          var sensor = sensorA || sensorB;
          var bodyA = this.m_fixtureA.GetBody();
          var bodyB = this.m_fixtureB.GetBody();
          var xfA = bodyA.GetTransform();
          var xfB = bodyB.GetTransform();
          if (sensor) {
            var shapeA = this.m_fixtureA.GetShape();
            var shapeB = this.m_fixtureB.GetShape();
            touching = b2TestOverlapShape(shapeA, this.m_indexA, shapeB, this.m_indexB, xfA, xfB);
            this.m_manifold.pointCount = 0;
          } else {
            this.Evaluate(this.m_manifold, xfA, xfB);
            touching = this.m_manifold.pointCount > 0;
            for (var i = 0; i < this.m_manifold.pointCount; ++i) {
              var mp2 = this.m_manifold.points[i];
              mp2.normalImpulse = 0;
              mp2.tangentImpulse = 0;
              var id2 = mp2.id;
              for (var j = 0; j < this.m_oldManifold.pointCount; ++j) {
                var mp1 = this.m_oldManifold.points[j];
                if (mp1.id.key === id2.key) {
                  mp2.normalImpulse = mp1.normalImpulse;
                  mp2.tangentImpulse = mp1.tangentImpulse;
                  break;
                }
              }
            }
            if (touching !== wasTouching) {
              bodyA.SetAwake(true);
              bodyB.SetAwake(true);
            }
          }
          this.m_touchingFlag = touching;
          !wasTouching && touching && listener && listener.BeginContact(this);
          wasTouching && !touching && listener && listener.EndContact(this);
          !sensor && touching && listener && listener.PreSolve(this, this.m_oldManifold);
        };
        b2Contact.prototype.ComputeTOI = function(sweepA, sweepB) {
          var input = b2Contact.ComputeTOI_s_input;
          input.proxyA.SetShape(this.m_fixtureA.GetShape(), this.m_indexA);
          input.proxyB.SetShape(this.m_fixtureB.GetShape(), this.m_indexB);
          input.sweepA.Copy(sweepA);
          input.sweepB.Copy(sweepB);
          input.tMax = b2_linearSlop;
          var output = b2Contact.ComputeTOI_s_output;
          b2TimeOfImpact(output, input);
          return output.t;
        };
        b2Contact.ComputeTOI_s_input = new b2TOIInput();
        b2Contact.ComputeTOI_s_output = new b2TOIOutput();
        return b2Contact;
      })();
      var b2CircleContact = (function(_super) {
        __extends(b2CircleContact, _super);
        function b2CircleContact() {
          return _super.call(this) || this;
        }
        b2CircleContact.Create = function(allocator) {
          return new b2CircleContact();
        };
        b2CircleContact.Destroy = function(contact, allocator) {};
        b2CircleContact.prototype.Reset = function(fixtureA, indexA, fixtureB, indexB) {
          _super.prototype.Reset.call(this, fixtureA, indexA, fixtureB, indexB);
        };
        b2CircleContact.prototype.Evaluate = function(manifold, xfA, xfB) {
          var shapeA = this.m_fixtureA.GetShape();
          var shapeB = this.m_fixtureB.GetShape();
          b2CollideCircles(manifold, shapeA, xfA, shapeB, xfB);
        };
        return b2CircleContact;
      })(b2Contact);
      var b2PolygonContact = (function(_super) {
        __extends(b2PolygonContact, _super);
        function b2PolygonContact() {
          return _super.call(this) || this;
        }
        b2PolygonContact.Create = function(allocator) {
          return new b2PolygonContact();
        };
        b2PolygonContact.Destroy = function(contact, allocator) {};
        b2PolygonContact.prototype.Reset = function(fixtureA, indexA, fixtureB, indexB) {
          _super.prototype.Reset.call(this, fixtureA, indexA, fixtureB, indexB);
        };
        b2PolygonContact.prototype.Evaluate = function(manifold, xfA, xfB) {
          var shapeA = this.m_fixtureA.GetShape();
          var shapeB = this.m_fixtureB.GetShape();
          b2CollidePolygons(manifold, shapeA, xfA, shapeB, xfB);
        };
        return b2PolygonContact;
      })(b2Contact);
      var b2PolygonAndCircleContact = (function(_super) {
        __extends(b2PolygonAndCircleContact, _super);
        function b2PolygonAndCircleContact() {
          return _super.call(this) || this;
        }
        b2PolygonAndCircleContact.Create = function(allocator) {
          return new b2PolygonAndCircleContact();
        };
        b2PolygonAndCircleContact.Destroy = function(contact, allocator) {};
        b2PolygonAndCircleContact.prototype.Reset = function(fixtureA, indexA, fixtureB, indexB) {
          _super.prototype.Reset.call(this, fixtureA, indexA, fixtureB, indexB);
        };
        b2PolygonAndCircleContact.prototype.Evaluate = function(manifold, xfA, xfB) {
          var shapeA = this.m_fixtureA.GetShape();
          var shapeB = this.m_fixtureB.GetShape();
          b2CollidePolygonAndCircle(manifold, shapeA, xfA, shapeB, xfB);
        };
        return b2PolygonAndCircleContact;
      })(b2Contact);
      var b2EdgeAndCircleContact = (function(_super) {
        __extends(b2EdgeAndCircleContact, _super);
        function b2EdgeAndCircleContact() {
          return _super.call(this) || this;
        }
        b2EdgeAndCircleContact.Create = function(allocator) {
          return new b2EdgeAndCircleContact();
        };
        b2EdgeAndCircleContact.Destroy = function(contact, allocator) {};
        b2EdgeAndCircleContact.prototype.Reset = function(fixtureA, indexA, fixtureB, indexB) {
          _super.prototype.Reset.call(this, fixtureA, indexA, fixtureB, indexB);
        };
        b2EdgeAndCircleContact.prototype.Evaluate = function(manifold, xfA, xfB) {
          var shapeA = this.m_fixtureA.GetShape();
          var shapeB = this.m_fixtureB.GetShape();
          b2CollideEdgeAndCircle(manifold, shapeA, xfA, shapeB, xfB);
        };
        return b2EdgeAndCircleContact;
      })(b2Contact);
      var b2EdgeAndPolygonContact = (function(_super) {
        __extends(b2EdgeAndPolygonContact, _super);
        function b2EdgeAndPolygonContact() {
          return _super.call(this) || this;
        }
        b2EdgeAndPolygonContact.Create = function(allocator) {
          return new b2EdgeAndPolygonContact();
        };
        b2EdgeAndPolygonContact.Destroy = function(contact, allocator) {};
        b2EdgeAndPolygonContact.prototype.Reset = function(fixtureA, indexA, fixtureB, indexB) {
          _super.prototype.Reset.call(this, fixtureA, indexA, fixtureB, indexB);
        };
        b2EdgeAndPolygonContact.prototype.Evaluate = function(manifold, xfA, xfB) {
          var shapeA = this.m_fixtureA.GetShape();
          var shapeB = this.m_fixtureB.GetShape();
          b2CollideEdgeAndPolygon(manifold, shapeA, xfA, shapeB, xfB);
        };
        return b2EdgeAndPolygonContact;
      })(b2Contact);
      var b2ChainAndCircleContact = (function(_super) {
        __extends(b2ChainAndCircleContact, _super);
        function b2ChainAndCircleContact() {
          return _super.call(this) || this;
        }
        b2ChainAndCircleContact.Create = function(allocator) {
          return new b2ChainAndCircleContact();
        };
        b2ChainAndCircleContact.Destroy = function(contact, allocator) {};
        b2ChainAndCircleContact.prototype.Reset = function(fixtureA, indexA, fixtureB, indexB) {
          _super.prototype.Reset.call(this, fixtureA, indexA, fixtureB, indexB);
        };
        b2ChainAndCircleContact.prototype.Evaluate = function(manifold, xfA, xfB) {
          var shapeA = this.m_fixtureA.GetShape();
          var shapeB = this.m_fixtureB.GetShape();
          var chain = shapeA;
          var edge = b2ChainAndCircleContact.Evaluate_s_edge;
          chain.GetChildEdge(edge, this.m_indexA);
          b2CollideEdgeAndCircle(manifold, edge, xfA, shapeB, xfB);
        };
        b2ChainAndCircleContact.Evaluate_s_edge = new b2EdgeShape();
        return b2ChainAndCircleContact;
      })(b2Contact);
      var b2ChainAndPolygonContact = (function(_super) {
        __extends(b2ChainAndPolygonContact, _super);
        function b2ChainAndPolygonContact() {
          return _super.call(this) || this;
        }
        b2ChainAndPolygonContact.Create = function(allocator) {
          return new b2ChainAndPolygonContact();
        };
        b2ChainAndPolygonContact.Destroy = function(contact, allocator) {};
        b2ChainAndPolygonContact.prototype.Reset = function(fixtureA, indexA, fixtureB, indexB) {
          _super.prototype.Reset.call(this, fixtureA, indexA, fixtureB, indexB);
        };
        b2ChainAndPolygonContact.prototype.Evaluate = function(manifold, xfA, xfB) {
          var shapeA = this.m_fixtureA.GetShape();
          var shapeB = this.m_fixtureB.GetShape();
          var chain = shapeA;
          var edge = b2ChainAndPolygonContact.Evaluate_s_edge;
          chain.GetChildEdge(edge, this.m_indexA);
          b2CollideEdgeAndPolygon(manifold, edge, xfA, shapeB, xfB);
        };
        b2ChainAndPolygonContact.Evaluate_s_edge = new b2EdgeShape();
        return b2ChainAndPolygonContact;
      })(b2Contact);
      var b2ContactRegister = (function() {
        function b2ContactRegister() {
          this.createFcn = null;
          this.destroyFcn = null;
          this.primary = false;
        }
        return b2ContactRegister;
      })();
      var b2ContactFactory = (function() {
        function b2ContactFactory(allocator) {
          this.m_allocator = null;
          this.m_allocator = allocator;
          this.InitializeRegisters();
        }
        b2ContactFactory.prototype.AddType = function(createFcn, destroyFcn, type1, type2) {
          var _this = this;
          var pool = b2MakeArray(256, (function(i) {
            return createFcn(_this.m_allocator);
          }));
          function poolCreateFcn(allocator) {
            return pool.pop() || createFcn(allocator);
          }
          function poolDestroyFcn(contact, allocator) {
            pool.push(contact);
          }
          this.m_registers[type1][type2].createFcn = poolCreateFcn;
          this.m_registers[type1][type2].destroyFcn = poolDestroyFcn;
          this.m_registers[type1][type2].primary = true;
          if (type1 !== type2) {
            this.m_registers[type2][type1].createFcn = poolCreateFcn;
            this.m_registers[type2][type1].destroyFcn = poolDestroyFcn;
            this.m_registers[type2][type1].primary = false;
          }
        };
        b2ContactFactory.prototype.InitializeRegisters = function() {
          this.m_registers = [];
          for (var i = 0; i < exports.b2ShapeType.e_shapeTypeCount; i++) {
            this.m_registers[i] = [];
            for (var j = 0; j < exports.b2ShapeType.e_shapeTypeCount; j++) this.m_registers[i][j] = new b2ContactRegister();
          }
          this.AddType(b2CircleContact.Create, b2CircleContact.Destroy, exports.b2ShapeType.e_circleShape, exports.b2ShapeType.e_circleShape);
          this.AddType(b2PolygonAndCircleContact.Create, b2PolygonAndCircleContact.Destroy, exports.b2ShapeType.e_polygonShape, exports.b2ShapeType.e_circleShape);
          this.AddType(b2PolygonContact.Create, b2PolygonContact.Destroy, exports.b2ShapeType.e_polygonShape, exports.b2ShapeType.e_polygonShape);
          this.AddType(b2EdgeAndCircleContact.Create, b2EdgeAndCircleContact.Destroy, exports.b2ShapeType.e_edgeShape, exports.b2ShapeType.e_circleShape);
          this.AddType(b2EdgeAndPolygonContact.Create, b2EdgeAndPolygonContact.Destroy, exports.b2ShapeType.e_edgeShape, exports.b2ShapeType.e_polygonShape);
          this.AddType(b2ChainAndCircleContact.Create, b2ChainAndCircleContact.Destroy, exports.b2ShapeType.e_chainShape, exports.b2ShapeType.e_circleShape);
          this.AddType(b2ChainAndPolygonContact.Create, b2ChainAndPolygonContact.Destroy, exports.b2ShapeType.e_chainShape, exports.b2ShapeType.e_polygonShape);
        };
        b2ContactFactory.prototype.Create = function(fixtureA, indexA, fixtureB, indexB) {
          var type1 = fixtureA.GetType();
          var type2 = fixtureB.GetType();
          var reg = this.m_registers[type1][type2];
          if (reg.createFcn) {
            var c = reg.createFcn(this.m_allocator);
            reg.primary ? c.Reset(fixtureA, indexA, fixtureB, indexB) : c.Reset(fixtureB, indexB, fixtureA, indexA);
            return c;
          }
          return null;
        };
        b2ContactFactory.prototype.Destroy = function(contact) {
          var fixtureA = contact.m_fixtureA;
          var fixtureB = contact.m_fixtureB;
          if (contact.m_manifold.pointCount > 0 && !fixtureA.IsSensor() && !fixtureB.IsSensor()) {
            fixtureA.GetBody().SetAwake(true);
            fixtureB.GetBody().SetAwake(true);
          }
          var typeA = fixtureA.GetType();
          var typeB = fixtureB.GetType();
          var reg = this.m_registers[typeA][typeB];
          reg.destroyFcn && reg.destroyFcn(contact, this.m_allocator);
        };
        return b2ContactFactory;
      })();
      var b2DestructionListener = (function() {
        function b2DestructionListener() {}
        b2DestructionListener.prototype.SayGoodbyeJoint = function(joint) {};
        b2DestructionListener.prototype.SayGoodbyeFixture = function(fixture) {};
        b2DestructionListener.prototype.SayGoodbyeParticleGroup = function(group) {};
        b2DestructionListener.prototype.SayGoodbyeParticle = function(system, index) {};
        return b2DestructionListener;
      })();
      var b2ContactFilter = (function() {
        function b2ContactFilter() {}
        b2ContactFilter.prototype.ShouldCollide = function(fixtureA, fixtureB) {
          var bodyA = fixtureA.GetBody();
          var bodyB = fixtureB.GetBody();
          if (bodyB.GetType() === exports.b2BodyType.b2_staticBody && bodyA.GetType() === exports.b2BodyType.b2_staticBody) return false;
          if (!bodyB.ShouldCollideConnected(bodyA)) return false;
          var filter1 = fixtureA.GetFilterData();
          var filter2 = fixtureB.GetFilterData();
          if (filter1.groupIndex === filter2.groupIndex && 0 !== filter1.groupIndex) return filter1.groupIndex > 0;
          var collide = 0 !== (filter1.maskBits & filter2.categoryBits) && 0 !== (filter1.categoryBits & filter2.maskBits);
          return collide;
        };
        b2ContactFilter.prototype.ShouldCollideFixtureParticle = function(fixture, system, index) {
          return true;
        };
        b2ContactFilter.prototype.ShouldCollideParticleParticle = function(system, indexA, indexB) {
          return true;
        };
        b2ContactFilter.b2_defaultFilter = new b2ContactFilter();
        return b2ContactFilter;
      })();
      var b2ContactImpulse = (function() {
        function b2ContactImpulse() {
          this.normalImpulses = b2MakeNumberArray(b2_maxManifoldPoints);
          this.tangentImpulses = b2MakeNumberArray(b2_maxManifoldPoints);
          this.count = 0;
        }
        return b2ContactImpulse;
      })();
      var b2ContactListener = (function() {
        function b2ContactListener() {}
        b2ContactListener.prototype.BeginContact = function(contact) {};
        b2ContactListener.prototype.EndContact = function(contact) {};
        b2ContactListener.prototype.BeginContactFixtureParticle = function(system, contact) {};
        b2ContactListener.prototype.EndContactFixtureParticle = function(system, contact) {};
        b2ContactListener.prototype.BeginContactParticleParticle = function(system, contact) {};
        b2ContactListener.prototype.EndContactParticleParticle = function(system, contact) {};
        b2ContactListener.prototype.PreSolve = function(contact, oldManifold) {};
        b2ContactListener.prototype.PostSolve = function(contact, impulse) {};
        b2ContactListener.b2_defaultListener = new b2ContactListener();
        return b2ContactListener;
      })();
      var b2QueryCallback = (function() {
        function b2QueryCallback() {}
        b2QueryCallback.prototype.ReportFixture = function(fixture) {
          return true;
        };
        b2QueryCallback.prototype.ReportParticle = function(system, index) {
          return false;
        };
        b2QueryCallback.prototype.ShouldQueryParticleSystem = function(system) {
          return true;
        };
        return b2QueryCallback;
      })();
      var b2RayCastCallback = (function() {
        function b2RayCastCallback() {}
        b2RayCastCallback.prototype.ReportFixture = function(fixture, point, normal, fraction) {
          return fraction;
        };
        b2RayCastCallback.prototype.ReportParticle = function(system, index, point, normal, fraction) {
          return 0;
        };
        b2RayCastCallback.prototype.ShouldQueryParticleSystem = function(system) {
          return true;
        };
        return b2RayCastCallback;
      })();
      var b2ContactManager = (function() {
        function b2ContactManager() {
          this.m_broadPhase = new b2BroadPhase();
          this.m_contactList = null;
          this.m_contactCount = 0;
          this.m_contactFilter = b2ContactFilter.b2_defaultFilter;
          this.m_contactListener = b2ContactListener.b2_defaultListener;
          this.m_allocator = null;
          this.m_contactFactory = new b2ContactFactory(this.m_allocator);
        }
        b2ContactManager.prototype.AddPair = function(proxyA, proxyB) {
          var fixtureA = proxyA.fixture;
          var fixtureB = proxyB.fixture;
          var indexA = proxyA.childIndex;
          var indexB = proxyB.childIndex;
          var bodyA = fixtureA.GetBody();
          var bodyB = fixtureB.GetBody();
          if (bodyA === bodyB) return;
          var edge = bodyB.GetContactList();
          while (edge) {
            if (edge.other === bodyA) {
              var fA = edge.contact.GetFixtureA();
              var fB = edge.contact.GetFixtureB();
              var iA = edge.contact.GetChildIndexA();
              var iB = edge.contact.GetChildIndexB();
              if (fA === fixtureA && fB === fixtureB && iA === indexA && iB === indexB) return;
              if (fA === fixtureB && fB === fixtureA && iA === indexB && iB === indexA) return;
            }
            edge = edge.next;
          }
          if (this.m_contactFilter && !this.m_contactFilter.ShouldCollide(fixtureA, fixtureB)) return;
          var c = this.m_contactFactory.Create(fixtureA, indexA, fixtureB, indexB);
          if (null === c) return;
          fixtureA = c.GetFixtureA();
          fixtureB = c.GetFixtureB();
          indexA = c.GetChildIndexA();
          indexB = c.GetChildIndexB();
          bodyA = fixtureA.m_body;
          bodyB = fixtureB.m_body;
          c.m_prev = null;
          c.m_next = this.m_contactList;
          null !== this.m_contactList && (this.m_contactList.m_prev = c);
          this.m_contactList = c;
          c.m_nodeA.contact = c;
          c.m_nodeA.other = bodyB;
          c.m_nodeA.prev = null;
          c.m_nodeA.next = bodyA.m_contactList;
          null !== bodyA.m_contactList && (bodyA.m_contactList.prev = c.m_nodeA);
          bodyA.m_contactList = c.m_nodeA;
          c.m_nodeB.contact = c;
          c.m_nodeB.other = bodyA;
          c.m_nodeB.prev = null;
          c.m_nodeB.next = bodyB.m_contactList;
          null !== bodyB.m_contactList && (bodyB.m_contactList.prev = c.m_nodeB);
          bodyB.m_contactList = c.m_nodeB;
          if (!fixtureA.IsSensor() && !fixtureB.IsSensor()) {
            bodyA.SetAwake(true);
            bodyB.SetAwake(true);
          }
          ++this.m_contactCount;
        };
        b2ContactManager.prototype.FindNewContacts = function() {
          var _this = this;
          this.m_broadPhase.UpdatePairs((function(proxyA, proxyB) {
            _this.AddPair(proxyA, proxyB);
          }));
        };
        b2ContactManager.prototype.Destroy = function(c) {
          var fixtureA = c.GetFixtureA();
          var fixtureB = c.GetFixtureB();
          var bodyA = fixtureA.GetBody();
          var bodyB = fixtureB.GetBody();
          this.m_contactListener && c.IsTouching() && this.m_contactListener.EndContact(c);
          c.m_prev && (c.m_prev.m_next = c.m_next);
          c.m_next && (c.m_next.m_prev = c.m_prev);
          c === this.m_contactList && (this.m_contactList = c.m_next);
          c.m_nodeA.prev && (c.m_nodeA.prev.next = c.m_nodeA.next);
          c.m_nodeA.next && (c.m_nodeA.next.prev = c.m_nodeA.prev);
          c.m_nodeA === bodyA.m_contactList && (bodyA.m_contactList = c.m_nodeA.next);
          c.m_nodeB.prev && (c.m_nodeB.prev.next = c.m_nodeB.next);
          c.m_nodeB.next && (c.m_nodeB.next.prev = c.m_nodeB.prev);
          c.m_nodeB === bodyB.m_contactList && (bodyB.m_contactList = c.m_nodeB.next);
          this.m_contactFactory.Destroy(c);
          --this.m_contactCount;
        };
        b2ContactManager.prototype.Collide = function() {
          var c = this.m_contactList;
          while (c) {
            var fixtureA = c.GetFixtureA();
            var fixtureB = c.GetFixtureB();
            var indexA = c.GetChildIndexA();
            var indexB = c.GetChildIndexB();
            var bodyA = fixtureA.GetBody();
            var bodyB = fixtureB.GetBody();
            if (c.m_filterFlag) {
              if (this.m_contactFilter && !this.m_contactFilter.ShouldCollide(fixtureA, fixtureB)) {
                var cNuke = c;
                c = cNuke.m_next;
                this.Destroy(cNuke);
                continue;
              }
              c.m_filterFlag = false;
            }
            var activeA = bodyA.IsAwake() && bodyA.m_type !== exports.b2BodyType.b2_staticBody;
            var activeB = bodyB.IsAwake() && bodyB.m_type !== exports.b2BodyType.b2_staticBody;
            if (!activeA && !activeB) {
              c = c.m_next;
              continue;
            }
            var proxyA = fixtureA.m_proxies[indexA].treeNode;
            var proxyB = fixtureB.m_proxies[indexB].treeNode;
            var overlap = b2TestOverlapAABB(proxyA.aabb, proxyB.aabb);
            if (!overlap) {
              var cNuke = c;
              c = cNuke.m_next;
              this.Destroy(cNuke);
              continue;
            }
            c.Update(this.m_contactListener);
            c = c.m_next;
          }
        };
        return b2ContactManager;
      })();
      var b2Profile = (function() {
        function b2Profile() {
          this.step = 0;
          this.collide = 0;
          this.solve = 0;
          this.solveInit = 0;
          this.solveVelocity = 0;
          this.solvePosition = 0;
          this.broadphase = 0;
          this.solveTOI = 0;
        }
        b2Profile.prototype.Reset = function() {
          this.step = 0;
          this.collide = 0;
          this.solve = 0;
          this.solveInit = 0;
          this.solveVelocity = 0;
          this.solvePosition = 0;
          this.broadphase = 0;
          this.solveTOI = 0;
          return this;
        };
        return b2Profile;
      })();
      var b2TimeStep = (function() {
        function b2TimeStep() {
          this.dt = 0;
          this.inv_dt = 0;
          this.dtRatio = 0;
          this.velocityIterations = 0;
          this.positionIterations = 0;
          this.particleIterations = 0;
          this.warmStarting = false;
        }
        b2TimeStep.prototype.Copy = function(step) {
          this.dt = step.dt;
          this.inv_dt = step.inv_dt;
          this.dtRatio = step.dtRatio;
          this.positionIterations = step.positionIterations;
          this.velocityIterations = step.velocityIterations;
          this.particleIterations = step.particleIterations;
          this.warmStarting = step.warmStarting;
          return this;
        };
        return b2TimeStep;
      })();
      var b2Position = (function() {
        function b2Position() {
          this.c = new b2Vec2();
          this.a = 0;
        }
        b2Position.MakeArray = function(length) {
          return b2MakeArray(length, (function(i) {
            return new b2Position();
          }));
        };
        return b2Position;
      })();
      var b2Velocity = (function() {
        function b2Velocity() {
          this.v = new b2Vec2();
          this.w = 0;
        }
        b2Velocity.MakeArray = function(length) {
          return b2MakeArray(length, (function(i) {
            return new b2Velocity();
          }));
        };
        return b2Velocity;
      })();
      var b2SolverData = (function() {
        function b2SolverData() {
          this.step = new b2TimeStep();
        }
        return b2SolverData;
      })();
      var g_blockSolve = false;
      var b2VelocityConstraintPoint = (function() {
        function b2VelocityConstraintPoint() {
          this.rA = new b2Vec2();
          this.rB = new b2Vec2();
          this.normalImpulse = 0;
          this.tangentImpulse = 0;
          this.normalMass = 0;
          this.tangentMass = 0;
          this.velocityBias = 0;
        }
        b2VelocityConstraintPoint.MakeArray = function(length) {
          return b2MakeArray(length, (function(i) {
            return new b2VelocityConstraintPoint();
          }));
        };
        return b2VelocityConstraintPoint;
      })();
      var b2ContactVelocityConstraint = (function() {
        function b2ContactVelocityConstraint() {
          this.points = b2VelocityConstraintPoint.MakeArray(b2_maxManifoldPoints);
          this.normal = new b2Vec2();
          this.tangent = new b2Vec2();
          this.normalMass = new b2Mat22();
          this.K = new b2Mat22();
          this.indexA = 0;
          this.indexB = 0;
          this.invMassA = 0;
          this.invMassB = 0;
          this.invIA = 0;
          this.invIB = 0;
          this.friction = 0;
          this.restitution = 0;
          this.tangentSpeed = 0;
          this.pointCount = 0;
          this.contactIndex = 0;
        }
        b2ContactVelocityConstraint.MakeArray = function(length) {
          return b2MakeArray(length, (function(i) {
            return new b2ContactVelocityConstraint();
          }));
        };
        return b2ContactVelocityConstraint;
      })();
      var b2ContactPositionConstraint = (function() {
        function b2ContactPositionConstraint() {
          this.localPoints = b2Vec2.MakeArray(b2_maxManifoldPoints);
          this.localNormal = new b2Vec2();
          this.localPoint = new b2Vec2();
          this.indexA = 0;
          this.indexB = 0;
          this.invMassA = 0;
          this.invMassB = 0;
          this.localCenterA = new b2Vec2();
          this.localCenterB = new b2Vec2();
          this.invIA = 0;
          this.invIB = 0;
          this.type = exports.b2ManifoldType.e_unknown;
          this.radiusA = 0;
          this.radiusB = 0;
          this.pointCount = 0;
        }
        b2ContactPositionConstraint.MakeArray = function(length) {
          return b2MakeArray(length, (function(i) {
            return new b2ContactPositionConstraint();
          }));
        };
        return b2ContactPositionConstraint;
      })();
      var b2ContactSolverDef = (function() {
        function b2ContactSolverDef() {
          this.step = new b2TimeStep();
          this.count = 0;
          this.allocator = null;
        }
        return b2ContactSolverDef;
      })();
      var b2PositionSolverManifold = (function() {
        function b2PositionSolverManifold() {
          this.normal = new b2Vec2();
          this.point = new b2Vec2();
          this.separation = 0;
        }
        b2PositionSolverManifold.prototype.Initialize = function(pc, xfA, xfB, index) {
          var pointA = b2PositionSolverManifold.Initialize_s_pointA;
          var pointB = b2PositionSolverManifold.Initialize_s_pointB;
          var planePoint = b2PositionSolverManifold.Initialize_s_planePoint;
          var clipPoint = b2PositionSolverManifold.Initialize_s_clipPoint;
          switch (pc.type) {
           case exports.b2ManifoldType.e_circles:
            b2Transform.MulXV(xfA, pc.localPoint, pointA);
            b2Transform.MulXV(xfB, pc.localPoints[0], pointB);
            b2Vec2.SubVV(pointB, pointA, this.normal).SelfNormalize();
            b2Vec2.MidVV(pointA, pointB, this.point);
            this.separation = b2Vec2.DotVV(b2Vec2.SubVV(pointB, pointA, b2Vec2.s_t0), this.normal) - pc.radiusA - pc.radiusB;
            break;

           case exports.b2ManifoldType.e_faceA:
            b2Rot.MulRV(xfA.q, pc.localNormal, this.normal);
            b2Transform.MulXV(xfA, pc.localPoint, planePoint);
            b2Transform.MulXV(xfB, pc.localPoints[index], clipPoint);
            this.separation = b2Vec2.DotVV(b2Vec2.SubVV(clipPoint, planePoint, b2Vec2.s_t0), this.normal) - pc.radiusA - pc.radiusB;
            this.point.Copy(clipPoint);
            break;

           case exports.b2ManifoldType.e_faceB:
            b2Rot.MulRV(xfB.q, pc.localNormal, this.normal);
            b2Transform.MulXV(xfB, pc.localPoint, planePoint);
            b2Transform.MulXV(xfA, pc.localPoints[index], clipPoint);
            this.separation = b2Vec2.DotVV(b2Vec2.SubVV(clipPoint, planePoint, b2Vec2.s_t0), this.normal) - pc.radiusA - pc.radiusB;
            this.point.Copy(clipPoint);
            this.normal.SelfNeg();
          }
        };
        b2PositionSolverManifold.Initialize_s_pointA = new b2Vec2();
        b2PositionSolverManifold.Initialize_s_pointB = new b2Vec2();
        b2PositionSolverManifold.Initialize_s_planePoint = new b2Vec2();
        b2PositionSolverManifold.Initialize_s_clipPoint = new b2Vec2();
        return b2PositionSolverManifold;
      })();
      var b2ContactSolver = (function() {
        function b2ContactSolver() {
          this.m_step = new b2TimeStep();
          this.m_allocator = null;
          this.m_positionConstraints = b2ContactPositionConstraint.MakeArray(1024);
          this.m_velocityConstraints = b2ContactVelocityConstraint.MakeArray(1024);
          this.m_count = 0;
        }
        b2ContactSolver.prototype.Initialize = function(def) {
          this.m_step.Copy(def.step);
          this.m_allocator = def.allocator;
          this.m_count = def.count;
          if (this.m_positionConstraints.length < this.m_count) {
            var new_length = b2Max(2 * this.m_positionConstraints.length, this.m_count);
            while (this.m_positionConstraints.length < new_length) this.m_positionConstraints[this.m_positionConstraints.length] = new b2ContactPositionConstraint();
          }
          if (this.m_velocityConstraints.length < this.m_count) {
            var new_length = b2Max(2 * this.m_velocityConstraints.length, this.m_count);
            while (this.m_velocityConstraints.length < new_length) this.m_velocityConstraints[this.m_velocityConstraints.length] = new b2ContactVelocityConstraint();
          }
          this.m_positions = def.positions;
          this.m_velocities = def.velocities;
          this.m_contacts = def.contacts;
          for (var i = 0; i < this.m_count; ++i) {
            var contact = this.m_contacts[i];
            var fixtureA = contact.m_fixtureA;
            var fixtureB = contact.m_fixtureB;
            var shapeA = fixtureA.GetShape();
            var shapeB = fixtureB.GetShape();
            var radiusA = shapeA.m_radius;
            var radiusB = shapeB.m_radius;
            var bodyA = fixtureA.GetBody();
            var bodyB = fixtureB.GetBody();
            var manifold = contact.GetManifold();
            var pointCount = manifold.pointCount;
            var vc = this.m_velocityConstraints[i];
            vc.friction = contact.m_friction;
            vc.restitution = contact.m_restitution;
            vc.tangentSpeed = contact.m_tangentSpeed;
            vc.indexA = bodyA.m_islandIndex;
            vc.indexB = bodyB.m_islandIndex;
            vc.invMassA = bodyA.m_invMass;
            vc.invMassB = bodyB.m_invMass;
            vc.invIA = bodyA.m_invI;
            vc.invIB = bodyB.m_invI;
            vc.contactIndex = i;
            vc.pointCount = pointCount;
            vc.K.SetZero();
            vc.normalMass.SetZero();
            var pc = this.m_positionConstraints[i];
            pc.indexA = bodyA.m_islandIndex;
            pc.indexB = bodyB.m_islandIndex;
            pc.invMassA = bodyA.m_invMass;
            pc.invMassB = bodyB.m_invMass;
            pc.localCenterA.Copy(bodyA.m_sweep.localCenter);
            pc.localCenterB.Copy(bodyB.m_sweep.localCenter);
            pc.invIA = bodyA.m_invI;
            pc.invIB = bodyB.m_invI;
            pc.localNormal.Copy(manifold.localNormal);
            pc.localPoint.Copy(manifold.localPoint);
            pc.pointCount = pointCount;
            pc.radiusA = radiusA;
            pc.radiusB = radiusB;
            pc.type = manifold.type;
            for (var j = 0; j < pointCount; ++j) {
              var cp = manifold.points[j];
              var vcp = vc.points[j];
              if (this.m_step.warmStarting) {
                vcp.normalImpulse = this.m_step.dtRatio * cp.normalImpulse;
                vcp.tangentImpulse = this.m_step.dtRatio * cp.tangentImpulse;
              } else {
                vcp.normalImpulse = 0;
                vcp.tangentImpulse = 0;
              }
              vcp.rA.SetZero();
              vcp.rB.SetZero();
              vcp.normalMass = 0;
              vcp.tangentMass = 0;
              vcp.velocityBias = 0;
              pc.localPoints[j].Copy(cp.localPoint);
            }
          }
          return this;
        };
        b2ContactSolver.prototype.InitializeVelocityConstraints = function() {
          var xfA = b2ContactSolver.InitializeVelocityConstraints_s_xfA;
          var xfB = b2ContactSolver.InitializeVelocityConstraints_s_xfB;
          var worldManifold = b2ContactSolver.InitializeVelocityConstraints_s_worldManifold;
          var k_maxConditionNumber = 1e3;
          for (var i = 0; i < this.m_count; ++i) {
            var vc = this.m_velocityConstraints[i];
            var pc = this.m_positionConstraints[i];
            var radiusA = pc.radiusA;
            var radiusB = pc.radiusB;
            var manifold = this.m_contacts[vc.contactIndex].GetManifold();
            var indexA = vc.indexA;
            var indexB = vc.indexB;
            var mA = vc.invMassA;
            var mB = vc.invMassB;
            var iA = vc.invIA;
            var iB = vc.invIB;
            var localCenterA = pc.localCenterA;
            var localCenterB = pc.localCenterB;
            var cA = this.m_positions[indexA].c;
            var aA = this.m_positions[indexA].a;
            var vA = this.m_velocities[indexA].v;
            var wA = this.m_velocities[indexA].w;
            var cB = this.m_positions[indexB].c;
            var aB = this.m_positions[indexB].a;
            var vB = this.m_velocities[indexB].v;
            var wB = this.m_velocities[indexB].w;
            xfA.q.SetAngle(aA);
            xfB.q.SetAngle(aB);
            b2Vec2.SubVV(cA, b2Rot.MulRV(xfA.q, localCenterA, b2Vec2.s_t0), xfA.p);
            b2Vec2.SubVV(cB, b2Rot.MulRV(xfB.q, localCenterB, b2Vec2.s_t0), xfB.p);
            worldManifold.Initialize(manifold, xfA, radiusA, xfB, radiusB);
            vc.normal.Copy(worldManifold.normal);
            b2Vec2.CrossVOne(vc.normal, vc.tangent);
            var pointCount = vc.pointCount;
            for (var j = 0; j < pointCount; ++j) {
              var vcp = vc.points[j];
              b2Vec2.SubVV(worldManifold.points[j], cA, vcp.rA);
              b2Vec2.SubVV(worldManifold.points[j], cB, vcp.rB);
              var rnA = b2Vec2.CrossVV(vcp.rA, vc.normal);
              var rnB = b2Vec2.CrossVV(vcp.rB, vc.normal);
              var kNormal = mA + mB + iA * rnA * rnA + iB * rnB * rnB;
              vcp.normalMass = kNormal > 0 ? 1 / kNormal : 0;
              var tangent = vc.tangent;
              var rtA = b2Vec2.CrossVV(vcp.rA, tangent);
              var rtB = b2Vec2.CrossVV(vcp.rB, tangent);
              var kTangent = mA + mB + iA * rtA * rtA + iB * rtB * rtB;
              vcp.tangentMass = kTangent > 0 ? 1 / kTangent : 0;
              vcp.velocityBias = 0;
              var vRel = b2Vec2.DotVV(vc.normal, b2Vec2.SubVV(b2Vec2.AddVCrossSV(vB, wB, vcp.rB, b2Vec2.s_t0), b2Vec2.AddVCrossSV(vA, wA, vcp.rA, b2Vec2.s_t1), b2Vec2.s_t0));
              vRel < -b2_velocityThreshold && (vcp.velocityBias += -vc.restitution * vRel);
            }
            if (2 === vc.pointCount && g_blockSolve) {
              var vcp1 = vc.points[0];
              var vcp2 = vc.points[1];
              var rn1A = b2Vec2.CrossVV(vcp1.rA, vc.normal);
              var rn1B = b2Vec2.CrossVV(vcp1.rB, vc.normal);
              var rn2A = b2Vec2.CrossVV(vcp2.rA, vc.normal);
              var rn2B = b2Vec2.CrossVV(vcp2.rB, vc.normal);
              var k11 = mA + mB + iA * rn1A * rn1A + iB * rn1B * rn1B;
              var k22 = mA + mB + iA * rn2A * rn2A + iB * rn2B * rn2B;
              var k12 = mA + mB + iA * rn1A * rn2A + iB * rn1B * rn2B;
              if (k11 * k11 < k_maxConditionNumber * (k11 * k22 - k12 * k12)) {
                vc.K.ex.Set(k11, k12);
                vc.K.ey.Set(k12, k22);
                vc.K.GetInverse(vc.normalMass);
              } else vc.pointCount = 1;
            }
          }
        };
        b2ContactSolver.prototype.WarmStart = function() {
          var P = b2ContactSolver.WarmStart_s_P;
          for (var i = 0; i < this.m_count; ++i) {
            var vc = this.m_velocityConstraints[i];
            var indexA = vc.indexA;
            var indexB = vc.indexB;
            var mA = vc.invMassA;
            var iA = vc.invIA;
            var mB = vc.invMassB;
            var iB = vc.invIB;
            var pointCount = vc.pointCount;
            var vA = this.m_velocities[indexA].v;
            var wA = this.m_velocities[indexA].w;
            var vB = this.m_velocities[indexB].v;
            var wB = this.m_velocities[indexB].w;
            var normal = vc.normal;
            var tangent = vc.tangent;
            for (var j = 0; j < pointCount; ++j) {
              var vcp = vc.points[j];
              b2Vec2.AddVV(b2Vec2.MulSV(vcp.normalImpulse, normal, b2Vec2.s_t0), b2Vec2.MulSV(vcp.tangentImpulse, tangent, b2Vec2.s_t1), P);
              wA -= iA * b2Vec2.CrossVV(vcp.rA, P);
              vA.SelfMulSub(mA, P);
              wB += iB * b2Vec2.CrossVV(vcp.rB, P);
              vB.SelfMulAdd(mB, P);
            }
            this.m_velocities[indexA].w = wA;
            this.m_velocities[indexB].w = wB;
          }
        };
        b2ContactSolver.prototype.SolveVelocityConstraints = function() {
          var dv = b2ContactSolver.SolveVelocityConstraints_s_dv;
          var dv1 = b2ContactSolver.SolveVelocityConstraints_s_dv1;
          var dv2 = b2ContactSolver.SolveVelocityConstraints_s_dv2;
          var P = b2ContactSolver.SolveVelocityConstraints_s_P;
          var a = b2ContactSolver.SolveVelocityConstraints_s_a;
          var b = b2ContactSolver.SolveVelocityConstraints_s_b;
          var x = b2ContactSolver.SolveVelocityConstraints_s_x;
          var d = b2ContactSolver.SolveVelocityConstraints_s_d;
          var P1 = b2ContactSolver.SolveVelocityConstraints_s_P1;
          var P2 = b2ContactSolver.SolveVelocityConstraints_s_P2;
          var P1P2 = b2ContactSolver.SolveVelocityConstraints_s_P1P2;
          for (var i = 0; i < this.m_count; ++i) {
            var vc = this.m_velocityConstraints[i];
            var indexA = vc.indexA;
            var indexB = vc.indexB;
            var mA = vc.invMassA;
            var iA = vc.invIA;
            var mB = vc.invMassB;
            var iB = vc.invIB;
            var pointCount = vc.pointCount;
            var vA = this.m_velocities[indexA].v;
            var wA = this.m_velocities[indexA].w;
            var vB = this.m_velocities[indexB].v;
            var wB = this.m_velocities[indexB].w;
            var normal = vc.normal;
            var tangent = vc.tangent;
            var friction = vc.friction;
            for (var j = 0; j < pointCount; ++j) {
              var vcp = vc.points[j];
              b2Vec2.SubVV(b2Vec2.AddVCrossSV(vB, wB, vcp.rB, b2Vec2.s_t0), b2Vec2.AddVCrossSV(vA, wA, vcp.rA, b2Vec2.s_t1), dv);
              var vt = b2Vec2.DotVV(dv, tangent) - vc.tangentSpeed;
              var lambda = vcp.tangentMass * -vt;
              var maxFriction = friction * vcp.normalImpulse;
              var newImpulse = b2Clamp(vcp.tangentImpulse + lambda, -maxFriction, maxFriction);
              lambda = newImpulse - vcp.tangentImpulse;
              vcp.tangentImpulse = newImpulse;
              b2Vec2.MulSV(lambda, tangent, P);
              vA.SelfMulSub(mA, P);
              wA -= iA * b2Vec2.CrossVV(vcp.rA, P);
              vB.SelfMulAdd(mB, P);
              wB += iB * b2Vec2.CrossVV(vcp.rB, P);
            }
            if (1 === vc.pointCount || false === g_blockSolve) for (var j = 0; j < pointCount; ++j) {
              var vcp = vc.points[j];
              b2Vec2.SubVV(b2Vec2.AddVCrossSV(vB, wB, vcp.rB, b2Vec2.s_t0), b2Vec2.AddVCrossSV(vA, wA, vcp.rA, b2Vec2.s_t1), dv);
              var vn = b2Vec2.DotVV(dv, normal);
              var lambda = -vcp.normalMass * (vn - vcp.velocityBias);
              var newImpulse = b2Max(vcp.normalImpulse + lambda, 0);
              lambda = newImpulse - vcp.normalImpulse;
              vcp.normalImpulse = newImpulse;
              b2Vec2.MulSV(lambda, normal, P);
              vA.SelfMulSub(mA, P);
              wA -= iA * b2Vec2.CrossVV(vcp.rA, P);
              vB.SelfMulAdd(mB, P);
              wB += iB * b2Vec2.CrossVV(vcp.rB, P);
            } else {
              var cp1 = vc.points[0];
              var cp2 = vc.points[1];
              a.Set(cp1.normalImpulse, cp2.normalImpulse);
              b2Vec2.SubVV(b2Vec2.AddVCrossSV(vB, wB, cp1.rB, b2Vec2.s_t0), b2Vec2.AddVCrossSV(vA, wA, cp1.rA, b2Vec2.s_t1), dv1);
              b2Vec2.SubVV(b2Vec2.AddVCrossSV(vB, wB, cp2.rB, b2Vec2.s_t0), b2Vec2.AddVCrossSV(vA, wA, cp2.rA, b2Vec2.s_t1), dv2);
              var vn1 = b2Vec2.DotVV(dv1, normal);
              var vn2 = b2Vec2.DotVV(dv2, normal);
              b.x = vn1 - cp1.velocityBias;
              b.y = vn2 - cp2.velocityBias;
              b.SelfSub(b2Mat22.MulMV(vc.K, a, b2Vec2.s_t0));
              for (;;) {
                b2Mat22.MulMV(vc.normalMass, b, x).SelfNeg();
                if (x.x >= 0 && x.y >= 0) {
                  b2Vec2.SubVV(x, a, d);
                  b2Vec2.MulSV(d.x, normal, P1);
                  b2Vec2.MulSV(d.y, normal, P2);
                  b2Vec2.AddVV(P1, P2, P1P2);
                  vA.SelfMulSub(mA, P1P2);
                  wA -= iA * (b2Vec2.CrossVV(cp1.rA, P1) + b2Vec2.CrossVV(cp2.rA, P2));
                  vB.SelfMulAdd(mB, P1P2);
                  wB += iB * (b2Vec2.CrossVV(cp1.rB, P1) + b2Vec2.CrossVV(cp2.rB, P2));
                  cp1.normalImpulse = x.x;
                  cp2.normalImpulse = x.y;
                  break;
                }
                x.x = -cp1.normalMass * b.x;
                x.y = 0;
                vn1 = 0;
                vn2 = vc.K.ex.y * x.x + b.y;
                if (x.x >= 0 && vn2 >= 0) {
                  b2Vec2.SubVV(x, a, d);
                  b2Vec2.MulSV(d.x, normal, P1);
                  b2Vec2.MulSV(d.y, normal, P2);
                  b2Vec2.AddVV(P1, P2, P1P2);
                  vA.SelfMulSub(mA, P1P2);
                  wA -= iA * (b2Vec2.CrossVV(cp1.rA, P1) + b2Vec2.CrossVV(cp2.rA, P2));
                  vB.SelfMulAdd(mB, P1P2);
                  wB += iB * (b2Vec2.CrossVV(cp1.rB, P1) + b2Vec2.CrossVV(cp2.rB, P2));
                  cp1.normalImpulse = x.x;
                  cp2.normalImpulse = x.y;
                  break;
                }
                x.x = 0;
                x.y = -cp2.normalMass * b.y;
                vn1 = vc.K.ey.x * x.y + b.x;
                vn2 = 0;
                if (x.y >= 0 && vn1 >= 0) {
                  b2Vec2.SubVV(x, a, d);
                  b2Vec2.MulSV(d.x, normal, P1);
                  b2Vec2.MulSV(d.y, normal, P2);
                  b2Vec2.AddVV(P1, P2, P1P2);
                  vA.SelfMulSub(mA, P1P2);
                  wA -= iA * (b2Vec2.CrossVV(cp1.rA, P1) + b2Vec2.CrossVV(cp2.rA, P2));
                  vB.SelfMulAdd(mB, P1P2);
                  wB += iB * (b2Vec2.CrossVV(cp1.rB, P1) + b2Vec2.CrossVV(cp2.rB, P2));
                  cp1.normalImpulse = x.x;
                  cp2.normalImpulse = x.y;
                  break;
                }
                x.x = 0;
                x.y = 0;
                vn1 = b.x;
                vn2 = b.y;
                if (vn1 >= 0 && vn2 >= 0) {
                  b2Vec2.SubVV(x, a, d);
                  b2Vec2.MulSV(d.x, normal, P1);
                  b2Vec2.MulSV(d.y, normal, P2);
                  b2Vec2.AddVV(P1, P2, P1P2);
                  vA.SelfMulSub(mA, P1P2);
                  wA -= iA * (b2Vec2.CrossVV(cp1.rA, P1) + b2Vec2.CrossVV(cp2.rA, P2));
                  vB.SelfMulAdd(mB, P1P2);
                  wB += iB * (b2Vec2.CrossVV(cp1.rB, P1) + b2Vec2.CrossVV(cp2.rB, P2));
                  cp1.normalImpulse = x.x;
                  cp2.normalImpulse = x.y;
                  break;
                }
                break;
              }
            }
            this.m_velocities[indexA].w = wA;
            this.m_velocities[indexB].w = wB;
          }
        };
        b2ContactSolver.prototype.StoreImpulses = function() {
          for (var i = 0; i < this.m_count; ++i) {
            var vc = this.m_velocityConstraints[i];
            var manifold = this.m_contacts[vc.contactIndex].GetManifold();
            for (var j = 0; j < vc.pointCount; ++j) {
              manifold.points[j].normalImpulse = vc.points[j].normalImpulse;
              manifold.points[j].tangentImpulse = vc.points[j].tangentImpulse;
            }
          }
        };
        b2ContactSolver.prototype.SolvePositionConstraints = function() {
          var xfA = b2ContactSolver.SolvePositionConstraints_s_xfA;
          var xfB = b2ContactSolver.SolvePositionConstraints_s_xfB;
          var psm = b2ContactSolver.SolvePositionConstraints_s_psm;
          var rA = b2ContactSolver.SolvePositionConstraints_s_rA;
          var rB = b2ContactSolver.SolvePositionConstraints_s_rB;
          var P = b2ContactSolver.SolvePositionConstraints_s_P;
          var minSeparation = 0;
          for (var i = 0; i < this.m_count; ++i) {
            var pc = this.m_positionConstraints[i];
            var indexA = pc.indexA;
            var indexB = pc.indexB;
            var localCenterA = pc.localCenterA;
            var mA = pc.invMassA;
            var iA = pc.invIA;
            var localCenterB = pc.localCenterB;
            var mB = pc.invMassB;
            var iB = pc.invIB;
            var pointCount = pc.pointCount;
            var cA = this.m_positions[indexA].c;
            var aA = this.m_positions[indexA].a;
            var cB = this.m_positions[indexB].c;
            var aB = this.m_positions[indexB].a;
            for (var j = 0; j < pointCount; ++j) {
              xfA.q.SetAngle(aA);
              xfB.q.SetAngle(aB);
              b2Vec2.SubVV(cA, b2Rot.MulRV(xfA.q, localCenterA, b2Vec2.s_t0), xfA.p);
              b2Vec2.SubVV(cB, b2Rot.MulRV(xfB.q, localCenterB, b2Vec2.s_t0), xfB.p);
              psm.Initialize(pc, xfA, xfB, j);
              var normal = psm.normal;
              var point = psm.point;
              var separation = psm.separation;
              b2Vec2.SubVV(point, cA, rA);
              b2Vec2.SubVV(point, cB, rB);
              minSeparation = b2Min(minSeparation, separation);
              var C = b2Clamp(b2_baumgarte * (separation + b2_linearSlop), -b2_maxLinearCorrection, 0);
              var rnA = b2Vec2.CrossVV(rA, normal);
              var rnB = b2Vec2.CrossVV(rB, normal);
              var K = mA + mB + iA * rnA * rnA + iB * rnB * rnB;
              var impulse = K > 0 ? -C / K : 0;
              b2Vec2.MulSV(impulse, normal, P);
              cA.SelfMulSub(mA, P);
              aA -= iA * b2Vec2.CrossVV(rA, P);
              cB.SelfMulAdd(mB, P);
              aB += iB * b2Vec2.CrossVV(rB, P);
            }
            this.m_positions[indexA].a = aA;
            this.m_positions[indexB].a = aB;
          }
          return minSeparation > -3 * b2_linearSlop;
        };
        b2ContactSolver.prototype.SolveTOIPositionConstraints = function(toiIndexA, toiIndexB) {
          var xfA = b2ContactSolver.SolveTOIPositionConstraints_s_xfA;
          var xfB = b2ContactSolver.SolveTOIPositionConstraints_s_xfB;
          var psm = b2ContactSolver.SolveTOIPositionConstraints_s_psm;
          var rA = b2ContactSolver.SolveTOIPositionConstraints_s_rA;
          var rB = b2ContactSolver.SolveTOIPositionConstraints_s_rB;
          var P = b2ContactSolver.SolveTOIPositionConstraints_s_P;
          var minSeparation = 0;
          for (var i = 0; i < this.m_count; ++i) {
            var pc = this.m_positionConstraints[i];
            var indexA = pc.indexA;
            var indexB = pc.indexB;
            var localCenterA = pc.localCenterA;
            var localCenterB = pc.localCenterB;
            var pointCount = pc.pointCount;
            var mA = 0;
            var iA = 0;
            if (indexA === toiIndexA || indexA === toiIndexB) {
              mA = pc.invMassA;
              iA = pc.invIA;
            }
            var mB = 0;
            var iB = 0;
            if (indexB === toiIndexA || indexB === toiIndexB) {
              mB = pc.invMassB;
              iB = pc.invIB;
            }
            var cA = this.m_positions[indexA].c;
            var aA = this.m_positions[indexA].a;
            var cB = this.m_positions[indexB].c;
            var aB = this.m_positions[indexB].a;
            for (var j = 0; j < pointCount; ++j) {
              xfA.q.SetAngle(aA);
              xfB.q.SetAngle(aB);
              b2Vec2.SubVV(cA, b2Rot.MulRV(xfA.q, localCenterA, b2Vec2.s_t0), xfA.p);
              b2Vec2.SubVV(cB, b2Rot.MulRV(xfB.q, localCenterB, b2Vec2.s_t0), xfB.p);
              psm.Initialize(pc, xfA, xfB, j);
              var normal = psm.normal;
              var point = psm.point;
              var separation = psm.separation;
              b2Vec2.SubVV(point, cA, rA);
              b2Vec2.SubVV(point, cB, rB);
              minSeparation = b2Min(minSeparation, separation);
              var C = b2Clamp(b2_toiBaumgarte * (separation + b2_linearSlop), -b2_maxLinearCorrection, 0);
              var rnA = b2Vec2.CrossVV(rA, normal);
              var rnB = b2Vec2.CrossVV(rB, normal);
              var K = mA + mB + iA * rnA * rnA + iB * rnB * rnB;
              var impulse = K > 0 ? -C / K : 0;
              b2Vec2.MulSV(impulse, normal, P);
              cA.SelfMulSub(mA, P);
              aA -= iA * b2Vec2.CrossVV(rA, P);
              cB.SelfMulAdd(mB, P);
              aB += iB * b2Vec2.CrossVV(rB, P);
            }
            this.m_positions[indexA].a = aA;
            this.m_positions[indexB].a = aB;
          }
          return minSeparation >= -1.5 * b2_linearSlop;
        };
        b2ContactSolver.InitializeVelocityConstraints_s_xfA = new b2Transform();
        b2ContactSolver.InitializeVelocityConstraints_s_xfB = new b2Transform();
        b2ContactSolver.InitializeVelocityConstraints_s_worldManifold = new b2WorldManifold();
        b2ContactSolver.WarmStart_s_P = new b2Vec2();
        b2ContactSolver.SolveVelocityConstraints_s_dv = new b2Vec2();
        b2ContactSolver.SolveVelocityConstraints_s_dv1 = new b2Vec2();
        b2ContactSolver.SolveVelocityConstraints_s_dv2 = new b2Vec2();
        b2ContactSolver.SolveVelocityConstraints_s_P = new b2Vec2();
        b2ContactSolver.SolveVelocityConstraints_s_a = new b2Vec2();
        b2ContactSolver.SolveVelocityConstraints_s_b = new b2Vec2();
        b2ContactSolver.SolveVelocityConstraints_s_x = new b2Vec2();
        b2ContactSolver.SolveVelocityConstraints_s_d = new b2Vec2();
        b2ContactSolver.SolveVelocityConstraints_s_P1 = new b2Vec2();
        b2ContactSolver.SolveVelocityConstraints_s_P2 = new b2Vec2();
        b2ContactSolver.SolveVelocityConstraints_s_P1P2 = new b2Vec2();
        b2ContactSolver.SolvePositionConstraints_s_xfA = new b2Transform();
        b2ContactSolver.SolvePositionConstraints_s_xfB = new b2Transform();
        b2ContactSolver.SolvePositionConstraints_s_psm = new b2PositionSolverManifold();
        b2ContactSolver.SolvePositionConstraints_s_rA = new b2Vec2();
        b2ContactSolver.SolvePositionConstraints_s_rB = new b2Vec2();
        b2ContactSolver.SolvePositionConstraints_s_P = new b2Vec2();
        b2ContactSolver.SolveTOIPositionConstraints_s_xfA = new b2Transform();
        b2ContactSolver.SolveTOIPositionConstraints_s_xfB = new b2Transform();
        b2ContactSolver.SolveTOIPositionConstraints_s_psm = new b2PositionSolverManifold();
        b2ContactSolver.SolveTOIPositionConstraints_s_rA = new b2Vec2();
        b2ContactSolver.SolveTOIPositionConstraints_s_rB = new b2Vec2();
        b2ContactSolver.SolveTOIPositionConstraints_s_P = new b2Vec2();
        return b2ContactSolver;
      })();
      var b2Island = (function() {
        function b2Island() {
          this.m_allocator = null;
          this.m_bodies = [];
          this.m_contacts = [];
          this.m_joints = [];
          this.m_positions = b2Position.MakeArray(1024);
          this.m_velocities = b2Velocity.MakeArray(1024);
          this.m_bodyCount = 0;
          this.m_jointCount = 0;
          this.m_contactCount = 0;
          this.m_bodyCapacity = 0;
          this.m_contactCapacity = 0;
          this.m_jointCapacity = 0;
        }
        b2Island.prototype.Initialize = function(bodyCapacity, contactCapacity, jointCapacity, allocator, listener) {
          this.m_bodyCapacity = bodyCapacity;
          this.m_contactCapacity = contactCapacity;
          this.m_jointCapacity = jointCapacity;
          this.m_bodyCount = 0;
          this.m_contactCount = 0;
          this.m_jointCount = 0;
          this.m_allocator = allocator;
          this.m_listener = listener;
          if (this.m_positions.length < bodyCapacity) {
            var new_length = b2Max(2 * this.m_positions.length, bodyCapacity);
            while (this.m_positions.length < new_length) this.m_positions[this.m_positions.length] = new b2Position();
          }
          if (this.m_velocities.length < bodyCapacity) {
            var new_length = b2Max(2 * this.m_velocities.length, bodyCapacity);
            while (this.m_velocities.length < new_length) this.m_velocities[this.m_velocities.length] = new b2Velocity();
          }
        };
        b2Island.prototype.Clear = function() {
          this.m_bodyCount = 0;
          this.m_contactCount = 0;
          this.m_jointCount = 0;
        };
        b2Island.prototype.AddBody = function(body) {
          body.m_islandIndex = this.m_bodyCount;
          this.m_bodies[this.m_bodyCount++] = body;
        };
        b2Island.prototype.AddContact = function(contact) {
          this.m_contacts[this.m_contactCount++] = contact;
        };
        b2Island.prototype.AddJoint = function(joint) {
          this.m_joints[this.m_jointCount++] = joint;
        };
        b2Island.prototype.Solve = function(profile, step, gravity, allowSleep) {
          var timer = b2Island.s_timer.Reset();
          var h = step.dt;
          for (var i = 0; i < this.m_bodyCount; ++i) {
            var b = this.m_bodies[i];
            this.m_positions[i].c.Copy(b.m_sweep.c);
            var a = b.m_sweep.a;
            var v = this.m_velocities[i].v.Copy(b.m_linearVelocity);
            var w = b.m_angularVelocity;
            b.m_sweep.c0.Copy(b.m_sweep.c);
            b.m_sweep.a0 = b.m_sweep.a;
            if (b.m_type === exports.b2BodyType.b2_dynamicBody) {
              v.x += h * (b.m_gravityScale * gravity.x + b.m_invMass * b.m_force.x);
              v.y += h * (b.m_gravityScale * gravity.y + b.m_invMass * b.m_force.y);
              w += h * b.m_invI * b.m_torque;
              v.SelfMul(1 / (1 + h * b.m_linearDamping));
              w *= 1 / (1 + h * b.m_angularDamping);
            }
            this.m_positions[i].a = a;
            this.m_velocities[i].w = w;
          }
          timer.Reset();
          var solverData = b2Island.s_solverData;
          solverData.step.Copy(step);
          solverData.positions = this.m_positions;
          solverData.velocities = this.m_velocities;
          var contactSolverDef = b2Island.s_contactSolverDef;
          contactSolverDef.step.Copy(step);
          contactSolverDef.contacts = this.m_contacts;
          contactSolverDef.count = this.m_contactCount;
          contactSolverDef.positions = this.m_positions;
          contactSolverDef.velocities = this.m_velocities;
          contactSolverDef.allocator = this.m_allocator;
          var contactSolver = b2Island.s_contactSolver.Initialize(contactSolverDef);
          contactSolver.InitializeVelocityConstraints();
          step.warmStarting && contactSolver.WarmStart();
          for (var i = 0; i < this.m_jointCount; ++i) this.m_joints[i].InitVelocityConstraints(solverData);
          profile.solveInit = timer.GetMilliseconds();
          timer.Reset();
          for (var i = 0; i < step.velocityIterations; ++i) {
            for (var j = 0; j < this.m_jointCount; ++j) this.m_joints[j].SolveVelocityConstraints(solverData);
            contactSolver.SolveVelocityConstraints();
          }
          contactSolver.StoreImpulses();
          profile.solveVelocity = timer.GetMilliseconds();
          for (var i = 0; i < this.m_bodyCount; ++i) {
            var c = this.m_positions[i].c;
            var a = this.m_positions[i].a;
            var v = this.m_velocities[i].v;
            var w = this.m_velocities[i].w;
            var translation = b2Vec2.MulSV(h, v, b2Island.s_translation);
            if (b2Vec2.DotVV(translation, translation) > b2_maxTranslationSquared) {
              var ratio = b2_maxTranslation / translation.Length();
              v.SelfMul(ratio);
            }
            var rotation = h * w;
            if (rotation * rotation > b2_maxRotationSquared) {
              var ratio = b2_maxRotation / b2Abs(rotation);
              w *= ratio;
            }
            c.x += h * v.x;
            c.y += h * v.y;
            a += h * w;
            this.m_positions[i].a = a;
            this.m_velocities[i].w = w;
          }
          timer.Reset();
          var positionSolved = false;
          for (var i = 0; i < step.positionIterations; ++i) {
            var contactsOkay = contactSolver.SolvePositionConstraints();
            var jointsOkay = true;
            for (var j = 0; j < this.m_jointCount; ++j) {
              var jointOkay = this.m_joints[j].SolvePositionConstraints(solverData);
              jointsOkay = jointsOkay && jointOkay;
            }
            if (contactsOkay && jointsOkay) {
              positionSolved = true;
              break;
            }
          }
          for (var i = 0; i < this.m_bodyCount; ++i) {
            var body = this.m_bodies[i];
            body.m_sweep.c.Copy(this.m_positions[i].c);
            body.m_sweep.a = this.m_positions[i].a;
            body.m_linearVelocity.Copy(this.m_velocities[i].v);
            body.m_angularVelocity = this.m_velocities[i].w;
            body.SynchronizeTransform();
          }
          profile.solvePosition = timer.GetMilliseconds();
          this.Report(contactSolver.m_velocityConstraints);
          if (allowSleep) {
            var minSleepTime = b2_maxFloat;
            var linTolSqr = b2_linearSleepTolerance * b2_linearSleepTolerance;
            var angTolSqr = b2_angularSleepTolerance * b2_angularSleepTolerance;
            for (var i = 0; i < this.m_bodyCount; ++i) {
              var b = this.m_bodies[i];
              if (b.GetType() === exports.b2BodyType.b2_staticBody) continue;
              if (!b.m_autoSleepFlag || b.m_angularVelocity * b.m_angularVelocity > angTolSqr || b2Vec2.DotVV(b.m_linearVelocity, b.m_linearVelocity) > linTolSqr) {
                b.m_sleepTime = 0;
                minSleepTime = 0;
              } else {
                b.m_sleepTime += h;
                minSleepTime = b2Min(minSleepTime, b.m_sleepTime);
              }
            }
            if (minSleepTime >= b2_timeToSleep && positionSolved) for (var i = 0; i < this.m_bodyCount; ++i) {
              var b = this.m_bodies[i];
              b.SetAwake(false);
            }
          }
        };
        b2Island.prototype.SolveTOI = function(subStep, toiIndexA, toiIndexB) {
          for (var i = 0; i < this.m_bodyCount; ++i) {
            var b = this.m_bodies[i];
            this.m_positions[i].c.Copy(b.m_sweep.c);
            this.m_positions[i].a = b.m_sweep.a;
            this.m_velocities[i].v.Copy(b.m_linearVelocity);
            this.m_velocities[i].w = b.m_angularVelocity;
          }
          var contactSolverDef = b2Island.s_contactSolverDef;
          contactSolverDef.contacts = this.m_contacts;
          contactSolverDef.count = this.m_contactCount;
          contactSolverDef.allocator = this.m_allocator;
          contactSolverDef.step.Copy(subStep);
          contactSolverDef.positions = this.m_positions;
          contactSolverDef.velocities = this.m_velocities;
          var contactSolver = b2Island.s_contactSolver.Initialize(contactSolverDef);
          for (var i = 0; i < subStep.positionIterations; ++i) {
            var contactsOkay = contactSolver.SolveTOIPositionConstraints(toiIndexA, toiIndexB);
            if (contactsOkay) break;
          }
          this.m_bodies[toiIndexA].m_sweep.c0.Copy(this.m_positions[toiIndexA].c);
          this.m_bodies[toiIndexA].m_sweep.a0 = this.m_positions[toiIndexA].a;
          this.m_bodies[toiIndexB].m_sweep.c0.Copy(this.m_positions[toiIndexB].c);
          this.m_bodies[toiIndexB].m_sweep.a0 = this.m_positions[toiIndexB].a;
          contactSolver.InitializeVelocityConstraints();
          for (var i = 0; i < subStep.velocityIterations; ++i) contactSolver.SolveVelocityConstraints();
          var h = subStep.dt;
          for (var i = 0; i < this.m_bodyCount; ++i) {
            var c = this.m_positions[i].c;
            var a = this.m_positions[i].a;
            var v = this.m_velocities[i].v;
            var w = this.m_velocities[i].w;
            var translation = b2Vec2.MulSV(h, v, b2Island.s_translation);
            if (b2Vec2.DotVV(translation, translation) > b2_maxTranslationSquared) {
              var ratio = b2_maxTranslation / translation.Length();
              v.SelfMul(ratio);
            }
            var rotation = h * w;
            if (rotation * rotation > b2_maxRotationSquared) {
              var ratio = b2_maxRotation / b2Abs(rotation);
              w *= ratio;
            }
            c.SelfMulAdd(h, v);
            a += h * w;
            this.m_positions[i].a = a;
            this.m_velocities[i].w = w;
            var body = this.m_bodies[i];
            body.m_sweep.c.Copy(c);
            body.m_sweep.a = a;
            body.m_linearVelocity.Copy(v);
            body.m_angularVelocity = w;
            body.SynchronizeTransform();
          }
          this.Report(contactSolver.m_velocityConstraints);
        };
        b2Island.prototype.Report = function(constraints) {
          if (null === this.m_listener) return;
          for (var i = 0; i < this.m_contactCount; ++i) {
            var c = this.m_contacts[i];
            if (!c) continue;
            var vc = constraints[i];
            var impulse = b2Island.s_impulse;
            impulse.count = vc.pointCount;
            for (var j = 0; j < vc.pointCount; ++j) {
              impulse.normalImpulses[j] = vc.points[j].normalImpulse;
              impulse.tangentImpulses[j] = vc.points[j].tangentImpulse;
            }
            this.m_listener.PostSolve(c, impulse);
          }
        };
        b2Island.s_timer = new b2Timer();
        b2Island.s_solverData = new b2SolverData();
        b2Island.s_contactSolverDef = new b2ContactSolverDef();
        b2Island.s_contactSolver = new b2ContactSolver();
        b2Island.s_translation = new b2Vec2();
        b2Island.s_impulse = new b2ContactImpulse();
        return b2Island;
      })();
      (function(b2ParticleFlag) {
        b2ParticleFlag[b2ParticleFlag["b2_waterParticle"] = 0] = "b2_waterParticle";
        b2ParticleFlag[b2ParticleFlag["b2_zombieParticle"] = 2] = "b2_zombieParticle";
        b2ParticleFlag[b2ParticleFlag["b2_wallParticle"] = 4] = "b2_wallParticle";
        b2ParticleFlag[b2ParticleFlag["b2_springParticle"] = 8] = "b2_springParticle";
        b2ParticleFlag[b2ParticleFlag["b2_elasticParticle"] = 16] = "b2_elasticParticle";
        b2ParticleFlag[b2ParticleFlag["b2_viscousParticle"] = 32] = "b2_viscousParticle";
        b2ParticleFlag[b2ParticleFlag["b2_powderParticle"] = 64] = "b2_powderParticle";
        b2ParticleFlag[b2ParticleFlag["b2_tensileParticle"] = 128] = "b2_tensileParticle";
        b2ParticleFlag[b2ParticleFlag["b2_colorMixingParticle"] = 256] = "b2_colorMixingParticle";
        b2ParticleFlag[b2ParticleFlag["b2_destructionListenerParticle"] = 512] = "b2_destructionListenerParticle";
        b2ParticleFlag[b2ParticleFlag["b2_barrierParticle"] = 1024] = "b2_barrierParticle";
        b2ParticleFlag[b2ParticleFlag["b2_staticPressureParticle"] = 2048] = "b2_staticPressureParticle";
        b2ParticleFlag[b2ParticleFlag["b2_reactiveParticle"] = 4096] = "b2_reactiveParticle";
        b2ParticleFlag[b2ParticleFlag["b2_repulsiveParticle"] = 8192] = "b2_repulsiveParticle";
        b2ParticleFlag[b2ParticleFlag["b2_fixtureContactListenerParticle"] = 16384] = "b2_fixtureContactListenerParticle";
        b2ParticleFlag[b2ParticleFlag["b2_particleContactListenerParticle"] = 32768] = "b2_particleContactListenerParticle";
        b2ParticleFlag[b2ParticleFlag["b2_fixtureContactFilterParticle"] = 65536] = "b2_fixtureContactFilterParticle";
        b2ParticleFlag[b2ParticleFlag["b2_particleContactFilterParticle"] = 131072] = "b2_particleContactFilterParticle";
      })(exports.b2ParticleFlag || (exports.b2ParticleFlag = {}));
      var b2ParticleDef = (function() {
        function b2ParticleDef() {
          this.flags = 0;
          this.position = new b2Vec2();
          this.velocity = new b2Vec2();
          this.color = new b2Color(0, 0, 0, 0);
          this.lifetime = 0;
          this.userData = null;
          this.group = null;
        }
        return b2ParticleDef;
      })();
      function b2CalculateParticleIterations(gravity, radius, timeStep) {
        var B2_MAX_RECOMMENDED_PARTICLE_ITERATIONS = 8;
        var B2_RADIUS_THRESHOLD = .01;
        var iterations = Math.ceil(Math.sqrt(gravity / (B2_RADIUS_THRESHOLD * radius)) * timeStep);
        return b2Clamp(iterations, 1, B2_MAX_RECOMMENDED_PARTICLE_ITERATIONS);
      }
      var b2ParticleHandle = (function() {
        function b2ParticleHandle() {
          this.m_index = b2_invalidParticleIndex;
        }
        b2ParticleHandle.prototype.GetIndex = function() {
          return this.m_index;
        };
        b2ParticleHandle.prototype.SetIndex = function(index) {
          this.m_index = index;
        };
        return b2ParticleHandle;
      })();
      (function(b2ParticleGroupFlag) {
        b2ParticleGroupFlag[b2ParticleGroupFlag["b2_solidParticleGroup"] = 1] = "b2_solidParticleGroup";
        b2ParticleGroupFlag[b2ParticleGroupFlag["b2_rigidParticleGroup"] = 2] = "b2_rigidParticleGroup";
        b2ParticleGroupFlag[b2ParticleGroupFlag["b2_particleGroupCanBeEmpty"] = 4] = "b2_particleGroupCanBeEmpty";
        b2ParticleGroupFlag[b2ParticleGroupFlag["b2_particleGroupWillBeDestroyed"] = 8] = "b2_particleGroupWillBeDestroyed";
        b2ParticleGroupFlag[b2ParticleGroupFlag["b2_particleGroupNeedsUpdateDepth"] = 16] = "b2_particleGroupNeedsUpdateDepth";
        b2ParticleGroupFlag[b2ParticleGroupFlag["b2_particleGroupInternalMask"] = 24] = "b2_particleGroupInternalMask";
      })(exports.b2ParticleGroupFlag || (exports.b2ParticleGroupFlag = {}));
      var b2ParticleGroupDef = (function() {
        function b2ParticleGroupDef() {
          this.flags = 0;
          this.groupFlags = 0;
          this.position = new b2Vec2();
          this.angle = 0;
          this.linearVelocity = new b2Vec2();
          this.angularVelocity = 0;
          this.color = new b2Color();
          this.strength = 1;
          this.shapeCount = 0;
          this.stride = 0;
          this.particleCount = 0;
          this.lifetime = 0;
          this.userData = null;
          this.group = null;
        }
        return b2ParticleGroupDef;
      })();
      var b2ParticleGroup = (function() {
        function b2ParticleGroup(system) {
          this.m_firstIndex = 0;
          this.m_lastIndex = 0;
          this.m_groupFlags = 0;
          this.m_strength = 1;
          this.m_prev = null;
          this.m_next = null;
          this.m_timestamp = -1;
          this.m_mass = 0;
          this.m_inertia = 0;
          this.m_center = new b2Vec2();
          this.m_linearVelocity = new b2Vec2();
          this.m_angularVelocity = 0;
          this.m_transform = new b2Transform();
          this.m_userData = null;
          this.m_system = system;
        }
        b2ParticleGroup.prototype.GetNext = function() {
          return this.m_next;
        };
        b2ParticleGroup.prototype.GetParticleSystem = function() {
          return this.m_system;
        };
        b2ParticleGroup.prototype.GetParticleCount = function() {
          return this.m_lastIndex - this.m_firstIndex;
        };
        b2ParticleGroup.prototype.GetBufferIndex = function() {
          return this.m_firstIndex;
        };
        b2ParticleGroup.prototype.ContainsParticle = function(index) {
          return this.m_firstIndex <= index && index < this.m_lastIndex;
        };
        b2ParticleGroup.prototype.GetAllParticleFlags = function() {
          if (!this.m_system.m_flagsBuffer.data) throw new Error();
          var flags = 0;
          for (var i = this.m_firstIndex; i < this.m_lastIndex; i++) flags |= this.m_system.m_flagsBuffer.data[i];
          return flags;
        };
        b2ParticleGroup.prototype.GetGroupFlags = function() {
          return this.m_groupFlags;
        };
        b2ParticleGroup.prototype.SetGroupFlags = function(flags) {
          flags |= this.m_groupFlags & exports.b2ParticleGroupFlag.b2_particleGroupInternalMask;
          this.m_system.SetGroupFlags(this, flags);
        };
        b2ParticleGroup.prototype.GetMass = function() {
          this.UpdateStatistics();
          return this.m_mass;
        };
        b2ParticleGroup.prototype.GetInertia = function() {
          this.UpdateStatistics();
          return this.m_inertia;
        };
        b2ParticleGroup.prototype.GetCenter = function() {
          this.UpdateStatistics();
          return this.m_center;
        };
        b2ParticleGroup.prototype.GetLinearVelocity = function() {
          this.UpdateStatistics();
          return this.m_linearVelocity;
        };
        b2ParticleGroup.prototype.GetAngularVelocity = function() {
          this.UpdateStatistics();
          return this.m_angularVelocity;
        };
        b2ParticleGroup.prototype.GetTransform = function() {
          return this.m_transform;
        };
        b2ParticleGroup.prototype.GetPosition = function() {
          return this.m_transform.p;
        };
        b2ParticleGroup.prototype.GetAngle = function() {
          return this.m_transform.q.GetAngle();
        };
        b2ParticleGroup.prototype.GetLinearVelocityFromWorldPoint = function(worldPoint, out) {
          var s_t0 = b2ParticleGroup.GetLinearVelocityFromWorldPoint_s_t0;
          this.UpdateStatistics();
          return b2Vec2.AddVCrossSV(this.m_linearVelocity, this.m_angularVelocity, b2Vec2.SubVV(worldPoint, this.m_center, s_t0), out);
        };
        b2ParticleGroup.prototype.GetUserData = function() {
          return this.m_userData;
        };
        b2ParticleGroup.prototype.SetUserData = function(data) {
          this.m_userData = data;
        };
        b2ParticleGroup.prototype.ApplyForce = function(force) {
          this.m_system.ApplyForce(this.m_firstIndex, this.m_lastIndex, force);
        };
        b2ParticleGroup.prototype.ApplyLinearImpulse = function(impulse) {
          this.m_system.ApplyLinearImpulse(this.m_firstIndex, this.m_lastIndex, impulse);
        };
        b2ParticleGroup.prototype.DestroyParticles = function(callDestructionListener) {
          if (this.m_system.m_world.IsLocked()) throw new Error();
          for (var i = this.m_firstIndex; i < this.m_lastIndex; i++) this.m_system.DestroyParticle(i, callDestructionListener);
        };
        b2ParticleGroup.prototype.UpdateStatistics = function() {
          if (!this.m_system.m_positionBuffer.data) throw new Error();
          if (!this.m_system.m_velocityBuffer.data) throw new Error();
          var p = new b2Vec2();
          var v = new b2Vec2();
          if (this.m_timestamp !== this.m_system.m_timestamp) {
            var m = this.m_system.GetParticleMass();
            this.m_mass = m * (this.m_lastIndex - this.m_firstIndex);
            this.m_center.SetZero();
            this.m_linearVelocity.SetZero();
            for (var i = this.m_firstIndex; i < this.m_lastIndex; i++) {
              this.m_center.SelfMulAdd(m, this.m_system.m_positionBuffer.data[i]);
              this.m_linearVelocity.SelfMulAdd(m, this.m_system.m_velocityBuffer.data[i]);
            }
            if (this.m_mass > 0) {
              var inv_mass = 1 / this.m_mass;
              this.m_center.SelfMul(inv_mass);
              this.m_linearVelocity.SelfMul(inv_mass);
            }
            this.m_inertia = 0;
            this.m_angularVelocity = 0;
            for (var i = this.m_firstIndex; i < this.m_lastIndex; i++) {
              b2Vec2.SubVV(this.m_system.m_positionBuffer.data[i], this.m_center, p);
              b2Vec2.SubVV(this.m_system.m_velocityBuffer.data[i], this.m_linearVelocity, v);
              this.m_inertia += m * b2Vec2.DotVV(p, p);
              this.m_angularVelocity += m * b2Vec2.CrossVV(p, v);
            }
            this.m_inertia > 0 && (this.m_angularVelocity *= 1 / this.m_inertia);
            this.m_timestamp = this.m_system.m_timestamp;
          }
        };
        b2ParticleGroup.GetLinearVelocityFromWorldPoint_s_t0 = new b2Vec2();
        return b2ParticleGroup;
      })();
      var b2StackQueue = (function() {
        function b2StackQueue(capacity) {
          this.m_front = 0;
          this.m_back = 0;
          this.m_capacity = 0;
          this.m_buffer = b2MakeArray(capacity, (function(index) {
            return null;
          }));
          this.m_capacity = capacity;
        }
        b2StackQueue.prototype.Push = function(item) {
          if (this.m_back >= this.m_capacity) {
            for (var i = this.m_front; i < this.m_back; i++) this.m_buffer[i - this.m_front] = this.m_buffer[i];
            this.m_back -= this.m_front;
            this.m_front = 0;
            if (this.m_back >= this.m_capacity) if (this.m_capacity > 0) {
              this.m_buffer.concat(b2MakeArray(this.m_capacity, (function(index) {
                return null;
              })));
              this.m_capacity *= 2;
            } else {
              this.m_buffer.concat(b2MakeArray(1, (function(index) {
                return null;
              })));
              this.m_capacity = 1;
            }
          }
          this.m_buffer[this.m_back] = item;
          this.m_back++;
        };
        b2StackQueue.prototype.Pop = function() {
          this.m_buffer[this.m_front] = null;
          this.m_front++;
        };
        b2StackQueue.prototype.Empty = function() {
          return this.m_front === this.m_back;
        };
        b2StackQueue.prototype.Front = function() {
          var item = this.m_buffer[this.m_front];
          if (!item) throw new Error();
          return item;
        };
        return b2StackQueue;
      })();
      var b2VoronoiDiagram = (function() {
        function b2VoronoiDiagram(generatorCapacity) {
          this.m_generatorCapacity = 0;
          this.m_generatorCount = 0;
          this.m_countX = 0;
          this.m_countY = 0;
          this.m_diagram = [];
          this.m_generatorBuffer = b2MakeArray(generatorCapacity, (function(index) {
            return new b2VoronoiDiagram.Generator();
          }));
          this.m_generatorCapacity = generatorCapacity;
        }
        b2VoronoiDiagram.prototype.AddGenerator = function(center, tag, necessary) {
          var g = this.m_generatorBuffer[this.m_generatorCount++];
          g.center.Copy(center);
          g.tag = tag;
          g.necessary = necessary;
        };
        b2VoronoiDiagram.prototype.Generate = function(radius, margin) {
          var inverseRadius = 1 / radius;
          var lower = new b2Vec2(+b2_maxFloat, +b2_maxFloat);
          var upper = new b2Vec2(-b2_maxFloat, -b2_maxFloat);
          var necessary_count = 0;
          for (var k = 0; k < this.m_generatorCount; k++) {
            var g = this.m_generatorBuffer[k];
            if (g.necessary) {
              b2Vec2.MinV(lower, g.center, lower);
              b2Vec2.MaxV(upper, g.center, upper);
              ++necessary_count;
            }
          }
          if (0 === necessary_count) {
            this.m_countX = 0;
            this.m_countY = 0;
            return;
          }
          lower.x -= margin;
          lower.y -= margin;
          upper.x += margin;
          upper.y += margin;
          this.m_countX = 1 + Math.floor(inverseRadius * (upper.x - lower.x));
          this.m_countY = 1 + Math.floor(inverseRadius * (upper.y - lower.y));
          this.m_diagram = [];
          var queue = new b2StackQueue(4 * this.m_countX * this.m_countY);
          for (var k = 0; k < this.m_generatorCount; k++) {
            var g = this.m_generatorBuffer[k];
            g.center.SelfSub(lower).SelfMul(inverseRadius);
            var x = Math.floor(g.center.x);
            var y = Math.floor(g.center.y);
            x >= 0 && y >= 0 && x < this.m_countX && y < this.m_countY && queue.Push(new b2VoronoiDiagram.Task(x, y, x + y * this.m_countX, g));
          }
          while (!queue.Empty()) {
            var task = queue.Front();
            var x = task.m_x;
            var y = task.m_y;
            var i = task.m_i;
            var g = task.m_generator;
            queue.Pop();
            if (!this.m_diagram[i]) {
              this.m_diagram[i] = g;
              x > 0 && queue.Push(new b2VoronoiDiagram.Task(x - 1, y, i - 1, g));
              y > 0 && queue.Push(new b2VoronoiDiagram.Task(x, y - 1, i - this.m_countX, g));
              x < this.m_countX - 1 && queue.Push(new b2VoronoiDiagram.Task(x + 1, y, i + 1, g));
              y < this.m_countY - 1 && queue.Push(new b2VoronoiDiagram.Task(x, y + 1, i + this.m_countX, g));
            }
          }
          for (var y = 0; y < this.m_countY; y++) for (var x = 0; x < this.m_countX - 1; x++) {
            var i = x + y * this.m_countX;
            var a = this.m_diagram[i];
            var b = this.m_diagram[i + 1];
            if (a !== b) {
              queue.Push(new b2VoronoiDiagram.Task(x, y, i, b));
              queue.Push(new b2VoronoiDiagram.Task(x + 1, y, i + 1, a));
            }
          }
          for (var y = 0; y < this.m_countY - 1; y++) for (var x = 0; x < this.m_countX; x++) {
            var i = x + y * this.m_countX;
            var a = this.m_diagram[i];
            var b = this.m_diagram[i + this.m_countX];
            if (a !== b) {
              queue.Push(new b2VoronoiDiagram.Task(x, y, i, b));
              queue.Push(new b2VoronoiDiagram.Task(x, y + 1, i + this.m_countX, a));
            }
          }
          while (!queue.Empty()) {
            var task = queue.Front();
            var x = task.m_x;
            var y = task.m_y;
            var i = task.m_i;
            var k = task.m_generator;
            queue.Pop();
            var a = this.m_diagram[i];
            var b = k;
            if (a !== b) {
              var ax = a.center.x - x;
              var ay = a.center.y - y;
              var bx = b.center.x - x;
              var by = b.center.y - y;
              var a2 = ax * ax + ay * ay;
              var b2 = bx * bx + by * by;
              if (a2 > b2) {
                this.m_diagram[i] = b;
                x > 0 && queue.Push(new b2VoronoiDiagram.Task(x - 1, y, i - 1, b));
                y > 0 && queue.Push(new b2VoronoiDiagram.Task(x, y - 1, i - this.m_countX, b));
                x < this.m_countX - 1 && queue.Push(new b2VoronoiDiagram.Task(x + 1, y, i + 1, b));
                y < this.m_countY - 1 && queue.Push(new b2VoronoiDiagram.Task(x, y + 1, i + this.m_countX, b));
              }
            }
          }
        };
        b2VoronoiDiagram.prototype.GetNodes = function(callback) {
          for (var y = 0; y < this.m_countY - 1; y++) for (var x = 0; x < this.m_countX - 1; x++) {
            var i = x + y * this.m_countX;
            var a = this.m_diagram[i];
            var b = this.m_diagram[i + 1];
            var c = this.m_diagram[i + this.m_countX];
            var d = this.m_diagram[i + 1 + this.m_countX];
            if (b !== c) {
              a !== b && a !== c && (a.necessary || b.necessary || c.necessary) && callback(a.tag, b.tag, c.tag);
              d !== b && d !== c && (a.necessary || b.necessary || c.necessary) && callback(b.tag, d.tag, c.tag);
            }
          }
        };
        return b2VoronoiDiagram;
      })();
      (function(b2VoronoiDiagram) {
        var Generator = (function() {
          function Generator() {
            this.center = new b2Vec2();
            this.tag = 0;
            this.necessary = false;
          }
          return Generator;
        })();
        b2VoronoiDiagram.Generator = Generator;
        var Task = (function() {
          function Task(x, y, i, g) {
            this.m_x = x;
            this.m_y = y;
            this.m_i = i;
            this.m_generator = g;
          }
          return Task;
        })();
        b2VoronoiDiagram.Task = Task;
      })(b2VoronoiDiagram || (b2VoronoiDiagram = {}));
      function std_iter_swap(array, a, b) {
        var tmp = array[a];
        array[a] = array[b];
        array[b] = tmp;
      }
      function default_compare(a, b) {
        return a < b;
      }
      function std_sort(array, first, len, cmp) {
        void 0 === first && (first = 0);
        void 0 === len && (len = array.length - first);
        void 0 === cmp && (cmp = default_compare);
        var left = first;
        var stack = [];
        var pos = 0;
        for (;;) {
          for (;left + 1 < len; len++) {
            var pivot = array[left + Math.floor(Math.random() * (len - left))];
            stack[pos++] = len;
            for (var right = left - 1; ;) {
              while (cmp(array[++right], pivot)) ;
              while (cmp(pivot, array[--len])) ;
              if (right >= len) break;
              std_iter_swap(array, right, len);
            }
          }
          if (0 === pos) break;
          left = len;
          len = stack[--pos];
        }
        return array;
      }
      function std_stable_sort(array, first, len, cmp) {
        void 0 === first && (first = 0);
        void 0 === len && (len = array.length - first);
        void 0 === cmp && (cmp = default_compare);
        return std_sort(array, first, len, cmp);
      }
      function std_remove_if(array, predicate, length) {
        void 0 === length && (length = array.length);
        var l = 0;
        for (var c = 0; c < length; ++c) {
          if (predicate(array[c])) continue;
          if (c === l) {
            ++l;
            continue;
          }
          std_iter_swap(array, l++, c);
        }
        return l;
      }
      function std_lower_bound(array, first, last, val, cmp) {
        void 0 === cmp && (cmp = default_compare);
        var count = last - first;
        while (count > 0) {
          var step = Math.floor(count / 2);
          var it = first + step;
          if (cmp(array[it], val)) {
            first = ++it;
            count -= step + 1;
          } else count = step;
        }
        return first;
      }
      function std_upper_bound(array, first, last, val, cmp) {
        void 0 === cmp && (cmp = default_compare);
        var count = last - first;
        while (count > 0) {
          var step = Math.floor(count / 2);
          var it = first + step;
          if (cmp(val, array[it])) count = step; else {
            first = ++it;
            count -= step + 1;
          }
        }
        return first;
      }
      function std_rotate(array, first, n_first, last) {
        var next = n_first;
        while (first !== next) {
          std_iter_swap(array, first++, next++);
          next === last ? next = n_first : first === n_first && (n_first = next);
        }
      }
      function std_unique(array, first, last, cmp) {
        if (first === last) return last;
        var result = first;
        while (++first !== last) cmp(array[result], array[first]) || std_iter_swap(array, ++result, first);
        return ++result;
      }
      var b2GrowableBuffer = (function() {
        function b2GrowableBuffer(allocator) {
          this.data = [];
          this.count = 0;
          this.capacity = 0;
          this.allocator = allocator;
        }
        b2GrowableBuffer.prototype.Append = function() {
          this.count >= this.capacity && this.Grow();
          return this.count++;
        };
        b2GrowableBuffer.prototype.Reserve = function(newCapacity) {
          if (this.capacity >= newCapacity) return;
          for (var i = this.capacity; i < newCapacity; ++i) this.data[i] = this.allocator();
          this.capacity = newCapacity;
        };
        b2GrowableBuffer.prototype.Grow = function() {
          var newCapacity = this.capacity ? 2 * this.capacity : b2_minParticleSystemBufferCapacity;
          this.Reserve(newCapacity);
        };
        b2GrowableBuffer.prototype.Free = function() {
          if (0 === this.data.length) return;
          this.data = [];
          this.capacity = 0;
          this.count = 0;
        };
        b2GrowableBuffer.prototype.Shorten = function(newEnd) {};
        b2GrowableBuffer.prototype.Data = function() {
          return this.data;
        };
        b2GrowableBuffer.prototype.GetCount = function() {
          return this.count;
        };
        b2GrowableBuffer.prototype.SetCount = function(newCount) {
          this.count = newCount;
        };
        b2GrowableBuffer.prototype.GetCapacity = function() {
          return this.capacity;
        };
        b2GrowableBuffer.prototype.RemoveIf = function(pred) {
          this.count = std_remove_if(this.data, pred, this.count);
        };
        b2GrowableBuffer.prototype.Unique = function(pred) {
          this.count = std_unique(this.data, 0, this.count, pred);
        };
        return b2GrowableBuffer;
      })();
      var b2FixtureParticleQueryCallback = (function(_super) {
        __extends(b2FixtureParticleQueryCallback, _super);
        function b2FixtureParticleQueryCallback(system) {
          var _this = _super.call(this) || this;
          _this.m_system = system;
          return _this;
        }
        b2FixtureParticleQueryCallback.prototype.ShouldQueryParticleSystem = function(system) {
          return false;
        };
        b2FixtureParticleQueryCallback.prototype.ReportFixture = function(fixture) {
          if (fixture.IsSensor()) return true;
          var shape = fixture.GetShape();
          var childCount = shape.GetChildCount();
          for (var childIndex = 0; childIndex < childCount; childIndex++) {
            var aabb = fixture.GetAABB(childIndex);
            var enumerator = this.m_system.GetInsideBoundsEnumerator(aabb);
            var index = void 0;
            while ((index = enumerator.GetNext()) >= 0) this.ReportFixtureAndParticle(fixture, childIndex, index);
          }
          return true;
        };
        b2FixtureParticleQueryCallback.prototype.ReportParticle = function(system, index) {
          return false;
        };
        b2FixtureParticleQueryCallback.prototype.ReportFixtureAndParticle = function(fixture, childIndex, index) {};
        return b2FixtureParticleQueryCallback;
      })(b2QueryCallback);
      var b2ParticleContact = (function() {
        function b2ParticleContact() {
          this.indexA = 0;
          this.indexB = 0;
          this.weight = 0;
          this.normal = new b2Vec2();
          this.flags = 0;
        }
        b2ParticleContact.prototype.SetIndices = function(a, b) {
          this.indexA = a;
          this.indexB = b;
        };
        b2ParticleContact.prototype.SetWeight = function(w) {
          this.weight = w;
        };
        b2ParticleContact.prototype.SetNormal = function(n) {
          this.normal.Copy(n);
        };
        b2ParticleContact.prototype.SetFlags = function(f) {
          this.flags = f;
        };
        b2ParticleContact.prototype.GetIndexA = function() {
          return this.indexA;
        };
        b2ParticleContact.prototype.GetIndexB = function() {
          return this.indexB;
        };
        b2ParticleContact.prototype.GetWeight = function() {
          return this.weight;
        };
        b2ParticleContact.prototype.GetNormal = function() {
          return this.normal;
        };
        b2ParticleContact.prototype.GetFlags = function() {
          return this.flags;
        };
        b2ParticleContact.prototype.IsEqual = function(rhs) {
          return this.indexA === rhs.indexA && this.indexB === rhs.indexB && this.flags === rhs.flags && this.weight === rhs.weight && this.normal.x === rhs.normal.x && this.normal.y === rhs.normal.y;
        };
        b2ParticleContact.prototype.IsNotEqual = function(rhs) {
          return !this.IsEqual(rhs);
        };
        b2ParticleContact.prototype.ApproximatelyEqual = function(rhs) {
          var MAX_WEIGHT_DIFF = .01;
          var MAX_NORMAL_DIFF_SQ = 1e-4;
          return this.indexA === rhs.indexA && this.indexB === rhs.indexB && this.flags === rhs.flags && b2Abs(this.weight - rhs.weight) < MAX_WEIGHT_DIFF && b2Vec2.DistanceSquaredVV(this.normal, rhs.normal) < MAX_NORMAL_DIFF_SQ;
        };
        return b2ParticleContact;
      })();
      var b2ParticleBodyContact = (function() {
        function b2ParticleBodyContact() {
          this.index = 0;
          this.weight = 0;
          this.normal = new b2Vec2();
          this.mass = 0;
        }
        return b2ParticleBodyContact;
      })();
      var b2ParticlePair = (function() {
        function b2ParticlePair() {
          this.indexA = 0;
          this.indexB = 0;
          this.flags = 0;
          this.strength = 0;
          this.distance = 0;
        }
        return b2ParticlePair;
      })();
      var b2ParticleTriad = (function() {
        function b2ParticleTriad() {
          this.indexA = 0;
          this.indexB = 0;
          this.indexC = 0;
          this.flags = 0;
          this.strength = 0;
          this.pa = new b2Vec2(0, 0);
          this.pb = new b2Vec2(0, 0);
          this.pc = new b2Vec2(0, 0);
          this.ka = 0;
          this.kb = 0;
          this.kc = 0;
          this.s = 0;
        }
        return b2ParticleTriad;
      })();
      var b2ParticleSystemDef = (function() {
        function b2ParticleSystemDef() {
          this.strictContactCheck = false;
          this.density = 1;
          this.gravityScale = 1;
          this.radius = 1;
          this.maxCount = 0;
          this.pressureStrength = .005;
          this.dampingStrength = 1;
          this.elasticStrength = .25;
          this.springStrength = .25;
          this.viscousStrength = .25;
          this.surfaceTensionPressureStrength = .2;
          this.surfaceTensionNormalStrength = .2;
          this.repulsiveStrength = 1;
          this.powderStrength = .5;
          this.ejectionStrength = .5;
          this.staticPressureStrength = .2;
          this.staticPressureRelaxation = .2;
          this.staticPressureIterations = 8;
          this.colorMixingStrength = .5;
          this.destroyByAge = true;
          this.lifetimeGranularity = 1 / 60;
        }
        b2ParticleSystemDef.prototype.Copy = function(def) {
          this.strictContactCheck = def.strictContactCheck;
          this.density = def.density;
          this.gravityScale = def.gravityScale;
          this.radius = def.radius;
          this.maxCount = def.maxCount;
          this.pressureStrength = def.pressureStrength;
          this.dampingStrength = def.dampingStrength;
          this.elasticStrength = def.elasticStrength;
          this.springStrength = def.springStrength;
          this.viscousStrength = def.viscousStrength;
          this.surfaceTensionPressureStrength = def.surfaceTensionPressureStrength;
          this.surfaceTensionNormalStrength = def.surfaceTensionNormalStrength;
          this.repulsiveStrength = def.repulsiveStrength;
          this.powderStrength = def.powderStrength;
          this.ejectionStrength = def.ejectionStrength;
          this.staticPressureStrength = def.staticPressureStrength;
          this.staticPressureRelaxation = def.staticPressureRelaxation;
          this.staticPressureIterations = def.staticPressureIterations;
          this.colorMixingStrength = def.colorMixingStrength;
          this.destroyByAge = def.destroyByAge;
          this.lifetimeGranularity = def.lifetimeGranularity;
          return this;
        };
        b2ParticleSystemDef.prototype.Clone = function() {
          return new b2ParticleSystemDef().Copy(this);
        };
        return b2ParticleSystemDef;
      })();
      exports.b2ParticleSystem = (function() {
        function b2ParticleSystem(def, world) {
          this.m_paused = false;
          this.m_timestamp = 0;
          this.m_allParticleFlags = 0;
          this.m_needsUpdateAllParticleFlags = false;
          this.m_allGroupFlags = 0;
          this.m_needsUpdateAllGroupFlags = false;
          this.m_hasForce = false;
          this.m_iterationIndex = 0;
          this.m_inverseDensity = 0;
          this.m_particleDiameter = 0;
          this.m_inverseDiameter = 0;
          this.m_squaredDiameter = 0;
          this.m_count = 0;
          this.m_internalAllocatedCapacity = 0;
          this.m_handleIndexBuffer = new b2ParticleSystem.UserOverridableBuffer();
          this.m_flagsBuffer = new b2ParticleSystem.UserOverridableBuffer();
          this.m_positionBuffer = new b2ParticleSystem.UserOverridableBuffer();
          this.m_velocityBuffer = new b2ParticleSystem.UserOverridableBuffer();
          this.m_forceBuffer = [];
          this.m_weightBuffer = [];
          this.m_staticPressureBuffer = [];
          this.m_accumulationBuffer = [];
          this.m_accumulation2Buffer = [];
          this.m_depthBuffer = [];
          this.m_colorBuffer = new b2ParticleSystem.UserOverridableBuffer();
          this.m_groupBuffer = [];
          this.m_userDataBuffer = new b2ParticleSystem.UserOverridableBuffer();
          this.m_stuckThreshold = 0;
          this.m_lastBodyContactStepBuffer = new b2ParticleSystem.UserOverridableBuffer();
          this.m_bodyContactCountBuffer = new b2ParticleSystem.UserOverridableBuffer();
          this.m_consecutiveContactStepsBuffer = new b2ParticleSystem.UserOverridableBuffer();
          this.m_stuckParticleBuffer = new b2GrowableBuffer(function() {
            return 0;
          });
          this.m_proxyBuffer = new b2GrowableBuffer(function() {
            return new b2ParticleSystem.Proxy();
          });
          this.m_contactBuffer = new b2GrowableBuffer(function() {
            return new b2ParticleContact();
          });
          this.m_bodyContactBuffer = new b2GrowableBuffer(function() {
            return new b2ParticleBodyContact();
          });
          this.m_pairBuffer = new b2GrowableBuffer(function() {
            return new b2ParticlePair();
          });
          this.m_triadBuffer = new b2GrowableBuffer(function() {
            return new b2ParticleTriad();
          });
          this.m_expirationTimeBuffer = new b2ParticleSystem.UserOverridableBuffer();
          this.m_indexByExpirationTimeBuffer = new b2ParticleSystem.UserOverridableBuffer();
          this.m_timeElapsed = 0;
          this.m_expirationTimeBufferRequiresSorting = false;
          this.m_groupCount = 0;
          this.m_groupList = null;
          this.m_def = new b2ParticleSystemDef();
          this.m_prev = null;
          this.m_next = null;
          this.SetStrictContactCheck(def.strictContactCheck);
          this.SetDensity(def.density);
          this.SetGravityScale(def.gravityScale);
          this.SetRadius(def.radius);
          this.SetMaxParticleCount(def.maxCount);
          this.m_def = def.Clone();
          this.m_world = world;
          this.SetDestructionByAge(this.m_def.destroyByAge);
        }
        b2ParticleSystem.computeTag = function(x, y) {
          return (y + b2ParticleSystem.yOffset >>> 0 << b2ParticleSystem.yShift) + (b2ParticleSystem.xScale * x + b2ParticleSystem.xOffset >>> 0) >>> 0;
        };
        b2ParticleSystem.computeRelativeTag = function(tag, x, y) {
          return tag + (y << b2ParticleSystem.yShift) + (x << b2ParticleSystem.xShift) >>> 0;
        };
        b2ParticleSystem.prototype.Drop = function() {
          while (this.m_groupList) this.DestroyParticleGroup(this.m_groupList);
          this.FreeUserOverridableBuffer(this.m_handleIndexBuffer);
          this.FreeUserOverridableBuffer(this.m_flagsBuffer);
          this.FreeUserOverridableBuffer(this.m_lastBodyContactStepBuffer);
          this.FreeUserOverridableBuffer(this.m_bodyContactCountBuffer);
          this.FreeUserOverridableBuffer(this.m_consecutiveContactStepsBuffer);
          this.FreeUserOverridableBuffer(this.m_positionBuffer);
          this.FreeUserOverridableBuffer(this.m_velocityBuffer);
          this.FreeUserOverridableBuffer(this.m_colorBuffer);
          this.FreeUserOverridableBuffer(this.m_userDataBuffer);
          this.FreeUserOverridableBuffer(this.m_expirationTimeBuffer);
          this.FreeUserOverridableBuffer(this.m_indexByExpirationTimeBuffer);
          this.FreeBuffer(this.m_forceBuffer, this.m_internalAllocatedCapacity);
          this.FreeBuffer(this.m_weightBuffer, this.m_internalAllocatedCapacity);
          this.FreeBuffer(this.m_staticPressureBuffer, this.m_internalAllocatedCapacity);
          this.FreeBuffer(this.m_accumulationBuffer, this.m_internalAllocatedCapacity);
          this.FreeBuffer(this.m_accumulation2Buffer, this.m_internalAllocatedCapacity);
          this.FreeBuffer(this.m_depthBuffer, this.m_internalAllocatedCapacity);
          this.FreeBuffer(this.m_groupBuffer, this.m_internalAllocatedCapacity);
        };
        b2ParticleSystem.prototype.CreateParticle = function(def) {
          if (this.m_world.IsLocked()) throw new Error();
          if (this.m_count >= this.m_internalAllocatedCapacity) {
            var capacity = this.m_count ? 2 * this.m_count : b2_minParticleSystemBufferCapacity;
            this.ReallocateInternalAllocatedBuffers(capacity);
          }
          if (this.m_count >= this.m_internalAllocatedCapacity) {
            if (!this.m_def.destroyByAge) return b2_invalidParticleIndex;
            this.DestroyOldestParticle(0, false);
            this.SolveZombie();
          }
          var index = this.m_count++;
          if (!this.m_flagsBuffer.data) throw new Error();
          this.m_flagsBuffer.data[index] = 0;
          this.m_lastBodyContactStepBuffer.data && (this.m_lastBodyContactStepBuffer.data[index] = 0);
          this.m_bodyContactCountBuffer.data && (this.m_bodyContactCountBuffer.data[index] = 0);
          this.m_consecutiveContactStepsBuffer.data && (this.m_consecutiveContactStepsBuffer.data[index] = 0);
          if (!this.m_positionBuffer.data) throw new Error();
          if (!this.m_velocityBuffer.data) throw new Error();
          this.m_positionBuffer.data[index] = (this.m_positionBuffer.data[index] || new b2Vec2()).Copy(b2Maybe(def.position, b2Vec2.ZERO));
          this.m_velocityBuffer.data[index] = (this.m_velocityBuffer.data[index] || new b2Vec2()).Copy(b2Maybe(def.velocity, b2Vec2.ZERO));
          this.m_weightBuffer[index] = 0;
          this.m_forceBuffer[index] = (this.m_forceBuffer[index] || new b2Vec2()).SetZero();
          this.m_staticPressureBuffer && (this.m_staticPressureBuffer[index] = 0);
          this.m_depthBuffer && (this.m_depthBuffer[index] = 0);
          var color = new b2Color().Copy(b2Maybe(def.color, b2Color.ZERO));
          if (this.m_colorBuffer.data || !color.IsZero()) {
            this.m_colorBuffer.data = this.RequestBuffer(this.m_colorBuffer.data);
            this.m_colorBuffer.data[index] = (this.m_colorBuffer.data[index] || new b2Color()).Copy(color);
          }
          if (this.m_userDataBuffer.data || def.userData) {
            this.m_userDataBuffer.data = this.RequestBuffer(this.m_userDataBuffer.data);
            this.m_userDataBuffer.data[index] = def.userData;
          }
          this.m_handleIndexBuffer.data && (this.m_handleIndexBuffer.data[index] = null);
          var proxy = this.m_proxyBuffer.data[this.m_proxyBuffer.Append()];
          var lifetime = b2Maybe(def.lifetime, 0);
          var finiteLifetime = lifetime > 0;
          if (this.m_expirationTimeBuffer.data || finiteLifetime) {
            this.SetParticleLifetime(index, finiteLifetime ? lifetime : this.ExpirationTimeToLifetime(-this.GetQuantizedTimeElapsed()));
            if (!this.m_indexByExpirationTimeBuffer.data) throw new Error();
            this.m_indexByExpirationTimeBuffer.data[index] = index;
          }
          proxy.index = index;
          var group = b2Maybe(def.group, null);
          this.m_groupBuffer[index] = group;
          if (group) if (group.m_firstIndex < group.m_lastIndex) {
            this.RotateBuffer(group.m_firstIndex, group.m_lastIndex, index);
            group.m_lastIndex = index + 1;
          } else {
            group.m_firstIndex = index;
            group.m_lastIndex = index + 1;
          }
          this.SetParticleFlags(index, b2Maybe(def.flags, 0));
          return index;
        };
        b2ParticleSystem.prototype.GetParticleHandleFromIndex = function(index) {
          this.m_handleIndexBuffer.data = this.RequestBuffer(this.m_handleIndexBuffer.data);
          var handle = this.m_handleIndexBuffer.data[index];
          if (handle) return handle;
          handle = new b2ParticleHandle();
          handle.SetIndex(index);
          this.m_handleIndexBuffer.data[index] = handle;
          return handle;
        };
        b2ParticleSystem.prototype.DestroyParticle = function(index, callDestructionListener) {
          void 0 === callDestructionListener && (callDestructionListener = false);
          if (!this.m_flagsBuffer.data) throw new Error();
          var flags = exports.b2ParticleFlag.b2_zombieParticle;
          callDestructionListener && (flags |= exports.b2ParticleFlag.b2_destructionListenerParticle);
          this.SetParticleFlags(index, this.m_flagsBuffer.data[index] | flags);
        };
        b2ParticleSystem.prototype.DestroyOldestParticle = function(index, callDestructionListener) {
          void 0 === callDestructionListener && (callDestructionListener = false);
          var particleCount = this.GetParticleCount();
          if (!this.m_indexByExpirationTimeBuffer.data) throw new Error();
          if (!this.m_expirationTimeBuffer.data) throw new Error();
          var oldestFiniteLifetimeParticle = this.m_indexByExpirationTimeBuffer.data[particleCount - (index + 1)];
          var oldestInfiniteLifetimeParticle = this.m_indexByExpirationTimeBuffer.data[index];
          this.DestroyParticle(this.m_expirationTimeBuffer.data[oldestFiniteLifetimeParticle] > 0 ? oldestFiniteLifetimeParticle : oldestInfiniteLifetimeParticle, callDestructionListener);
        };
        b2ParticleSystem.prototype.DestroyParticlesInShape = function(shape, xf, callDestructionListener) {
          void 0 === callDestructionListener && (callDestructionListener = false);
          var s_aabb = b2ParticleSystem.DestroyParticlesInShape_s_aabb;
          if (this.m_world.IsLocked()) throw new Error();
          var callback = new b2ParticleSystem.DestroyParticlesInShapeCallback(this, shape, xf, callDestructionListener);
          var aabb = s_aabb;
          shape.ComputeAABB(aabb, xf, 0);
          this.m_world.QueryAABB(callback, aabb);
          return callback.Destroyed();
        };
        b2ParticleSystem.prototype.CreateParticleGroup = function(groupDef) {
          var s_transform = b2ParticleSystem.CreateParticleGroup_s_transform;
          if (this.m_world.IsLocked()) throw new Error();
          var transform = s_transform;
          transform.SetPositionAngle(b2Maybe(groupDef.position, b2Vec2.ZERO), b2Maybe(groupDef.angle, 0));
          var firstIndex = this.m_count;
          groupDef.shape && this.CreateParticlesWithShapeForGroup(groupDef.shape, groupDef, transform);
          groupDef.shapes && this.CreateParticlesWithShapesForGroup(groupDef.shapes, b2Maybe(groupDef.shapeCount, groupDef.shapes.length), groupDef, transform);
          if (groupDef.positionData) {
            var count = b2Maybe(groupDef.particleCount, groupDef.positionData.length);
            for (var i = 0; i < count; i++) {
              var p = groupDef.positionData[i];
              this.CreateParticleForGroup(groupDef, transform, p);
            }
          }
          var lastIndex = this.m_count;
          var group = new b2ParticleGroup(this);
          group.m_firstIndex = firstIndex;
          group.m_lastIndex = lastIndex;
          group.m_strength = b2Maybe(groupDef.strength, 1);
          group.m_userData = groupDef.userData;
          group.m_transform.Copy(transform);
          group.m_prev = null;
          group.m_next = this.m_groupList;
          this.m_groupList && (this.m_groupList.m_prev = group);
          this.m_groupList = group;
          ++this.m_groupCount;
          for (var i = firstIndex; i < lastIndex; i++) this.m_groupBuffer[i] = group;
          this.SetGroupFlags(group, b2Maybe(groupDef.groupFlags, 0));
          var filter = new b2ParticleSystem.ConnectionFilter();
          this.UpdateContacts(true);
          this.UpdatePairsAndTriads(firstIndex, lastIndex, filter);
          if (groupDef.group) {
            this.JoinParticleGroups(groupDef.group, group);
            group = groupDef.group;
          }
          return group;
        };
        b2ParticleSystem.prototype.JoinParticleGroups = function(groupA, groupB) {
          if (this.m_world.IsLocked()) throw new Error();
          this.RotateBuffer(groupB.m_firstIndex, groupB.m_lastIndex, this.m_count);
          this.RotateBuffer(groupA.m_firstIndex, groupA.m_lastIndex, groupB.m_firstIndex);
          var filter = new b2ParticleSystem.JoinParticleGroupsFilter(groupB.m_firstIndex);
          this.UpdateContacts(true);
          this.UpdatePairsAndTriads(groupA.m_firstIndex, groupB.m_lastIndex, filter);
          for (var i = groupB.m_firstIndex; i < groupB.m_lastIndex; i++) this.m_groupBuffer[i] = groupA;
          var groupFlags = groupA.m_groupFlags | groupB.m_groupFlags;
          this.SetGroupFlags(groupA, groupFlags);
          groupA.m_lastIndex = groupB.m_lastIndex;
          groupB.m_firstIndex = groupB.m_lastIndex;
          this.DestroyParticleGroup(groupB);
        };
        b2ParticleSystem.prototype.SplitParticleGroup = function(group) {
          this.UpdateContacts(true);
          var particleCount = group.GetParticleCount();
          var nodeBuffer = b2MakeArray(particleCount, (function(index) {
            return new b2ParticleSystem.ParticleListNode();
          }));
          b2ParticleSystem.InitializeParticleLists(group, nodeBuffer);
          this.MergeParticleListsInContact(group, nodeBuffer);
          var survivingList = b2ParticleSystem.FindLongestParticleList(group, nodeBuffer);
          this.MergeZombieParticleListNodes(group, nodeBuffer, survivingList);
          this.CreateParticleGroupsFromParticleList(group, nodeBuffer, survivingList);
          this.UpdatePairsAndTriadsWithParticleList(group, nodeBuffer);
        };
        b2ParticleSystem.prototype.GetParticleGroupList = function() {
          return this.m_groupList;
        };
        b2ParticleSystem.prototype.GetParticleGroupCount = function() {
          return this.m_groupCount;
        };
        b2ParticleSystem.prototype.GetParticleCount = function() {
          return this.m_count;
        };
        b2ParticleSystem.prototype.GetMaxParticleCount = function() {
          return this.m_def.maxCount;
        };
        b2ParticleSystem.prototype.SetMaxParticleCount = function(count) {
          this.m_def.maxCount = count;
        };
        b2ParticleSystem.prototype.GetAllParticleFlags = function() {
          return this.m_allParticleFlags;
        };
        b2ParticleSystem.prototype.GetAllGroupFlags = function() {
          return this.m_allGroupFlags;
        };
        b2ParticleSystem.prototype.SetPaused = function(paused) {
          this.m_paused = paused;
        };
        b2ParticleSystem.prototype.GetPaused = function() {
          return this.m_paused;
        };
        b2ParticleSystem.prototype.SetDensity = function(density) {
          this.m_def.density = density;
          this.m_inverseDensity = 1 / this.m_def.density;
        };
        b2ParticleSystem.prototype.GetDensity = function() {
          return this.m_def.density;
        };
        b2ParticleSystem.prototype.SetGravityScale = function(gravityScale) {
          this.m_def.gravityScale = gravityScale;
        };
        b2ParticleSystem.prototype.GetGravityScale = function() {
          return this.m_def.gravityScale;
        };
        b2ParticleSystem.prototype.SetDamping = function(damping) {
          this.m_def.dampingStrength = damping;
        };
        b2ParticleSystem.prototype.GetDamping = function() {
          return this.m_def.dampingStrength;
        };
        b2ParticleSystem.prototype.SetStaticPressureIterations = function(iterations) {
          this.m_def.staticPressureIterations = iterations;
        };
        b2ParticleSystem.prototype.GetStaticPressureIterations = function() {
          return this.m_def.staticPressureIterations;
        };
        b2ParticleSystem.prototype.SetRadius = function(radius) {
          this.m_particleDiameter = 2 * radius;
          this.m_squaredDiameter = this.m_particleDiameter * this.m_particleDiameter;
          this.m_inverseDiameter = 1 / this.m_particleDiameter;
        };
        b2ParticleSystem.prototype.GetRadius = function() {
          return this.m_particleDiameter / 2;
        };
        b2ParticleSystem.prototype.GetPositionBuffer = function() {
          if (!this.m_positionBuffer.data) throw new Error();
          return this.m_positionBuffer.data;
        };
        b2ParticleSystem.prototype.GetVelocityBuffer = function() {
          if (!this.m_velocityBuffer.data) throw new Error();
          return this.m_velocityBuffer.data;
        };
        b2ParticleSystem.prototype.GetColorBuffer = function() {
          this.m_colorBuffer.data = this.RequestBuffer(this.m_colorBuffer.data);
          return this.m_colorBuffer.data;
        };
        b2ParticleSystem.prototype.GetGroupBuffer = function() {
          return this.m_groupBuffer;
        };
        b2ParticleSystem.prototype.GetWeightBuffer = function() {
          return this.m_weightBuffer;
        };
        b2ParticleSystem.prototype.GetUserDataBuffer = function() {
          this.m_userDataBuffer.data = this.RequestBuffer(this.m_userDataBuffer.data);
          return this.m_userDataBuffer.data;
        };
        b2ParticleSystem.prototype.GetFlagsBuffer = function() {
          if (!this.m_flagsBuffer.data) throw new Error();
          return this.m_flagsBuffer.data;
        };
        b2ParticleSystem.prototype.SetParticleFlags = function(index, newFlags) {
          if (!this.m_flagsBuffer.data) throw new Error();
          var oldFlags = this.m_flagsBuffer.data[index];
          oldFlags & ~newFlags && (this.m_needsUpdateAllParticleFlags = true);
          if (~this.m_allParticleFlags & newFlags) {
            newFlags & exports.b2ParticleFlag.b2_tensileParticle && (this.m_accumulation2Buffer = this.RequestBuffer(this.m_accumulation2Buffer));
            newFlags & exports.b2ParticleFlag.b2_colorMixingParticle && (this.m_colorBuffer.data = this.RequestBuffer(this.m_colorBuffer.data));
            this.m_allParticleFlags |= newFlags;
          }
          this.m_flagsBuffer.data[index] = newFlags;
        };
        b2ParticleSystem.prototype.GetParticleFlags = function(index) {
          if (!this.m_flagsBuffer.data) throw new Error();
          return this.m_flagsBuffer.data[index];
        };
        b2ParticleSystem.prototype.SetFlagsBuffer = function(buffer, capacity) {
          this.SetUserOverridableBuffer(this.m_flagsBuffer, buffer, capacity);
        };
        b2ParticleSystem.prototype.SetPositionBuffer = function(buffer, capacity) {
          this.SetUserOverridableBuffer(this.m_positionBuffer, buffer, capacity);
        };
        b2ParticleSystem.prototype.SetVelocityBuffer = function(buffer, capacity) {
          this.SetUserOverridableBuffer(this.m_velocityBuffer, buffer, capacity);
        };
        b2ParticleSystem.prototype.SetColorBuffer = function(buffer, capacity) {
          this.SetUserOverridableBuffer(this.m_colorBuffer, buffer, capacity);
        };
        b2ParticleSystem.prototype.SetUserDataBuffer = function(buffer, capacity) {
          this.SetUserOverridableBuffer(this.m_userDataBuffer, buffer, capacity);
        };
        b2ParticleSystem.prototype.GetContacts = function() {
          return this.m_contactBuffer.data;
        };
        b2ParticleSystem.prototype.GetContactCount = function() {
          return this.m_contactBuffer.count;
        };
        b2ParticleSystem.prototype.GetBodyContacts = function() {
          return this.m_bodyContactBuffer.data;
        };
        b2ParticleSystem.prototype.GetBodyContactCount = function() {
          return this.m_bodyContactBuffer.count;
        };
        b2ParticleSystem.prototype.GetPairs = function() {
          return this.m_pairBuffer.data;
        };
        b2ParticleSystem.prototype.GetPairCount = function() {
          return this.m_pairBuffer.count;
        };
        b2ParticleSystem.prototype.GetTriads = function() {
          return this.m_triadBuffer.data;
        };
        b2ParticleSystem.prototype.GetTriadCount = function() {
          return this.m_triadBuffer.count;
        };
        b2ParticleSystem.prototype.SetStuckThreshold = function(steps) {
          this.m_stuckThreshold = steps;
          if (steps > 0) {
            this.m_lastBodyContactStepBuffer.data = this.RequestBuffer(this.m_lastBodyContactStepBuffer.data);
            this.m_bodyContactCountBuffer.data = this.RequestBuffer(this.m_bodyContactCountBuffer.data);
            this.m_consecutiveContactStepsBuffer.data = this.RequestBuffer(this.m_consecutiveContactStepsBuffer.data);
          }
        };
        b2ParticleSystem.prototype.GetStuckCandidates = function() {
          return this.m_stuckParticleBuffer.Data();
        };
        b2ParticleSystem.prototype.GetStuckCandidateCount = function() {
          return this.m_stuckParticleBuffer.GetCount();
        };
        b2ParticleSystem.prototype.ComputeCollisionEnergy = function() {
          if (!this.m_velocityBuffer.data) throw new Error();
          var s_v = b2ParticleSystem.ComputeCollisionEnergy_s_v;
          var vel_data = this.m_velocityBuffer.data;
          var sum_v2 = 0;
          for (var k = 0; k < this.m_contactBuffer.count; k++) {
            var contact = this.m_contactBuffer.data[k];
            var a = contact.indexA;
            var b = contact.indexB;
            var n = contact.normal;
            var v = b2Vec2.SubVV(vel_data[b], vel_data[a], s_v);
            var vn = b2Vec2.DotVV(v, n);
            vn < 0 && (sum_v2 += vn * vn);
          }
          return .5 * this.GetParticleMass() * sum_v2;
        };
        b2ParticleSystem.prototype.SetStrictContactCheck = function(enabled) {
          this.m_def.strictContactCheck = enabled;
        };
        b2ParticleSystem.prototype.GetStrictContactCheck = function() {
          return this.m_def.strictContactCheck;
        };
        b2ParticleSystem.prototype.SetParticleLifetime = function(index, lifetime) {
          var initializeExpirationTimes = null === this.m_indexByExpirationTimeBuffer.data;
          this.m_expirationTimeBuffer.data = this.RequestBuffer(this.m_expirationTimeBuffer.data);
          this.m_indexByExpirationTimeBuffer.data = this.RequestBuffer(this.m_indexByExpirationTimeBuffer.data);
          if (initializeExpirationTimes) {
            var particleCount = this.GetParticleCount();
            for (var i = 0; i < particleCount; ++i) this.m_indexByExpirationTimeBuffer.data[i] = i;
          }
          var quantizedLifetime = lifetime / this.m_def.lifetimeGranularity;
          var newExpirationTime = quantizedLifetime > 0 ? this.GetQuantizedTimeElapsed() + quantizedLifetime : quantizedLifetime;
          if (newExpirationTime !== this.m_expirationTimeBuffer.data[index]) {
            this.m_expirationTimeBuffer.data[index] = newExpirationTime;
            this.m_expirationTimeBufferRequiresSorting = true;
          }
        };
        b2ParticleSystem.prototype.GetParticleLifetime = function(index) {
          return this.ExpirationTimeToLifetime(this.GetExpirationTimeBuffer()[index]);
        };
        b2ParticleSystem.prototype.SetDestructionByAge = function(enable) {
          enable && this.GetExpirationTimeBuffer();
          this.m_def.destroyByAge = enable;
        };
        b2ParticleSystem.prototype.GetDestructionByAge = function() {
          return this.m_def.destroyByAge;
        };
        b2ParticleSystem.prototype.GetExpirationTimeBuffer = function() {
          this.m_expirationTimeBuffer.data = this.RequestBuffer(this.m_expirationTimeBuffer.data);
          return this.m_expirationTimeBuffer.data;
        };
        b2ParticleSystem.prototype.ExpirationTimeToLifetime = function(expirationTime) {
          return (expirationTime > 0 ? expirationTime - this.GetQuantizedTimeElapsed() : expirationTime) * this.m_def.lifetimeGranularity;
        };
        b2ParticleSystem.prototype.GetIndexByExpirationTimeBuffer = function() {
          this.GetParticleCount() ? this.SetParticleLifetime(0, this.GetParticleLifetime(0)) : this.m_indexByExpirationTimeBuffer.data = this.RequestBuffer(this.m_indexByExpirationTimeBuffer.data);
          if (!this.m_indexByExpirationTimeBuffer.data) throw new Error();
          return this.m_indexByExpirationTimeBuffer.data;
        };
        b2ParticleSystem.prototype.ParticleApplyLinearImpulse = function(index, impulse) {
          this.ApplyLinearImpulse(index, index + 1, impulse);
        };
        b2ParticleSystem.prototype.ApplyLinearImpulse = function(firstIndex, lastIndex, impulse) {
          if (!this.m_velocityBuffer.data) throw new Error();
          var vel_data = this.m_velocityBuffer.data;
          var numParticles = lastIndex - firstIndex;
          var totalMass = numParticles * this.GetParticleMass();
          var velocityDelta = new b2Vec2().Copy(impulse).SelfMul(1 / totalMass);
          for (var i = firstIndex; i < lastIndex; i++) vel_data[i].SelfAdd(velocityDelta);
        };
        b2ParticleSystem.IsSignificantForce = function(force) {
          return 0 !== force.x || 0 !== force.y;
        };
        b2ParticleSystem.prototype.ParticleApplyForce = function(index, force) {
          if (!this.m_flagsBuffer.data) throw new Error();
          if (b2ParticleSystem.IsSignificantForce(force) && this.ForceCanBeApplied(this.m_flagsBuffer.data[index])) {
            this.PrepareForceBuffer();
            this.m_forceBuffer[index].SelfAdd(force);
          }
        };
        b2ParticleSystem.prototype.ApplyForce = function(firstIndex, lastIndex, force) {
          var distributedForce = new b2Vec2().Copy(force).SelfMul(1 / (lastIndex - firstIndex));
          if (b2ParticleSystem.IsSignificantForce(distributedForce)) {
            this.PrepareForceBuffer();
            for (var i = firstIndex; i < lastIndex; i++) this.m_forceBuffer[i].SelfAdd(distributedForce);
          }
        };
        b2ParticleSystem.prototype.GetNext = function() {
          return this.m_next;
        };
        b2ParticleSystem.prototype.QueryAABB = function(callback, aabb) {
          if (0 === this.m_proxyBuffer.count) return;
          var beginProxy = 0;
          var endProxy = this.m_proxyBuffer.count;
          var firstProxy = std_lower_bound(this.m_proxyBuffer.data, beginProxy, endProxy, b2ParticleSystem.computeTag(this.m_inverseDiameter * aabb.lowerBound.x, this.m_inverseDiameter * aabb.lowerBound.y), b2ParticleSystem.Proxy.CompareProxyTag);
          var lastProxy = std_upper_bound(this.m_proxyBuffer.data, firstProxy, endProxy, b2ParticleSystem.computeTag(this.m_inverseDiameter * aabb.upperBound.x, this.m_inverseDiameter * aabb.upperBound.y), b2ParticleSystem.Proxy.CompareTagProxy);
          if (!this.m_positionBuffer.data) throw new Error();
          var pos_data = this.m_positionBuffer.data;
          for (var k = firstProxy; k < lastProxy; ++k) {
            var proxy = this.m_proxyBuffer.data[k];
            var i = proxy.index;
            var p = pos_data[i];
            if (aabb.lowerBound.x < p.x && p.x < aabb.upperBound.x && aabb.lowerBound.y < p.y && p.y < aabb.upperBound.y && !callback.ReportParticle(this, i)) break;
          }
        };
        b2ParticleSystem.prototype.QueryShapeAABB = function(callback, shape, xf, childIndex) {
          void 0 === childIndex && (childIndex = 0);
          var s_aabb = b2ParticleSystem.QueryShapeAABB_s_aabb;
          var aabb = s_aabb;
          shape.ComputeAABB(aabb, xf, childIndex);
          this.QueryAABB(callback, aabb);
        };
        b2ParticleSystem.prototype.QueryPointAABB = function(callback, point, slop) {
          void 0 === slop && (slop = b2_linearSlop);
          var s_aabb = b2ParticleSystem.QueryPointAABB_s_aabb;
          var aabb = s_aabb;
          aabb.lowerBound.Set(point.x - slop, point.y - slop);
          aabb.upperBound.Set(point.x + slop, point.y + slop);
          this.QueryAABB(callback, aabb);
        };
        b2ParticleSystem.prototype.RayCast = function(callback, point1, point2) {
          var s_aabb = b2ParticleSystem.RayCast_s_aabb;
          var s_p = b2ParticleSystem.RayCast_s_p;
          var s_v = b2ParticleSystem.RayCast_s_v;
          var s_n = b2ParticleSystem.RayCast_s_n;
          var s_point = b2ParticleSystem.RayCast_s_point;
          if (0 === this.m_proxyBuffer.count) return;
          if (!this.m_positionBuffer.data) throw new Error();
          var pos_data = this.m_positionBuffer.data;
          var aabb = s_aabb;
          b2Vec2.MinV(point1, point2, aabb.lowerBound);
          b2Vec2.MaxV(point1, point2, aabb.upperBound);
          var fraction = 1;
          var v = b2Vec2.SubVV(point2, point1, s_v);
          var v2 = b2Vec2.DotVV(v, v);
          var enumerator = this.GetInsideBoundsEnumerator(aabb);
          var i;
          while ((i = enumerator.GetNext()) >= 0) {
            var p = b2Vec2.SubVV(point1, pos_data[i], s_p);
            var pv = b2Vec2.DotVV(p, v);
            var p2 = b2Vec2.DotVV(p, p);
            var determinant = pv * pv - v2 * (p2 - this.m_squaredDiameter);
            if (determinant >= 0) {
              var sqrtDeterminant = b2Sqrt(determinant);
              var t = (-pv - sqrtDeterminant) / v2;
              if (t > fraction) continue;
              if (t < 0) {
                t = (-pv + sqrtDeterminant) / v2;
                if (t < 0 || t > fraction) continue;
              }
              var n = b2Vec2.AddVMulSV(p, t, v, s_n);
              n.Normalize();
              var f = callback.ReportParticle(this, i, b2Vec2.AddVMulSV(point1, t, v, s_point), n, t);
              fraction = b2Min(fraction, f);
              if (fraction <= 0) break;
            }
          }
        };
        b2ParticleSystem.prototype.ComputeAABB = function(aabb) {
          var particleCount = this.GetParticleCount();
          aabb.lowerBound.x = +b2_maxFloat;
          aabb.lowerBound.y = +b2_maxFloat;
          aabb.upperBound.x = -b2_maxFloat;
          aabb.upperBound.y = -b2_maxFloat;
          if (!this.m_positionBuffer.data) throw new Error();
          var pos_data = this.m_positionBuffer.data;
          for (var i = 0; i < particleCount; i++) {
            var p = pos_data[i];
            b2Vec2.MinV(aabb.lowerBound, p, aabb.lowerBound);
            b2Vec2.MaxV(aabb.upperBound, p, aabb.upperBound);
          }
          aabb.lowerBound.x -= this.m_particleDiameter;
          aabb.lowerBound.y -= this.m_particleDiameter;
          aabb.upperBound.x += this.m_particleDiameter;
          aabb.upperBound.y += this.m_particleDiameter;
        };
        b2ParticleSystem.prototype.FreeBuffer = function(b, capacity) {
          if (null === b) return;
          b.length = 0;
        };
        b2ParticleSystem.prototype.FreeUserOverridableBuffer = function(b) {
          0 === b.userSuppliedCapacity && this.FreeBuffer(b.data, this.m_internalAllocatedCapacity);
        };
        b2ParticleSystem.prototype.ReallocateBuffer3 = function(oldBuffer, oldCapacity, newCapacity) {
          if (newCapacity <= oldCapacity) throw new Error();
          var newBuffer = oldBuffer ? oldBuffer.slice() : [];
          newBuffer.length = newCapacity;
          return newBuffer;
        };
        b2ParticleSystem.prototype.ReallocateBuffer5 = function(buffer, userSuppliedCapacity, oldCapacity, newCapacity, deferred) {
          if (newCapacity <= oldCapacity) throw new Error();
          if (!(!userSuppliedCapacity || newCapacity <= userSuppliedCapacity)) throw new Error();
          deferred && !buffer || userSuppliedCapacity || (buffer = this.ReallocateBuffer3(buffer, oldCapacity, newCapacity));
          return buffer;
        };
        b2ParticleSystem.prototype.ReallocateBuffer4 = function(buffer, oldCapacity, newCapacity, deferred) {
          return this.ReallocateBuffer5(buffer.data, buffer.userSuppliedCapacity, oldCapacity, newCapacity, deferred);
        };
        b2ParticleSystem.prototype.RequestBuffer = function(buffer) {
          if (!buffer) {
            0 === this.m_internalAllocatedCapacity && this.ReallocateInternalAllocatedBuffers(b2_minParticleSystemBufferCapacity);
            buffer = [];
            buffer.length = this.m_internalAllocatedCapacity;
          }
          return buffer;
        };
        b2ParticleSystem.prototype.ReallocateHandleBuffers = function(newCapacity) {
          this.m_handleIndexBuffer.data = this.ReallocateBuffer4(this.m_handleIndexBuffer, this.m_internalAllocatedCapacity, newCapacity, true);
        };
        b2ParticleSystem.prototype.ReallocateInternalAllocatedBuffers = function(capacity) {
          function LimitCapacity(capacity, maxCount) {
            return maxCount && capacity > maxCount ? maxCount : capacity;
          }
          capacity = LimitCapacity(capacity, this.m_def.maxCount);
          capacity = LimitCapacity(capacity, this.m_flagsBuffer.userSuppliedCapacity);
          capacity = LimitCapacity(capacity, this.m_positionBuffer.userSuppliedCapacity);
          capacity = LimitCapacity(capacity, this.m_velocityBuffer.userSuppliedCapacity);
          capacity = LimitCapacity(capacity, this.m_colorBuffer.userSuppliedCapacity);
          capacity = LimitCapacity(capacity, this.m_userDataBuffer.userSuppliedCapacity);
          if (this.m_internalAllocatedCapacity < capacity) {
            this.ReallocateHandleBuffers(capacity);
            this.m_flagsBuffer.data = this.ReallocateBuffer4(this.m_flagsBuffer, this.m_internalAllocatedCapacity, capacity, false);
            var stuck = this.m_stuckThreshold > 0;
            this.m_lastBodyContactStepBuffer.data = this.ReallocateBuffer4(this.m_lastBodyContactStepBuffer, this.m_internalAllocatedCapacity, capacity, stuck);
            this.m_bodyContactCountBuffer.data = this.ReallocateBuffer4(this.m_bodyContactCountBuffer, this.m_internalAllocatedCapacity, capacity, stuck);
            this.m_consecutiveContactStepsBuffer.data = this.ReallocateBuffer4(this.m_consecutiveContactStepsBuffer, this.m_internalAllocatedCapacity, capacity, stuck);
            this.m_positionBuffer.data = this.ReallocateBuffer4(this.m_positionBuffer, this.m_internalAllocatedCapacity, capacity, false);
            this.m_velocityBuffer.data = this.ReallocateBuffer4(this.m_velocityBuffer, this.m_internalAllocatedCapacity, capacity, false);
            this.m_forceBuffer = this.ReallocateBuffer5(this.m_forceBuffer, 0, this.m_internalAllocatedCapacity, capacity, false);
            this.m_weightBuffer = this.ReallocateBuffer5(this.m_weightBuffer, 0, this.m_internalAllocatedCapacity, capacity, false);
            this.m_staticPressureBuffer = this.ReallocateBuffer5(this.m_staticPressureBuffer, 0, this.m_internalAllocatedCapacity, capacity, true);
            this.m_accumulationBuffer = this.ReallocateBuffer5(this.m_accumulationBuffer, 0, this.m_internalAllocatedCapacity, capacity, false);
            this.m_accumulation2Buffer = this.ReallocateBuffer5(this.m_accumulation2Buffer, 0, this.m_internalAllocatedCapacity, capacity, true);
            this.m_depthBuffer = this.ReallocateBuffer5(this.m_depthBuffer, 0, this.m_internalAllocatedCapacity, capacity, true);
            this.m_colorBuffer.data = this.ReallocateBuffer4(this.m_colorBuffer, this.m_internalAllocatedCapacity, capacity, true);
            this.m_groupBuffer = this.ReallocateBuffer5(this.m_groupBuffer, 0, this.m_internalAllocatedCapacity, capacity, false);
            this.m_userDataBuffer.data = this.ReallocateBuffer4(this.m_userDataBuffer, this.m_internalAllocatedCapacity, capacity, true);
            this.m_expirationTimeBuffer.data = this.ReallocateBuffer4(this.m_expirationTimeBuffer, this.m_internalAllocatedCapacity, capacity, true);
            this.m_indexByExpirationTimeBuffer.data = this.ReallocateBuffer4(this.m_indexByExpirationTimeBuffer, this.m_internalAllocatedCapacity, capacity, false);
            this.m_internalAllocatedCapacity = capacity;
          }
        };
        b2ParticleSystem.prototype.CreateParticleForGroup = function(groupDef, xf, p) {
          var particleDef = new b2ParticleDef();
          particleDef.flags = b2Maybe(groupDef.flags, 0);
          b2Transform.MulXV(xf, p, particleDef.position);
          b2Vec2.AddVV(b2Maybe(groupDef.linearVelocity, b2Vec2.ZERO), b2Vec2.CrossSV(b2Maybe(groupDef.angularVelocity, 0), b2Vec2.SubVV(particleDef.position, b2Maybe(groupDef.position, b2Vec2.ZERO), b2Vec2.s_t0), b2Vec2.s_t0), particleDef.velocity);
          particleDef.color.Copy(b2Maybe(groupDef.color, b2Color.ZERO));
          particleDef.lifetime = b2Maybe(groupDef.lifetime, 0);
          particleDef.userData = groupDef.userData;
          this.CreateParticle(particleDef);
        };
        b2ParticleSystem.prototype.CreateParticlesStrokeShapeForGroup = function(shape, groupDef, xf) {
          var s_edge = b2ParticleSystem.CreateParticlesStrokeShapeForGroup_s_edge;
          var s_d = b2ParticleSystem.CreateParticlesStrokeShapeForGroup_s_d;
          var s_p = b2ParticleSystem.CreateParticlesStrokeShapeForGroup_s_p;
          var stride = b2Maybe(groupDef.stride, 0);
          0 === stride && (stride = this.GetParticleStride());
          var positionOnEdge = 0;
          var childCount = shape.GetChildCount();
          for (var childIndex = 0; childIndex < childCount; childIndex++) {
            var edge = null;
            if (shape.GetType() === exports.b2ShapeType.e_edgeShape) edge = shape; else {
              edge = s_edge;
              shape.GetChildEdge(edge, childIndex);
            }
            var d = b2Vec2.SubVV(edge.m_vertex2, edge.m_vertex1, s_d);
            var edgeLength = d.Length();
            while (positionOnEdge < edgeLength) {
              var p = b2Vec2.AddVMulSV(edge.m_vertex1, positionOnEdge / edgeLength, d, s_p);
              this.CreateParticleForGroup(groupDef, xf, p);
              positionOnEdge += stride;
            }
            positionOnEdge -= edgeLength;
          }
        };
        b2ParticleSystem.prototype.CreateParticlesFillShapeForGroup = function(shape, groupDef, xf) {
          var s_aabb = b2ParticleSystem.CreateParticlesFillShapeForGroup_s_aabb;
          var s_p = b2ParticleSystem.CreateParticlesFillShapeForGroup_s_p;
          var stride = b2Maybe(groupDef.stride, 0);
          0 === stride && (stride = this.GetParticleStride());
          var identity = b2Transform.IDENTITY;
          var aabb = s_aabb;
          shape.ComputeAABB(aabb, identity, 0);
          for (var y = Math.floor(aabb.lowerBound.y / stride) * stride; y < aabb.upperBound.y; y += stride) for (var x = Math.floor(aabb.lowerBound.x / stride) * stride; x < aabb.upperBound.x; x += stride) {
            var p = s_p.Set(x, y);
            shape.TestPoint(identity, p) && this.CreateParticleForGroup(groupDef, xf, p);
          }
        };
        b2ParticleSystem.prototype.CreateParticlesWithShapeForGroup = function(shape, groupDef, xf) {
          switch (shape.GetType()) {
           case exports.b2ShapeType.e_edgeShape:
           case exports.b2ShapeType.e_chainShape:
            this.CreateParticlesStrokeShapeForGroup(shape, groupDef, xf);
            break;

           case exports.b2ShapeType.e_polygonShape:
           case exports.b2ShapeType.e_circleShape:
            this.CreateParticlesFillShapeForGroup(shape, groupDef, xf);
          }
        };
        b2ParticleSystem.prototype.CreateParticlesWithShapesForGroup = function(shapes, shapeCount, groupDef, xf) {
          var compositeShape = new b2ParticleSystem.CompositeShape(shapes, shapeCount);
          this.CreateParticlesFillShapeForGroup(compositeShape, groupDef, xf);
        };
        b2ParticleSystem.prototype.CloneParticle = function(oldIndex, group) {
          var def = new b2ParticleDef();
          if (!this.m_flagsBuffer.data) throw new Error();
          if (!this.m_positionBuffer.data) throw new Error();
          if (!this.m_velocityBuffer.data) throw new Error();
          def.flags = this.m_flagsBuffer.data[oldIndex];
          def.position.Copy(this.m_positionBuffer.data[oldIndex]);
          def.velocity.Copy(this.m_velocityBuffer.data[oldIndex]);
          this.m_colorBuffer.data && def.color.Copy(this.m_colorBuffer.data[oldIndex]);
          this.m_userDataBuffer.data && (def.userData = this.m_userDataBuffer.data[oldIndex]);
          def.group = group;
          var newIndex = this.CreateParticle(def);
          if (this.m_handleIndexBuffer.data) {
            var handle = this.m_handleIndexBuffer.data[oldIndex];
            handle && handle.SetIndex(newIndex);
            this.m_handleIndexBuffer.data[newIndex] = handle;
            this.m_handleIndexBuffer.data[oldIndex] = null;
          }
          this.m_lastBodyContactStepBuffer.data && (this.m_lastBodyContactStepBuffer.data[newIndex] = this.m_lastBodyContactStepBuffer.data[oldIndex]);
          this.m_bodyContactCountBuffer.data && (this.m_bodyContactCountBuffer.data[newIndex] = this.m_bodyContactCountBuffer.data[oldIndex]);
          this.m_consecutiveContactStepsBuffer.data && (this.m_consecutiveContactStepsBuffer.data[newIndex] = this.m_consecutiveContactStepsBuffer.data[oldIndex]);
          this.m_hasForce && this.m_forceBuffer[newIndex].Copy(this.m_forceBuffer[oldIndex]);
          this.m_staticPressureBuffer && (this.m_staticPressureBuffer[newIndex] = this.m_staticPressureBuffer[oldIndex]);
          this.m_depthBuffer && (this.m_depthBuffer[newIndex] = this.m_depthBuffer[oldIndex]);
          this.m_expirationTimeBuffer.data && (this.m_expirationTimeBuffer.data[newIndex] = this.m_expirationTimeBuffer.data[oldIndex]);
          return newIndex;
        };
        b2ParticleSystem.prototype.DestroyParticlesInGroup = function(group, callDestructionListener) {
          void 0 === callDestructionListener && (callDestructionListener = false);
          for (var i = group.m_firstIndex; i < group.m_lastIndex; i++) this.DestroyParticle(i, callDestructionListener);
        };
        b2ParticleSystem.prototype.DestroyParticleGroup = function(group) {
          this.m_world.m_destructionListener && this.m_world.m_destructionListener.SayGoodbyeParticleGroup(group);
          this.SetGroupFlags(group, 0);
          for (var i = group.m_firstIndex; i < group.m_lastIndex; i++) this.m_groupBuffer[i] = null;
          group.m_prev && (group.m_prev.m_next = group.m_next);
          group.m_next && (group.m_next.m_prev = group.m_prev);
          group === this.m_groupList && (this.m_groupList = group.m_next);
          --this.m_groupCount;
        };
        b2ParticleSystem.ParticleCanBeConnected = function(flags, group) {
          return 0 !== (flags & (exports.b2ParticleFlag.b2_wallParticle | exports.b2ParticleFlag.b2_springParticle | exports.b2ParticleFlag.b2_elasticParticle)) || null !== group && 0 !== (group.GetGroupFlags() & exports.b2ParticleGroupFlag.b2_rigidParticleGroup);
        };
        b2ParticleSystem.prototype.UpdatePairsAndTriads = function(firstIndex, lastIndex, filter) {
          var s_dab = b2ParticleSystem.UpdatePairsAndTriads_s_dab;
          var s_dbc = b2ParticleSystem.UpdatePairsAndTriads_s_dbc;
          var s_dca = b2ParticleSystem.UpdatePairsAndTriads_s_dca;
          if (!this.m_flagsBuffer.data) throw new Error();
          if (!this.m_positionBuffer.data) throw new Error();
          if (!this.m_velocityBuffer.data) throw new Error();
          var pos_data = this.m_positionBuffer.data;
          var particleFlags = 0;
          for (var i = firstIndex; i < lastIndex; i++) particleFlags |= this.m_flagsBuffer.data[i];
          if (particleFlags & b2ParticleSystem.k_pairFlags) for (var k = 0; k < this.m_contactBuffer.count; k++) {
            var contact = this.m_contactBuffer.data[k];
            var a = contact.indexA;
            var b = contact.indexB;
            var af = this.m_flagsBuffer.data[a];
            var bf = this.m_flagsBuffer.data[b];
            var groupA = this.m_groupBuffer[a];
            var groupB = this.m_groupBuffer[b];
            if (a >= firstIndex && a < lastIndex && b >= firstIndex && b < lastIndex && !((af | bf) & exports.b2ParticleFlag.b2_zombieParticle) && (af | bf) & b2ParticleSystem.k_pairFlags && (filter.IsNecessary(a) || filter.IsNecessary(b)) && b2ParticleSystem.ParticleCanBeConnected(af, groupA) && b2ParticleSystem.ParticleCanBeConnected(bf, groupB) && filter.ShouldCreatePair(a, b)) {
              var pair = this.m_pairBuffer.data[this.m_pairBuffer.Append()];
              pair.indexA = a;
              pair.indexB = b;
              pair.flags = contact.flags;
              pair.strength = b2Min(groupA ? groupA.m_strength : 1, groupB ? groupB.m_strength : 1);
              pair.distance = b2Vec2.DistanceVV(pos_data[a], pos_data[b]);
            }
            std_stable_sort(this.m_pairBuffer.data, 0, this.m_pairBuffer.count, b2ParticleSystem.ComparePairIndices);
            this.m_pairBuffer.Unique(b2ParticleSystem.MatchPairIndices);
          }
          if (particleFlags & b2ParticleSystem.k_triadFlags) {
            var diagram = new b2VoronoiDiagram(lastIndex - firstIndex);
            for (var i = firstIndex; i < lastIndex; i++) {
              var flags = this.m_flagsBuffer.data[i];
              var group = this.m_groupBuffer[i];
              flags & exports.b2ParticleFlag.b2_zombieParticle || !b2ParticleSystem.ParticleCanBeConnected(flags, group) || diagram.AddGenerator(pos_data[i], i, filter.IsNecessary(i));
            }
            var stride = this.GetParticleStride();
            diagram.Generate(stride / 2, 2 * stride);
            var system_1 = this;
            var callback = function callback(a, b, c) {
              if (!system_1.m_flagsBuffer.data) throw new Error();
              var af = system_1.m_flagsBuffer.data[a];
              var bf = system_1.m_flagsBuffer.data[b];
              var cf = system_1.m_flagsBuffer.data[c];
              if ((af | bf | cf) & b2ParticleSystem.k_triadFlags && filter.ShouldCreateTriad(a, b, c)) {
                var pa = pos_data[a];
                var pb = pos_data[b];
                var pc = pos_data[c];
                var dab = b2Vec2.SubVV(pa, pb, s_dab);
                var dbc = b2Vec2.SubVV(pb, pc, s_dbc);
                var dca = b2Vec2.SubVV(pc, pa, s_dca);
                var maxDistanceSquared = b2_maxTriadDistanceSquared * system_1.m_squaredDiameter;
                if (b2Vec2.DotVV(dab, dab) > maxDistanceSquared || b2Vec2.DotVV(dbc, dbc) > maxDistanceSquared || b2Vec2.DotVV(dca, dca) > maxDistanceSquared) return;
                var groupA = system_1.m_groupBuffer[a];
                var groupB = system_1.m_groupBuffer[b];
                var groupC = system_1.m_groupBuffer[c];
                var triad = system_1.m_triadBuffer.data[system_1.m_triadBuffer.Append()];
                triad.indexA = a;
                triad.indexB = b;
                triad.indexC = c;
                triad.flags = af | bf | cf;
                triad.strength = b2Min(b2Min(groupA ? groupA.m_strength : 1, groupB ? groupB.m_strength : 1), groupC ? groupC.m_strength : 1);
                var midPoint_x = (pa.x + pb.x + pc.x) / 3;
                var midPoint_y = (pa.y + pb.y + pc.y) / 3;
                triad.pa.x = pa.x - midPoint_x;
                triad.pa.y = pa.y - midPoint_y;
                triad.pb.x = pb.x - midPoint_x;
                triad.pb.y = pb.y - midPoint_y;
                triad.pc.x = pc.x - midPoint_x;
                triad.pc.y = pc.y - midPoint_y;
                triad.ka = -b2Vec2.DotVV(dca, dab);
                triad.kb = -b2Vec2.DotVV(dab, dbc);
                triad.kc = -b2Vec2.DotVV(dbc, dca);
                triad.s = b2Vec2.CrossVV(pa, pb) + b2Vec2.CrossVV(pb, pc) + b2Vec2.CrossVV(pc, pa);
              }
            };
            diagram.GetNodes(callback);
            std_stable_sort(this.m_triadBuffer.data, 0, this.m_triadBuffer.count, b2ParticleSystem.CompareTriadIndices);
            this.m_triadBuffer.Unique(b2ParticleSystem.MatchTriadIndices);
          }
        };
        b2ParticleSystem.prototype.UpdatePairsAndTriadsWithReactiveParticles = function() {
          var filter = new b2ParticleSystem.ReactiveFilter(this.m_flagsBuffer);
          this.UpdatePairsAndTriads(0, this.m_count, filter);
          if (!this.m_flagsBuffer.data) throw new Error();
          for (var i = 0; i < this.m_count; i++) this.m_flagsBuffer.data[i] &= ~exports.b2ParticleFlag.b2_reactiveParticle;
          this.m_allParticleFlags &= ~exports.b2ParticleFlag.b2_reactiveParticle;
        };
        b2ParticleSystem.ComparePairIndices = function(a, b) {
          var diffA = a.indexA - b.indexA;
          if (0 !== diffA) return diffA < 0;
          return a.indexB < b.indexB;
        };
        b2ParticleSystem.MatchPairIndices = function(a, b) {
          return a.indexA === b.indexA && a.indexB === b.indexB;
        };
        b2ParticleSystem.CompareTriadIndices = function(a, b) {
          var diffA = a.indexA - b.indexA;
          if (0 !== diffA) return diffA < 0;
          var diffB = a.indexB - b.indexB;
          if (0 !== diffB) return diffB < 0;
          return a.indexC < b.indexC;
        };
        b2ParticleSystem.MatchTriadIndices = function(a, b) {
          return a.indexA === b.indexA && a.indexB === b.indexB && a.indexC === b.indexC;
        };
        b2ParticleSystem.InitializeParticleLists = function(group, nodeBuffer) {
          var bufferIndex = group.GetBufferIndex();
          var particleCount = group.GetParticleCount();
          for (var i = 0; i < particleCount; i++) {
            var node = nodeBuffer[i];
            node.list = node;
            node.next = null;
            node.count = 1;
            node.index = i + bufferIndex;
          }
        };
        b2ParticleSystem.prototype.MergeParticleListsInContact = function(group, nodeBuffer) {
          var bufferIndex = group.GetBufferIndex();
          for (var k = 0; k < this.m_contactBuffer.count; k++) {
            var contact = this.m_contactBuffer.data[k];
            var a = contact.indexA;
            var b = contact.indexB;
            if (!group.ContainsParticle(a) || !group.ContainsParticle(b)) continue;
            var listA = nodeBuffer[a - bufferIndex].list;
            var listB = nodeBuffer[b - bufferIndex].list;
            if (listA === listB) continue;
            if (listA.count < listB.count) {
              var _tmp = listA;
              listA = listB;
              listB = _tmp;
            }
            b2ParticleSystem.MergeParticleLists(listA, listB);
          }
        };
        b2ParticleSystem.MergeParticleLists = function(listA, listB) {
          for (var b = listB; ;) {
            b.list = listA;
            var nextB = b.next;
            if (!nextB) {
              b.next = listA.next;
              break;
            }
            b = nextB;
          }
          listA.next = listB;
          listA.count += listB.count;
          listB.count = 0;
        };
        b2ParticleSystem.FindLongestParticleList = function(group, nodeBuffer) {
          var particleCount = group.GetParticleCount();
          var result = nodeBuffer[0];
          for (var i = 0; i < particleCount; i++) {
            var node = nodeBuffer[i];
            result.count < node.count && (result = node);
          }
          return result;
        };
        b2ParticleSystem.prototype.MergeZombieParticleListNodes = function(group, nodeBuffer, survivingList) {
          if (!this.m_flagsBuffer.data) throw new Error();
          var particleCount = group.GetParticleCount();
          for (var i = 0; i < particleCount; i++) {
            var node = nodeBuffer[i];
            node !== survivingList && this.m_flagsBuffer.data[node.index] & exports.b2ParticleFlag.b2_zombieParticle && b2ParticleSystem.MergeParticleListAndNode(survivingList, node);
          }
        };
        b2ParticleSystem.MergeParticleListAndNode = function(list, node) {
          node.list = list;
          node.next = list.next;
          list.next = node;
          list.count++;
          node.count = 0;
        };
        b2ParticleSystem.prototype.CreateParticleGroupsFromParticleList = function(group, nodeBuffer, survivingList) {
          if (!this.m_flagsBuffer.data) throw new Error();
          var particleCount = group.GetParticleCount();
          var def = new b2ParticleGroupDef();
          def.groupFlags = group.GetGroupFlags();
          def.userData = group.GetUserData();
          for (var i = 0; i < particleCount; i++) {
            var list = nodeBuffer[i];
            if (!list.count || list === survivingList) continue;
            var newGroup = this.CreateParticleGroup(def);
            for (var node = list; node; node = node.next) {
              var oldIndex = node.index;
              var newIndex = this.CloneParticle(oldIndex, newGroup);
              this.m_flagsBuffer.data[oldIndex] |= exports.b2ParticleFlag.b2_zombieParticle;
              node.index = newIndex;
            }
          }
        };
        b2ParticleSystem.prototype.UpdatePairsAndTriadsWithParticleList = function(group, nodeBuffer) {
          var bufferIndex = group.GetBufferIndex();
          for (var k = 0; k < this.m_pairBuffer.count; k++) {
            var pair = this.m_pairBuffer.data[k];
            var a = pair.indexA;
            var b = pair.indexB;
            group.ContainsParticle(a) && (pair.indexA = nodeBuffer[a - bufferIndex].index);
            group.ContainsParticle(b) && (pair.indexB = nodeBuffer[b - bufferIndex].index);
          }
          for (var k = 0; k < this.m_triadBuffer.count; k++) {
            var triad = this.m_triadBuffer.data[k];
            var a = triad.indexA;
            var b = triad.indexB;
            var c = triad.indexC;
            group.ContainsParticle(a) && (triad.indexA = nodeBuffer[a - bufferIndex].index);
            group.ContainsParticle(b) && (triad.indexB = nodeBuffer[b - bufferIndex].index);
            group.ContainsParticle(c) && (triad.indexC = nodeBuffer[c - bufferIndex].index);
          }
        };
        b2ParticleSystem.prototype.ComputeDepth = function() {
          var contactGroups = [];
          var contactGroupsCount = 0;
          for (var k = 0; k < this.m_contactBuffer.count; k++) {
            var contact = this.m_contactBuffer.data[k];
            var a = contact.indexA;
            var b = contact.indexB;
            var groupA = this.m_groupBuffer[a];
            var groupB = this.m_groupBuffer[b];
            groupA && groupA === groupB && groupA.m_groupFlags & exports.b2ParticleGroupFlag.b2_particleGroupNeedsUpdateDepth && (contactGroups[contactGroupsCount++] = contact);
          }
          var groupsToUpdate = [];
          var groupsToUpdateCount = 0;
          for (var group = this.m_groupList; group; group = group.GetNext()) if (group.m_groupFlags & exports.b2ParticleGroupFlag.b2_particleGroupNeedsUpdateDepth) {
            groupsToUpdate[groupsToUpdateCount++] = group;
            this.SetGroupFlags(group, group.m_groupFlags & ~exports.b2ParticleGroupFlag.b2_particleGroupNeedsUpdateDepth);
            for (var i = group.m_firstIndex; i < group.m_lastIndex; i++) this.m_accumulationBuffer[i] = 0;
          }
          for (var k = 0; k < contactGroupsCount; k++) {
            var contact = contactGroups[k];
            var a = contact.indexA;
            var b = contact.indexB;
            var w = contact.weight;
            this.m_accumulationBuffer[a] += w;
            this.m_accumulationBuffer[b] += w;
          }
          for (var i = 0; i < groupsToUpdateCount; i++) {
            var group = groupsToUpdate[i];
            for (var i_1 = group.m_firstIndex; i_1 < group.m_lastIndex; i_1++) {
              var w = this.m_accumulationBuffer[i_1];
              this.m_depthBuffer[i_1] = w < .8 ? 0 : b2_maxFloat;
            }
          }
          var iterationCount = b2Sqrt(this.m_count) >> 0;
          for (var t = 0; t < iterationCount; t++) {
            var updated = false;
            for (var k = 0; k < contactGroupsCount; k++) {
              var contact = contactGroups[k];
              var a = contact.indexA;
              var b = contact.indexB;
              var r = 1 - contact.weight;
              var ap0 = this.m_depthBuffer[a];
              var bp0 = this.m_depthBuffer[b];
              var ap1 = bp0 + r;
              var bp1 = ap0 + r;
              if (ap0 > ap1) {
                this.m_depthBuffer[a] = ap1;
                updated = true;
              }
              if (bp0 > bp1) {
                this.m_depthBuffer[b] = bp1;
                updated = true;
              }
            }
            if (!updated) break;
          }
          for (var i = 0; i < groupsToUpdateCount; i++) {
            var group = groupsToUpdate[i];
            for (var i_2 = group.m_firstIndex; i_2 < group.m_lastIndex; i_2++) this.m_depthBuffer[i_2] < b2_maxFloat ? this.m_depthBuffer[i_2] *= this.m_particleDiameter : this.m_depthBuffer[i_2] = 0;
          }
        };
        b2ParticleSystem.prototype.GetInsideBoundsEnumerator = function(aabb) {
          var lowerTag = b2ParticleSystem.computeTag(this.m_inverseDiameter * aabb.lowerBound.x - 1, this.m_inverseDiameter * aabb.lowerBound.y - 1);
          var upperTag = b2ParticleSystem.computeTag(this.m_inverseDiameter * aabb.upperBound.x + 1, this.m_inverseDiameter * aabb.upperBound.y + 1);
          var beginProxy = 0;
          var endProxy = this.m_proxyBuffer.count;
          var firstProxy = std_lower_bound(this.m_proxyBuffer.data, beginProxy, endProxy, lowerTag, b2ParticleSystem.Proxy.CompareProxyTag);
          var lastProxy = std_upper_bound(this.m_proxyBuffer.data, beginProxy, endProxy, upperTag, b2ParticleSystem.Proxy.CompareTagProxy);
          return new b2ParticleSystem.InsideBoundsEnumerator(this, lowerTag, upperTag, firstProxy, lastProxy);
        };
        b2ParticleSystem.prototype.UpdateAllParticleFlags = function() {
          if (!this.m_flagsBuffer.data) throw new Error();
          this.m_allParticleFlags = 0;
          for (var i = 0; i < this.m_count; i++) this.m_allParticleFlags |= this.m_flagsBuffer.data[i];
          this.m_needsUpdateAllParticleFlags = false;
        };
        b2ParticleSystem.prototype.UpdateAllGroupFlags = function() {
          this.m_allGroupFlags = 0;
          for (var group = this.m_groupList; group; group = group.GetNext()) this.m_allGroupFlags |= group.m_groupFlags;
          this.m_needsUpdateAllGroupFlags = false;
        };
        b2ParticleSystem.prototype.AddContact = function(a, b, contacts) {
          if (!this.m_flagsBuffer.data) throw new Error();
          if (!this.m_positionBuffer.data) throw new Error();
          var s_d = b2ParticleSystem.AddContact_s_d;
          var pos_data = this.m_positionBuffer.data;
          var d = b2Vec2.SubVV(pos_data[b], pos_data[a], s_d);
          var distBtParticlesSq = b2Vec2.DotVV(d, d);
          if (distBtParticlesSq < this.m_squaredDiameter) {
            var invD = b2InvSqrt(distBtParticlesSq);
            isFinite(invD) || (invD = 198177537e11);
            var contact = this.m_contactBuffer.data[this.m_contactBuffer.Append()];
            contact.indexA = a;
            contact.indexB = b;
            contact.flags = this.m_flagsBuffer.data[a] | this.m_flagsBuffer.data[b];
            contact.weight = 1 - distBtParticlesSq * invD * this.m_inverseDiameter;
            b2Vec2.MulSV(invD, d, contact.normal);
          }
        };
        b2ParticleSystem.prototype.FindContacts_Reference = function(contacts) {
          var beginProxy = 0;
          var endProxy = this.m_proxyBuffer.count;
          this.m_contactBuffer.count = 0;
          for (var a = beginProxy, c = beginProxy; a < endProxy; a++) {
            var rightTag = b2ParticleSystem.computeRelativeTag(this.m_proxyBuffer.data[a].tag, 1, 0);
            for (var b = a + 1; b < endProxy; b++) {
              if (rightTag < this.m_proxyBuffer.data[b].tag) break;
              this.AddContact(this.m_proxyBuffer.data[a].index, this.m_proxyBuffer.data[b].index, this.m_contactBuffer);
            }
            var bottomLeftTag = b2ParticleSystem.computeRelativeTag(this.m_proxyBuffer.data[a].tag, -1, 1);
            for (;c < endProxy; c++) if (bottomLeftTag <= this.m_proxyBuffer.data[c].tag) break;
            var bottomRightTag = b2ParticleSystem.computeRelativeTag(this.m_proxyBuffer.data[a].tag, 1, 1);
            for (var b = c; b < endProxy; b++) {
              if (bottomRightTag < this.m_proxyBuffer.data[b].tag) break;
              this.AddContact(this.m_proxyBuffer.data[a].index, this.m_proxyBuffer.data[b].index, this.m_contactBuffer);
            }
          }
        };
        b2ParticleSystem.prototype.FindContacts = function(contacts) {
          this.FindContacts_Reference(contacts);
        };
        b2ParticleSystem.prototype.UpdateProxies_Reference = function(proxies) {
          if (!this.m_positionBuffer.data) throw new Error();
          var pos_data = this.m_positionBuffer.data;
          var inv_diam = this.m_inverseDiameter;
          for (var k = 0; k < this.m_proxyBuffer.count; ++k) {
            var proxy = this.m_proxyBuffer.data[k];
            var i = proxy.index;
            var p = pos_data[i];
            proxy.tag = b2ParticleSystem.computeTag(inv_diam * p.x, inv_diam * p.y);
          }
        };
        b2ParticleSystem.prototype.UpdateProxies = function(proxies) {
          this.UpdateProxies_Reference(proxies);
        };
        b2ParticleSystem.prototype.SortProxies = function(proxies) {
          std_sort(this.m_proxyBuffer.data, 0, this.m_proxyBuffer.count, b2ParticleSystem.Proxy.CompareProxyProxy);
        };
        b2ParticleSystem.prototype.FilterContacts = function(contacts) {
          var contactFilter = this.GetParticleContactFilter();
          if (null === contactFilter) return;
          var system = this;
          var predicate = function predicate(contact) {
            return 0 !== (contact.flags & exports.b2ParticleFlag.b2_particleContactFilterParticle) && !contactFilter.ShouldCollideParticleParticle(system, contact.indexA, contact.indexB);
          };
          this.m_contactBuffer.RemoveIf(predicate);
        };
        b2ParticleSystem.prototype.NotifyContactListenerPreContact = function(particlePairs) {
          var contactListener = this.GetParticleContactListener();
          if (null === contactListener) return;
          particlePairs.Initialize(this.m_contactBuffer, this.m_flagsBuffer);
          throw new Error();
        };
        b2ParticleSystem.prototype.NotifyContactListenerPostContact = function(particlePairs) {
          var contactListener = this.GetParticleContactListener();
          if (null === contactListener) return;
          for (var k = 0; k < this.m_contactBuffer.count; ++k) {
            var contact = this.m_contactBuffer.data[k];
            contactListener.BeginContactParticleParticle(this, contact);
          }
          throw new Error();
        };
        b2ParticleSystem.b2ParticleContactIsZombie = function(contact) {
          return (contact.flags & exports.b2ParticleFlag.b2_zombieParticle) === exports.b2ParticleFlag.b2_zombieParticle;
        };
        b2ParticleSystem.prototype.UpdateContacts = function(exceptZombie) {
          this.UpdateProxies(this.m_proxyBuffer);
          this.SortProxies(this.m_proxyBuffer);
          var particlePairs = new b2ParticleSystem.b2ParticlePairSet();
          this.NotifyContactListenerPreContact(particlePairs);
          this.FindContacts(this.m_contactBuffer);
          this.FilterContacts(this.m_contactBuffer);
          this.NotifyContactListenerPostContact(particlePairs);
          exceptZombie && this.m_contactBuffer.RemoveIf(b2ParticleSystem.b2ParticleContactIsZombie);
        };
        b2ParticleSystem.prototype.NotifyBodyContactListenerPreContact = function(fixtureSet) {
          var contactListener = this.GetFixtureContactListener();
          if (null === contactListener) return;
          fixtureSet.Initialize(this.m_bodyContactBuffer, this.m_flagsBuffer);
          throw new Error();
        };
        b2ParticleSystem.prototype.NotifyBodyContactListenerPostContact = function(fixtureSet) {
          var contactListener = this.GetFixtureContactListener();
          if (null === contactListener) return;
          for (var k = 0; k < this.m_bodyContactBuffer.count; k++) {
            var contact = this.m_bodyContactBuffer.data[k];
            contactListener.BeginContactFixtureParticle(this, contact);
          }
          throw new Error();
        };
        b2ParticleSystem.prototype.UpdateBodyContacts = function() {
          var s_aabb = b2ParticleSystem.UpdateBodyContacts_s_aabb;
          var fixtureSet = new b2ParticleSystem.FixtureParticleSet();
          this.NotifyBodyContactListenerPreContact(fixtureSet);
          if (this.m_stuckThreshold > 0) {
            if (!this.m_bodyContactCountBuffer.data) throw new Error();
            if (!this.m_lastBodyContactStepBuffer.data) throw new Error();
            if (!this.m_consecutiveContactStepsBuffer.data) throw new Error();
            var particleCount = this.GetParticleCount();
            for (var i = 0; i < particleCount; i++) {
              this.m_bodyContactCountBuffer.data[i] = 0;
              this.m_timestamp > this.m_lastBodyContactStepBuffer.data[i] + 1 && (this.m_consecutiveContactStepsBuffer.data[i] = 0);
            }
          }
          this.m_bodyContactBuffer.SetCount(0);
          this.m_stuckParticleBuffer.SetCount(0);
          var aabb = s_aabb;
          this.ComputeAABB(aabb);
          var callback = new b2ParticleSystem.UpdateBodyContactsCallback(this, this.GetFixtureContactFilter());
          this.m_world.QueryAABB(callback, aabb);
          this.m_def.strictContactCheck && this.RemoveSpuriousBodyContacts();
          this.NotifyBodyContactListenerPostContact(fixtureSet);
        };
        b2ParticleSystem.prototype.Solve = function(step) {
          var s_subStep = b2ParticleSystem.Solve_s_subStep;
          if (0 === this.m_count) return;
          this.m_expirationTimeBuffer.data && this.SolveLifetimes(step);
          this.m_allParticleFlags & exports.b2ParticleFlag.b2_zombieParticle && this.SolveZombie();
          this.m_needsUpdateAllParticleFlags && this.UpdateAllParticleFlags();
          this.m_needsUpdateAllGroupFlags && this.UpdateAllGroupFlags();
          if (this.m_paused) return;
          for (this.m_iterationIndex = 0; this.m_iterationIndex < step.particleIterations; this.m_iterationIndex++) {
            ++this.m_timestamp;
            var subStep = s_subStep.Copy(step);
            subStep.dt /= step.particleIterations;
            subStep.inv_dt *= step.particleIterations;
            this.UpdateContacts(false);
            this.UpdateBodyContacts();
            this.ComputeWeight();
            this.m_allGroupFlags & exports.b2ParticleGroupFlag.b2_particleGroupNeedsUpdateDepth && this.ComputeDepth();
            this.m_allParticleFlags & exports.b2ParticleFlag.b2_reactiveParticle && this.UpdatePairsAndTriadsWithReactiveParticles();
            this.m_hasForce && this.SolveForce(subStep);
            this.m_allParticleFlags & exports.b2ParticleFlag.b2_viscousParticle && this.SolveViscous();
            this.m_allParticleFlags & exports.b2ParticleFlag.b2_repulsiveParticle && this.SolveRepulsive(subStep);
            this.m_allParticleFlags & exports.b2ParticleFlag.b2_powderParticle && this.SolvePowder(subStep);
            this.m_allParticleFlags & exports.b2ParticleFlag.b2_tensileParticle && this.SolveTensile(subStep);
            this.m_allGroupFlags & exports.b2ParticleGroupFlag.b2_solidParticleGroup && this.SolveSolid(subStep);
            this.m_allParticleFlags & exports.b2ParticleFlag.b2_colorMixingParticle && this.SolveColorMixing();
            this.SolveGravity(subStep);
            this.m_allParticleFlags & exports.b2ParticleFlag.b2_staticPressureParticle && this.SolveStaticPressure(subStep);
            this.SolvePressure(subStep);
            this.SolveDamping(subStep);
            this.m_allParticleFlags & b2ParticleSystem.k_extraDampingFlags && this.SolveExtraDamping();
            this.m_allParticleFlags & exports.b2ParticleFlag.b2_elasticParticle && this.SolveElastic(subStep);
            this.m_allParticleFlags & exports.b2ParticleFlag.b2_springParticle && this.SolveSpring(subStep);
            this.LimitVelocity(subStep);
            this.m_allGroupFlags & exports.b2ParticleGroupFlag.b2_rigidParticleGroup && this.SolveRigidDamping();
            this.m_allParticleFlags & exports.b2ParticleFlag.b2_barrierParticle && this.SolveBarrier(subStep);
            this.SolveCollision(subStep);
            this.m_allGroupFlags & exports.b2ParticleGroupFlag.b2_rigidParticleGroup && this.SolveRigid(subStep);
            this.m_allParticleFlags & exports.b2ParticleFlag.b2_wallParticle && this.SolveWall();
            if (!this.m_positionBuffer.data) throw new Error();
            if (!this.m_velocityBuffer.data) throw new Error();
            for (var i = 0; i < this.m_count; i++) this.m_positionBuffer.data[i].SelfMulAdd(subStep.dt, this.m_velocityBuffer.data[i]);
          }
        };
        b2ParticleSystem.prototype.SolveCollision = function(step) {
          var s_aabb = b2ParticleSystem.SolveCollision_s_aabb;
          if (!this.m_positionBuffer.data) throw new Error();
          if (!this.m_velocityBuffer.data) throw new Error();
          var pos_data = this.m_positionBuffer.data;
          var vel_data = this.m_velocityBuffer.data;
          var aabb = s_aabb;
          aabb.lowerBound.x = +b2_maxFloat;
          aabb.lowerBound.y = +b2_maxFloat;
          aabb.upperBound.x = -b2_maxFloat;
          aabb.upperBound.y = -b2_maxFloat;
          for (var i = 0; i < this.m_count; i++) {
            var v = vel_data[i];
            var p1 = pos_data[i];
            var p2_x = p1.x + step.dt * v.x;
            var p2_y = p1.y + step.dt * v.y;
            aabb.lowerBound.x = b2Min(aabb.lowerBound.x, b2Min(p1.x, p2_x));
            aabb.lowerBound.y = b2Min(aabb.lowerBound.y, b2Min(p1.y, p2_y));
            aabb.upperBound.x = b2Max(aabb.upperBound.x, b2Max(p1.x, p2_x));
            aabb.upperBound.y = b2Max(aabb.upperBound.y, b2Max(p1.y, p2_y));
          }
          var callback = new b2ParticleSystem.SolveCollisionCallback(this, step);
          this.m_world.QueryAABB(callback, aabb);
        };
        b2ParticleSystem.prototype.LimitVelocity = function(step) {
          if (!this.m_velocityBuffer.data) throw new Error();
          var vel_data = this.m_velocityBuffer.data;
          var criticalVelocitySquared = this.GetCriticalVelocitySquared(step);
          for (var i = 0; i < this.m_count; i++) {
            var v = vel_data[i];
            var v2 = b2Vec2.DotVV(v, v);
            v2 > criticalVelocitySquared && v.SelfMul(b2Sqrt(criticalVelocitySquared / v2));
          }
        };
        b2ParticleSystem.prototype.SolveGravity = function(step) {
          if (!this.m_velocityBuffer.data) throw new Error();
          var s_gravity = b2ParticleSystem.SolveGravity_s_gravity;
          var vel_data = this.m_velocityBuffer.data;
          var gravity = b2Vec2.MulSV(step.dt * this.m_def.gravityScale, this.m_world.GetGravity(), s_gravity);
          for (var i = 0; i < this.m_count; i++) vel_data[i].SelfAdd(gravity);
        };
        b2ParticleSystem.prototype.SolveBarrier = function(step) {
          var s_aabb = b2ParticleSystem.SolveBarrier_s_aabb;
          var s_va = b2ParticleSystem.SolveBarrier_s_va;
          var s_vb = b2ParticleSystem.SolveBarrier_s_vb;
          var s_pba = b2ParticleSystem.SolveBarrier_s_pba;
          var s_vba = b2ParticleSystem.SolveBarrier_s_vba;
          var s_vc = b2ParticleSystem.SolveBarrier_s_vc;
          var s_pca = b2ParticleSystem.SolveBarrier_s_pca;
          var s_vca = b2ParticleSystem.SolveBarrier_s_vca;
          var s_qba = b2ParticleSystem.SolveBarrier_s_qba;
          var s_qca = b2ParticleSystem.SolveBarrier_s_qca;
          var s_dv = b2ParticleSystem.SolveBarrier_s_dv;
          var s_f = b2ParticleSystem.SolveBarrier_s_f;
          if (!this.m_flagsBuffer.data) throw new Error();
          if (!this.m_positionBuffer.data) throw new Error();
          if (!this.m_velocityBuffer.data) throw new Error();
          var pos_data = this.m_positionBuffer.data;
          var vel_data = this.m_velocityBuffer.data;
          for (var i = 0; i < this.m_count; i++) {
            var flags = this.m_flagsBuffer.data[i];
            0 !== (flags & b2ParticleSystem.k_barrierWallFlags) && vel_data[i].SetZero();
          }
          var tmax = b2_barrierCollisionTime * step.dt;
          var mass = this.GetParticleMass();
          for (var k = 0; k < this.m_pairBuffer.count; k++) {
            var pair = this.m_pairBuffer.data[k];
            if (pair.flags & exports.b2ParticleFlag.b2_barrierParticle) {
              var a = pair.indexA;
              var b = pair.indexB;
              var pa = pos_data[a];
              var pb = pos_data[b];
              var aabb = s_aabb;
              b2Vec2.MinV(pa, pb, aabb.lowerBound);
              b2Vec2.MaxV(pa, pb, aabb.upperBound);
              var aGroup = this.m_groupBuffer[a];
              var bGroup = this.m_groupBuffer[b];
              var va = this.GetLinearVelocity(aGroup, a, pa, s_va);
              var vb = this.GetLinearVelocity(bGroup, b, pb, s_vb);
              var pba = b2Vec2.SubVV(pb, pa, s_pba);
              var vba = b2Vec2.SubVV(vb, va, s_vba);
              var enumerator = this.GetInsideBoundsEnumerator(aabb);
              var c = void 0;
              while ((c = enumerator.GetNext()) >= 0) {
                var pc = pos_data[c];
                var cGroup = this.m_groupBuffer[c];
                if (aGroup !== cGroup && bGroup !== cGroup) {
                  var vc = this.GetLinearVelocity(cGroup, c, pc, s_vc);
                  var pca = b2Vec2.SubVV(pc, pa, s_pca);
                  var vca = b2Vec2.SubVV(vc, va, s_vca);
                  var e2 = b2Vec2.CrossVV(vba, vca);
                  var e1 = b2Vec2.CrossVV(pba, vca) - b2Vec2.CrossVV(pca, vba);
                  var e0 = b2Vec2.CrossVV(pba, pca);
                  var s = void 0, t = void 0;
                  var qba = s_qba, qca = s_qca;
                  if (0 === e2) {
                    if (0 === e1) continue;
                    t = -e0 / e1;
                    if (!(t >= 0 && t < tmax)) continue;
                    b2Vec2.AddVMulSV(pba, t, vba, qba);
                    b2Vec2.AddVMulSV(pca, t, vca, qca);
                    s = b2Vec2.DotVV(qba, qca) / b2Vec2.DotVV(qba, qba);
                    if (!(s >= 0 && s <= 1)) continue;
                  } else {
                    var det = e1 * e1 - 4 * e0 * e2;
                    if (det < 0) continue;
                    var sqrtDet = b2Sqrt(det);
                    var t1 = (-e1 - sqrtDet) / (2 * e2);
                    var t2 = (-e1 + sqrtDet) / (2 * e2);
                    if (t1 > t2) {
                      var tmp = t1;
                      t1 = t2;
                      t2 = tmp;
                    }
                    t = t1;
                    b2Vec2.AddVMulSV(pba, t, vba, qba);
                    b2Vec2.AddVMulSV(pca, t, vca, qca);
                    s = b2Vec2.DotVV(qba, qca) / b2Vec2.DotVV(qba, qba);
                    if (!(t >= 0 && t < tmax && s >= 0 && s <= 1)) {
                      t = t2;
                      if (!(t >= 0 && t < tmax)) continue;
                      b2Vec2.AddVMulSV(pba, t, vba, qba);
                      b2Vec2.AddVMulSV(pca, t, vca, qca);
                      s = b2Vec2.DotVV(qba, qca) / b2Vec2.DotVV(qba, qba);
                      if (!(s >= 0 && s <= 1)) continue;
                    }
                  }
                  var dv = s_dv;
                  dv.x = va.x + s * vba.x - vc.x;
                  dv.y = va.y + s * vba.y - vc.y;
                  var f = b2Vec2.MulSV(mass, dv, s_f);
                  if (cGroup && this.IsRigidGroup(cGroup)) {
                    var mass_1 = cGroup.GetMass();
                    var inertia = cGroup.GetInertia();
                    mass_1 > 0 && cGroup.m_linearVelocity.SelfMulAdd(1 / mass_1, f);
                    inertia > 0 && (cGroup.m_angularVelocity += b2Vec2.CrossVV(b2Vec2.SubVV(pc, cGroup.GetCenter(), b2Vec2.s_t0), f) / inertia);
                  } else vel_data[c].SelfAdd(dv);
                  this.ParticleApplyForce(c, f.SelfMul(-step.inv_dt));
                }
              }
            }
          }
        };
        b2ParticleSystem.prototype.SolveStaticPressure = function(step) {
          if (!this.m_flagsBuffer.data) throw new Error();
          this.m_staticPressureBuffer = this.RequestBuffer(this.m_staticPressureBuffer);
          var criticalPressure = this.GetCriticalPressure(step);
          var pressurePerWeight = this.m_def.staticPressureStrength * criticalPressure;
          var maxPressure = b2_maxParticlePressure * criticalPressure;
          var relaxation = this.m_def.staticPressureRelaxation;
          for (var t = 0; t < this.m_def.staticPressureIterations; t++) {
            for (var i = 0; i < this.m_count; i++) this.m_accumulationBuffer[i] = 0;
            for (var k = 0; k < this.m_contactBuffer.count; k++) {
              var contact = this.m_contactBuffer.data[k];
              if (contact.flags & exports.b2ParticleFlag.b2_staticPressureParticle) {
                var a = contact.indexA;
                var b = contact.indexB;
                var w = contact.weight;
                this.m_accumulationBuffer[a] += w * this.m_staticPressureBuffer[b];
                this.m_accumulationBuffer[b] += w * this.m_staticPressureBuffer[a];
              }
            }
            for (var i = 0; i < this.m_count; i++) {
              var w = this.m_weightBuffer[i];
              if (this.m_flagsBuffer.data[i] & exports.b2ParticleFlag.b2_staticPressureParticle) {
                var wh = this.m_accumulationBuffer[i];
                var h = (wh + pressurePerWeight * (w - b2_minParticleWeight)) / (w + relaxation);
                this.m_staticPressureBuffer[i] = b2Clamp(h, 0, maxPressure);
              } else this.m_staticPressureBuffer[i] = 0;
            }
          }
        };
        b2ParticleSystem.prototype.ComputeWeight = function() {
          for (var k = 0; k < this.m_count; k++) this.m_weightBuffer[k] = 0;
          for (var k = 0; k < this.m_bodyContactBuffer.count; k++) {
            var contact = this.m_bodyContactBuffer.data[k];
            var a = contact.index;
            var w = contact.weight;
            this.m_weightBuffer[a] += w;
          }
          for (var k = 0; k < this.m_contactBuffer.count; k++) {
            var contact = this.m_contactBuffer.data[k];
            var a = contact.indexA;
            var b = contact.indexB;
            var w = contact.weight;
            this.m_weightBuffer[a] += w;
            this.m_weightBuffer[b] += w;
          }
        };
        b2ParticleSystem.prototype.SolvePressure = function(step) {
          var s_f = b2ParticleSystem.SolvePressure_s_f;
          if (!this.m_flagsBuffer.data) throw new Error();
          if (!this.m_positionBuffer.data) throw new Error();
          if (!this.m_velocityBuffer.data) throw new Error();
          var pos_data = this.m_positionBuffer.data;
          var vel_data = this.m_velocityBuffer.data;
          var criticalPressure = this.GetCriticalPressure(step);
          var pressurePerWeight = this.m_def.pressureStrength * criticalPressure;
          var maxPressure = b2_maxParticlePressure * criticalPressure;
          for (var i = 0; i < this.m_count; i++) {
            var w = this.m_weightBuffer[i];
            var h = pressurePerWeight * b2Max(0, w - b2_minParticleWeight);
            this.m_accumulationBuffer[i] = b2Min(h, maxPressure);
          }
          if (this.m_allParticleFlags & b2ParticleSystem.k_noPressureFlags) for (var i = 0; i < this.m_count; i++) this.m_flagsBuffer.data[i] & b2ParticleSystem.k_noPressureFlags && (this.m_accumulationBuffer[i] = 0);
          if (this.m_allParticleFlags & exports.b2ParticleFlag.b2_staticPressureParticle) for (var i = 0; i < this.m_count; i++) this.m_flagsBuffer.data[i] & exports.b2ParticleFlag.b2_staticPressureParticle && (this.m_accumulationBuffer[i] += this.m_staticPressureBuffer[i]);
          var velocityPerPressure = step.dt / (this.m_def.density * this.m_particleDiameter);
          var inv_mass = this.GetParticleInvMass();
          for (var k = 0; k < this.m_bodyContactBuffer.count; k++) {
            var contact = this.m_bodyContactBuffer.data[k];
            var a = contact.index;
            var b = contact.body;
            var w = contact.weight;
            var m = contact.mass;
            var n = contact.normal;
            var p = pos_data[a];
            var h = this.m_accumulationBuffer[a] + pressurePerWeight * w;
            var f = b2Vec2.MulSV(velocityPerPressure * w * m * h, n, s_f);
            vel_data[a].SelfMulSub(inv_mass, f);
            b.ApplyLinearImpulse(f, p, true);
          }
          for (var k = 0; k < this.m_contactBuffer.count; k++) {
            var contact = this.m_contactBuffer.data[k];
            var a = contact.indexA;
            var b = contact.indexB;
            var w = contact.weight;
            var n = contact.normal;
            var h = this.m_accumulationBuffer[a] + this.m_accumulationBuffer[b];
            var f = b2Vec2.MulSV(velocityPerPressure * w * h, n, s_f);
            vel_data[a].SelfSub(f);
            vel_data[b].SelfAdd(f);
          }
        };
        b2ParticleSystem.prototype.SolveDamping = function(step) {
          var s_v = b2ParticleSystem.SolveDamping_s_v;
          var s_f = b2ParticleSystem.SolveDamping_s_f;
          if (!this.m_positionBuffer.data) throw new Error();
          if (!this.m_velocityBuffer.data) throw new Error();
          var pos_data = this.m_positionBuffer.data;
          var vel_data = this.m_velocityBuffer.data;
          var linearDamping = this.m_def.dampingStrength;
          var quadraticDamping = 1 / this.GetCriticalVelocity(step);
          var inv_mass = this.GetParticleInvMass();
          for (var k = 0; k < this.m_bodyContactBuffer.count; k++) {
            var contact = this.m_bodyContactBuffer.data[k];
            var a = contact.index;
            var b = contact.body;
            var w = contact.weight;
            var m = contact.mass;
            var n = contact.normal;
            var p = pos_data[a];
            var v = b2Vec2.SubVV(b.GetLinearVelocityFromWorldPoint(p, b2Vec2.s_t0), vel_data[a], s_v);
            var vn = b2Vec2.DotVV(v, n);
            if (vn < 0) {
              var damping = b2Max(linearDamping * w, b2Min(-quadraticDamping * vn, .5));
              var f = b2Vec2.MulSV(damping * m * vn, n, s_f);
              vel_data[a].SelfMulAdd(inv_mass, f);
              b.ApplyLinearImpulse(f.SelfNeg(), p, true);
            }
          }
          for (var k = 0; k < this.m_contactBuffer.count; k++) {
            var contact = this.m_contactBuffer.data[k];
            var a = contact.indexA;
            var b = contact.indexB;
            var w = contact.weight;
            var n = contact.normal;
            var v = b2Vec2.SubVV(vel_data[b], vel_data[a], s_v);
            var vn = b2Vec2.DotVV(v, n);
            if (vn < 0) {
              var damping = b2Max(linearDamping * w, b2Min(-quadraticDamping * vn, .5));
              var f = b2Vec2.MulSV(damping * vn, n, s_f);
              vel_data[a].SelfAdd(f);
              vel_data[b].SelfSub(f);
            }
          }
        };
        b2ParticleSystem.prototype.SolveRigidDamping = function() {
          var s_t0 = b2ParticleSystem.SolveRigidDamping_s_t0;
          var s_t1 = b2ParticleSystem.SolveRigidDamping_s_t1;
          var s_p = b2ParticleSystem.SolveRigidDamping_s_p;
          var s_v = b2ParticleSystem.SolveRigidDamping_s_v;
          var invMassA = [ 0 ], invInertiaA = [ 0 ], tangentDistanceA = [ 0 ];
          var invMassB = [ 0 ], invInertiaB = [ 0 ], tangentDistanceB = [ 0 ];
          if (!this.m_positionBuffer.data) throw new Error();
          var pos_data = this.m_positionBuffer.data;
          var damping = this.m_def.dampingStrength;
          for (var k = 0; k < this.m_bodyContactBuffer.count; k++) {
            var contact = this.m_bodyContactBuffer.data[k];
            var a = contact.index;
            var aGroup = this.m_groupBuffer[a];
            if (aGroup && this.IsRigidGroup(aGroup)) {
              var b = contact.body;
              var n = contact.normal;
              var w = contact.weight;
              var p = pos_data[a];
              var v = b2Vec2.SubVV(b.GetLinearVelocityFromWorldPoint(p, s_t0), aGroup.GetLinearVelocityFromWorldPoint(p, s_t1), s_v);
              var vn = b2Vec2.DotVV(v, n);
              if (vn < 0) {
                this.InitDampingParameterWithRigidGroupOrParticle(invMassA, invInertiaA, tangentDistanceA, true, aGroup, a, p, n);
                this.InitDampingParameter(invMassB, invInertiaB, tangentDistanceB, b.GetMass(), b.GetInertia() - b.GetMass() * b.GetLocalCenter().LengthSquared(), b.GetWorldCenter(), p, n);
                var f = damping * b2Min(w, 1) * this.ComputeDampingImpulse(invMassA[0], invInertiaA[0], tangentDistanceA[0], invMassB[0], invInertiaB[0], tangentDistanceB[0], vn);
                this.ApplyDamping(invMassA[0], invInertiaA[0], tangentDistanceA[0], true, aGroup, a, f, n);
                b.ApplyLinearImpulse(b2Vec2.MulSV(-f, n, b2Vec2.s_t0), p, true);
              }
            }
          }
          for (var k = 0; k < this.m_contactBuffer.count; k++) {
            var contact = this.m_contactBuffer.data[k];
            var a = contact.indexA;
            var b = contact.indexB;
            var n = contact.normal;
            var w = contact.weight;
            var aGroup = this.m_groupBuffer[a];
            var bGroup = this.m_groupBuffer[b];
            var aRigid = this.IsRigidGroup(aGroup);
            var bRigid = this.IsRigidGroup(bGroup);
            if (aGroup !== bGroup && (aRigid || bRigid)) {
              var p = b2Vec2.MidVV(pos_data[a], pos_data[b], s_p);
              var v = b2Vec2.SubVV(this.GetLinearVelocity(bGroup, b, p, s_t0), this.GetLinearVelocity(aGroup, a, p, s_t1), s_v);
              var vn = b2Vec2.DotVV(v, n);
              if (vn < 0) {
                this.InitDampingParameterWithRigidGroupOrParticle(invMassA, invInertiaA, tangentDistanceA, aRigid, aGroup, a, p, n);
                this.InitDampingParameterWithRigidGroupOrParticle(invMassB, invInertiaB, tangentDistanceB, bRigid, bGroup, b, p, n);
                var f = damping * w * this.ComputeDampingImpulse(invMassA[0], invInertiaA[0], tangentDistanceA[0], invMassB[0], invInertiaB[0], tangentDistanceB[0], vn);
                this.ApplyDamping(invMassA[0], invInertiaA[0], tangentDistanceA[0], aRigid, aGroup, a, f, n);
                this.ApplyDamping(invMassB[0], invInertiaB[0], tangentDistanceB[0], bRigid, bGroup, b, -f, n);
              }
            }
          }
        };
        b2ParticleSystem.prototype.SolveExtraDamping = function() {
          var s_v = b2ParticleSystem.SolveExtraDamping_s_v;
          var s_f = b2ParticleSystem.SolveExtraDamping_s_f;
          if (!this.m_flagsBuffer.data) throw new Error();
          if (!this.m_positionBuffer.data) throw new Error();
          if (!this.m_velocityBuffer.data) throw new Error();
          var vel_data = this.m_velocityBuffer.data;
          var pos_data = this.m_positionBuffer.data;
          var inv_mass = this.GetParticleInvMass();
          for (var k = 0; k < this.m_bodyContactBuffer.count; k++) {
            var contact = this.m_bodyContactBuffer.data[k];
            var a = contact.index;
            if (this.m_flagsBuffer.data[a] & b2ParticleSystem.k_extraDampingFlags) {
              var b = contact.body;
              var m = contact.mass;
              var n = contact.normal;
              var p = pos_data[a];
              var v = b2Vec2.SubVV(b.GetLinearVelocityFromWorldPoint(p, b2Vec2.s_t0), vel_data[a], s_v);
              var vn = b2Vec2.DotVV(v, n);
              if (vn < 0) {
                var f = b2Vec2.MulSV(.5 * m * vn, n, s_f);
                vel_data[a].SelfMulAdd(inv_mass, f);
                b.ApplyLinearImpulse(f.SelfNeg(), p, true);
              }
            }
          }
        };
        b2ParticleSystem.prototype.SolveWall = function() {
          if (!this.m_flagsBuffer.data) throw new Error();
          if (!this.m_velocityBuffer.data) throw new Error();
          var vel_data = this.m_velocityBuffer.data;
          for (var i = 0; i < this.m_count; i++) this.m_flagsBuffer.data[i] & exports.b2ParticleFlag.b2_wallParticle && vel_data[i].SetZero();
        };
        b2ParticleSystem.prototype.SolveRigid = function(step) {
          var s_position = b2ParticleSystem.SolveRigid_s_position;
          var s_rotation = b2ParticleSystem.SolveRigid_s_rotation;
          var s_transform = b2ParticleSystem.SolveRigid_s_transform;
          var s_velocityTransform = b2ParticleSystem.SolveRigid_s_velocityTransform;
          if (!this.m_positionBuffer.data) throw new Error();
          if (!this.m_velocityBuffer.data) throw new Error();
          var pos_data = this.m_positionBuffer.data;
          var vel_data = this.m_velocityBuffer.data;
          for (var group = this.m_groupList; group; group = group.GetNext()) if (group.m_groupFlags & exports.b2ParticleGroupFlag.b2_rigidParticleGroup) {
            group.UpdateStatistics();
            var rotation = s_rotation;
            rotation.SetAngle(step.dt * group.m_angularVelocity);
            var position = b2Vec2.AddVV(group.m_center, b2Vec2.SubVV(b2Vec2.MulSV(step.dt, group.m_linearVelocity, b2Vec2.s_t0), b2Rot.MulRV(rotation, group.m_center, b2Vec2.s_t1), b2Vec2.s_t0), s_position);
            var transform = s_transform;
            transform.SetPositionRotation(position, rotation);
            b2Transform.MulXX(transform, group.m_transform, group.m_transform);
            var velocityTransform = s_velocityTransform;
            velocityTransform.p.x = step.inv_dt * transform.p.x;
            velocityTransform.p.y = step.inv_dt * transform.p.y;
            velocityTransform.q.s = step.inv_dt * transform.q.s;
            velocityTransform.q.c = step.inv_dt * (transform.q.c - 1);
            for (var i = group.m_firstIndex; i < group.m_lastIndex; i++) b2Transform.MulXV(velocityTransform, pos_data[i], vel_data[i]);
          }
        };
        b2ParticleSystem.prototype.SolveElastic = function(step) {
          var s_pa = b2ParticleSystem.SolveElastic_s_pa;
          var s_pb = b2ParticleSystem.SolveElastic_s_pb;
          var s_pc = b2ParticleSystem.SolveElastic_s_pc;
          var s_r = b2ParticleSystem.SolveElastic_s_r;
          var s_t0 = b2ParticleSystem.SolveElastic_s_t0;
          if (!this.m_positionBuffer.data) throw new Error();
          if (!this.m_velocityBuffer.data) throw new Error();
          var pos_data = this.m_positionBuffer.data;
          var vel_data = this.m_velocityBuffer.data;
          var elasticStrength = step.inv_dt * this.m_def.elasticStrength;
          for (var k = 0; k < this.m_triadBuffer.count; k++) {
            var triad = this.m_triadBuffer.data[k];
            if (triad.flags & exports.b2ParticleFlag.b2_elasticParticle) {
              var a = triad.indexA;
              var b = triad.indexB;
              var c = triad.indexC;
              var oa = triad.pa;
              var ob = triad.pb;
              var oc = triad.pc;
              var pa = s_pa.Copy(pos_data[a]);
              var pb = s_pb.Copy(pos_data[b]);
              var pc = s_pc.Copy(pos_data[c]);
              var va = vel_data[a];
              var vb = vel_data[b];
              var vc = vel_data[c];
              pa.SelfMulAdd(step.dt, va);
              pb.SelfMulAdd(step.dt, vb);
              pc.SelfMulAdd(step.dt, vc);
              var midPoint_x = (pa.x + pb.x + pc.x) / 3;
              var midPoint_y = (pa.y + pb.y + pc.y) / 3;
              pa.x -= midPoint_x;
              pa.y -= midPoint_y;
              pb.x -= midPoint_x;
              pb.y -= midPoint_y;
              pc.x -= midPoint_x;
              pc.y -= midPoint_y;
              var r = s_r;
              r.s = b2Vec2.CrossVV(oa, pa) + b2Vec2.CrossVV(ob, pb) + b2Vec2.CrossVV(oc, pc);
              r.c = b2Vec2.DotVV(oa, pa) + b2Vec2.DotVV(ob, pb) + b2Vec2.DotVV(oc, pc);
              var r2 = r.s * r.s + r.c * r.c;
              var invR = b2InvSqrt(r2);
              isFinite(invR) || (invR = 198177537e11);
              r.s *= invR;
              r.c *= invR;
              var strength = elasticStrength * triad.strength;
              b2Rot.MulRV(r, oa, s_t0);
              b2Vec2.SubVV(s_t0, pa, s_t0);
              b2Vec2.MulSV(strength, s_t0, s_t0);
              va.SelfAdd(s_t0);
              b2Rot.MulRV(r, ob, s_t0);
              b2Vec2.SubVV(s_t0, pb, s_t0);
              b2Vec2.MulSV(strength, s_t0, s_t0);
              vb.SelfAdd(s_t0);
              b2Rot.MulRV(r, oc, s_t0);
              b2Vec2.SubVV(s_t0, pc, s_t0);
              b2Vec2.MulSV(strength, s_t0, s_t0);
              vc.SelfAdd(s_t0);
            }
          }
        };
        b2ParticleSystem.prototype.SolveSpring = function(step) {
          var s_pa = b2ParticleSystem.SolveSpring_s_pa;
          var s_pb = b2ParticleSystem.SolveSpring_s_pb;
          var s_d = b2ParticleSystem.SolveSpring_s_d;
          var s_f = b2ParticleSystem.SolveSpring_s_f;
          if (!this.m_positionBuffer.data) throw new Error();
          if (!this.m_velocityBuffer.data) throw new Error();
          var pos_data = this.m_positionBuffer.data;
          var vel_data = this.m_velocityBuffer.data;
          var springStrength = step.inv_dt * this.m_def.springStrength;
          for (var k = 0; k < this.m_pairBuffer.count; k++) {
            var pair = this.m_pairBuffer.data[k];
            if (pair.flags & exports.b2ParticleFlag.b2_springParticle) {
              var a = pair.indexA;
              var b = pair.indexB;
              var pa = s_pa.Copy(pos_data[a]);
              var pb = s_pb.Copy(pos_data[b]);
              var va = vel_data[a];
              var vb = vel_data[b];
              pa.SelfMulAdd(step.dt, va);
              pb.SelfMulAdd(step.dt, vb);
              var d = b2Vec2.SubVV(pb, pa, s_d);
              var r0 = pair.distance;
              var r1 = d.Length();
              var strength = springStrength * pair.strength;
              var f = b2Vec2.MulSV(strength * (r0 - r1) / r1, d, s_f);
              va.SelfSub(f);
              vb.SelfAdd(f);
            }
          }
        };
        b2ParticleSystem.prototype.SolveTensile = function(step) {
          var s_weightedNormal = b2ParticleSystem.SolveTensile_s_weightedNormal;
          var s_s = b2ParticleSystem.SolveTensile_s_s;
          var s_f = b2ParticleSystem.SolveTensile_s_f;
          if (!this.m_velocityBuffer.data) throw new Error();
          var vel_data = this.m_velocityBuffer.data;
          for (var i = 0; i < this.m_count; i++) {
            this.m_accumulation2Buffer[i] = new b2Vec2();
            this.m_accumulation2Buffer[i].SetZero();
          }
          for (var k = 0; k < this.m_contactBuffer.count; k++) {
            var contact = this.m_contactBuffer.data[k];
            if (contact.flags & exports.b2ParticleFlag.b2_tensileParticle) {
              var a = contact.indexA;
              var b = contact.indexB;
              var w = contact.weight;
              var n = contact.normal;
              var weightedNormal = b2Vec2.MulSV((1 - w) * w, n, s_weightedNormal);
              this.m_accumulation2Buffer[a].SelfSub(weightedNormal);
              this.m_accumulation2Buffer[b].SelfAdd(weightedNormal);
            }
          }
          var criticalVelocity = this.GetCriticalVelocity(step);
          var pressureStrength = this.m_def.surfaceTensionPressureStrength * criticalVelocity;
          var normalStrength = this.m_def.surfaceTensionNormalStrength * criticalVelocity;
          var maxVelocityVariation = b2_maxParticleForce * criticalVelocity;
          for (var k = 0; k < this.m_contactBuffer.count; k++) {
            var contact = this.m_contactBuffer.data[k];
            if (contact.flags & exports.b2ParticleFlag.b2_tensileParticle) {
              var a = contact.indexA;
              var b = contact.indexB;
              var w = contact.weight;
              var n = contact.normal;
              var h = this.m_weightBuffer[a] + this.m_weightBuffer[b];
              var s = b2Vec2.SubVV(this.m_accumulation2Buffer[b], this.m_accumulation2Buffer[a], s_s);
              var fn = b2Min(pressureStrength * (h - 2) + normalStrength * b2Vec2.DotVV(s, n), maxVelocityVariation) * w;
              var f = b2Vec2.MulSV(fn, n, s_f);
              vel_data[a].SelfSub(f);
              vel_data[b].SelfAdd(f);
            }
          }
        };
        b2ParticleSystem.prototype.SolveViscous = function() {
          var s_v = b2ParticleSystem.SolveViscous_s_v;
          var s_f = b2ParticleSystem.SolveViscous_s_f;
          if (!this.m_flagsBuffer.data) throw new Error();
          if (!this.m_positionBuffer.data) throw new Error();
          if (!this.m_velocityBuffer.data) throw new Error();
          var pos_data = this.m_positionBuffer.data;
          var vel_data = this.m_velocityBuffer.data;
          var viscousStrength = this.m_def.viscousStrength;
          var inv_mass = this.GetParticleInvMass();
          for (var k = 0; k < this.m_bodyContactBuffer.count; k++) {
            var contact = this.m_bodyContactBuffer.data[k];
            var a = contact.index;
            if (this.m_flagsBuffer.data[a] & exports.b2ParticleFlag.b2_viscousParticle) {
              var b = contact.body;
              var w = contact.weight;
              var m = contact.mass;
              var p = pos_data[a];
              var v = b2Vec2.SubVV(b.GetLinearVelocityFromWorldPoint(p, b2Vec2.s_t0), vel_data[a], s_v);
              var f = b2Vec2.MulSV(viscousStrength * m * w, v, s_f);
              vel_data[a].SelfMulAdd(inv_mass, f);
              b.ApplyLinearImpulse(f.SelfNeg(), p, true);
            }
          }
          for (var k = 0; k < this.m_contactBuffer.count; k++) {
            var contact = this.m_contactBuffer.data[k];
            if (contact.flags & exports.b2ParticleFlag.b2_viscousParticle) {
              var a = contact.indexA;
              var b = contact.indexB;
              var w = contact.weight;
              var v = b2Vec2.SubVV(vel_data[b], vel_data[a], s_v);
              var f = b2Vec2.MulSV(viscousStrength * w, v, s_f);
              vel_data[a].SelfAdd(f);
              vel_data[b].SelfSub(f);
            }
          }
        };
        b2ParticleSystem.prototype.SolveRepulsive = function(step) {
          var s_f = b2ParticleSystem.SolveRepulsive_s_f;
          if (!this.m_velocityBuffer.data) throw new Error();
          var vel_data = this.m_velocityBuffer.data;
          var repulsiveStrength = this.m_def.repulsiveStrength * this.GetCriticalVelocity(step);
          for (var k = 0; k < this.m_contactBuffer.count; k++) {
            var contact = this.m_contactBuffer.data[k];
            if (contact.flags & exports.b2ParticleFlag.b2_repulsiveParticle) {
              var a = contact.indexA;
              var b = contact.indexB;
              if (this.m_groupBuffer[a] !== this.m_groupBuffer[b]) {
                var w = contact.weight;
                var n = contact.normal;
                var f = b2Vec2.MulSV(repulsiveStrength * w, n, s_f);
                vel_data[a].SelfSub(f);
                vel_data[b].SelfAdd(f);
              }
            }
          }
        };
        b2ParticleSystem.prototype.SolvePowder = function(step) {
          var s_f = b2ParticleSystem.SolvePowder_s_f;
          if (!this.m_flagsBuffer.data) throw new Error();
          if (!this.m_positionBuffer.data) throw new Error();
          if (!this.m_velocityBuffer.data) throw new Error();
          var pos_data = this.m_positionBuffer.data;
          var vel_data = this.m_velocityBuffer.data;
          var powderStrength = this.m_def.powderStrength * this.GetCriticalVelocity(step);
          var minWeight = 1 - b2_particleStride;
          var inv_mass = this.GetParticleInvMass();
          for (var k = 0; k < this.m_bodyContactBuffer.count; k++) {
            var contact = this.m_bodyContactBuffer.data[k];
            var a = contact.index;
            if (this.m_flagsBuffer.data[a] & exports.b2ParticleFlag.b2_powderParticle) {
              var w = contact.weight;
              if (w > minWeight) {
                var b = contact.body;
                var m = contact.mass;
                var p = pos_data[a];
                var n = contact.normal;
                var f = b2Vec2.MulSV(powderStrength * m * (w - minWeight), n, s_f);
                vel_data[a].SelfMulSub(inv_mass, f);
                b.ApplyLinearImpulse(f, p, true);
              }
            }
          }
          for (var k = 0; k < this.m_contactBuffer.count; k++) {
            var contact = this.m_contactBuffer.data[k];
            if (contact.flags & exports.b2ParticleFlag.b2_powderParticle) {
              var w = contact.weight;
              if (w > minWeight) {
                var a = contact.indexA;
                var b = contact.indexB;
                var n = contact.normal;
                var f = b2Vec2.MulSV(powderStrength * (w - minWeight), n, s_f);
                vel_data[a].SelfSub(f);
                vel_data[b].SelfAdd(f);
              }
            }
          }
        };
        b2ParticleSystem.prototype.SolveSolid = function(step) {
          var s_f = b2ParticleSystem.SolveSolid_s_f;
          if (!this.m_velocityBuffer.data) throw new Error();
          var vel_data = this.m_velocityBuffer.data;
          this.m_depthBuffer = this.RequestBuffer(this.m_depthBuffer);
          var ejectionStrength = step.inv_dt * this.m_def.ejectionStrength;
          for (var k = 0; k < this.m_contactBuffer.count; k++) {
            var contact = this.m_contactBuffer.data[k];
            var a = contact.indexA;
            var b = contact.indexB;
            if (this.m_groupBuffer[a] !== this.m_groupBuffer[b]) {
              var w = contact.weight;
              var n = contact.normal;
              var h = this.m_depthBuffer[a] + this.m_depthBuffer[b];
              var f = b2Vec2.MulSV(ejectionStrength * h * w, n, s_f);
              vel_data[a].SelfSub(f);
              vel_data[b].SelfAdd(f);
            }
          }
        };
        b2ParticleSystem.prototype.SolveForce = function(step) {
          if (!this.m_velocityBuffer.data) throw new Error();
          var vel_data = this.m_velocityBuffer.data;
          var velocityPerForce = step.dt * this.GetParticleInvMass();
          for (var i = 0; i < this.m_count; i++) vel_data[i].SelfMulAdd(velocityPerForce, this.m_forceBuffer[i]);
          this.m_hasForce = false;
        };
        b2ParticleSystem.prototype.SolveColorMixing = function() {
          if (!this.m_flagsBuffer.data) throw new Error();
          if (!this.m_colorBuffer.data) throw new Error();
          var colorMixing = .5 * this.m_def.colorMixingStrength;
          if (colorMixing) for (var k = 0; k < this.m_contactBuffer.count; k++) {
            var contact = this.m_contactBuffer.data[k];
            var a = contact.indexA;
            var b = contact.indexB;
            if (this.m_flagsBuffer.data[a] & this.m_flagsBuffer.data[b] & exports.b2ParticleFlag.b2_colorMixingParticle) {
              var colorA = this.m_colorBuffer.data[a];
              var colorB = this.m_colorBuffer.data[b];
              b2Color.MixColors(colorA, colorB, colorMixing);
            }
          }
        };
        b2ParticleSystem.prototype.SolveZombie = function() {
          if (!this.m_flagsBuffer.data) throw new Error();
          if (!this.m_positionBuffer.data) throw new Error();
          if (!this.m_velocityBuffer.data) throw new Error();
          var newCount = 0;
          var newIndices = [];
          for (var i = 0; i < this.m_count; i++) newIndices[i] = b2_invalidParticleIndex;
          var allParticleFlags = 0;
          for (var i = 0; i < this.m_count; i++) {
            var flags = this.m_flagsBuffer.data[i];
            if (flags & exports.b2ParticleFlag.b2_zombieParticle) {
              var destructionListener = this.m_world.m_destructionListener;
              flags & exports.b2ParticleFlag.b2_destructionListenerParticle && destructionListener && destructionListener.SayGoodbyeParticle(this, i);
              if (this.m_handleIndexBuffer.data) {
                var handle = this.m_handleIndexBuffer.data[i];
                if (handle) {
                  handle.SetIndex(b2_invalidParticleIndex);
                  this.m_handleIndexBuffer.data[i] = null;
                }
              }
              newIndices[i] = b2_invalidParticleIndex;
            } else {
              newIndices[i] = newCount;
              if (i !== newCount) {
                if (this.m_handleIndexBuffer.data) {
                  var handle = this.m_handleIndexBuffer.data[i];
                  handle && handle.SetIndex(newCount);
                  this.m_handleIndexBuffer.data[newCount] = handle;
                }
                this.m_flagsBuffer.data[newCount] = this.m_flagsBuffer.data[i];
                this.m_lastBodyContactStepBuffer.data && (this.m_lastBodyContactStepBuffer.data[newCount] = this.m_lastBodyContactStepBuffer.data[i]);
                this.m_bodyContactCountBuffer.data && (this.m_bodyContactCountBuffer.data[newCount] = this.m_bodyContactCountBuffer.data[i]);
                this.m_consecutiveContactStepsBuffer.data && (this.m_consecutiveContactStepsBuffer.data[newCount] = this.m_consecutiveContactStepsBuffer.data[i]);
                this.m_positionBuffer.data[newCount].Copy(this.m_positionBuffer.data[i]);
                this.m_velocityBuffer.data[newCount].Copy(this.m_velocityBuffer.data[i]);
                this.m_groupBuffer[newCount] = this.m_groupBuffer[i];
                this.m_hasForce && this.m_forceBuffer[newCount].Copy(this.m_forceBuffer[i]);
                this.m_staticPressureBuffer && (this.m_staticPressureBuffer[newCount] = this.m_staticPressureBuffer[i]);
                this.m_depthBuffer && (this.m_depthBuffer[newCount] = this.m_depthBuffer[i]);
                this.m_colorBuffer.data && this.m_colorBuffer.data[newCount].Copy(this.m_colorBuffer.data[i]);
                this.m_userDataBuffer.data && (this.m_userDataBuffer.data[newCount] = this.m_userDataBuffer.data[i]);
                this.m_expirationTimeBuffer.data && (this.m_expirationTimeBuffer.data[newCount] = this.m_expirationTimeBuffer.data[i]);
              }
              newCount++;
              allParticleFlags |= flags;
            }
          }
          var Test = {
            IsProxyInvalid: function IsProxyInvalid(proxy) {
              return proxy.index < 0;
            },
            IsContactInvalid: function IsContactInvalid(contact) {
              return contact.indexA < 0 || contact.indexB < 0;
            },
            IsBodyContactInvalid: function IsBodyContactInvalid(contact) {
              return contact.index < 0;
            },
            IsPairInvalid: function IsPairInvalid(pair) {
              return pair.indexA < 0 || pair.indexB < 0;
            },
            IsTriadInvalid: function IsTriadInvalid(triad) {
              return triad.indexA < 0 || triad.indexB < 0 || triad.indexC < 0;
            }
          };
          for (var k = 0; k < this.m_proxyBuffer.count; k++) {
            var proxy = this.m_proxyBuffer.data[k];
            proxy.index = newIndices[proxy.index];
          }
          this.m_proxyBuffer.RemoveIf(Test.IsProxyInvalid);
          for (var k = 0; k < this.m_contactBuffer.count; k++) {
            var contact = this.m_contactBuffer.data[k];
            contact.indexA = newIndices[contact.indexA];
            contact.indexB = newIndices[contact.indexB];
          }
          this.m_contactBuffer.RemoveIf(Test.IsContactInvalid);
          for (var k = 0; k < this.m_bodyContactBuffer.count; k++) {
            var contact = this.m_bodyContactBuffer.data[k];
            contact.index = newIndices[contact.index];
          }
          this.m_bodyContactBuffer.RemoveIf(Test.IsBodyContactInvalid);
          for (var k = 0; k < this.m_pairBuffer.count; k++) {
            var pair = this.m_pairBuffer.data[k];
            pair.indexA = newIndices[pair.indexA];
            pair.indexB = newIndices[pair.indexB];
          }
          this.m_pairBuffer.RemoveIf(Test.IsPairInvalid);
          for (var k = 0; k < this.m_triadBuffer.count; k++) {
            var triad = this.m_triadBuffer.data[k];
            triad.indexA = newIndices[triad.indexA];
            triad.indexB = newIndices[triad.indexB];
            triad.indexC = newIndices[triad.indexC];
          }
          this.m_triadBuffer.RemoveIf(Test.IsTriadInvalid);
          if (this.m_indexByExpirationTimeBuffer.data) {
            var writeOffset = 0;
            for (var readOffset = 0; readOffset < this.m_count; readOffset++) {
              var newIndex = newIndices[this.m_indexByExpirationTimeBuffer.data[readOffset]];
              newIndex !== b2_invalidParticleIndex && (this.m_indexByExpirationTimeBuffer.data[writeOffset++] = newIndex);
            }
          }
          for (var group = this.m_groupList; group; group = group.GetNext()) {
            var firstIndex = newCount;
            var lastIndex = 0;
            var modified = false;
            for (var i = group.m_firstIndex; i < group.m_lastIndex; i++) {
              var j = newIndices[i];
              if (j >= 0) {
                firstIndex = b2Min(firstIndex, j);
                lastIndex = b2Max(lastIndex, j + 1);
              } else modified = true;
            }
            if (firstIndex < lastIndex) {
              group.m_firstIndex = firstIndex;
              group.m_lastIndex = lastIndex;
              modified && group.m_groupFlags & exports.b2ParticleGroupFlag.b2_solidParticleGroup && this.SetGroupFlags(group, group.m_groupFlags | exports.b2ParticleGroupFlag.b2_particleGroupNeedsUpdateDepth);
            } else {
              group.m_firstIndex = 0;
              group.m_lastIndex = 0;
              group.m_groupFlags & exports.b2ParticleGroupFlag.b2_particleGroupCanBeEmpty || this.SetGroupFlags(group, group.m_groupFlags | exports.b2ParticleGroupFlag.b2_particleGroupWillBeDestroyed);
            }
          }
          this.m_count = newCount;
          this.m_allParticleFlags = allParticleFlags;
          this.m_needsUpdateAllParticleFlags = false;
          for (var group = this.m_groupList; group; ) {
            var next = group.GetNext();
            group.m_groupFlags & exports.b2ParticleGroupFlag.b2_particleGroupWillBeDestroyed && this.DestroyParticleGroup(group);
            group = next;
          }
        };
        b2ParticleSystem.prototype.SolveLifetimes = function(step) {
          if (!this.m_expirationTimeBuffer.data) throw new Error();
          if (!this.m_indexByExpirationTimeBuffer.data) throw new Error();
          this.m_timeElapsed = this.LifetimeToExpirationTime(step.dt);
          var quantizedTimeElapsed = this.GetQuantizedTimeElapsed();
          var expirationTimes = this.m_expirationTimeBuffer.data;
          var expirationTimeIndices = this.m_indexByExpirationTimeBuffer.data;
          var particleCount = this.GetParticleCount();
          if (this.m_expirationTimeBufferRequiresSorting) {
            var ExpirationTimeComparator = function ExpirationTimeComparator(particleIndexA, particleIndexB) {
              var expirationTimeA = expirationTimes[particleIndexA];
              var expirationTimeB = expirationTimes[particleIndexB];
              var infiniteExpirationTimeA = expirationTimeA <= 0;
              var infiniteExpirationTimeB = expirationTimeB <= 0;
              return infiniteExpirationTimeA === infiniteExpirationTimeB ? expirationTimeA > expirationTimeB : infiniteExpirationTimeA;
            };
            std_sort(expirationTimeIndices, 0, particleCount, ExpirationTimeComparator);
            this.m_expirationTimeBufferRequiresSorting = false;
          }
          for (var i = particleCount - 1; i >= 0; --i) {
            var particleIndex = expirationTimeIndices[i];
            var expirationTime = expirationTimes[particleIndex];
            if (quantizedTimeElapsed < expirationTime || expirationTime <= 0) break;
            this.DestroyParticle(particleIndex);
          }
        };
        b2ParticleSystem.prototype.RotateBuffer = function(start, mid, end) {
          if (start === mid || mid === end) return;
          function newIndices(i) {
            return i < start ? i : i < mid ? i + end - mid : i < end ? i + start - mid : i;
          }
          if (!this.m_flagsBuffer.data) throw new Error();
          if (!this.m_positionBuffer.data) throw new Error();
          if (!this.m_velocityBuffer.data) throw new Error();
          std_rotate(this.m_flagsBuffer.data, start, mid, end);
          this.m_lastBodyContactStepBuffer.data && std_rotate(this.m_lastBodyContactStepBuffer.data, start, mid, end);
          this.m_bodyContactCountBuffer.data && std_rotate(this.m_bodyContactCountBuffer.data, start, mid, end);
          this.m_consecutiveContactStepsBuffer.data && std_rotate(this.m_consecutiveContactStepsBuffer.data, start, mid, end);
          std_rotate(this.m_positionBuffer.data, start, mid, end);
          std_rotate(this.m_velocityBuffer.data, start, mid, end);
          std_rotate(this.m_groupBuffer, start, mid, end);
          this.m_hasForce && std_rotate(this.m_forceBuffer, start, mid, end);
          this.m_staticPressureBuffer && std_rotate(this.m_staticPressureBuffer, start, mid, end);
          this.m_depthBuffer && std_rotate(this.m_depthBuffer, start, mid, end);
          this.m_colorBuffer.data && std_rotate(this.m_colorBuffer.data, start, mid, end);
          this.m_userDataBuffer.data && std_rotate(this.m_userDataBuffer.data, start, mid, end);
          if (this.m_handleIndexBuffer.data) {
            std_rotate(this.m_handleIndexBuffer.data, start, mid, end);
            for (var i = start; i < end; ++i) {
              var handle = this.m_handleIndexBuffer.data[i];
              handle && handle.SetIndex(newIndices(handle.GetIndex()));
            }
          }
          if (this.m_expirationTimeBuffer.data) {
            std_rotate(this.m_expirationTimeBuffer.data, start, mid, end);
            var particleCount = this.GetParticleCount();
            if (!this.m_indexByExpirationTimeBuffer.data) throw new Error();
            var indexByExpirationTime = this.m_indexByExpirationTimeBuffer.data;
            for (var i = 0; i < particleCount; ++i) indexByExpirationTime[i] = newIndices(indexByExpirationTime[i]);
          }
          for (var k = 0; k < this.m_proxyBuffer.count; k++) {
            var proxy = this.m_proxyBuffer.data[k];
            proxy.index = newIndices(proxy.index);
          }
          for (var k = 0; k < this.m_contactBuffer.count; k++) {
            var contact = this.m_contactBuffer.data[k];
            contact.indexA = newIndices(contact.indexA);
            contact.indexB = newIndices(contact.indexB);
          }
          for (var k = 0; k < this.m_bodyContactBuffer.count; k++) {
            var contact = this.m_bodyContactBuffer.data[k];
            contact.index = newIndices(contact.index);
          }
          for (var k = 0; k < this.m_pairBuffer.count; k++) {
            var pair = this.m_pairBuffer.data[k];
            pair.indexA = newIndices(pair.indexA);
            pair.indexB = newIndices(pair.indexB);
          }
          for (var k = 0; k < this.m_triadBuffer.count; k++) {
            var triad = this.m_triadBuffer.data[k];
            triad.indexA = newIndices(triad.indexA);
            triad.indexB = newIndices(triad.indexB);
            triad.indexC = newIndices(triad.indexC);
          }
          for (var group = this.m_groupList; group; group = group.GetNext()) {
            group.m_firstIndex = newIndices(group.m_firstIndex);
            group.m_lastIndex = newIndices(group.m_lastIndex - 1) + 1;
          }
        };
        b2ParticleSystem.prototype.GetCriticalVelocity = function(step) {
          return this.m_particleDiameter * step.inv_dt;
        };
        b2ParticleSystem.prototype.GetCriticalVelocitySquared = function(step) {
          var velocity = this.GetCriticalVelocity(step);
          return velocity * velocity;
        };
        b2ParticleSystem.prototype.GetCriticalPressure = function(step) {
          return this.m_def.density * this.GetCriticalVelocitySquared(step);
        };
        b2ParticleSystem.prototype.GetParticleStride = function() {
          return b2_particleStride * this.m_particleDiameter;
        };
        b2ParticleSystem.prototype.GetParticleMass = function() {
          var stride = this.GetParticleStride();
          return this.m_def.density * stride * stride;
        };
        b2ParticleSystem.prototype.GetParticleInvMass = function() {
          var inverseStride = this.m_inverseDiameter * (1 / b2_particleStride);
          return this.m_inverseDensity * inverseStride * inverseStride;
        };
        b2ParticleSystem.prototype.GetFixtureContactFilter = function() {
          return this.m_allParticleFlags & exports.b2ParticleFlag.b2_fixtureContactFilterParticle ? this.m_world.m_contactManager.m_contactFilter : null;
        };
        b2ParticleSystem.prototype.GetParticleContactFilter = function() {
          return this.m_allParticleFlags & exports.b2ParticleFlag.b2_particleContactFilterParticle ? this.m_world.m_contactManager.m_contactFilter : null;
        };
        b2ParticleSystem.prototype.GetFixtureContactListener = function() {
          return this.m_allParticleFlags & exports.b2ParticleFlag.b2_fixtureContactListenerParticle ? this.m_world.m_contactManager.m_contactListener : null;
        };
        b2ParticleSystem.prototype.GetParticleContactListener = function() {
          return this.m_allParticleFlags & exports.b2ParticleFlag.b2_particleContactListenerParticle ? this.m_world.m_contactManager.m_contactListener : null;
        };
        b2ParticleSystem.prototype.SetUserOverridableBuffer = function(buffer, newData, newCapacity) {
          buffer.data = newData;
          buffer.userSuppliedCapacity = newCapacity;
        };
        b2ParticleSystem.prototype.SetGroupFlags = function(group, newFlags) {
          var oldFlags = group.m_groupFlags;
          (oldFlags ^ newFlags) & exports.b2ParticleGroupFlag.b2_solidParticleGroup && (newFlags |= exports.b2ParticleGroupFlag.b2_particleGroupNeedsUpdateDepth);
          oldFlags & ~newFlags && (this.m_needsUpdateAllGroupFlags = true);
          if (~this.m_allGroupFlags & newFlags) {
            newFlags & exports.b2ParticleGroupFlag.b2_solidParticleGroup && (this.m_depthBuffer = this.RequestBuffer(this.m_depthBuffer));
            this.m_allGroupFlags |= newFlags;
          }
          group.m_groupFlags = newFlags;
        };
        b2ParticleSystem.BodyContactCompare = function(lhs, rhs) {
          if (lhs.index === rhs.index) return lhs.weight > rhs.weight;
          return lhs.index < rhs.index;
        };
        b2ParticleSystem.prototype.RemoveSpuriousBodyContacts = function() {
          std_sort(this.m_bodyContactBuffer.data, 0, this.m_bodyContactBuffer.count, b2ParticleSystem.BodyContactCompare);
          var s_n = b2ParticleSystem.RemoveSpuriousBodyContacts_s_n;
          var s_pos = b2ParticleSystem.RemoveSpuriousBodyContacts_s_pos;
          var s_normal = b2ParticleSystem.RemoveSpuriousBodyContacts_s_normal;
          var k_maxContactsPerPoint = 3;
          var system = this;
          var lastIndex = -1;
          var currentContacts = 0;
          var b2ParticleBodyContactRemovePredicate = function b2ParticleBodyContactRemovePredicate(contact) {
            if (contact.index !== lastIndex) {
              currentContacts = 0;
              lastIndex = contact.index;
            }
            if (currentContacts++ > k_maxContactsPerPoint) return true;
            var n = s_n.Copy(contact.normal);
            n.SelfMul(system.m_particleDiameter * (1 - contact.weight));
            if (!system.m_positionBuffer.data) throw new Error();
            var pos = b2Vec2.AddVV(system.m_positionBuffer.data[contact.index], n, s_pos);
            if (!contact.fixture.TestPoint(pos)) {
              var childCount = contact.fixture.GetShape().GetChildCount();
              for (var childIndex = 0; childIndex < childCount; childIndex++) {
                var normal = s_normal;
                var distance = contact.fixture.ComputeDistance(pos, normal, childIndex);
                if (distance < b2_linearSlop) return false;
              }
              return true;
            }
            return false;
          };
          this.m_bodyContactBuffer.count = std_remove_if(this.m_bodyContactBuffer.data, b2ParticleBodyContactRemovePredicate, this.m_bodyContactBuffer.count);
        };
        b2ParticleSystem.prototype.DetectStuckParticle = function(particle) {
          if (this.m_stuckThreshold <= 0) return;
          if (!this.m_bodyContactCountBuffer.data) throw new Error();
          if (!this.m_consecutiveContactStepsBuffer.data) throw new Error();
          if (!this.m_lastBodyContactStepBuffer.data) throw new Error();
          ++this.m_bodyContactCountBuffer.data[particle];
          if (2 === this.m_bodyContactCountBuffer.data[particle]) {
            ++this.m_consecutiveContactStepsBuffer.data[particle];
            this.m_consecutiveContactStepsBuffer.data[particle] > this.m_stuckThreshold && (this.m_stuckParticleBuffer.data[this.m_stuckParticleBuffer.Append()] = particle);
          }
          this.m_lastBodyContactStepBuffer.data[particle] = this.m_timestamp;
        };
        b2ParticleSystem.prototype.ValidateParticleIndex = function(index) {
          return index >= 0 && index < this.GetParticleCount() && index !== b2_invalidParticleIndex;
        };
        b2ParticleSystem.prototype.GetQuantizedTimeElapsed = function() {
          return Math.floor(this.m_timeElapsed / 4294967296);
        };
        b2ParticleSystem.prototype.LifetimeToExpirationTime = function(lifetime) {
          return this.m_timeElapsed + Math.floor(lifetime / this.m_def.lifetimeGranularity * 4294967296);
        };
        b2ParticleSystem.prototype.ForceCanBeApplied = function(flags) {
          return !(flags & exports.b2ParticleFlag.b2_wallParticle);
        };
        b2ParticleSystem.prototype.PrepareForceBuffer = function() {
          if (!this.m_hasForce) {
            for (var i = 0; i < this.m_count; i++) this.m_forceBuffer[i].SetZero();
            this.m_hasForce = true;
          }
        };
        b2ParticleSystem.prototype.IsRigidGroup = function(group) {
          return null !== group && 0 !== (group.m_groupFlags & exports.b2ParticleGroupFlag.b2_rigidParticleGroup);
        };
        b2ParticleSystem.prototype.GetLinearVelocity = function(group, particleIndex, point, out) {
          if (group && this.IsRigidGroup(group)) return group.GetLinearVelocityFromWorldPoint(point, out);
          if (!this.m_velocityBuffer.data) throw new Error();
          return out.Copy(this.m_velocityBuffer.data[particleIndex]);
        };
        b2ParticleSystem.prototype.InitDampingParameter = function(invMass, invInertia, tangentDistance, mass, inertia, center, point, normal) {
          invMass[0] = mass > 0 ? 1 / mass : 0;
          invInertia[0] = inertia > 0 ? 1 / inertia : 0;
          tangentDistance[0] = b2Vec2.CrossVV(b2Vec2.SubVV(point, center, b2Vec2.s_t0), normal);
        };
        b2ParticleSystem.prototype.InitDampingParameterWithRigidGroupOrParticle = function(invMass, invInertia, tangentDistance, isRigidGroup, group, particleIndex, point, normal) {
          if (group && isRigidGroup) this.InitDampingParameter(invMass, invInertia, tangentDistance, group.GetMass(), group.GetInertia(), group.GetCenter(), point, normal); else {
            if (!this.m_flagsBuffer.data) throw new Error();
            var flags = this.m_flagsBuffer.data[particleIndex];
            this.InitDampingParameter(invMass, invInertia, tangentDistance, flags & exports.b2ParticleFlag.b2_wallParticle ? 0 : this.GetParticleMass(), 0, point, point, normal);
          }
        };
        b2ParticleSystem.prototype.ComputeDampingImpulse = function(invMassA, invInertiaA, tangentDistanceA, invMassB, invInertiaB, tangentDistanceB, normalVelocity) {
          var invMass = invMassA + invInertiaA * tangentDistanceA * tangentDistanceA + invMassB + invInertiaB * tangentDistanceB * tangentDistanceB;
          return invMass > 0 ? normalVelocity / invMass : 0;
        };
        b2ParticleSystem.prototype.ApplyDamping = function(invMass, invInertia, tangentDistance, isRigidGroup, group, particleIndex, impulse, normal) {
          if (group && isRigidGroup) {
            group.m_linearVelocity.SelfMulAdd(impulse * invMass, normal);
            group.m_angularVelocity += impulse * tangentDistance * invInertia;
          } else {
            if (!this.m_velocityBuffer.data) throw new Error();
            this.m_velocityBuffer.data[particleIndex].SelfMulAdd(impulse * invMass, normal);
          }
        };
        b2ParticleSystem.xTruncBits = 12;
        b2ParticleSystem.yTruncBits = 12;
        b2ParticleSystem.tagBits = 32;
        b2ParticleSystem.yOffset = 1 << b2ParticleSystem.yTruncBits - 1;
        b2ParticleSystem.yShift = b2ParticleSystem.tagBits - b2ParticleSystem.yTruncBits;
        b2ParticleSystem.xShift = b2ParticleSystem.tagBits - b2ParticleSystem.yTruncBits - b2ParticleSystem.xTruncBits;
        b2ParticleSystem.xScale = 1 << b2ParticleSystem.xShift;
        b2ParticleSystem.xOffset = b2ParticleSystem.xScale * (1 << b2ParticleSystem.xTruncBits - 1);
        b2ParticleSystem.yMask = (1 << b2ParticleSystem.yTruncBits) - 1 << b2ParticleSystem.yShift;
        b2ParticleSystem.xMask = ~b2ParticleSystem.yMask;
        b2ParticleSystem.DestroyParticlesInShape_s_aabb = new b2AABB();
        b2ParticleSystem.CreateParticleGroup_s_transform = new b2Transform();
        b2ParticleSystem.ComputeCollisionEnergy_s_v = new b2Vec2();
        b2ParticleSystem.QueryShapeAABB_s_aabb = new b2AABB();
        b2ParticleSystem.QueryPointAABB_s_aabb = new b2AABB();
        b2ParticleSystem.RayCast_s_aabb = new b2AABB();
        b2ParticleSystem.RayCast_s_p = new b2Vec2();
        b2ParticleSystem.RayCast_s_v = new b2Vec2();
        b2ParticleSystem.RayCast_s_n = new b2Vec2();
        b2ParticleSystem.RayCast_s_point = new b2Vec2();
        b2ParticleSystem.k_pairFlags = exports.b2ParticleFlag.b2_springParticle;
        b2ParticleSystem.k_triadFlags = exports.b2ParticleFlag.b2_elasticParticle;
        b2ParticleSystem.k_noPressureFlags = exports.b2ParticleFlag.b2_powderParticle | exports.b2ParticleFlag.b2_tensileParticle;
        b2ParticleSystem.k_extraDampingFlags = exports.b2ParticleFlag.b2_staticPressureParticle;
        b2ParticleSystem.k_barrierWallFlags = exports.b2ParticleFlag.b2_barrierParticle | exports.b2ParticleFlag.b2_wallParticle;
        b2ParticleSystem.CreateParticlesStrokeShapeForGroup_s_edge = new b2EdgeShape();
        b2ParticleSystem.CreateParticlesStrokeShapeForGroup_s_d = new b2Vec2();
        b2ParticleSystem.CreateParticlesStrokeShapeForGroup_s_p = new b2Vec2();
        b2ParticleSystem.CreateParticlesFillShapeForGroup_s_aabb = new b2AABB();
        b2ParticleSystem.CreateParticlesFillShapeForGroup_s_p = new b2Vec2();
        b2ParticleSystem.UpdatePairsAndTriads_s_dab = new b2Vec2();
        b2ParticleSystem.UpdatePairsAndTriads_s_dbc = new b2Vec2();
        b2ParticleSystem.UpdatePairsAndTriads_s_dca = new b2Vec2();
        b2ParticleSystem.AddContact_s_d = new b2Vec2();
        b2ParticleSystem.UpdateBodyContacts_s_aabb = new b2AABB();
        b2ParticleSystem.Solve_s_subStep = new b2TimeStep();
        b2ParticleSystem.SolveCollision_s_aabb = new b2AABB();
        b2ParticleSystem.SolveGravity_s_gravity = new b2Vec2();
        b2ParticleSystem.SolveBarrier_s_aabb = new b2AABB();
        b2ParticleSystem.SolveBarrier_s_va = new b2Vec2();
        b2ParticleSystem.SolveBarrier_s_vb = new b2Vec2();
        b2ParticleSystem.SolveBarrier_s_pba = new b2Vec2();
        b2ParticleSystem.SolveBarrier_s_vba = new b2Vec2();
        b2ParticleSystem.SolveBarrier_s_vc = new b2Vec2();
        b2ParticleSystem.SolveBarrier_s_pca = new b2Vec2();
        b2ParticleSystem.SolveBarrier_s_vca = new b2Vec2();
        b2ParticleSystem.SolveBarrier_s_qba = new b2Vec2();
        b2ParticleSystem.SolveBarrier_s_qca = new b2Vec2();
        b2ParticleSystem.SolveBarrier_s_dv = new b2Vec2();
        b2ParticleSystem.SolveBarrier_s_f = new b2Vec2();
        b2ParticleSystem.SolvePressure_s_f = new b2Vec2();
        b2ParticleSystem.SolveDamping_s_v = new b2Vec2();
        b2ParticleSystem.SolveDamping_s_f = new b2Vec2();
        b2ParticleSystem.SolveRigidDamping_s_t0 = new b2Vec2();
        b2ParticleSystem.SolveRigidDamping_s_t1 = new b2Vec2();
        b2ParticleSystem.SolveRigidDamping_s_p = new b2Vec2();
        b2ParticleSystem.SolveRigidDamping_s_v = new b2Vec2();
        b2ParticleSystem.SolveExtraDamping_s_v = new b2Vec2();
        b2ParticleSystem.SolveExtraDamping_s_f = new b2Vec2();
        b2ParticleSystem.SolveRigid_s_position = new b2Vec2();
        b2ParticleSystem.SolveRigid_s_rotation = new b2Rot();
        b2ParticleSystem.SolveRigid_s_transform = new b2Transform();
        b2ParticleSystem.SolveRigid_s_velocityTransform = new b2Transform();
        b2ParticleSystem.SolveElastic_s_pa = new b2Vec2();
        b2ParticleSystem.SolveElastic_s_pb = new b2Vec2();
        b2ParticleSystem.SolveElastic_s_pc = new b2Vec2();
        b2ParticleSystem.SolveElastic_s_r = new b2Rot();
        b2ParticleSystem.SolveElastic_s_t0 = new b2Vec2();
        b2ParticleSystem.SolveSpring_s_pa = new b2Vec2();
        b2ParticleSystem.SolveSpring_s_pb = new b2Vec2();
        b2ParticleSystem.SolveSpring_s_d = new b2Vec2();
        b2ParticleSystem.SolveSpring_s_f = new b2Vec2();
        b2ParticleSystem.SolveTensile_s_weightedNormal = new b2Vec2();
        b2ParticleSystem.SolveTensile_s_s = new b2Vec2();
        b2ParticleSystem.SolveTensile_s_f = new b2Vec2();
        b2ParticleSystem.SolveViscous_s_v = new b2Vec2();
        b2ParticleSystem.SolveViscous_s_f = new b2Vec2();
        b2ParticleSystem.SolveRepulsive_s_f = new b2Vec2();
        b2ParticleSystem.SolvePowder_s_f = new b2Vec2();
        b2ParticleSystem.SolveSolid_s_f = new b2Vec2();
        b2ParticleSystem.RemoveSpuriousBodyContacts_s_n = new b2Vec2();
        b2ParticleSystem.RemoveSpuriousBodyContacts_s_pos = new b2Vec2();
        b2ParticleSystem.RemoveSpuriousBodyContacts_s_normal = new b2Vec2();
        return b2ParticleSystem;
      })();
      (function(b2ParticleSystem) {
        var UserOverridableBuffer = (function() {
          function UserOverridableBuffer() {
            this.data = null;
            this.userSuppliedCapacity = 0;
          }
          return UserOverridableBuffer;
        })();
        b2ParticleSystem.UserOverridableBuffer = UserOverridableBuffer;
        var Proxy = (function() {
          function Proxy() {
            this.index = b2_invalidParticleIndex;
            this.tag = 0;
          }
          Proxy.CompareProxyProxy = function(a, b) {
            return a.tag < b.tag;
          };
          Proxy.CompareTagProxy = function(a, b) {
            return a < b.tag;
          };
          Proxy.CompareProxyTag = function(a, b) {
            return a.tag < b;
          };
          return Proxy;
        })();
        b2ParticleSystem.Proxy = Proxy;
        var InsideBoundsEnumerator = (function() {
          function InsideBoundsEnumerator(system, lower, upper, first, last) {
            this.m_system = system;
            this.m_xLower = (lower & b2ParticleSystem.xMask) >>> 0;
            this.m_xUpper = (upper & b2ParticleSystem.xMask) >>> 0;
            this.m_yLower = (lower & b2ParticleSystem.yMask) >>> 0;
            this.m_yUpper = (upper & b2ParticleSystem.yMask) >>> 0;
            this.m_first = first;
            this.m_last = last;
          }
          InsideBoundsEnumerator.prototype.GetNext = function() {
            while (this.m_first < this.m_last) {
              var xTag = (this.m_system.m_proxyBuffer.data[this.m_first].tag & b2ParticleSystem.xMask) >>> 0;
              if (xTag >= this.m_xLower && xTag <= this.m_xUpper) return this.m_system.m_proxyBuffer.data[this.m_first++].index;
              this.m_first++;
            }
            return b2_invalidParticleIndex;
          };
          return InsideBoundsEnumerator;
        })();
        b2ParticleSystem.InsideBoundsEnumerator = InsideBoundsEnumerator;
        var ParticleListNode = (function() {
          function ParticleListNode() {
            this.next = null;
            this.count = 0;
            this.index = 0;
          }
          return ParticleListNode;
        })();
        b2ParticleSystem.ParticleListNode = ParticleListNode;
        var FixedSetAllocator = (function() {
          function FixedSetAllocator() {}
          FixedSetAllocator.prototype.Allocate = function(itemSize, count) {
            return count;
          };
          FixedSetAllocator.prototype.Clear = function() {};
          FixedSetAllocator.prototype.GetCount = function() {
            return 0;
          };
          FixedSetAllocator.prototype.Invalidate = function(itemIndex) {};
          FixedSetAllocator.prototype.GetValidBuffer = function() {
            return [];
          };
          FixedSetAllocator.prototype.GetBuffer = function() {
            return [];
          };
          FixedSetAllocator.prototype.SetCount = function(count) {};
          return FixedSetAllocator;
        })();
        b2ParticleSystem.FixedSetAllocator = FixedSetAllocator;
        var FixtureParticle = (function() {
          function FixtureParticle(fixture, particle) {
            this.second = b2_invalidParticleIndex;
            this.first = fixture;
            this.second = particle;
          }
          return FixtureParticle;
        })();
        b2ParticleSystem.FixtureParticle = FixtureParticle;
        var FixtureParticleSet = (function(_super) {
          __extends(FixtureParticleSet, _super);
          function FixtureParticleSet() {
            return null !== _super && _super.apply(this, arguments) || this;
          }
          FixtureParticleSet.prototype.Initialize = function(bodyContactBuffer, flagsBuffer) {};
          FixtureParticleSet.prototype.Find = function(pair) {
            return b2_invalidParticleIndex;
          };
          return FixtureParticleSet;
        })(b2ParticleSystem.FixedSetAllocator);
        b2ParticleSystem.FixtureParticleSet = FixtureParticleSet;
        var ParticlePair = (function() {
          function ParticlePair(particleA, particleB) {
            this.first = b2_invalidParticleIndex;
            this.second = b2_invalidParticleIndex;
            this.first = particleA;
            this.second = particleB;
          }
          return ParticlePair;
        })();
        b2ParticleSystem.ParticlePair = ParticlePair;
        var b2ParticlePairSet = (function(_super) {
          __extends(b2ParticlePairSet, _super);
          function b2ParticlePairSet() {
            return null !== _super && _super.apply(this, arguments) || this;
          }
          b2ParticlePairSet.prototype.Initialize = function(contactBuffer, flagsBuffer) {};
          b2ParticlePairSet.prototype.Find = function(pair) {
            return b2_invalidParticleIndex;
          };
          return b2ParticlePairSet;
        })(b2ParticleSystem.FixedSetAllocator);
        b2ParticleSystem.b2ParticlePairSet = b2ParticlePairSet;
        var ConnectionFilter = (function() {
          function ConnectionFilter() {}
          ConnectionFilter.prototype.IsNecessary = function(index) {
            return true;
          };
          ConnectionFilter.prototype.ShouldCreatePair = function(a, b) {
            return true;
          };
          ConnectionFilter.prototype.ShouldCreateTriad = function(a, b, c) {
            return true;
          };
          return ConnectionFilter;
        })();
        b2ParticleSystem.ConnectionFilter = ConnectionFilter;
        var DestroyParticlesInShapeCallback = (function(_super) {
          __extends(DestroyParticlesInShapeCallback, _super);
          function DestroyParticlesInShapeCallback(system, shape, xf, callDestructionListener) {
            var _this = _super.call(this) || this;
            _this.m_callDestructionListener = false;
            _this.m_destroyed = 0;
            _this.m_system = system;
            _this.m_shape = shape;
            _this.m_xf = xf;
            _this.m_callDestructionListener = callDestructionListener;
            _this.m_destroyed = 0;
            return _this;
          }
          DestroyParticlesInShapeCallback.prototype.ReportFixture = function(fixture) {
            return false;
          };
          DestroyParticlesInShapeCallback.prototype.ReportParticle = function(particleSystem, index) {
            if (particleSystem !== this.m_system) return false;
            if (!this.m_system.m_positionBuffer.data) throw new Error();
            if (this.m_shape.TestPoint(this.m_xf, this.m_system.m_positionBuffer.data[index])) {
              this.m_system.DestroyParticle(index, this.m_callDestructionListener);
              this.m_destroyed++;
            }
            return true;
          };
          DestroyParticlesInShapeCallback.prototype.Destroyed = function() {
            return this.m_destroyed;
          };
          return DestroyParticlesInShapeCallback;
        })(b2QueryCallback);
        b2ParticleSystem.DestroyParticlesInShapeCallback = DestroyParticlesInShapeCallback;
        var JoinParticleGroupsFilter = (function(_super) {
          __extends(JoinParticleGroupsFilter, _super);
          function JoinParticleGroupsFilter(threshold) {
            var _this = _super.call(this) || this;
            _this.m_threshold = 0;
            _this.m_threshold = threshold;
            return _this;
          }
          JoinParticleGroupsFilter.prototype.ShouldCreatePair = function(a, b) {
            return a < this.m_threshold && this.m_threshold <= b || b < this.m_threshold && this.m_threshold <= a;
          };
          JoinParticleGroupsFilter.prototype.ShouldCreateTriad = function(a, b, c) {
            return (a < this.m_threshold || b < this.m_threshold || c < this.m_threshold) && (this.m_threshold <= a || this.m_threshold <= b || this.m_threshold <= c);
          };
          return JoinParticleGroupsFilter;
        })(b2ParticleSystem.ConnectionFilter);
        b2ParticleSystem.JoinParticleGroupsFilter = JoinParticleGroupsFilter;
        var CompositeShape = (function(_super) {
          __extends(CompositeShape, _super);
          function CompositeShape(shapes, shapeCount) {
            void 0 === shapeCount && (shapeCount = shapes.length);
            var _this = _super.call(this, exports.b2ShapeType.e_unknown, 0) || this;
            _this.m_shapeCount = 0;
            _this.m_shapes = shapes;
            _this.m_shapeCount = shapeCount;
            return _this;
          }
          CompositeShape.prototype.Clone = function() {
            throw new Error();
          };
          CompositeShape.prototype.GetChildCount = function() {
            return 1;
          };
          CompositeShape.prototype.TestPoint = function(xf, p) {
            for (var i = 0; i < this.m_shapeCount; i++) if (this.m_shapes[i].TestPoint(xf, p)) return true;
            return false;
          };
          CompositeShape.prototype.ComputeDistance = function(xf, p, normal, childIndex) {
            return 0;
          };
          CompositeShape.prototype.RayCast = function(output, input, xf, childIndex) {
            return false;
          };
          CompositeShape.prototype.ComputeAABB = function(aabb, xf, childIndex) {
            var s_subaabb = new b2AABB();
            aabb.lowerBound.x = +b2_maxFloat;
            aabb.lowerBound.y = +b2_maxFloat;
            aabb.upperBound.x = -b2_maxFloat;
            aabb.upperBound.y = -b2_maxFloat;
            for (var i = 0; i < this.m_shapeCount; i++) {
              var childCount = this.m_shapes[i].GetChildCount();
              for (var j = 0; j < childCount; j++) {
                var subaabb = s_subaabb;
                this.m_shapes[i].ComputeAABB(subaabb, xf, j);
                aabb.Combine1(subaabb);
              }
            }
          };
          CompositeShape.prototype.ComputeMass = function(massData, density) {};
          CompositeShape.prototype.SetupDistanceProxy = function(proxy, index) {};
          CompositeShape.prototype.ComputeSubmergedArea = function(normal, offset, xf, c) {
            return 0;
          };
          CompositeShape.prototype.Dump = function(log) {};
          return CompositeShape;
        })(b2Shape);
        b2ParticleSystem.CompositeShape = CompositeShape;
        var ReactiveFilter = (function(_super) {
          __extends(ReactiveFilter, _super);
          function ReactiveFilter(flagsBuffer) {
            var _this = _super.call(this) || this;
            _this.m_flagsBuffer = flagsBuffer;
            return _this;
          }
          ReactiveFilter.prototype.IsNecessary = function(index) {
            if (!this.m_flagsBuffer.data) throw new Error();
            return 0 !== (this.m_flagsBuffer.data[index] & exports.b2ParticleFlag.b2_reactiveParticle);
          };
          return ReactiveFilter;
        })(b2ParticleSystem.ConnectionFilter);
        b2ParticleSystem.ReactiveFilter = ReactiveFilter;
        var UpdateBodyContactsCallback = (function(_super) {
          __extends(UpdateBodyContactsCallback, _super);
          function UpdateBodyContactsCallback(system, contactFilter) {
            var _this = _super.call(this, system) || this;
            _this.m_contactFilter = contactFilter;
            return _this;
          }
          UpdateBodyContactsCallback.prototype.ShouldCollideFixtureParticle = function(fixture, particleSystem, particleIndex) {
            if (this.m_contactFilter) {
              var flags = this.m_system.GetFlagsBuffer();
              if (flags[particleIndex] & exports.b2ParticleFlag.b2_fixtureContactFilterParticle) return this.m_contactFilter.ShouldCollideFixtureParticle(fixture, this.m_system, particleIndex);
            }
            return true;
          };
          UpdateBodyContactsCallback.prototype.ReportFixtureAndParticle = function(fixture, childIndex, a) {
            var s_n = b2ParticleSystem.UpdateBodyContactsCallback.ReportFixtureAndParticle_s_n;
            var s_rp = b2ParticleSystem.UpdateBodyContactsCallback.ReportFixtureAndParticle_s_rp;
            if (!this.m_system.m_flagsBuffer.data) throw new Error();
            if (!this.m_system.m_positionBuffer.data) throw new Error();
            var ap = this.m_system.m_positionBuffer.data[a];
            var n = s_n;
            var d = fixture.ComputeDistance(ap, n, childIndex);
            if (d < this.m_system.m_particleDiameter && this.ShouldCollideFixtureParticle(fixture, this.m_system, a)) {
              var b = fixture.GetBody();
              var bp = b.GetWorldCenter();
              var bm = b.GetMass();
              var bI = b.GetInertia() - bm * b.GetLocalCenter().LengthSquared();
              var invBm = bm > 0 ? 1 / bm : 0;
              var invBI = bI > 0 ? 1 / bI : 0;
              var invAm = this.m_system.m_flagsBuffer.data[a] & exports.b2ParticleFlag.b2_wallParticle ? 0 : this.m_system.GetParticleInvMass();
              var rp = b2Vec2.SubVV(ap, bp, s_rp);
              var rpn = b2Vec2.CrossVV(rp, n);
              var invM = invAm + invBm + invBI * rpn * rpn;
              var contact = this.m_system.m_bodyContactBuffer.data[this.m_system.m_bodyContactBuffer.Append()];
              contact.index = a;
              contact.body = b;
              contact.fixture = fixture;
              contact.weight = 1 - d * this.m_system.m_inverseDiameter;
              contact.normal.Copy(n.SelfNeg());
              contact.mass = invM > 0 ? 1 / invM : 0;
              this.m_system.DetectStuckParticle(a);
            }
          };
          UpdateBodyContactsCallback.ReportFixtureAndParticle_s_n = new b2Vec2();
          UpdateBodyContactsCallback.ReportFixtureAndParticle_s_rp = new b2Vec2();
          return UpdateBodyContactsCallback;
        })(b2FixtureParticleQueryCallback);
        b2ParticleSystem.UpdateBodyContactsCallback = UpdateBodyContactsCallback;
        var SolveCollisionCallback = (function(_super) {
          __extends(SolveCollisionCallback, _super);
          function SolveCollisionCallback(system, step) {
            var _this = _super.call(this, system) || this;
            _this.m_step = step;
            return _this;
          }
          SolveCollisionCallback.prototype.ReportFixtureAndParticle = function(fixture, childIndex, a) {
            var s_p1 = b2ParticleSystem.SolveCollisionCallback.ReportFixtureAndParticle_s_p1;
            var s_output = b2ParticleSystem.SolveCollisionCallback.ReportFixtureAndParticle_s_output;
            var s_input = b2ParticleSystem.SolveCollisionCallback.ReportFixtureAndParticle_s_input;
            var s_p = b2ParticleSystem.SolveCollisionCallback.ReportFixtureAndParticle_s_p;
            var s_v = b2ParticleSystem.SolveCollisionCallback.ReportFixtureAndParticle_s_v;
            var s_f = b2ParticleSystem.SolveCollisionCallback.ReportFixtureAndParticle_s_f;
            var body = fixture.GetBody();
            if (!this.m_system.m_positionBuffer.data) throw new Error();
            if (!this.m_system.m_velocityBuffer.data) throw new Error();
            var ap = this.m_system.m_positionBuffer.data[a];
            var av = this.m_system.m_velocityBuffer.data[a];
            var output = s_output;
            var input = s_input;
            if (0 === this.m_system.m_iterationIndex) {
              var p1 = b2Transform.MulTXV(body.m_xf0, ap, s_p1);
              if (fixture.GetShape().GetType() === exports.b2ShapeType.e_circleShape) {
                p1.SelfSub(body.GetLocalCenter());
                b2Rot.MulRV(body.m_xf0.q, p1, p1);
                b2Rot.MulTRV(body.m_xf.q, p1, p1);
                p1.SelfAdd(body.GetLocalCenter());
              }
              b2Transform.MulXV(body.m_xf, p1, input.p1);
            } else input.p1.Copy(ap);
            b2Vec2.AddVMulSV(ap, this.m_step.dt, av, input.p2);
            input.maxFraction = 1;
            if (fixture.RayCast(output, input, childIndex)) {
              var n = output.normal;
              var p = s_p;
              p.x = (1 - output.fraction) * input.p1.x + output.fraction * input.p2.x + b2_linearSlop * n.x;
              p.y = (1 - output.fraction) * input.p1.y + output.fraction * input.p2.y + b2_linearSlop * n.y;
              var v = s_v;
              v.x = this.m_step.inv_dt * (p.x - ap.x);
              v.y = this.m_step.inv_dt * (p.y - ap.y);
              this.m_system.m_velocityBuffer.data[a].Copy(v);
              var f = s_f;
              f.x = this.m_step.inv_dt * this.m_system.GetParticleMass() * (av.x - v.x);
              f.y = this.m_step.inv_dt * this.m_system.GetParticleMass() * (av.y - v.y);
              this.m_system.ParticleApplyForce(a, f);
            }
          };
          SolveCollisionCallback.prototype.ReportParticle = function(system, index) {
            return false;
          };
          SolveCollisionCallback.ReportFixtureAndParticle_s_p1 = new b2Vec2();
          SolveCollisionCallback.ReportFixtureAndParticle_s_output = new b2RayCastOutput();
          SolveCollisionCallback.ReportFixtureAndParticle_s_input = new b2RayCastInput();
          SolveCollisionCallback.ReportFixtureAndParticle_s_p = new b2Vec2();
          SolveCollisionCallback.ReportFixtureAndParticle_s_v = new b2Vec2();
          SolveCollisionCallback.ReportFixtureAndParticle_s_f = new b2Vec2();
          return SolveCollisionCallback;
        })(b2FixtureParticleQueryCallback);
        b2ParticleSystem.SolveCollisionCallback = SolveCollisionCallback;
      })(exports.b2ParticleSystem || (exports.b2ParticleSystem = {}));
      var b2World = (function() {
        function b2World(gravity) {
          this.m_newFixture = false;
          this.m_locked = false;
          this.m_clearForces = true;
          this.m_contactManager = new b2ContactManager();
          this.m_bodyList = null;
          this.m_jointList = null;
          this.m_particleSystemList = null;
          this.m_bodyCount = 0;
          this.m_jointCount = 0;
          this.m_gravity = new b2Vec2();
          this.m_allowSleep = true;
          this.m_destructionListener = null;
          this.m_debugDraw = null;
          this.m_inv_dt0 = 0;
          this.m_warmStarting = true;
          this.m_continuousPhysics = true;
          this.m_subStepping = false;
          this.m_stepComplete = true;
          this.m_profile = new b2Profile();
          this.m_island = new b2Island();
          this.s_stack = [];
          this.m_controllerList = null;
          this.m_controllerCount = 0;
          this.m_gravity.Copy(gravity);
        }
        b2World.prototype.SetDestructionListener = function(listener) {
          this.m_destructionListener = listener;
        };
        b2World.prototype.SetContactFilter = function(filter) {
          this.m_contactManager.m_contactFilter = filter;
        };
        b2World.prototype.SetContactListener = function(listener) {
          this.m_contactManager.m_contactListener = listener;
        };
        b2World.prototype.SetDebugDraw = function(debugDraw) {
          this.m_debugDraw = debugDraw;
        };
        b2World.prototype.CreateBody = function(def) {
          void 0 === def && (def = {});
          if (this.IsLocked()) throw new Error();
          var b = new b2Body(def, this);
          b.m_prev = null;
          b.m_next = this.m_bodyList;
          this.m_bodyList && (this.m_bodyList.m_prev = b);
          this.m_bodyList = b;
          ++this.m_bodyCount;
          return b;
        };
        b2World.prototype.DestroyBody = function(b) {
          if (this.IsLocked()) throw new Error();
          var je = b.m_jointList;
          while (je) {
            var je0 = je;
            je = je.next;
            this.m_destructionListener && this.m_destructionListener.SayGoodbyeJoint(je0.joint);
            this.DestroyJoint(je0.joint);
            b.m_jointList = je;
          }
          b.m_jointList = null;
          var coe = b.m_controllerList;
          while (coe) {
            var coe0 = coe;
            coe = coe.nextController;
            coe0.controller.RemoveBody(b);
          }
          var ce = b.m_contactList;
          while (ce) {
            var ce0 = ce;
            ce = ce.next;
            this.m_contactManager.Destroy(ce0.contact);
          }
          b.m_contactList = null;
          var f = b.m_fixtureList;
          while (f) {
            var f0 = f;
            f = f.m_next;
            this.m_destructionListener && this.m_destructionListener.SayGoodbyeFixture(f0);
            f0.DestroyProxies();
            f0.Destroy();
            b.m_fixtureList = f;
            b.m_fixtureCount -= 1;
          }
          b.m_fixtureList = null;
          b.m_fixtureCount = 0;
          b.m_prev && (b.m_prev.m_next = b.m_next);
          b.m_next && (b.m_next.m_prev = b.m_prev);
          b === this.m_bodyList && (this.m_bodyList = b.m_next);
          --this.m_bodyCount;
        };
        b2World._Joint_Create = function(def, allocator) {
          switch (def.type) {
           case exports.b2JointType.e_distanceJoint:
            return new b2DistanceJoint(def);

           case exports.b2JointType.e_mouseJoint:
            return new b2MouseJoint(def);

           case exports.b2JointType.e_prismaticJoint:
            return new b2PrismaticJoint(def);

           case exports.b2JointType.e_revoluteJoint:
            return new b2RevoluteJoint(def);

           case exports.b2JointType.e_pulleyJoint:
            return new b2PulleyJoint(def);

           case exports.b2JointType.e_gearJoint:
            return new b2GearJoint(def);

           case exports.b2JointType.e_wheelJoint:
            return new b2WheelJoint(def);

           case exports.b2JointType.e_weldJoint:
            return new b2WeldJoint(def);

           case exports.b2JointType.e_frictionJoint:
            return new b2FrictionJoint(def);

           case exports.b2JointType.e_ropeJoint:
            return new b2RopeJoint(def);

           case exports.b2JointType.e_motorJoint:
            return new b2MotorJoint(def);

           case exports.b2JointType.e_areaJoint:
            return new b2AreaJoint(def);
          }
          throw new Error();
        };
        b2World._Joint_Destroy = function(joint, allocator) {};
        b2World.prototype.CreateJoint = function(def) {
          if (this.IsLocked()) throw new Error();
          var j = b2World._Joint_Create(def, null);
          j.m_prev = null;
          j.m_next = this.m_jointList;
          this.m_jointList && (this.m_jointList.m_prev = j);
          this.m_jointList = j;
          ++this.m_jointCount;
          j.m_edgeA.prev = null;
          j.m_edgeA.next = j.m_bodyA.m_jointList;
          j.m_bodyA.m_jointList && (j.m_bodyA.m_jointList.prev = j.m_edgeA);
          j.m_bodyA.m_jointList = j.m_edgeA;
          j.m_edgeB.prev = null;
          j.m_edgeB.next = j.m_bodyB.m_jointList;
          j.m_bodyB.m_jointList && (j.m_bodyB.m_jointList.prev = j.m_edgeB);
          j.m_bodyB.m_jointList = j.m_edgeB;
          var bodyA = def.bodyA;
          var bodyB = def.bodyB;
          if (!def.collideConnected) {
            var edge = bodyB.GetContactList();
            while (edge) {
              edge.other === bodyA && edge.contact.FlagForFiltering();
              edge = edge.next;
            }
          }
          return j;
        };
        b2World.prototype.DestroyJoint = function(j) {
          if (this.IsLocked()) throw new Error();
          var collideConnected = j.m_collideConnected;
          j.m_prev && (j.m_prev.m_next = j.m_next);
          j.m_next && (j.m_next.m_prev = j.m_prev);
          j === this.m_jointList && (this.m_jointList = j.m_next);
          var bodyA = j.m_bodyA;
          var bodyB = j.m_bodyB;
          bodyA.SetAwake(true);
          bodyB.SetAwake(true);
          j.m_edgeA.prev && (j.m_edgeA.prev.next = j.m_edgeA.next);
          j.m_edgeA.next && (j.m_edgeA.next.prev = j.m_edgeA.prev);
          j.m_edgeA === bodyA.m_jointList && (bodyA.m_jointList = j.m_edgeA.next);
          j.m_edgeA.prev = null;
          j.m_edgeA.next = null;
          j.m_edgeB.prev && (j.m_edgeB.prev.next = j.m_edgeB.next);
          j.m_edgeB.next && (j.m_edgeB.next.prev = j.m_edgeB.prev);
          j.m_edgeB === bodyB.m_jointList && (bodyB.m_jointList = j.m_edgeB.next);
          j.m_edgeB.prev = null;
          j.m_edgeB.next = null;
          b2World._Joint_Destroy(j, null);
          --this.m_jointCount;
          if (!collideConnected) {
            var edge = bodyB.GetContactList();
            while (edge) {
              edge.other === bodyA && edge.contact.FlagForFiltering();
              edge = edge.next;
            }
          }
        };
        b2World.prototype.CreateParticleSystem = function(def) {
          if (this.IsLocked()) throw new Error();
          var p = new exports.b2ParticleSystem(def, this);
          p.m_prev = null;
          p.m_next = this.m_particleSystemList;
          this.m_particleSystemList && (this.m_particleSystemList.m_prev = p);
          this.m_particleSystemList = p;
          return p;
        };
        b2World.prototype.DestroyParticleSystem = function(p) {
          if (this.IsLocked()) throw new Error();
          p.m_prev && (p.m_prev.m_next = p.m_next);
          p.m_next && (p.m_next.m_prev = p.m_prev);
          p === this.m_particleSystemList && (this.m_particleSystemList = p.m_next);
        };
        b2World.prototype.CalculateReasonableParticleIterations = function(timeStep) {
          if (null === this.m_particleSystemList) return 1;
          function GetSmallestRadius(world) {
            var smallestRadius = b2_maxFloat;
            for (var system = world.GetParticleSystemList(); null !== system; system = system.m_next) smallestRadius = b2Min(smallestRadius, system.GetRadius());
            return smallestRadius;
          }
          return b2CalculateParticleIterations(this.m_gravity.Length(), GetSmallestRadius(this), timeStep);
        };
        b2World.prototype.Step = function(dt, velocityIterations, positionIterations, particleIterations) {
          void 0 === particleIterations && (particleIterations = this.CalculateReasonableParticleIterations(dt));
          var stepTimer = b2World.Step_s_stepTimer.Reset();
          if (this.m_newFixture) {
            this.m_contactManager.FindNewContacts();
            this.m_newFixture = false;
          }
          this.m_locked = true;
          var step = b2World.Step_s_step;
          step.dt = dt;
          step.velocityIterations = velocityIterations;
          step.positionIterations = positionIterations;
          step.particleIterations = particleIterations;
          step.inv_dt = dt > 0 ? 1 / dt : 0;
          step.dtRatio = this.m_inv_dt0 * dt;
          step.warmStarting = this.m_warmStarting;
          var timer = b2World.Step_s_timer.Reset();
          this.m_contactManager.Collide();
          this.m_profile.collide = timer.GetMilliseconds();
          if (this.m_stepComplete && step.dt > 0) {
            var timer_1 = b2World.Step_s_timer.Reset();
            for (var p = this.m_particleSystemList; p; p = p.m_next) p.Solve(step);
            this.Solve(step);
            this.m_profile.solve = timer_1.GetMilliseconds();
          }
          if (this.m_continuousPhysics && step.dt > 0) {
            var timer_2 = b2World.Step_s_timer.Reset();
            this.SolveTOI(step);
            this.m_profile.solveTOI = timer_2.GetMilliseconds();
          }
          step.dt > 0 && (this.m_inv_dt0 = step.inv_dt);
          this.m_clearForces && this.ClearForces();
          this.m_locked = false;
          this.m_profile.step = stepTimer.GetMilliseconds();
        };
        b2World.prototype.ClearForces = function() {
          for (var body = this.m_bodyList; body; body = body.m_next) {
            body.m_force.SetZero();
            body.m_torque = 0;
          }
        };
        b2World.prototype.DrawParticleSystem = function(system) {
          if (null === this.m_debugDraw) return;
          var particleCount = system.GetParticleCount();
          if (particleCount) {
            var radius = system.GetRadius();
            var positionBuffer = system.GetPositionBuffer();
            if (system.m_colorBuffer.data) {
              var colorBuffer = system.GetColorBuffer();
              this.m_debugDraw.DrawParticles(positionBuffer, radius, colorBuffer, particleCount);
            } else this.m_debugDraw.DrawParticles(positionBuffer, radius, null, particleCount);
          }
        };
        b2World.prototype.DrawDebugData = function() {
          if (null === this.m_debugDraw) return;
          var flags = this.m_debugDraw.GetFlags();
          var color = b2World.DrawDebugData_s_color.SetRGB(0, 0, 0);
          if (flags & exports.b2DrawFlags.e_shapeBit) for (var b = this.m_bodyList; b; b = b.m_next) {
            var xf = b.m_xf;
            this.m_debugDraw.PushTransform(xf);
            for (var f = b.GetFixtureList(); f; f = f.m_next) if (b.IsActive()) if (b.GetType() === exports.b2BodyType.b2_staticBody) {
              color.SetRGB(.5, .9, .5);
              this.DrawShape(f, color);
            } else if (b.GetType() === exports.b2BodyType.b2_kinematicBody) {
              color.SetRGB(.5, .5, .9);
              this.DrawShape(f, color);
            } else if (b.IsAwake()) {
              color.SetRGB(.9, .7, .7);
              this.DrawShape(f, color);
            } else {
              color.SetRGB(.6, .6, .6);
              this.DrawShape(f, color);
            } else {
              color.SetRGB(.5, .5, .3);
              this.DrawShape(f, color);
            }
            this.m_debugDraw.PopTransform(xf);
          }
          if (flags & exports.b2DrawFlags.e_particleBit) for (var p = this.m_particleSystemList; p; p = p.m_next) this.DrawParticleSystem(p);
          if (flags & exports.b2DrawFlags.e_jointBit) for (var j = this.m_jointList; j; j = j.m_next) this.DrawJoint(j);
          if (flags & exports.b2DrawFlags.e_aabbBit) {
            color.SetRGB(.9, .3, .9);
            var vs = b2World.DrawDebugData_s_vs;
            for (var b = this.m_bodyList; b; b = b.m_next) {
              if (!b.IsActive()) continue;
              for (var f = b.GetFixtureList(); f; f = f.m_next) for (var i = 0; i < f.m_proxyCount; ++i) {
                var proxy = f.m_proxies[i];
                var aabb = proxy.treeNode.aabb;
                vs[0].Set(aabb.lowerBound.x, aabb.lowerBound.y);
                vs[1].Set(aabb.upperBound.x, aabb.lowerBound.y);
                vs[2].Set(aabb.upperBound.x, aabb.upperBound.y);
                vs[3].Set(aabb.lowerBound.x, aabb.upperBound.y);
                this.m_debugDraw.DrawPolygon(vs, 4, color);
              }
            }
          }
          if (flags & exports.b2DrawFlags.e_centerOfMassBit) for (var b = this.m_bodyList; b; b = b.m_next) {
            var xf = b2World.DrawDebugData_s_xf;
            xf.q.Copy(b.m_xf.q);
            xf.p.Copy(b.GetWorldCenter());
            this.m_debugDraw.DrawTransform(xf);
          }
          if (flags & exports.b2DrawFlags.e_controllerBit) for (var c = this.m_controllerList; c; c = c.m_next) c.Draw(this.m_debugDraw);
        };
        b2World.prototype.QueryAABB = function(callback, aabb, fn) {
          this.m_contactManager.m_broadPhase.Query(aabb, (function(proxy) {
            var fixture_proxy = proxy.userData;
            var fixture = fixture_proxy.fixture;
            if (callback) return callback.ReportFixture(fixture);
            if (fn) return fn(fixture);
            return true;
          }));
          if (callback instanceof b2QueryCallback) for (var p = this.m_particleSystemList; p; p = p.m_next) callback.ShouldQueryParticleSystem(p) && p.QueryAABB(callback, aabb);
        };
        b2World.prototype.QueryAllAABB = function(aabb, out) {
          void 0 === out && (out = []);
          this.QueryAABB(null, aabb, (function(fixture) {
            out.push(fixture);
            return true;
          }));
          return out;
        };
        b2World.prototype.QueryPointAABB = function(callback, point, fn) {
          this.m_contactManager.m_broadPhase.QueryPoint(point, (function(proxy) {
            var fixture_proxy = proxy.userData;
            var fixture = fixture_proxy.fixture;
            if (callback) return callback.ReportFixture(fixture);
            if (fn) return fn(fixture);
            return true;
          }));
          if (callback instanceof b2QueryCallback) for (var p = this.m_particleSystemList; p; p = p.m_next) callback.ShouldQueryParticleSystem(p) && p.QueryPointAABB(callback, point);
        };
        b2World.prototype.QueryAllPointAABB = function(point, out) {
          void 0 === out && (out = []);
          this.QueryPointAABB(null, point, (function(fixture) {
            out.push(fixture);
            return true;
          }));
          return out;
        };
        b2World.prototype.QueryFixtureShape = function(callback, shape, index, transform, fn) {
          var aabb = b2World.QueryFixtureShape_s_aabb;
          shape.ComputeAABB(aabb, transform, index);
          this.m_contactManager.m_broadPhase.Query(aabb, (function(proxy) {
            var fixture_proxy = proxy.userData;
            var fixture = fixture_proxy.fixture;
            if (b2TestOverlapShape(shape, index, fixture.GetShape(), fixture_proxy.childIndex, transform, fixture.GetBody().GetTransform())) {
              if (callback) return callback.ReportFixture(fixture);
              if (fn) return fn(fixture);
            }
            return true;
          }));
          if (callback instanceof b2QueryCallback) for (var p = this.m_particleSystemList; p; p = p.m_next) callback.ShouldQueryParticleSystem(p) && p.QueryAABB(callback, aabb);
        };
        b2World.prototype.QueryAllFixtureShape = function(shape, index, transform, out) {
          void 0 === out && (out = []);
          this.QueryFixtureShape(null, shape, index, transform, (function(fixture) {
            out.push(fixture);
            return true;
          }));
          return out;
        };
        b2World.prototype.QueryFixturePoint = function(callback, point, fn) {
          this.m_contactManager.m_broadPhase.QueryPoint(point, (function(proxy) {
            var fixture_proxy = proxy.userData;
            var fixture = fixture_proxy.fixture;
            if (fixture.TestPoint(point)) {
              if (callback) return callback.ReportFixture(fixture);
              if (fn) return fn(fixture);
            }
            return true;
          }));
          if (callback) for (var p = this.m_particleSystemList; p; p = p.m_next) callback.ShouldQueryParticleSystem(p) && p.QueryPointAABB(callback, point);
        };
        b2World.prototype.QueryAllFixturePoint = function(point, out) {
          void 0 === out && (out = []);
          this.QueryFixturePoint(null, point, (function(fixture) {
            out.push(fixture);
            return true;
          }));
          return out;
        };
        b2World.prototype.RayCast = function(callback, point1, point2, fn) {
          var input = b2World.RayCast_s_input;
          input.maxFraction = 1;
          input.p1.Copy(point1);
          input.p2.Copy(point2);
          this.m_contactManager.m_broadPhase.RayCast(input, (function(input, proxy) {
            var fixture_proxy = proxy.userData;
            var fixture = fixture_proxy.fixture;
            var index = fixture_proxy.childIndex;
            var output = b2World.RayCast_s_output;
            var hit = fixture.RayCast(output, input, index);
            if (hit) {
              var fraction = output.fraction;
              var point = b2World.RayCast_s_point;
              point.Set((1 - fraction) * point1.x + fraction * point2.x, (1 - fraction) * point1.y + fraction * point2.y);
              if (callback) return callback.ReportFixture(fixture, point, output.normal, fraction);
              if (fn) return fn(fixture, point, output.normal, fraction);
            }
            return input.maxFraction;
          }));
          if (callback) for (var p = this.m_particleSystemList; p; p = p.m_next) callback.ShouldQueryParticleSystem(p) && p.RayCast(callback, point1, point2);
        };
        b2World.prototype.RayCastOne = function(point1, point2) {
          var result = null;
          var min_fraction = 1;
          this.RayCast(null, point1, point2, (function(fixture, point, normal, fraction) {
            if (fraction < min_fraction) {
              min_fraction = fraction;
              result = fixture;
            }
            return min_fraction;
          }));
          return result;
        };
        b2World.prototype.RayCastAll = function(point1, point2, out) {
          void 0 === out && (out = []);
          this.RayCast(null, point1, point2, (function(fixture, point, normal, fraction) {
            out.push(fixture);
            return 1;
          }));
          return out;
        };
        b2World.prototype.GetBodyList = function() {
          return this.m_bodyList;
        };
        b2World.prototype.GetJointList = function() {
          return this.m_jointList;
        };
        b2World.prototype.GetParticleSystemList = function() {
          return this.m_particleSystemList;
        };
        b2World.prototype.GetContactList = function() {
          return this.m_contactManager.m_contactList;
        };
        b2World.prototype.SetAllowSleeping = function(flag) {
          if (flag === this.m_allowSleep) return;
          this.m_allowSleep = flag;
          if (!this.m_allowSleep) for (var b = this.m_bodyList; b; b = b.m_next) b.SetAwake(true);
        };
        b2World.prototype.GetAllowSleeping = function() {
          return this.m_allowSleep;
        };
        b2World.prototype.SetWarmStarting = function(flag) {
          this.m_warmStarting = flag;
        };
        b2World.prototype.GetWarmStarting = function() {
          return this.m_warmStarting;
        };
        b2World.prototype.SetContinuousPhysics = function(flag) {
          this.m_continuousPhysics = flag;
        };
        b2World.prototype.GetContinuousPhysics = function() {
          return this.m_continuousPhysics;
        };
        b2World.prototype.SetSubStepping = function(flag) {
          this.m_subStepping = flag;
        };
        b2World.prototype.GetSubStepping = function() {
          return this.m_subStepping;
        };
        b2World.prototype.GetProxyCount = function() {
          return this.m_contactManager.m_broadPhase.GetProxyCount();
        };
        b2World.prototype.GetBodyCount = function() {
          return this.m_bodyCount;
        };
        b2World.prototype.GetJointCount = function() {
          return this.m_jointCount;
        };
        b2World.prototype.GetContactCount = function() {
          return this.m_contactManager.m_contactCount;
        };
        b2World.prototype.GetTreeHeight = function() {
          return this.m_contactManager.m_broadPhase.GetTreeHeight();
        };
        b2World.prototype.GetTreeBalance = function() {
          return this.m_contactManager.m_broadPhase.GetTreeBalance();
        };
        b2World.prototype.GetTreeQuality = function() {
          return this.m_contactManager.m_broadPhase.GetTreeQuality();
        };
        b2World.prototype.SetGravity = function(gravity, wake) {
          void 0 === wake && (wake = true);
          if (!b2Vec2.IsEqualToV(this.m_gravity, gravity)) {
            this.m_gravity.Copy(gravity);
            if (wake) for (var b = this.m_bodyList; b; b = b.m_next) b.SetAwake(true);
          }
        };
        b2World.prototype.GetGravity = function() {
          return this.m_gravity;
        };
        b2World.prototype.IsLocked = function() {
          return this.m_locked;
        };
        b2World.prototype.SetAutoClearForces = function(flag) {
          this.m_clearForces = flag;
        };
        b2World.prototype.GetAutoClearForces = function() {
          return this.m_clearForces;
        };
        b2World.prototype.ShiftOrigin = function(newOrigin) {
          if (this.IsLocked()) throw new Error();
          for (var b = this.m_bodyList; b; b = b.m_next) {
            b.m_xf.p.SelfSub(newOrigin);
            b.m_sweep.c0.SelfSub(newOrigin);
            b.m_sweep.c.SelfSub(newOrigin);
          }
          for (var j = this.m_jointList; j; j = j.m_next) j.ShiftOrigin(newOrigin);
          this.m_contactManager.m_broadPhase.ShiftOrigin(newOrigin);
        };
        b2World.prototype.GetContactManager = function() {
          return this.m_contactManager;
        };
        b2World.prototype.GetProfile = function() {
          return this.m_profile;
        };
        b2World.prototype.Dump = function(log) {
          if (this.m_locked) return;
          log("const g: b2Vec2 = new b2Vec2(%.15f, %.15f);\n", this.m_gravity.x, this.m_gravity.y);
          log("this.m_world.SetGravity(g);\n");
          log("const bodies: b2Body[] = [];\n");
          log("const joints: b2Joint[] = [];\n");
          var i = 0;
          for (var b = this.m_bodyList; b; b = b.m_next) {
            b.m_islandIndex = i;
            b.Dump(log);
            ++i;
          }
          i = 0;
          for (var j = this.m_jointList; j; j = j.m_next) {
            j.m_index = i;
            ++i;
          }
          for (var j = this.m_jointList; j; j = j.m_next) {
            if (j.m_type === exports.b2JointType.e_gearJoint) continue;
            log("{\n");
            j.Dump(log);
            log("}\n");
          }
          for (var j = this.m_jointList; j; j = j.m_next) {
            if (j.m_type !== exports.b2JointType.e_gearJoint) continue;
            log("{\n");
            j.Dump(log);
            log("}\n");
          }
        };
        b2World.prototype.DrawJoint = function(joint) {
          if (null === this.m_debugDraw) return;
          var bodyA = joint.GetBodyA();
          var bodyB = joint.GetBodyB();
          var xf1 = bodyA.m_xf;
          var xf2 = bodyB.m_xf;
          var x1 = xf1.p;
          var x2 = xf2.p;
          var p1 = joint.GetAnchorA(b2World.DrawJoint_s_p1);
          var p2 = joint.GetAnchorB(b2World.DrawJoint_s_p2);
          var color = b2World.DrawJoint_s_color.SetRGB(.5, .8, .8);
          switch (joint.m_type) {
           case exports.b2JointType.e_distanceJoint:
            this.m_debugDraw.DrawSegment(p1, p2, color);
            break;

           case exports.b2JointType.e_pulleyJoint:
            var pulley = joint;
            var s1 = pulley.GetGroundAnchorA();
            var s2 = pulley.GetGroundAnchorB();
            this.m_debugDraw.DrawSegment(s1, p1, color);
            this.m_debugDraw.DrawSegment(s2, p2, color);
            this.m_debugDraw.DrawSegment(s1, s2, color);
            break;

           case exports.b2JointType.e_mouseJoint:
            var c = b2World.DrawJoint_s_c;
            c.Set(0, 1, 0);
            this.m_debugDraw.DrawPoint(p1, 4, c);
            this.m_debugDraw.DrawPoint(p2, 4, c);
            c.Set(.8, .8, .8);
            this.m_debugDraw.DrawSegment(p1, p2, c);
            break;

           default:
            this.m_debugDraw.DrawSegment(x1, p1, color);
            this.m_debugDraw.DrawSegment(p1, p2, color);
            this.m_debugDraw.DrawSegment(x2, p2, color);
          }
        };
        b2World.prototype.DrawShape = function(fixture, color) {
          if (null === this.m_debugDraw) return;
          var shape = fixture.GetShape();
          switch (shape.m_type) {
           case exports.b2ShapeType.e_circleShape:
            var circle = shape;
            var center = circle.m_p;
            var radius = circle.m_radius;
            var axis = b2Vec2.UNITX;
            this.m_debugDraw.DrawSolidCircle(center, radius, axis, color);
            break;

           case exports.b2ShapeType.e_edgeShape:
            var edge = shape;
            var v1 = edge.m_vertex1;
            var v2 = edge.m_vertex2;
            this.m_debugDraw.DrawSegment(v1, v2, color);
            break;

           case exports.b2ShapeType.e_chainShape:
            var chain = shape;
            var count = chain.m_count;
            var vertices = chain.m_vertices;
            var ghostColor = b2World.DrawShape_s_ghostColor.SetRGBA(.75 * color.r, .75 * color.g, .75 * color.b, color.a);
            var v1 = vertices[0];
            this.m_debugDraw.DrawPoint(v1, 4, color);
            if (chain.m_hasPrevVertex) {
              var vp = chain.m_prevVertex;
              this.m_debugDraw.DrawSegment(vp, v1, ghostColor);
              this.m_debugDraw.DrawCircle(vp, .1, ghostColor);
            }
            for (var i = 1; i < count; ++i) {
              var v2 = vertices[i];
              this.m_debugDraw.DrawSegment(v1, v2, color);
              this.m_debugDraw.DrawPoint(v2, 4, color);
              v1 = v2;
            }
            if (chain.m_hasNextVertex) {
              var vn = chain.m_nextVertex;
              this.m_debugDraw.DrawSegment(vn, v1, ghostColor);
              this.m_debugDraw.DrawCircle(vn, .1, ghostColor);
            }
            break;

           case exports.b2ShapeType.e_polygonShape:
            var poly = shape;
            var vertexCount = poly.m_count;
            var vertices = poly.m_vertices;
            this.m_debugDraw.DrawSolidPolygon(vertices, vertexCount, color);
          }
        };
        b2World.prototype.Solve = function(step) {
          for (var b = this.m_bodyList; b; b = b.m_next) b.m_xf0.Copy(b.m_xf);
          for (var controller = this.m_controllerList; controller; controller = controller.m_next) controller.Step(step);
          this.m_profile.solveInit = 0;
          this.m_profile.solveVelocity = 0;
          this.m_profile.solvePosition = 0;
          var island = this.m_island;
          island.Initialize(this.m_bodyCount, this.m_contactManager.m_contactCount, this.m_jointCount, null, this.m_contactManager.m_contactListener);
          for (var b = this.m_bodyList; b; b = b.m_next) b.m_islandFlag = false;
          for (var c = this.m_contactManager.m_contactList; c; c = c.m_next) c.m_islandFlag = false;
          for (var j = this.m_jointList; j; j = j.m_next) j.m_islandFlag = false;
          var stack = this.s_stack;
          for (var seed = this.m_bodyList; seed; seed = seed.m_next) {
            if (seed.m_islandFlag) continue;
            if (!seed.IsAwake() || !seed.IsActive()) continue;
            if (seed.GetType() === exports.b2BodyType.b2_staticBody) continue;
            island.Clear();
            var stackCount = 0;
            stack[stackCount++] = seed;
            seed.m_islandFlag = true;
            while (stackCount > 0) {
              var b = stack[--stackCount];
              if (!b) throw new Error();
              island.AddBody(b);
              b.m_awakeFlag = true;
              if (b.GetType() === exports.b2BodyType.b2_staticBody) continue;
              for (var ce = b.m_contactList; ce; ce = ce.next) {
                var contact = ce.contact;
                if (contact.m_islandFlag) continue;
                if (!contact.IsEnabled() || !contact.IsTouching()) continue;
                var sensorA = contact.m_fixtureA.m_isSensor;
                var sensorB = contact.m_fixtureB.m_isSensor;
                if (sensorA || sensorB) continue;
                island.AddContact(contact);
                contact.m_islandFlag = true;
                var other = ce.other;
                if (!other) throw new Error();
                if (other.m_islandFlag) continue;
                stack[stackCount++] = other;
                other.m_islandFlag = true;
              }
              for (var je = b.m_jointList; je; je = je.next) {
                if (je.joint.m_islandFlag) continue;
                var other = je.other;
                if (!other.IsActive()) continue;
                island.AddJoint(je.joint);
                je.joint.m_islandFlag = true;
                if (other.m_islandFlag) continue;
                stack[stackCount++] = other;
                other.m_islandFlag = true;
              }
            }
            var profile = new b2Profile();
            island.Solve(profile, step, this.m_gravity, this.m_allowSleep);
            this.m_profile.solveInit += profile.solveInit;
            this.m_profile.solveVelocity += profile.solveVelocity;
            this.m_profile.solvePosition += profile.solvePosition;
            for (var i = 0; i < island.m_bodyCount; ++i) {
              var b = island.m_bodies[i];
              b.GetType() === exports.b2BodyType.b2_staticBody && (b.m_islandFlag = false);
            }
          }
          for (var i = 0; i < stack.length; ++i) {
            if (!stack[i]) break;
            stack[i] = null;
          }
          var timer = new b2Timer();
          for (var b = this.m_bodyList; b; b = b.m_next) {
            if (!b.m_islandFlag) continue;
            if (b.GetType() === exports.b2BodyType.b2_staticBody) continue;
            b.SynchronizeFixtures();
          }
          this.m_contactManager.FindNewContacts();
          this.m_profile.broadphase = timer.GetMilliseconds();
        };
        b2World.prototype.SolveTOI = function(step) {
          var island = this.m_island;
          island.Initialize(2 * b2_maxTOIContacts, b2_maxTOIContacts, 0, null, this.m_contactManager.m_contactListener);
          if (this.m_stepComplete) {
            for (var b = this.m_bodyList; b; b = b.m_next) {
              b.m_islandFlag = false;
              b.m_sweep.alpha0 = 0;
            }
            for (var c = this.m_contactManager.m_contactList; c; c = c.m_next) {
              c.m_toiFlag = false;
              c.m_islandFlag = false;
              c.m_toiCount = 0;
              c.m_toi = 1;
            }
          }
          for (;;) {
            var minContact = null;
            var minAlpha = 1;
            for (var c = this.m_contactManager.m_contactList; c; c = c.m_next) {
              if (!c.IsEnabled()) continue;
              if (c.m_toiCount > b2_maxSubSteps) continue;
              var alpha = 1;
              if (c.m_toiFlag) alpha = c.m_toi; else {
                var fA_1 = c.GetFixtureA();
                var fB_1 = c.GetFixtureB();
                if (fA_1.IsSensor() || fB_1.IsSensor()) continue;
                var bA_1 = fA_1.GetBody();
                var bB_1 = fB_1.GetBody();
                var typeA = bA_1.m_type;
                var typeB = bB_1.m_type;
                var activeA = bA_1.IsAwake() && typeA !== exports.b2BodyType.b2_staticBody;
                var activeB = bB_1.IsAwake() && typeB !== exports.b2BodyType.b2_staticBody;
                if (!activeA && !activeB) continue;
                var collideA = bA_1.IsBullet() || typeA !== exports.b2BodyType.b2_dynamicBody;
                var collideB = bB_1.IsBullet() || typeB !== exports.b2BodyType.b2_dynamicBody;
                if (!collideA && !collideB) continue;
                var alpha0 = bA_1.m_sweep.alpha0;
                if (bA_1.m_sweep.alpha0 < bB_1.m_sweep.alpha0) {
                  alpha0 = bB_1.m_sweep.alpha0;
                  bA_1.m_sweep.Advance(alpha0);
                } else if (bB_1.m_sweep.alpha0 < bA_1.m_sweep.alpha0) {
                  alpha0 = bA_1.m_sweep.alpha0;
                  bB_1.m_sweep.Advance(alpha0);
                }
                var indexA = c.GetChildIndexA();
                var indexB = c.GetChildIndexB();
                var input = b2World.SolveTOI_s_toi_input;
                input.proxyA.SetShape(fA_1.GetShape(), indexA);
                input.proxyB.SetShape(fB_1.GetShape(), indexB);
                input.sweepA.Copy(bA_1.m_sweep);
                input.sweepB.Copy(bB_1.m_sweep);
                input.tMax = 1;
                var output = b2World.SolveTOI_s_toi_output;
                b2TimeOfImpact(output, input);
                var beta = output.t;
                alpha = output.state === exports.b2TOIOutputState.e_touching ? b2Min(alpha0 + (1 - alpha0) * beta, 1) : 1;
                c.m_toi = alpha;
                c.m_toiFlag = true;
              }
              if (alpha < minAlpha) {
                minContact = c;
                minAlpha = alpha;
              }
            }
            if (null === minContact || 1 - 10 * b2_epsilon < minAlpha) {
              this.m_stepComplete = true;
              break;
            }
            var fA = minContact.GetFixtureA();
            var fB = minContact.GetFixtureB();
            var bA = fA.GetBody();
            var bB = fB.GetBody();
            var backup1 = b2World.SolveTOI_s_backup1.Copy(bA.m_sweep);
            var backup2 = b2World.SolveTOI_s_backup2.Copy(bB.m_sweep);
            bA.Advance(minAlpha);
            bB.Advance(minAlpha);
            minContact.Update(this.m_contactManager.m_contactListener);
            minContact.m_toiFlag = false;
            ++minContact.m_toiCount;
            if (!minContact.IsEnabled() || !minContact.IsTouching()) {
              minContact.SetEnabled(false);
              bA.m_sweep.Copy(backup1);
              bB.m_sweep.Copy(backup2);
              bA.SynchronizeTransform();
              bB.SynchronizeTransform();
              continue;
            }
            bA.SetAwake(true);
            bB.SetAwake(true);
            island.Clear();
            island.AddBody(bA);
            island.AddBody(bB);
            island.AddContact(minContact);
            bA.m_islandFlag = true;
            bB.m_islandFlag = true;
            minContact.m_islandFlag = true;
            for (var i = 0; i < 2; ++i) {
              var body = 0 === i ? bA : bB;
              if (body.m_type === exports.b2BodyType.b2_dynamicBody) for (var ce = body.m_contactList; ce; ce = ce.next) {
                if (island.m_bodyCount === island.m_bodyCapacity) break;
                if (island.m_contactCount === island.m_contactCapacity) break;
                var contact = ce.contact;
                if (contact.m_islandFlag) continue;
                var other = ce.other;
                if (other.m_type === exports.b2BodyType.b2_dynamicBody && !body.IsBullet() && !other.IsBullet()) continue;
                var sensorA = contact.m_fixtureA.m_isSensor;
                var sensorB = contact.m_fixtureB.m_isSensor;
                if (sensorA || sensorB) continue;
                var backup = b2World.SolveTOI_s_backup.Copy(other.m_sweep);
                other.m_islandFlag || other.Advance(minAlpha);
                contact.Update(this.m_contactManager.m_contactListener);
                if (!contact.IsEnabled()) {
                  other.m_sweep.Copy(backup);
                  other.SynchronizeTransform();
                  continue;
                }
                if (!contact.IsTouching()) {
                  other.m_sweep.Copy(backup);
                  other.SynchronizeTransform();
                  continue;
                }
                contact.m_islandFlag = true;
                island.AddContact(contact);
                if (other.m_islandFlag) continue;
                other.m_islandFlag = true;
                other.m_type !== exports.b2BodyType.b2_staticBody && other.SetAwake(true);
                island.AddBody(other);
              }
            }
            var subStep = b2World.SolveTOI_s_subStep;
            subStep.dt = (1 - minAlpha) * step.dt;
            subStep.inv_dt = 1 / subStep.dt;
            subStep.dtRatio = 1;
            subStep.positionIterations = 20;
            subStep.velocityIterations = step.velocityIterations;
            subStep.particleIterations = step.particleIterations;
            subStep.warmStarting = false;
            island.SolveTOI(subStep, bA.m_islandIndex, bB.m_islandIndex);
            for (var i = 0; i < island.m_bodyCount; ++i) {
              var body = island.m_bodies[i];
              body.m_islandFlag = false;
              if (body.m_type !== exports.b2BodyType.b2_dynamicBody) continue;
              body.SynchronizeFixtures();
              for (var ce = body.m_contactList; ce; ce = ce.next) {
                ce.contact.m_toiFlag = false;
                ce.contact.m_islandFlag = false;
              }
            }
            this.m_contactManager.FindNewContacts();
            if (this.m_subStepping) {
              this.m_stepComplete = false;
              break;
            }
          }
        };
        b2World.prototype.AddController = function(controller) {
          controller.m_next = this.m_controllerList;
          controller.m_prev = null;
          this.m_controllerList && (this.m_controllerList.m_prev = controller);
          this.m_controllerList = controller;
          ++this.m_controllerCount;
          return controller;
        };
        b2World.prototype.RemoveController = function(controller) {
          controller.m_prev && (controller.m_prev.m_next = controller.m_next);
          controller.m_next && (controller.m_next.m_prev = controller.m_prev);
          this.m_controllerList === controller && (this.m_controllerList = controller.m_next);
          --this.m_controllerCount;
          controller.m_prev = null;
          controller.m_next = null;
          return controller;
        };
        b2World.Step_s_step = new b2TimeStep();
        b2World.Step_s_stepTimer = new b2Timer();
        b2World.Step_s_timer = new b2Timer();
        b2World.DrawDebugData_s_color = new b2Color(0, 0, 0);
        b2World.DrawDebugData_s_vs = b2Vec2.MakeArray(4);
        b2World.DrawDebugData_s_xf = new b2Transform();
        b2World.QueryFixtureShape_s_aabb = new b2AABB();
        b2World.RayCast_s_input = new b2RayCastInput();
        b2World.RayCast_s_output = new b2RayCastOutput();
        b2World.RayCast_s_point = new b2Vec2();
        b2World.DrawJoint_s_p1 = new b2Vec2();
        b2World.DrawJoint_s_p2 = new b2Vec2();
        b2World.DrawJoint_s_color = new b2Color(.5, .8, .8);
        b2World.DrawJoint_s_c = new b2Color();
        b2World.DrawShape_s_ghostColor = new b2Color();
        b2World.SolveTOI_s_subStep = new b2TimeStep();
        b2World.SolveTOI_s_backup = new b2Sweep();
        b2World.SolveTOI_s_backup1 = new b2Sweep();
        b2World.SolveTOI_s_backup2 = new b2Sweep();
        b2World.SolveTOI_s_toi_input = new b2TOIInput();
        b2World.SolveTOI_s_toi_output = new b2TOIOutput();
        return b2World;
      })();
      var b2ControllerEdge = (function() {
        function b2ControllerEdge(controller, body) {
          this.prevBody = null;
          this.nextBody = null;
          this.prevController = null;
          this.nextController = null;
          this.controller = controller;
          this.body = body;
        }
        return b2ControllerEdge;
      })();
      var b2Controller = (function() {
        function b2Controller() {
          this.m_bodyList = null;
          this.m_bodyCount = 0;
          this.m_prev = null;
          this.m_next = null;
        }
        b2Controller.prototype.GetNext = function() {
          return this.m_next;
        };
        b2Controller.prototype.GetPrev = function() {
          return this.m_prev;
        };
        b2Controller.prototype.GetBodyList = function() {
          return this.m_bodyList;
        };
        b2Controller.prototype.AddBody = function(body) {
          var edge = new b2ControllerEdge(this, body);
          edge.nextBody = this.m_bodyList;
          edge.prevBody = null;
          this.m_bodyList && (this.m_bodyList.prevBody = edge);
          this.m_bodyList = edge;
          ++this.m_bodyCount;
          edge.nextController = body.m_controllerList;
          edge.prevController = null;
          body.m_controllerList && (body.m_controllerList.prevController = edge);
          body.m_controllerList = edge;
          ++body.m_controllerCount;
        };
        b2Controller.prototype.RemoveBody = function(body) {
          if (this.m_bodyCount <= 0) throw new Error();
          var edge = this.m_bodyList;
          while (edge && edge.body !== body) edge = edge.nextBody;
          if (null === edge) throw new Error();
          edge.prevBody && (edge.prevBody.nextBody = edge.nextBody);
          edge.nextBody && (edge.nextBody.prevBody = edge.prevBody);
          this.m_bodyList === edge && (this.m_bodyList = edge.nextBody);
          --this.m_bodyCount;
          edge.nextController && (edge.nextController.prevController = edge.prevController);
          edge.prevController && (edge.prevController.nextController = edge.nextController);
          body.m_controllerList === edge && (body.m_controllerList = edge.nextController);
          --body.m_controllerCount;
        };
        b2Controller.prototype.Clear = function() {
          while (this.m_bodyList) this.RemoveBody(this.m_bodyList.body);
          this.m_bodyCount = 0;
        };
        return b2Controller;
      })();
      var b2BuoyancyController = (function(_super) {
        __extends(b2BuoyancyController, _super);
        function b2BuoyancyController() {
          var _this = null !== _super && _super.apply(this, arguments) || this;
          _this.normal = new b2Vec2(0, 1);
          _this.offset = 0;
          _this.density = 0;
          _this.velocity = new b2Vec2(0, 0);
          _this.linearDrag = 0;
          _this.angularDrag = 0;
          _this.useDensity = false;
          _this.useWorldGravity = true;
          _this.gravity = new b2Vec2(0, 0);
          return _this;
        }
        b2BuoyancyController.prototype.Step = function(step) {
          if (!this.m_bodyList) return;
          this.useWorldGravity && this.gravity.Copy(this.m_bodyList.body.GetWorld().GetGravity());
          for (var i = this.m_bodyList; i; i = i.nextBody) {
            var body = i.body;
            if (!body.IsAwake()) continue;
            var areac = new b2Vec2();
            var massc = new b2Vec2();
            var area = 0;
            var mass = 0;
            for (var fixture = body.GetFixtureList(); fixture; fixture = fixture.m_next) {
              var sc = new b2Vec2();
              var sarea = fixture.GetShape().ComputeSubmergedArea(this.normal, this.offset, body.GetTransform(), sc);
              area += sarea;
              areac.x += sarea * sc.x;
              areac.y += sarea * sc.y;
              var shapeDensity = 0;
              shapeDensity = this.useDensity ? fixture.GetDensity() : 1;
              mass += sarea * shapeDensity;
              massc.x += sarea * sc.x * shapeDensity;
              massc.y += sarea * sc.y * shapeDensity;
            }
            areac.x /= area;
            areac.y /= area;
            massc.x /= mass;
            massc.y /= mass;
            if (area < b2_epsilon) continue;
            var buoyancyForce = this.gravity.Clone().SelfNeg();
            buoyancyForce.SelfMul(this.density * area);
            body.ApplyForce(buoyancyForce, massc);
            var dragForce = body.GetLinearVelocityFromWorldPoint(areac, new b2Vec2());
            dragForce.SelfSub(this.velocity);
            dragForce.SelfMul(-this.linearDrag * area);
            body.ApplyForce(dragForce, areac);
            body.ApplyTorque(-body.GetInertia() / body.GetMass() * area * body.GetAngularVelocity() * this.angularDrag);
          }
        };
        b2BuoyancyController.prototype.Draw = function(debugDraw) {
          var r = 100;
          var p1 = new b2Vec2();
          var p2 = new b2Vec2();
          p1.x = this.normal.x * this.offset + this.normal.y * r;
          p1.y = this.normal.y * this.offset - this.normal.x * r;
          p2.x = this.normal.x * this.offset - this.normal.y * r;
          p2.y = this.normal.y * this.offset + this.normal.x * r;
          var color = new b2Color(0, 0, .8);
          debugDraw.DrawSegment(p1, p2, color);
        };
        return b2BuoyancyController;
      })(b2Controller);
      var b2ConstantAccelController = (function(_super) {
        __extends(b2ConstantAccelController, _super);
        function b2ConstantAccelController() {
          var _this = null !== _super && _super.apply(this, arguments) || this;
          _this.A = new b2Vec2(0, 0);
          return _this;
        }
        b2ConstantAccelController.prototype.Step = function(step) {
          var dtA = b2Vec2.MulSV(step.dt, this.A, b2ConstantAccelController.Step_s_dtA);
          for (var i = this.m_bodyList; i; i = i.nextBody) {
            var body = i.body;
            if (!body.IsAwake()) continue;
            body.SetLinearVelocity(b2Vec2.AddVV(body.GetLinearVelocity(), dtA, b2Vec2.s_t0));
          }
        };
        b2ConstantAccelController.prototype.Draw = function(draw) {};
        b2ConstantAccelController.Step_s_dtA = new b2Vec2();
        return b2ConstantAccelController;
      })(b2Controller);
      var b2ConstantForceController = (function(_super) {
        __extends(b2ConstantForceController, _super);
        function b2ConstantForceController() {
          var _this = null !== _super && _super.apply(this, arguments) || this;
          _this.F = new b2Vec2(0, 0);
          return _this;
        }
        b2ConstantForceController.prototype.Step = function(step) {
          for (var i = this.m_bodyList; i; i = i.nextBody) {
            var body = i.body;
            if (!body.IsAwake()) continue;
            body.ApplyForce(this.F, body.GetWorldCenter());
          }
        };
        b2ConstantForceController.prototype.Draw = function(draw) {};
        return b2ConstantForceController;
      })(b2Controller);
      var b2GravityController = (function(_super) {
        __extends(b2GravityController, _super);
        function b2GravityController() {
          var _this = null !== _super && _super.apply(this, arguments) || this;
          _this.G = 1;
          _this.invSqr = true;
          return _this;
        }
        b2GravityController.prototype.Step = function(step) {
          if (this.invSqr) for (var i = this.m_bodyList; i; i = i.nextBody) {
            var body1 = i.body;
            var p1 = body1.GetWorldCenter();
            var mass1 = body1.GetMass();
            for (var j = this.m_bodyList; j && j !== i; j = j.nextBody) {
              var body2 = j.body;
              var p2 = body2.GetWorldCenter();
              var mass2 = body2.GetMass();
              var dx = p2.x - p1.x;
              var dy = p2.y - p1.y;
              var r2 = dx * dx + dy * dy;
              if (r2 < b2_epsilon) continue;
              var f = b2GravityController.Step_s_f.Set(dx, dy);
              f.SelfMul(this.G / r2 / b2Sqrt(r2) * mass1 * mass2);
              body1.IsAwake() && body1.ApplyForce(f, p1);
              body2.IsAwake() && body2.ApplyForce(f.SelfMul(-1), p2);
            }
          } else for (var i = this.m_bodyList; i; i = i.nextBody) {
            var body1 = i.body;
            var p1 = body1.GetWorldCenter();
            var mass1 = body1.GetMass();
            for (var j = this.m_bodyList; j && j !== i; j = j.nextBody) {
              var body2 = j.body;
              var p2 = body2.GetWorldCenter();
              var mass2 = body2.GetMass();
              var dx = p2.x - p1.x;
              var dy = p2.y - p1.y;
              var r2 = dx * dx + dy * dy;
              if (r2 < b2_epsilon) continue;
              var f = b2GravityController.Step_s_f.Set(dx, dy);
              f.SelfMul(this.G / r2 * mass1 * mass2);
              body1.IsAwake() && body1.ApplyForce(f, p1);
              body2.IsAwake() && body2.ApplyForce(f.SelfMul(-1), p2);
            }
          }
        };
        b2GravityController.prototype.Draw = function(draw) {};
        b2GravityController.Step_s_f = new b2Vec2();
        return b2GravityController;
      })(b2Controller);
      var b2TensorDampingController = (function(_super) {
        __extends(b2TensorDampingController, _super);
        function b2TensorDampingController() {
          var _this = null !== _super && _super.apply(this, arguments) || this;
          _this.T = new b2Mat22();
          _this.maxTimestep = 0;
          return _this;
        }
        b2TensorDampingController.prototype.Step = function(step) {
          var timestep = step.dt;
          if (timestep <= b2_epsilon) return;
          timestep > this.maxTimestep && this.maxTimestep > 0 && (timestep = this.maxTimestep);
          for (var i = this.m_bodyList; i; i = i.nextBody) {
            var body = i.body;
            if (!body.IsAwake()) continue;
            var damping = body.GetWorldVector(b2Mat22.MulMV(this.T, body.GetLocalVector(body.GetLinearVelocity(), b2Vec2.s_t0), b2Vec2.s_t1), b2TensorDampingController.Step_s_damping);
            body.SetLinearVelocity(b2Vec2.AddVV(body.GetLinearVelocity(), b2Vec2.MulSV(timestep, damping, b2Vec2.s_t0), b2Vec2.s_t1));
          }
        };
        b2TensorDampingController.prototype.Draw = function(draw) {};
        b2TensorDampingController.prototype.SetAxisAligned = function(xDamping, yDamping) {
          this.T.ex.x = -xDamping;
          this.T.ex.y = 0;
          this.T.ey.x = 0;
          this.T.ey.y = -yDamping;
          this.maxTimestep = xDamping > 0 || yDamping > 0 ? 1 / b2Max(xDamping, yDamping) : 0;
        };
        b2TensorDampingController.Step_s_damping = new b2Vec2();
        return b2TensorDampingController;
      })(b2Controller);
      var b2RopeDef = (function() {
        function b2RopeDef() {
          this.vertices = [];
          this.count = 0;
          this.masses = [];
          this.gravity = new b2Vec2(0, 0);
          this.damping = .1;
          this.k2 = .9;
          this.k3 = .1;
        }
        return b2RopeDef;
      })();
      var b2Rope = (function() {
        function b2Rope() {
          this.m_count = 0;
          this.m_ps = [];
          this.m_p0s = [];
          this.m_vs = [];
          this.m_ims = [];
          this.m_Ls = [];
          this.m_as = [];
          this.m_gravity = new b2Vec2();
          this.m_damping = 0;
          this.m_k2 = 1;
          this.m_k3 = .1;
        }
        b2Rope.prototype.GetVertexCount = function() {
          return this.m_count;
        };
        b2Rope.prototype.GetVertices = function() {
          return this.m_ps;
        };
        b2Rope.prototype.Initialize = function(def) {
          this.m_count = def.count;
          this.m_ps = b2Vec2.MakeArray(this.m_count);
          this.m_p0s = b2Vec2.MakeArray(this.m_count);
          this.m_vs = b2Vec2.MakeArray(this.m_count);
          this.m_ims = b2MakeNumberArray(this.m_count);
          for (var i = 0; i < this.m_count; ++i) {
            this.m_ps[i].Copy(def.vertices[i]);
            this.m_p0s[i].Copy(def.vertices[i]);
            this.m_vs[i].SetZero();
            var m = def.masses[i];
            this.m_ims[i] = m > 0 ? 1 / m : 0;
          }
          var count2 = this.m_count - 1;
          var count3 = this.m_count - 2;
          this.m_Ls = b2MakeNumberArray(count2);
          this.m_as = b2MakeNumberArray(count3);
          for (var i = 0; i < count2; ++i) {
            var p1 = this.m_ps[i];
            var p2 = this.m_ps[i + 1];
            this.m_Ls[i] = b2Vec2.DistanceVV(p1, p2);
          }
          for (var i = 0; i < count3; ++i) {
            var p1 = this.m_ps[i];
            var p2 = this.m_ps[i + 1];
            var p3 = this.m_ps[i + 2];
            var d1 = b2Vec2.SubVV(p2, p1, b2Vec2.s_t0);
            var d2 = b2Vec2.SubVV(p3, p2, b2Vec2.s_t1);
            var a = b2Vec2.CrossVV(d1, d2);
            var b = b2Vec2.DotVV(d1, d2);
            this.m_as[i] = b2Atan2(a, b);
          }
          this.m_gravity.Copy(def.gravity);
          this.m_damping = def.damping;
          this.m_k2 = def.k2;
          this.m_k3 = def.k3;
        };
        b2Rope.prototype.Step = function(h, iterations) {
          if (0 === h) return;
          var d = Math.exp(-h * this.m_damping);
          for (var i = 0; i < this.m_count; ++i) {
            this.m_p0s[i].Copy(this.m_ps[i]);
            this.m_ims[i] > 0 && this.m_vs[i].SelfMulAdd(h, this.m_gravity);
            this.m_vs[i].SelfMul(d);
            this.m_ps[i].SelfMulAdd(h, this.m_vs[i]);
          }
          for (var i = 0; i < iterations; ++i) {
            this.SolveC2();
            this.SolveC3();
            this.SolveC2();
          }
          var inv_h = 1 / h;
          for (var i = 0; i < this.m_count; ++i) b2Vec2.MulSV(inv_h, b2Vec2.SubVV(this.m_ps[i], this.m_p0s[i], b2Vec2.s_t0), this.m_vs[i]);
        };
        b2Rope.prototype.SolveC2 = function() {
          var count2 = this.m_count - 1;
          for (var i = 0; i < count2; ++i) {
            var p1 = this.m_ps[i];
            var p2 = this.m_ps[i + 1];
            var d = b2Vec2.SubVV(p2, p1, b2Rope.s_d);
            var L = d.Normalize();
            var im1 = this.m_ims[i];
            var im2 = this.m_ims[i + 1];
            if (im1 + im2 === 0) continue;
            var s1 = im1 / (im1 + im2);
            var s2 = im2 / (im1 + im2);
            p1.SelfMulSub(this.m_k2 * s1 * (this.m_Ls[i] - L), d);
            p2.SelfMulAdd(this.m_k2 * s2 * (this.m_Ls[i] - L), d);
          }
        };
        b2Rope.prototype.SetAngle = function(angle) {
          var count3 = this.m_count - 2;
          for (var i = 0; i < count3; ++i) this.m_as[i] = angle;
        };
        b2Rope.prototype.SolveC3 = function() {
          var count3 = this.m_count - 2;
          for (var i = 0; i < count3; ++i) {
            var p1 = this.m_ps[i];
            var p2 = this.m_ps[i + 1];
            var p3 = this.m_ps[i + 2];
            var m1 = this.m_ims[i];
            var m2 = this.m_ims[i + 1];
            var m3 = this.m_ims[i + 2];
            var d1 = b2Vec2.SubVV(p2, p1, b2Rope.s_d1);
            var d2 = b2Vec2.SubVV(p3, p2, b2Rope.s_d2);
            var L1sqr = d1.LengthSquared();
            var L2sqr = d2.LengthSquared();
            if (L1sqr * L2sqr === 0) continue;
            var a = b2Vec2.CrossVV(d1, d2);
            var b = b2Vec2.DotVV(d1, d2);
            var angle = b2Atan2(a, b);
            var Jd1 = b2Vec2.MulSV(-1 / L1sqr, d1.SelfSkew(), b2Rope.s_Jd1);
            var Jd2 = b2Vec2.MulSV(1 / L2sqr, d2.SelfSkew(), b2Rope.s_Jd2);
            var J1 = b2Vec2.NegV(Jd1, b2Rope.s_J1);
            var J2 = b2Vec2.SubVV(Jd1, Jd2, b2Rope.s_J2);
            var J3 = Jd2;
            var mass = m1 * b2Vec2.DotVV(J1, J1) + m2 * b2Vec2.DotVV(J2, J2) + m3 * b2Vec2.DotVV(J3, J3);
            if (0 === mass) continue;
            mass = 1 / mass;
            var C = angle - this.m_as[i];
            while (C > b2_pi) {
              angle -= 2 * b2_pi;
              C = angle - this.m_as[i];
            }
            while (C < -b2_pi) {
              angle += 2 * b2_pi;
              C = angle - this.m_as[i];
            }
            var impulse = -this.m_k3 * mass * C;
            p1.SelfMulAdd(m1 * impulse, J1);
            p2.SelfMulAdd(m2 * impulse, J2);
            p3.SelfMulAdd(m3 * impulse, J3);
          }
        };
        b2Rope.prototype.Draw = function(draw) {
          var c = new b2Color(.4, .5, .7);
          for (var i = 0; i < this.m_count - 1; ++i) draw.DrawSegment(this.m_ps[i], this.m_ps[i + 1], c);
        };
        b2Rope.s_d = new b2Vec2();
        b2Rope.s_d1 = new b2Vec2();
        b2Rope.s_d2 = new b2Vec2();
        b2Rope.s_Jd1 = new b2Vec2();
        b2Rope.s_Jd2 = new b2Vec2();
        b2Rope.s_J1 = new b2Vec2();
        b2Rope.s_J2 = new b2Vec2();
        return b2Rope;
      })();
      exports.b2Assert = b2Assert;
      exports.b2Maybe = b2Maybe;
      exports.b2_maxFloat = b2_maxFloat;
      exports.b2_epsilon = b2_epsilon;
      exports.b2_epsilon_sq = b2_epsilon_sq;
      exports.b2_pi = b2_pi;
      exports.b2_maxManifoldPoints = b2_maxManifoldPoints;
      exports.b2_maxPolygonVertices = b2_maxPolygonVertices;
      exports.b2_aabbExtension = b2_aabbExtension;
      exports.b2_aabbMultiplier = b2_aabbMultiplier;
      exports.b2_linearSlop = b2_linearSlop;
      exports.b2_angularSlop = b2_angularSlop;
      exports.b2_polygonRadius = b2_polygonRadius;
      exports.b2_maxSubSteps = b2_maxSubSteps;
      exports.b2_maxTOIContacts = b2_maxTOIContacts;
      exports.b2_velocityThreshold = b2_velocityThreshold;
      exports.b2_maxLinearCorrection = b2_maxLinearCorrection;
      exports.b2_maxAngularCorrection = b2_maxAngularCorrection;
      exports.b2_maxTranslation = b2_maxTranslation;
      exports.b2_maxTranslationSquared = b2_maxTranslationSquared;
      exports.b2_maxRotation = b2_maxRotation;
      exports.b2_maxRotationSquared = b2_maxRotationSquared;
      exports.b2_baumgarte = b2_baumgarte;
      exports.b2_toiBaumgarte = b2_toiBaumgarte;
      exports.b2_invalidParticleIndex = b2_invalidParticleIndex;
      exports.b2_maxParticleIndex = b2_maxParticleIndex;
      exports.b2_particleStride = b2_particleStride;
      exports.b2_minParticleWeight = b2_minParticleWeight;
      exports.b2_maxParticlePressure = b2_maxParticlePressure;
      exports.b2_maxParticleForce = b2_maxParticleForce;
      exports.b2_maxTriadDistance = b2_maxTriadDistance;
      exports.b2_maxTriadDistanceSquared = b2_maxTriadDistanceSquared;
      exports.b2_minParticleSystemBufferCapacity = b2_minParticleSystemBufferCapacity;
      exports.b2_barrierCollisionTime = b2_barrierCollisionTime;
      exports.b2_timeToSleep = b2_timeToSleep;
      exports.b2_linearSleepTolerance = b2_linearSleepTolerance;
      exports.b2_angularSleepTolerance = b2_angularSleepTolerance;
      exports.b2Alloc = b2Alloc;
      exports.b2Free = b2Free;
      exports.b2Log = b2Log;
      exports.b2Version = b2Version;
      exports.b2_version = b2_version;
      exports.b2_branch = b2_branch;
      exports.b2_commit = b2_commit;
      exports.b2ParseInt = b2ParseInt;
      exports.b2ParseUInt = b2ParseUInt;
      exports.b2MakeArray = b2MakeArray;
      exports.b2MakeNullArray = b2MakeNullArray;
      exports.b2MakeNumberArray = b2MakeNumberArray;
      exports.b2_pi_over_180 = b2_pi_over_180;
      exports.b2_180_over_pi = b2_180_over_pi;
      exports.b2_two_pi = b2_two_pi;
      exports.b2Abs = b2Abs;
      exports.b2Min = b2Min;
      exports.b2Max = b2Max;
      exports.b2Clamp = b2Clamp;
      exports.b2Swap = b2Swap;
      exports.b2IsValid = b2IsValid;
      exports.b2Sq = b2Sq;
      exports.b2InvSqrt = b2InvSqrt;
      exports.b2Sqrt = b2Sqrt;
      exports.b2Pow = b2Pow;
      exports.b2DegToRad = b2DegToRad;
      exports.b2RadToDeg = b2RadToDeg;
      exports.b2Cos = b2Cos;
      exports.b2Sin = b2Sin;
      exports.b2Acos = b2Acos;
      exports.b2Asin = b2Asin;
      exports.b2Atan2 = b2Atan2;
      exports.b2NextPowerOfTwo = b2NextPowerOfTwo;
      exports.b2IsPowerOfTwo = b2IsPowerOfTwo;
      exports.b2Random = b2Random;
      exports.b2RandomRange = b2RandomRange;
      exports.b2Vec2 = b2Vec2;
      exports.b2Vec2_zero = b2Vec2_zero;
      exports.b2Vec3 = b2Vec3;
      exports.b2Mat22 = b2Mat22;
      exports.b2Mat33 = b2Mat33;
      exports.b2Rot = b2Rot;
      exports.b2Transform = b2Transform;
      exports.b2Sweep = b2Sweep;
      exports.b2Color = b2Color;
      exports.b2Draw = b2Draw;
      exports.b2Timer = b2Timer;
      exports.b2Counter = b2Counter;
      exports.b2GrowableStack = b2GrowableStack;
      exports.b2BlockAllocator = b2BlockAllocator;
      exports.b2StackAllocator = b2StackAllocator;
      exports.b2ContactFeature = b2ContactFeature;
      exports.b2ContactID = b2ContactID;
      exports.b2ManifoldPoint = b2ManifoldPoint;
      exports.b2Manifold = b2Manifold;
      exports.b2WorldManifold = b2WorldManifold;
      exports.b2GetPointStates = b2GetPointStates;
      exports.b2ClipVertex = b2ClipVertex;
      exports.b2RayCastInput = b2RayCastInput;
      exports.b2RayCastOutput = b2RayCastOutput;
      exports.b2AABB = b2AABB;
      exports.b2TestOverlapAABB = b2TestOverlapAABB;
      exports.b2ClipSegmentToLine = b2ClipSegmentToLine;
      exports.b2TestOverlapShape = b2TestOverlapShape;
      exports.b2DistanceProxy = b2DistanceProxy;
      exports.b2SimplexCache = b2SimplexCache;
      exports.b2DistanceInput = b2DistanceInput;
      exports.b2DistanceOutput = b2DistanceOutput;
      exports.b2ShapeCastInput = b2ShapeCastInput;
      exports.b2ShapeCastOutput = b2ShapeCastOutput;
      exports.b2_gjk_reset = b2_gjk_reset;
      exports.b2SimplexVertex = b2SimplexVertex;
      exports.b2Simplex = b2Simplex;
      exports.b2Distance = b2Distance;
      exports.b2ShapeCast = b2ShapeCast;
      exports.b2Pair = b2Pair;
      exports.b2BroadPhase = b2BroadPhase;
      exports.b2PairLessThan = b2PairLessThan;
      exports.b2TreeNode = b2TreeNode;
      exports.b2DynamicTree = b2DynamicTree;
      exports.b2_toi_reset = b2_toi_reset;
      exports.b2TOIInput = b2TOIInput;
      exports.b2TOIOutput = b2TOIOutput;
      exports.b2SeparationFunction = b2SeparationFunction;
      exports.b2TimeOfImpact = b2TimeOfImpact;
      exports.b2CollideCircles = b2CollideCircles;
      exports.b2CollidePolygonAndCircle = b2CollidePolygonAndCircle;
      exports.b2CollidePolygons = b2CollidePolygons;
      exports.b2CollideEdgeAndCircle = b2CollideEdgeAndCircle;
      exports.b2CollideEdgeAndPolygon = b2CollideEdgeAndPolygon;
      exports.b2MassData = b2MassData;
      exports.b2Shape = b2Shape;
      exports.b2CircleShape = b2CircleShape;
      exports.b2PolygonShape = b2PolygonShape;
      exports.b2EdgeShape = b2EdgeShape;
      exports.b2ChainShape = b2ChainShape;
      exports.b2Filter = b2Filter;
      exports.b2FixtureDef = b2FixtureDef;
      exports.b2FixtureProxy = b2FixtureProxy;
      exports.b2Fixture = b2Fixture;
      exports.b2BodyDef = b2BodyDef;
      exports.b2Body = b2Body;
      exports.b2World = b2World;
      exports.b2DestructionListener = b2DestructionListener;
      exports.b2ContactFilter = b2ContactFilter;
      exports.b2ContactImpulse = b2ContactImpulse;
      exports.b2ContactListener = b2ContactListener;
      exports.b2QueryCallback = b2QueryCallback;
      exports.b2RayCastCallback = b2RayCastCallback;
      exports.b2Island = b2Island;
      exports.b2Profile = b2Profile;
      exports.b2TimeStep = b2TimeStep;
      exports.b2Position = b2Position;
      exports.b2Velocity = b2Velocity;
      exports.b2SolverData = b2SolverData;
      exports.b2ContactManager = b2ContactManager;
      exports.b2MixFriction = b2MixFriction;
      exports.b2MixRestitution = b2MixRestitution;
      exports.b2ContactEdge = b2ContactEdge;
      exports.b2Contact = b2Contact;
      exports.b2ContactRegister = b2ContactRegister;
      exports.b2ContactFactory = b2ContactFactory;
      exports.g_blockSolve = g_blockSolve;
      exports.b2VelocityConstraintPoint = b2VelocityConstraintPoint;
      exports.b2ContactVelocityConstraint = b2ContactVelocityConstraint;
      exports.b2ContactPositionConstraint = b2ContactPositionConstraint;
      exports.b2ContactSolverDef = b2ContactSolverDef;
      exports.b2PositionSolverManifold = b2PositionSolverManifold;
      exports.b2ContactSolver = b2ContactSolver;
      exports.b2CircleContact = b2CircleContact;
      exports.b2PolygonContact = b2PolygonContact;
      exports.b2PolygonAndCircleContact = b2PolygonAndCircleContact;
      exports.b2EdgeAndCircleContact = b2EdgeAndCircleContact;
      exports.b2EdgeAndPolygonContact = b2EdgeAndPolygonContact;
      exports.b2ChainAndCircleContact = b2ChainAndCircleContact;
      exports.b2ChainAndPolygonContact = b2ChainAndPolygonContact;
      exports.b2Jacobian = b2Jacobian;
      exports.b2JointEdge = b2JointEdge;
      exports.b2JointDef = b2JointDef;
      exports.b2Joint = b2Joint;
      exports.b2AreaJointDef = b2AreaJointDef;
      exports.b2AreaJoint = b2AreaJoint;
      exports.b2DistanceJointDef = b2DistanceJointDef;
      exports.b2DistanceJoint = b2DistanceJoint;
      exports.b2FrictionJointDef = b2FrictionJointDef;
      exports.b2FrictionJoint = b2FrictionJoint;
      exports.b2GearJointDef = b2GearJointDef;
      exports.b2GearJoint = b2GearJoint;
      exports.b2MotorJointDef = b2MotorJointDef;
      exports.b2MotorJoint = b2MotorJoint;
      exports.b2MouseJointDef = b2MouseJointDef;
      exports.b2MouseJoint = b2MouseJoint;
      exports.b2PrismaticJointDef = b2PrismaticJointDef;
      exports.b2PrismaticJoint = b2PrismaticJoint;
      exports.b2_minPulleyLength = b2_minPulleyLength;
      exports.b2PulleyJointDef = b2PulleyJointDef;
      exports.b2PulleyJoint = b2PulleyJoint;
      exports.b2RevoluteJointDef = b2RevoluteJointDef;
      exports.b2RevoluteJoint = b2RevoluteJoint;
      exports.b2RopeJointDef = b2RopeJointDef;
      exports.b2RopeJoint = b2RopeJoint;
      exports.b2WeldJointDef = b2WeldJointDef;
      exports.b2WeldJoint = b2WeldJoint;
      exports.b2WheelJointDef = b2WheelJointDef;
      exports.b2WheelJoint = b2WheelJoint;
      exports.b2ControllerEdge = b2ControllerEdge;
      exports.b2Controller = b2Controller;
      exports.b2BuoyancyController = b2BuoyancyController;
      exports.b2ConstantAccelController = b2ConstantAccelController;
      exports.b2ConstantForceController = b2ConstantForceController;
      exports.b2GravityController = b2GravityController;
      exports.b2TensorDampingController = b2TensorDampingController;
      exports.b2ParticleDef = b2ParticleDef;
      exports.b2CalculateParticleIterations = b2CalculateParticleIterations;
      exports.b2ParticleHandle = b2ParticleHandle;
      exports.b2ParticleGroupDef = b2ParticleGroupDef;
      exports.b2ParticleGroup = b2ParticleGroup;
      exports.b2GrowableBuffer = b2GrowableBuffer;
      exports.b2FixtureParticleQueryCallback = b2FixtureParticleQueryCallback;
      exports.b2ParticleContact = b2ParticleContact;
      exports.b2ParticleBodyContact = b2ParticleBodyContact;
      exports.b2ParticlePair = b2ParticlePair;
      exports.b2ParticleTriad = b2ParticleTriad;
      exports.b2ParticleSystemDef = b2ParticleSystemDef;
      exports.b2RopeDef = b2RopeDef;
      exports.b2Rope = b2Rope;
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
    }));
  }), {} ],
  279: [ (function(require, module, exports) {
    "use strict";
    var _global = "undefined" === typeof window ? global : window;
    _global.cc = _global.cc || {};
    cc.internal = cc.internal || {};
    require("./predefine");
    require("./polyfill/string");
    require("./polyfill/misc");
    require("./polyfill/array");
    require("./polyfill/object");
    require("./polyfill/array-buffer");
    require("./polyfill/number");
    true;
    require("./polyfill/typescript");
    require("./cocos2d/core/predefine");
    true;
    require("./cocos2d");
    require("./extends");
    false;
    module.exports = _global.cc;
  }), {
    "./cocos2d": 238,
    "./cocos2d/core/predefine": 165,
    "./extends": 277,
    "./package": void 0,
    "./polyfill/array": 281,
    "./polyfill/array-buffer": 280,
    "./polyfill/misc": 282,
    "./polyfill/number": 283,
    "./polyfill/object": 284,
    "./polyfill/string": 285,
    "./polyfill/typescript": 286,
    "./predefine": 287
  } ],
  280: [ (function(require, module, exports) {
    "use strict";
    if (!ArrayBuffer.isView) {
      var TypedArray = Object.getPrototypeOf(Int8Array);
      ArrayBuffer.isView = "function" === typeof TypedArray ? function(obj) {
        return obj instanceof TypedArray;
      } : function(obj) {
        if ("object" !== typeof obj) return false;
        var ctor = obj.constructor;
        return ctor === Float64Array || ctor === Float32Array || ctor === Uint8Array || ctor === Uint32Array || ctor === Int8Array;
      };
    }
  }), {} ],
  281: [ (function(require, module, exports) {
    "use strict";
    Array.isArray || (Array.isArray = function(arg) {
      return "[object Array]" === Object.prototype.toString.call(arg);
    });
    Array.prototype.find || (Array.prototype.find = function(callback) {
      var length = this.length;
      for (var i = 0; i < length; i++) {
        var element = this[i];
        if (callback.call(this, element, i, this)) return element;
      }
      return;
    });
    Array.prototype.includes || (Array.prototype.includes = function(value) {
      return -1 !== this.indexOf(value);
    });
  }), {} ],
  282: [ (function(require, module, exports) {
    "use strict";
    Math.sign || (Math.sign = function(x) {
      x = +x;
      if (0 === x || isNaN(x)) return x;
      return x > 0 ? 1 : -1;
    });
    Math.log2 || (Math.log2 = function(x) {
      return Math.log(x) * Math.LOG2E;
    });
    Number.isInteger || (Number.isInteger = function(value) {
      return "number" === typeof value && isFinite(value) && Math.floor(value) === value;
    });
    if ((false, false) || !console.time) {
      var Timer = window.performance || Date;
      var _timerTable = Object.create(null);
      console.time = function(label) {
        _timerTable[label] = Timer.now();
      };
      console.timeEnd = function(label) {
        var startTime = _timerTable[label];
        var duration = Timer.now() - startTime;
        console.log(label + ": " + duration + "ms");
      };
    }
  }), {} ],
  283: [ (function(require, module, exports) {
    "use strict";
    Number.parseFloat = Number.parseFloat || parseFloat;
    Number.parseInt = Number.parseInt || parseInt;
  }), {} ],
  284: [ (function(require, module, exports) {
    "use strict";
    Object.assign || (Object.assign = function(target, source) {
      return cc.js.mixin(target, source);
    });
    Object.getOwnPropertyDescriptors || (Object.getOwnPropertyDescriptors = function(obj) {
      var descriptors = {};
      var ownKeys = Object.getOwnPropertyNames(obj);
      Object.getOwnPropertySymbols && (ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(obj)));
      for (var i = 0; i < ownKeys.length; ++i) {
        var key = ownKeys[i];
        descriptors[key] = Object.getOwnPropertyDescriptor(obj, key);
      }
      return descriptors;
    });
  }), {} ],
  285: [ (function(require, module, exports) {
    "use strict";
    String.prototype.startsWith || (String.prototype.startsWith = function(searchString, position) {
      position = position || 0;
      return this.lastIndexOf(searchString, position) === position;
    });
    String.prototype.endsWith || (String.prototype.endsWith = function(searchString, position) {
      ("undefined" === typeof position || position > this.length) && (position = this.length);
      position -= searchString.length;
      var lastIndex = this.indexOf(searchString, position);
      return -1 !== lastIndex && lastIndex === position;
    });
    String.prototype.trimLeft || (String.prototype.trimLeft = function() {
      return this.replace(/^\s+/, "");
    });
  }), {} ],
  286: [ (function(require, module, exports) {
    "use strict";
    var extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d, b) {
      d.__proto__ = b;
    } || function(d, b) {
      for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
    };
    window.__extends = function(d, b) {
      extendStatics(d, b);
      function __() {
        this.constructor = d;
      }
      d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    window.__assign = Object.assign || function(t) {
      for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) Object.prototype.hasOwnProperty.call(s, p) && (t[p] = s[p]);
      }
      return t;
    };
    window.__rest = function(s, e) {
      var t = {};
      for (var p in s) Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0 && (t[p] = s[p]);
      if (null != s && "function" === typeof Object.getOwnPropertySymbols) for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]) && (t[p[i]] = s[p[i]]);
      return t;
    };
    window.__decorate = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    window.__param = function(paramIndex, decorator) {
      return function(target, key) {
        decorator(target, key, paramIndex);
      };
    };
    window.__metadata = function(metadataKey, metadataValue) {
      if ("object" === typeof Reflect && "function" === typeof Reflect.metadata) return Reflect.metadata(metadataKey, metadataValue);
    };
    window.__awaiter = function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    window.__generator = function(thisArg, body) {
      var _ = {
        label: 0,
        sent: function sent() {
          if (1 & t[0]) throw t[1];
          return t[1];
        },
        trys: [],
        ops: []
      }, f, y, t, g;
      return g = {
        next: verb(0),
        throw: verb(1),
        return: verb(2)
      }, "function" === typeof Symbol && (g[Symbol.iterator] = function() {
        return this;
      }), g;
      function verb(n) {
        return function(v) {
          return step([ n, v ]);
        };
      }
      function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
          if (f = 1, y && (t = 2 & op[0] ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 
          0) : y.next) && !(t = t.call(y, op[1])).done) return t;
          (y = 0, t) && (op = [ 2 & op[0], t.value ]);
          switch (op[0]) {
           case 0:
           case 1:
            t = op;
            break;

           case 4:
            _.label++;
            return {
              value: op[1],
              done: false
            };

           case 5:
            _.label++;
            y = op[1];
            op = [ 0 ];
            continue;

           case 7:
            op = _.ops.pop();
            _.trys.pop();
            continue;

           default:
            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (6 === op[0] || 2 === op[0])) {
              _ = 0;
              continue;
            }
            if (3 === op[0] && (!t || op[1] > t[0] && op[1] < t[3])) {
              _.label = op[1];
              break;
            }
            if (6 === op[0] && _.label < t[1]) {
              _.label = t[1];
              t = op;
              break;
            }
            if (t && _.label < t[2]) {
              _.label = t[2];
              _.ops.push(op);
              break;
            }
            t[2] && _.ops.pop();
            _.trys.pop();
            continue;
          }
          op = body.call(thisArg, _);
        } catch (e) {
          op = [ 6, e ];
          y = 0;
        } finally {
          f = t = 0;
        }
        if (5 & op[0]) throw op[1];
        return {
          value: op[0] ? op[1] : void 0,
          done: true
        };
      }
    };
    window.__exportStar = function(m, exports) {
      for (var p in m) "default" === p || exports.hasOwnProperty(p) || __createBinding(exports, m, p);
    };
    window.__createBinding = Object.create ? function(o, m, k, k2) {
      void 0 === k2 && (k2 = k);
      Object.defineProperty(o, k2, {
        enumerable: true,
        get: function get() {
          return m[k];
        }
      });
    } : function(o, m, k, k2) {
      void 0 === k2 && (k2 = k);
      o[k2] = m[k];
    };
    window.__values = function(o) {
      var s = "function" === typeof Symbol && Symbol.iterator, m = s && o[s], i = 0;
      if (m) return m.call(o);
      if (o && "number" === typeof o.length) return {
        next: function next() {
          o && i >= o.length && (o = void 0);
          return {
            value: o && o[i++],
            done: !o
          };
        }
      };
      throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    };
    window.__read = function(o, n) {
      var m = "function" === typeof Symbol && o[Symbol.iterator];
      if (!m) return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((void 0 === n || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
      } catch (error) {
        e = {
          error: error
        };
      } finally {
        try {
          r && !r.done && (m = i["return"]) && m.call(i);
        } finally {
          if (e) throw e.error;
        }
      }
      return ar;
    };
    window.__spread = function() {
      for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
      return ar;
    };
    window.__spreadArrays = function() {
      for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
      for (var r = Array(s), k = 0, i = 0; i < il; i++) for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, 
      k++) r[k] = a[j];
      return r;
    };
    window.__await = function(v) {
      return this instanceof __await ? (this.v = v, this) : new __await(v);
    };
    window.__asyncGenerator = function(thisArg, _arguments, generator) {
      if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
      var g = generator.apply(thisArg, _arguments || []), i, q = [];
      return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
      }, i;
      function verb(n) {
        g[n] && (i[n] = function(v) {
          return new Promise(function(a, b) {
            q.push([ n, v, a, b ]) > 1 || resume(n, v);
          });
        });
      }
      function resume(n, v) {
        try {
          step(g[n](v));
        } catch (e) {
          settle(q[0][3], e);
        }
      }
      function step(r) {
        r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
      }
      function fulfill(value) {
        resume("next", value);
      }
      function reject(value) {
        resume("throw", value);
      }
      function settle(f, v) {
        (f(v), q.shift(), q.length) && resume(q[0][0], q[0][1]);
      }
    };
    window.__asyncDelegator = function(o) {
      var i, p;
      return i = {}, verb("next"), verb("throw", (function(e) {
        throw e;
      })), verb("return"), i[Symbol.iterator] = function() {
        return this;
      }, i;
      function verb(n, f) {
        i[n] = o[n] ? function(v) {
          return (p = !p) ? {
            value: __await(o[n](v)),
            done: "return" === n
          } : f ? f(v) : v;
        } : f;
      }
    };
    window.__asyncValues = function(o) {
      if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
      var m = o[Symbol.asyncIterator], i;
      return m ? m.call(o) : (o = "function" === typeof __values ? __values(o) : o[Symbol.iterator](), 
      i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
      }, i);
      function verb(n) {
        i[n] = o[n] && function(v) {
          return new Promise(function(resolve, reject) {
            v = o[n](v), settle(resolve, reject, v.done, v.value);
          });
        };
      }
      function settle(resolve, reject, d, v) {
        Promise.resolve(v).then((function(v) {
          resolve({
            value: v,
            done: d
          });
        }), reject);
      }
    };
    window.__makeTemplateObject = function(cooked, raw) {
      Object.defineProperty ? Object.defineProperty(cooked, "raw", {
        value: raw
      }) : cooked.raw = raw;
      return cooked;
    };
    var __setModuleDefault = Object.create ? function(o, v) {
      Object.defineProperty(o, "default", {
        enumerable: true,
        value: v
      });
    } : function(o, v) {
      o["default"] = v;
    };
    window.__importStar = function(mod) {
      if (mod && mod.__esModule) return mod;
      var result = {};
      if (null != mod) for (var k in mod) Object.hasOwnProperty.call(mod, k) && __createBinding(result, mod, k);
      __setModuleDefault(result, mod);
      return result;
    };
    window.__importDefault = function(mod) {
      return mod && mod.__esModule ? mod : {
        default: mod
      };
    };
    window.__classPrivateFieldGet = function(receiver, privateMap) {
      if (!privateMap.has(receiver)) throw new TypeError("attempted to get private field on non-instance");
      return privateMap.get(receiver);
    };
    window.__classPrivateFieldSet = function(receiver, privateMap, value) {
      if (!privateMap.has(receiver)) throw new TypeError("attempted to set private field on non-instance");
      privateMap.set(receiver, value);
      return value;
    };
  }), {} ],
  287: [ (function(require, module, exports) {
    "use strict";
    var _global = "undefined" === typeof window ? global : window;
    function defineMacro(name, defaultValue) {
      "undefined" === typeof _global[name] && (_global[name] = defaultValue);
    }
    function defineDeprecatedMacroGetter(name, defaultValue) {
      "undefined" === typeof _global[name] && Object.defineProperty(_global, name, {
        get: function get() {
          var recommandedUsage;
          "CC_WECHATGAMESUB" === name ? recommandedUsage = "cc.sys.platform === cc.sys.WECHAT_GAME_SUB" : "CC_WECHATGAME" === name ? recommandedUsage = "cc.sys.platform === cc.sys.WECHAT_GAME" : "CC_QQPLAY" === name && (recommandedUsage = "cc.sys.platform === cc.sys.QQ_PLAY");
          cc.warnID(1400, name, recommandedUsage);
          return defaultValue;
        }
      });
    }
    function defined(name) {
      return "object" === typeof _global[name];
    }
    defineMacro("CC_BUILD", false);
    true;
    _global.CC_BUILD = true;
    _global.CC_DEV = false;
    _global.CC_DEBUG = true;
    _global.CC_JSB = false;
    _global.CC_NATIVERENDERER = false;
    _global.CC_SUPPORT_JIT = true;
    _global.CC_PHYSICS_BUILTIN = false;
    _global.CC_PHYSICS_CANNON = false;
    _global.CC_EDITOR = false;
    _global.CC_PREVIEW = false;
    _global.CC_TEST = false;
    _global.CC_RUNTIME = false;
    _global.CC_JSB = false;
    var WECHATGAMESUB = !!(defined("wx") && wx.getSharedCanvas);
    var WECHATGAME = !!(defined("wx") && (wx.getSystemInfoSync || wx.getSharedCanvas));
    var QQPLAY = defined("bk");
    defineDeprecatedMacroGetter("CC_WECHATGAMESUB", WECHATGAMESUB);
    defineDeprecatedMacroGetter("CC_WECHATGAME", WECHATGAME);
    defineDeprecatedMacroGetter("CC_QQPLAY", QQPLAY);
    false;
    var engineVersion = "2.4.2";
    _global["CocosEngine"] = cc.ENGINE_VERSION = engineVersion;
  }), {} ]
}, {}, [ 279 ]);